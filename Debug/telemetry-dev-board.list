
telemetry-dev-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08008d80  08008d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800902c  0800902c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800902c  0800902c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800902c  0800902c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800903c  0800903c  0001903c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001984  20000074  080090b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019f8  080090b4  000219f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a2c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000057ea  00000000  00000000  00041ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b40  00000000  00000000  000472b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018f8  00000000  00000000  00048df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c1e0  00000000  00000000  0004a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016bfa  00000000  00000000  000668d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000918ce  00000000  00000000  0007d4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ed98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000650c  00000000  00000000  0010ee14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008d68 	.word	0x08008d68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08008d68 	.word	0x08008d68

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_f2uiz>:
 80003f4:	219e      	movs	r1, #158	; 0x9e
 80003f6:	b510      	push	{r4, lr}
 80003f8:	05c9      	lsls	r1, r1, #23
 80003fa:	1c04      	adds	r4, r0, #0
 80003fc:	f000 fcaa 	bl	8000d54 <__aeabi_fcmpge>
 8000400:	2800      	cmp	r0, #0
 8000402:	d103      	bne.n	800040c <__aeabi_f2uiz+0x18>
 8000404:	1c20      	adds	r0, r4, #0
 8000406:	f000 fc15 	bl	8000c34 <__aeabi_f2iz>
 800040a:	bd10      	pop	{r4, pc}
 800040c:	219e      	movs	r1, #158	; 0x9e
 800040e:	1c20      	adds	r0, r4, #0
 8000410:	05c9      	lsls	r1, r1, #23
 8000412:	f000 fa4b 	bl	80008ac <__aeabi_fsub>
 8000416:	f000 fc0d 	bl	8000c34 <__aeabi_f2iz>
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	061b      	lsls	r3, r3, #24
 800041e:	469c      	mov	ip, r3
 8000420:	4460      	add	r0, ip
 8000422:	e7f2      	b.n	800040a <__aeabi_f2uiz+0x16>

08000424 <__aeabi_fdiv>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	4657      	mov	r7, sl
 8000428:	464e      	mov	r6, r9
 800042a:	4645      	mov	r5, r8
 800042c:	46de      	mov	lr, fp
 800042e:	0244      	lsls	r4, r0, #9
 8000430:	b5e0      	push	{r5, r6, r7, lr}
 8000432:	0046      	lsls	r6, r0, #1
 8000434:	4688      	mov	r8, r1
 8000436:	0a64      	lsrs	r4, r4, #9
 8000438:	0e36      	lsrs	r6, r6, #24
 800043a:	0fc7      	lsrs	r7, r0, #31
 800043c:	2e00      	cmp	r6, #0
 800043e:	d063      	beq.n	8000508 <__aeabi_fdiv+0xe4>
 8000440:	2eff      	cmp	r6, #255	; 0xff
 8000442:	d024      	beq.n	800048e <__aeabi_fdiv+0x6a>
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	00e4      	lsls	r4, r4, #3
 8000448:	04db      	lsls	r3, r3, #19
 800044a:	431c      	orrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	4699      	mov	r9, r3
 8000450:	469b      	mov	fp, r3
 8000452:	3e7f      	subs	r6, #127	; 0x7f
 8000454:	4643      	mov	r3, r8
 8000456:	4642      	mov	r2, r8
 8000458:	025d      	lsls	r5, r3, #9
 800045a:	0fd2      	lsrs	r2, r2, #31
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	0a6d      	lsrs	r5, r5, #9
 8000460:	0e1b      	lsrs	r3, r3, #24
 8000462:	4690      	mov	r8, r2
 8000464:	4692      	mov	sl, r2
 8000466:	d065      	beq.n	8000534 <__aeabi_fdiv+0x110>
 8000468:	2bff      	cmp	r3, #255	; 0xff
 800046a:	d055      	beq.n	8000518 <__aeabi_fdiv+0xf4>
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	2100      	movs	r1, #0
 8000470:	00ed      	lsls	r5, r5, #3
 8000472:	04d2      	lsls	r2, r2, #19
 8000474:	3b7f      	subs	r3, #127	; 0x7f
 8000476:	4315      	orrs	r5, r2
 8000478:	1af6      	subs	r6, r6, r3
 800047a:	4643      	mov	r3, r8
 800047c:	464a      	mov	r2, r9
 800047e:	407b      	eors	r3, r7
 8000480:	2a0f      	cmp	r2, #15
 8000482:	d900      	bls.n	8000486 <__aeabi_fdiv+0x62>
 8000484:	e08d      	b.n	80005a2 <__aeabi_fdiv+0x17e>
 8000486:	486d      	ldr	r0, [pc, #436]	; (800063c <__aeabi_fdiv+0x218>)
 8000488:	0092      	lsls	r2, r2, #2
 800048a:	5882      	ldr	r2, [r0, r2]
 800048c:	4697      	mov	pc, r2
 800048e:	2c00      	cmp	r4, #0
 8000490:	d154      	bne.n	800053c <__aeabi_fdiv+0x118>
 8000492:	2308      	movs	r3, #8
 8000494:	4699      	mov	r9, r3
 8000496:	3b06      	subs	r3, #6
 8000498:	26ff      	movs	r6, #255	; 0xff
 800049a:	469b      	mov	fp, r3
 800049c:	e7da      	b.n	8000454 <__aeabi_fdiv+0x30>
 800049e:	2500      	movs	r5, #0
 80004a0:	4653      	mov	r3, sl
 80004a2:	2902      	cmp	r1, #2
 80004a4:	d01b      	beq.n	80004de <__aeabi_fdiv+0xba>
 80004a6:	2903      	cmp	r1, #3
 80004a8:	d100      	bne.n	80004ac <__aeabi_fdiv+0x88>
 80004aa:	e0bf      	b.n	800062c <__aeabi_fdiv+0x208>
 80004ac:	2901      	cmp	r1, #1
 80004ae:	d028      	beq.n	8000502 <__aeabi_fdiv+0xde>
 80004b0:	0030      	movs	r0, r6
 80004b2:	307f      	adds	r0, #127	; 0x7f
 80004b4:	2800      	cmp	r0, #0
 80004b6:	dd20      	ble.n	80004fa <__aeabi_fdiv+0xd6>
 80004b8:	076a      	lsls	r2, r5, #29
 80004ba:	d004      	beq.n	80004c6 <__aeabi_fdiv+0xa2>
 80004bc:	220f      	movs	r2, #15
 80004be:	402a      	ands	r2, r5
 80004c0:	2a04      	cmp	r2, #4
 80004c2:	d000      	beq.n	80004c6 <__aeabi_fdiv+0xa2>
 80004c4:	3504      	adds	r5, #4
 80004c6:	012a      	lsls	r2, r5, #4
 80004c8:	d503      	bpl.n	80004d2 <__aeabi_fdiv+0xae>
 80004ca:	0030      	movs	r0, r6
 80004cc:	4a5c      	ldr	r2, [pc, #368]	; (8000640 <__aeabi_fdiv+0x21c>)
 80004ce:	3080      	adds	r0, #128	; 0x80
 80004d0:	4015      	ands	r5, r2
 80004d2:	28fe      	cmp	r0, #254	; 0xfe
 80004d4:	dc03      	bgt.n	80004de <__aeabi_fdiv+0xba>
 80004d6:	01ac      	lsls	r4, r5, #6
 80004d8:	0a64      	lsrs	r4, r4, #9
 80004da:	b2c2      	uxtb	r2, r0
 80004dc:	e001      	b.n	80004e2 <__aeabi_fdiv+0xbe>
 80004de:	22ff      	movs	r2, #255	; 0xff
 80004e0:	2400      	movs	r4, #0
 80004e2:	0264      	lsls	r4, r4, #9
 80004e4:	05d2      	lsls	r2, r2, #23
 80004e6:	0a60      	lsrs	r0, r4, #9
 80004e8:	07db      	lsls	r3, r3, #31
 80004ea:	4310      	orrs	r0, r2
 80004ec:	4318      	orrs	r0, r3
 80004ee:	bc3c      	pop	{r2, r3, r4, r5}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	46a2      	mov	sl, r4
 80004f6:	46ab      	mov	fp, r5
 80004f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004fa:	2201      	movs	r2, #1
 80004fc:	1a10      	subs	r0, r2, r0
 80004fe:	281b      	cmp	r0, #27
 8000500:	dd7c      	ble.n	80005fc <__aeabi_fdiv+0x1d8>
 8000502:	2200      	movs	r2, #0
 8000504:	2400      	movs	r4, #0
 8000506:	e7ec      	b.n	80004e2 <__aeabi_fdiv+0xbe>
 8000508:	2c00      	cmp	r4, #0
 800050a:	d11d      	bne.n	8000548 <__aeabi_fdiv+0x124>
 800050c:	2304      	movs	r3, #4
 800050e:	4699      	mov	r9, r3
 8000510:	3b03      	subs	r3, #3
 8000512:	2600      	movs	r6, #0
 8000514:	469b      	mov	fp, r3
 8000516:	e79d      	b.n	8000454 <__aeabi_fdiv+0x30>
 8000518:	3eff      	subs	r6, #255	; 0xff
 800051a:	2d00      	cmp	r5, #0
 800051c:	d120      	bne.n	8000560 <__aeabi_fdiv+0x13c>
 800051e:	2102      	movs	r1, #2
 8000520:	4643      	mov	r3, r8
 8000522:	464a      	mov	r2, r9
 8000524:	407b      	eors	r3, r7
 8000526:	430a      	orrs	r2, r1
 8000528:	2a0f      	cmp	r2, #15
 800052a:	d8d8      	bhi.n	80004de <__aeabi_fdiv+0xba>
 800052c:	4845      	ldr	r0, [pc, #276]	; (8000644 <__aeabi_fdiv+0x220>)
 800052e:	0092      	lsls	r2, r2, #2
 8000530:	5882      	ldr	r2, [r0, r2]
 8000532:	4697      	mov	pc, r2
 8000534:	2d00      	cmp	r5, #0
 8000536:	d119      	bne.n	800056c <__aeabi_fdiv+0x148>
 8000538:	2101      	movs	r1, #1
 800053a:	e7f1      	b.n	8000520 <__aeabi_fdiv+0xfc>
 800053c:	230c      	movs	r3, #12
 800053e:	4699      	mov	r9, r3
 8000540:	3b09      	subs	r3, #9
 8000542:	26ff      	movs	r6, #255	; 0xff
 8000544:	469b      	mov	fp, r3
 8000546:	e785      	b.n	8000454 <__aeabi_fdiv+0x30>
 8000548:	0020      	movs	r0, r4
 800054a:	f000 fc0d 	bl	8000d68 <__clzsi2>
 800054e:	2676      	movs	r6, #118	; 0x76
 8000550:	1f43      	subs	r3, r0, #5
 8000552:	409c      	lsls	r4, r3
 8000554:	2300      	movs	r3, #0
 8000556:	4276      	negs	r6, r6
 8000558:	1a36      	subs	r6, r6, r0
 800055a:	4699      	mov	r9, r3
 800055c:	469b      	mov	fp, r3
 800055e:	e779      	b.n	8000454 <__aeabi_fdiv+0x30>
 8000560:	464a      	mov	r2, r9
 8000562:	2303      	movs	r3, #3
 8000564:	431a      	orrs	r2, r3
 8000566:	4691      	mov	r9, r2
 8000568:	2103      	movs	r1, #3
 800056a:	e786      	b.n	800047a <__aeabi_fdiv+0x56>
 800056c:	0028      	movs	r0, r5
 800056e:	f000 fbfb 	bl	8000d68 <__clzsi2>
 8000572:	1f43      	subs	r3, r0, #5
 8000574:	1836      	adds	r6, r6, r0
 8000576:	409d      	lsls	r5, r3
 8000578:	3676      	adds	r6, #118	; 0x76
 800057a:	2100      	movs	r1, #0
 800057c:	e77d      	b.n	800047a <__aeabi_fdiv+0x56>
 800057e:	2480      	movs	r4, #128	; 0x80
 8000580:	2300      	movs	r3, #0
 8000582:	03e4      	lsls	r4, r4, #15
 8000584:	22ff      	movs	r2, #255	; 0xff
 8000586:	e7ac      	b.n	80004e2 <__aeabi_fdiv+0xbe>
 8000588:	2500      	movs	r5, #0
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	03db      	lsls	r3, r3, #15
 800058e:	421c      	tst	r4, r3
 8000590:	d028      	beq.n	80005e4 <__aeabi_fdiv+0x1c0>
 8000592:	421d      	tst	r5, r3
 8000594:	d126      	bne.n	80005e4 <__aeabi_fdiv+0x1c0>
 8000596:	432b      	orrs	r3, r5
 8000598:	025c      	lsls	r4, r3, #9
 800059a:	0a64      	lsrs	r4, r4, #9
 800059c:	4643      	mov	r3, r8
 800059e:	22ff      	movs	r2, #255	; 0xff
 80005a0:	e79f      	b.n	80004e2 <__aeabi_fdiv+0xbe>
 80005a2:	0162      	lsls	r2, r4, #5
 80005a4:	016c      	lsls	r4, r5, #5
 80005a6:	42a2      	cmp	r2, r4
 80005a8:	d224      	bcs.n	80005f4 <__aeabi_fdiv+0x1d0>
 80005aa:	211b      	movs	r1, #27
 80005ac:	2500      	movs	r5, #0
 80005ae:	3e01      	subs	r6, #1
 80005b0:	2701      	movs	r7, #1
 80005b2:	0010      	movs	r0, r2
 80005b4:	006d      	lsls	r5, r5, #1
 80005b6:	0052      	lsls	r2, r2, #1
 80005b8:	2800      	cmp	r0, #0
 80005ba:	db01      	blt.n	80005c0 <__aeabi_fdiv+0x19c>
 80005bc:	4294      	cmp	r4, r2
 80005be:	d801      	bhi.n	80005c4 <__aeabi_fdiv+0x1a0>
 80005c0:	1b12      	subs	r2, r2, r4
 80005c2:	433d      	orrs	r5, r7
 80005c4:	3901      	subs	r1, #1
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d1f3      	bne.n	80005b2 <__aeabi_fdiv+0x18e>
 80005ca:	0014      	movs	r4, r2
 80005cc:	1e62      	subs	r2, r4, #1
 80005ce:	4194      	sbcs	r4, r2
 80005d0:	4325      	orrs	r5, r4
 80005d2:	e76d      	b.n	80004b0 <__aeabi_fdiv+0x8c>
 80005d4:	46ba      	mov	sl, r7
 80005d6:	4659      	mov	r1, fp
 80005d8:	0025      	movs	r5, r4
 80005da:	4653      	mov	r3, sl
 80005dc:	2902      	cmp	r1, #2
 80005de:	d000      	beq.n	80005e2 <__aeabi_fdiv+0x1be>
 80005e0:	e761      	b.n	80004a6 <__aeabi_fdiv+0x82>
 80005e2:	e77c      	b.n	80004de <__aeabi_fdiv+0xba>
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	03db      	lsls	r3, r3, #15
 80005e8:	431c      	orrs	r4, r3
 80005ea:	0264      	lsls	r4, r4, #9
 80005ec:	0a64      	lsrs	r4, r4, #9
 80005ee:	003b      	movs	r3, r7
 80005f0:	22ff      	movs	r2, #255	; 0xff
 80005f2:	e776      	b.n	80004e2 <__aeabi_fdiv+0xbe>
 80005f4:	1b12      	subs	r2, r2, r4
 80005f6:	211a      	movs	r1, #26
 80005f8:	2501      	movs	r5, #1
 80005fa:	e7d9      	b.n	80005b0 <__aeabi_fdiv+0x18c>
 80005fc:	369e      	adds	r6, #158	; 0x9e
 80005fe:	002a      	movs	r2, r5
 8000600:	40b5      	lsls	r5, r6
 8000602:	002c      	movs	r4, r5
 8000604:	40c2      	lsrs	r2, r0
 8000606:	1e65      	subs	r5, r4, #1
 8000608:	41ac      	sbcs	r4, r5
 800060a:	4314      	orrs	r4, r2
 800060c:	0762      	lsls	r2, r4, #29
 800060e:	d004      	beq.n	800061a <__aeabi_fdiv+0x1f6>
 8000610:	220f      	movs	r2, #15
 8000612:	4022      	ands	r2, r4
 8000614:	2a04      	cmp	r2, #4
 8000616:	d000      	beq.n	800061a <__aeabi_fdiv+0x1f6>
 8000618:	3404      	adds	r4, #4
 800061a:	0162      	lsls	r2, r4, #5
 800061c:	d403      	bmi.n	8000626 <__aeabi_fdiv+0x202>
 800061e:	01a4      	lsls	r4, r4, #6
 8000620:	0a64      	lsrs	r4, r4, #9
 8000622:	2200      	movs	r2, #0
 8000624:	e75d      	b.n	80004e2 <__aeabi_fdiv+0xbe>
 8000626:	2201      	movs	r2, #1
 8000628:	2400      	movs	r4, #0
 800062a:	e75a      	b.n	80004e2 <__aeabi_fdiv+0xbe>
 800062c:	2480      	movs	r4, #128	; 0x80
 800062e:	03e4      	lsls	r4, r4, #15
 8000630:	432c      	orrs	r4, r5
 8000632:	0264      	lsls	r4, r4, #9
 8000634:	0a64      	lsrs	r4, r4, #9
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	e753      	b.n	80004e2 <__aeabi_fdiv+0xbe>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	08008eb4 	.word	0x08008eb4
 8000640:	f7ffffff 	.word	0xf7ffffff
 8000644:	08008ef4 	.word	0x08008ef4

08000648 <__aeabi_fmul>:
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	464e      	mov	r6, r9
 800064c:	4657      	mov	r7, sl
 800064e:	4645      	mov	r5, r8
 8000650:	46de      	mov	lr, fp
 8000652:	b5e0      	push	{r5, r6, r7, lr}
 8000654:	0243      	lsls	r3, r0, #9
 8000656:	0a5b      	lsrs	r3, r3, #9
 8000658:	0045      	lsls	r5, r0, #1
 800065a:	b083      	sub	sp, #12
 800065c:	1c0f      	adds	r7, r1, #0
 800065e:	4699      	mov	r9, r3
 8000660:	0e2d      	lsrs	r5, r5, #24
 8000662:	0fc6      	lsrs	r6, r0, #31
 8000664:	2d00      	cmp	r5, #0
 8000666:	d057      	beq.n	8000718 <__aeabi_fmul+0xd0>
 8000668:	2dff      	cmp	r5, #255	; 0xff
 800066a:	d024      	beq.n	80006b6 <__aeabi_fmul+0x6e>
 800066c:	2080      	movs	r0, #128	; 0x80
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	04c0      	lsls	r0, r0, #19
 8000672:	4318      	orrs	r0, r3
 8000674:	2300      	movs	r3, #0
 8000676:	4681      	mov	r9, r0
 8000678:	469a      	mov	sl, r3
 800067a:	469b      	mov	fp, r3
 800067c:	3d7f      	subs	r5, #127	; 0x7f
 800067e:	027c      	lsls	r4, r7, #9
 8000680:	007a      	lsls	r2, r7, #1
 8000682:	0ffb      	lsrs	r3, r7, #31
 8000684:	0a64      	lsrs	r4, r4, #9
 8000686:	0e12      	lsrs	r2, r2, #24
 8000688:	4698      	mov	r8, r3
 800068a:	d023      	beq.n	80006d4 <__aeabi_fmul+0x8c>
 800068c:	2aff      	cmp	r2, #255	; 0xff
 800068e:	d04b      	beq.n	8000728 <__aeabi_fmul+0xe0>
 8000690:	00e3      	lsls	r3, r4, #3
 8000692:	2480      	movs	r4, #128	; 0x80
 8000694:	2000      	movs	r0, #0
 8000696:	04e4      	lsls	r4, r4, #19
 8000698:	3a7f      	subs	r2, #127	; 0x7f
 800069a:	431c      	orrs	r4, r3
 800069c:	18ad      	adds	r5, r5, r2
 800069e:	1c6b      	adds	r3, r5, #1
 80006a0:	4647      	mov	r7, r8
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	4653      	mov	r3, sl
 80006a6:	4077      	eors	r7, r6
 80006a8:	003a      	movs	r2, r7
 80006aa:	2b0f      	cmp	r3, #15
 80006ac:	d848      	bhi.n	8000740 <__aeabi_fmul+0xf8>
 80006ae:	497d      	ldr	r1, [pc, #500]	; (80008a4 <__aeabi_fmul+0x25c>)
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	58cb      	ldr	r3, [r1, r3]
 80006b4:	469f      	mov	pc, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_fmul+0x74>
 80006ba:	e085      	b.n	80007c8 <__aeabi_fmul+0x180>
 80006bc:	3308      	adds	r3, #8
 80006be:	469a      	mov	sl, r3
 80006c0:	3b06      	subs	r3, #6
 80006c2:	469b      	mov	fp, r3
 80006c4:	027c      	lsls	r4, r7, #9
 80006c6:	007a      	lsls	r2, r7, #1
 80006c8:	0ffb      	lsrs	r3, r7, #31
 80006ca:	25ff      	movs	r5, #255	; 0xff
 80006cc:	0a64      	lsrs	r4, r4, #9
 80006ce:	0e12      	lsrs	r2, r2, #24
 80006d0:	4698      	mov	r8, r3
 80006d2:	d1db      	bne.n	800068c <__aeabi_fmul+0x44>
 80006d4:	2c00      	cmp	r4, #0
 80006d6:	d000      	beq.n	80006da <__aeabi_fmul+0x92>
 80006d8:	e090      	b.n	80007fc <__aeabi_fmul+0x1b4>
 80006da:	4652      	mov	r2, sl
 80006dc:	2301      	movs	r3, #1
 80006de:	431a      	orrs	r2, r3
 80006e0:	4692      	mov	sl, r2
 80006e2:	2001      	movs	r0, #1
 80006e4:	e7db      	b.n	800069e <__aeabi_fmul+0x56>
 80006e6:	464c      	mov	r4, r9
 80006e8:	4658      	mov	r0, fp
 80006ea:	0017      	movs	r7, r2
 80006ec:	2802      	cmp	r0, #2
 80006ee:	d024      	beq.n	800073a <__aeabi_fmul+0xf2>
 80006f0:	2803      	cmp	r0, #3
 80006f2:	d100      	bne.n	80006f6 <__aeabi_fmul+0xae>
 80006f4:	e0cf      	b.n	8000896 <__aeabi_fmul+0x24e>
 80006f6:	2200      	movs	r2, #0
 80006f8:	2300      	movs	r3, #0
 80006fa:	2801      	cmp	r0, #1
 80006fc:	d14d      	bne.n	800079a <__aeabi_fmul+0x152>
 80006fe:	0258      	lsls	r0, r3, #9
 8000700:	05d2      	lsls	r2, r2, #23
 8000702:	0a40      	lsrs	r0, r0, #9
 8000704:	07ff      	lsls	r7, r7, #31
 8000706:	4310      	orrs	r0, r2
 8000708:	4338      	orrs	r0, r7
 800070a:	b003      	add	sp, #12
 800070c:	bc3c      	pop	{r2, r3, r4, r5}
 800070e:	4690      	mov	r8, r2
 8000710:	4699      	mov	r9, r3
 8000712:	46a2      	mov	sl, r4
 8000714:	46ab      	mov	fp, r5
 8000716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000718:	2b00      	cmp	r3, #0
 800071a:	d15b      	bne.n	80007d4 <__aeabi_fmul+0x18c>
 800071c:	2304      	movs	r3, #4
 800071e:	469a      	mov	sl, r3
 8000720:	3b03      	subs	r3, #3
 8000722:	2500      	movs	r5, #0
 8000724:	469b      	mov	fp, r3
 8000726:	e7aa      	b.n	800067e <__aeabi_fmul+0x36>
 8000728:	35ff      	adds	r5, #255	; 0xff
 800072a:	2c00      	cmp	r4, #0
 800072c:	d160      	bne.n	80007f0 <__aeabi_fmul+0x1a8>
 800072e:	4652      	mov	r2, sl
 8000730:	2302      	movs	r3, #2
 8000732:	431a      	orrs	r2, r3
 8000734:	4692      	mov	sl, r2
 8000736:	2002      	movs	r0, #2
 8000738:	e7b1      	b.n	800069e <__aeabi_fmul+0x56>
 800073a:	22ff      	movs	r2, #255	; 0xff
 800073c:	2300      	movs	r3, #0
 800073e:	e7de      	b.n	80006fe <__aeabi_fmul+0xb6>
 8000740:	464b      	mov	r3, r9
 8000742:	0c1b      	lsrs	r3, r3, #16
 8000744:	469c      	mov	ip, r3
 8000746:	464b      	mov	r3, r9
 8000748:	0426      	lsls	r6, r4, #16
 800074a:	0c36      	lsrs	r6, r6, #16
 800074c:	0418      	lsls	r0, r3, #16
 800074e:	4661      	mov	r1, ip
 8000750:	0033      	movs	r3, r6
 8000752:	0c22      	lsrs	r2, r4, #16
 8000754:	4664      	mov	r4, ip
 8000756:	0c00      	lsrs	r0, r0, #16
 8000758:	4343      	muls	r3, r0
 800075a:	434e      	muls	r6, r1
 800075c:	4350      	muls	r0, r2
 800075e:	4354      	muls	r4, r2
 8000760:	1980      	adds	r0, r0, r6
 8000762:	0c1a      	lsrs	r2, r3, #16
 8000764:	1812      	adds	r2, r2, r0
 8000766:	4296      	cmp	r6, r2
 8000768:	d903      	bls.n	8000772 <__aeabi_fmul+0x12a>
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	0249      	lsls	r1, r1, #9
 800076e:	468c      	mov	ip, r1
 8000770:	4464      	add	r4, ip
 8000772:	041b      	lsls	r3, r3, #16
 8000774:	0c1b      	lsrs	r3, r3, #16
 8000776:	0410      	lsls	r0, r2, #16
 8000778:	18c0      	adds	r0, r0, r3
 800077a:	0183      	lsls	r3, r0, #6
 800077c:	1e5e      	subs	r6, r3, #1
 800077e:	41b3      	sbcs	r3, r6
 8000780:	0e80      	lsrs	r0, r0, #26
 8000782:	4318      	orrs	r0, r3
 8000784:	0c13      	lsrs	r3, r2, #16
 8000786:	191b      	adds	r3, r3, r4
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	4303      	orrs	r3, r0
 800078c:	001c      	movs	r4, r3
 800078e:	0123      	lsls	r3, r4, #4
 8000790:	d579      	bpl.n	8000886 <__aeabi_fmul+0x23e>
 8000792:	2301      	movs	r3, #1
 8000794:	0862      	lsrs	r2, r4, #1
 8000796:	401c      	ands	r4, r3
 8000798:	4314      	orrs	r4, r2
 800079a:	9a01      	ldr	r2, [sp, #4]
 800079c:	327f      	adds	r2, #127	; 0x7f
 800079e:	2a00      	cmp	r2, #0
 80007a0:	dd4d      	ble.n	800083e <__aeabi_fmul+0x1f6>
 80007a2:	0763      	lsls	r3, r4, #29
 80007a4:	d004      	beq.n	80007b0 <__aeabi_fmul+0x168>
 80007a6:	230f      	movs	r3, #15
 80007a8:	4023      	ands	r3, r4
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fmul+0x168>
 80007ae:	3404      	adds	r4, #4
 80007b0:	0123      	lsls	r3, r4, #4
 80007b2:	d503      	bpl.n	80007bc <__aeabi_fmul+0x174>
 80007b4:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <__aeabi_fmul+0x260>)
 80007b6:	9a01      	ldr	r2, [sp, #4]
 80007b8:	401c      	ands	r4, r3
 80007ba:	3280      	adds	r2, #128	; 0x80
 80007bc:	2afe      	cmp	r2, #254	; 0xfe
 80007be:	dcbc      	bgt.n	800073a <__aeabi_fmul+0xf2>
 80007c0:	01a3      	lsls	r3, r4, #6
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	e79a      	b.n	80006fe <__aeabi_fmul+0xb6>
 80007c8:	230c      	movs	r3, #12
 80007ca:	469a      	mov	sl, r3
 80007cc:	3b09      	subs	r3, #9
 80007ce:	25ff      	movs	r5, #255	; 0xff
 80007d0:	469b      	mov	fp, r3
 80007d2:	e754      	b.n	800067e <__aeabi_fmul+0x36>
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fac7 	bl	8000d68 <__clzsi2>
 80007da:	464a      	mov	r2, r9
 80007dc:	1f43      	subs	r3, r0, #5
 80007de:	2576      	movs	r5, #118	; 0x76
 80007e0:	409a      	lsls	r2, r3
 80007e2:	2300      	movs	r3, #0
 80007e4:	426d      	negs	r5, r5
 80007e6:	4691      	mov	r9, r2
 80007e8:	1a2d      	subs	r5, r5, r0
 80007ea:	469a      	mov	sl, r3
 80007ec:	469b      	mov	fp, r3
 80007ee:	e746      	b.n	800067e <__aeabi_fmul+0x36>
 80007f0:	4652      	mov	r2, sl
 80007f2:	2303      	movs	r3, #3
 80007f4:	431a      	orrs	r2, r3
 80007f6:	4692      	mov	sl, r2
 80007f8:	2003      	movs	r0, #3
 80007fa:	e750      	b.n	800069e <__aeabi_fmul+0x56>
 80007fc:	0020      	movs	r0, r4
 80007fe:	f000 fab3 	bl	8000d68 <__clzsi2>
 8000802:	1f43      	subs	r3, r0, #5
 8000804:	1a2d      	subs	r5, r5, r0
 8000806:	409c      	lsls	r4, r3
 8000808:	3d76      	subs	r5, #118	; 0x76
 800080a:	2000      	movs	r0, #0
 800080c:	e747      	b.n	800069e <__aeabi_fmul+0x56>
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	2700      	movs	r7, #0
 8000812:	03db      	lsls	r3, r3, #15
 8000814:	22ff      	movs	r2, #255	; 0xff
 8000816:	e772      	b.n	80006fe <__aeabi_fmul+0xb6>
 8000818:	4642      	mov	r2, r8
 800081a:	e766      	b.n	80006ea <__aeabi_fmul+0xa2>
 800081c:	464c      	mov	r4, r9
 800081e:	0032      	movs	r2, r6
 8000820:	4658      	mov	r0, fp
 8000822:	e762      	b.n	80006ea <__aeabi_fmul+0xa2>
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	464a      	mov	r2, r9
 8000828:	03db      	lsls	r3, r3, #15
 800082a:	421a      	tst	r2, r3
 800082c:	d022      	beq.n	8000874 <__aeabi_fmul+0x22c>
 800082e:	421c      	tst	r4, r3
 8000830:	d120      	bne.n	8000874 <__aeabi_fmul+0x22c>
 8000832:	4323      	orrs	r3, r4
 8000834:	025b      	lsls	r3, r3, #9
 8000836:	0a5b      	lsrs	r3, r3, #9
 8000838:	4647      	mov	r7, r8
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	e75f      	b.n	80006fe <__aeabi_fmul+0xb6>
 800083e:	2301      	movs	r3, #1
 8000840:	1a9a      	subs	r2, r3, r2
 8000842:	2a1b      	cmp	r2, #27
 8000844:	dc21      	bgt.n	800088a <__aeabi_fmul+0x242>
 8000846:	0023      	movs	r3, r4
 8000848:	9901      	ldr	r1, [sp, #4]
 800084a:	40d3      	lsrs	r3, r2
 800084c:	319e      	adds	r1, #158	; 0x9e
 800084e:	408c      	lsls	r4, r1
 8000850:	001a      	movs	r2, r3
 8000852:	0023      	movs	r3, r4
 8000854:	1e5c      	subs	r4, r3, #1
 8000856:	41a3      	sbcs	r3, r4
 8000858:	4313      	orrs	r3, r2
 800085a:	075a      	lsls	r2, r3, #29
 800085c:	d004      	beq.n	8000868 <__aeabi_fmul+0x220>
 800085e:	220f      	movs	r2, #15
 8000860:	401a      	ands	r2, r3
 8000862:	2a04      	cmp	r2, #4
 8000864:	d000      	beq.n	8000868 <__aeabi_fmul+0x220>
 8000866:	3304      	adds	r3, #4
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d411      	bmi.n	8000890 <__aeabi_fmul+0x248>
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	0a5b      	lsrs	r3, r3, #9
 8000870:	2200      	movs	r2, #0
 8000872:	e744      	b.n	80006fe <__aeabi_fmul+0xb6>
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	464a      	mov	r2, r9
 8000878:	03db      	lsls	r3, r3, #15
 800087a:	4313      	orrs	r3, r2
 800087c:	025b      	lsls	r3, r3, #9
 800087e:	0a5b      	lsrs	r3, r3, #9
 8000880:	0037      	movs	r7, r6
 8000882:	22ff      	movs	r2, #255	; 0xff
 8000884:	e73b      	b.n	80006fe <__aeabi_fmul+0xb6>
 8000886:	9501      	str	r5, [sp, #4]
 8000888:	e787      	b.n	800079a <__aeabi_fmul+0x152>
 800088a:	2200      	movs	r2, #0
 800088c:	2300      	movs	r3, #0
 800088e:	e736      	b.n	80006fe <__aeabi_fmul+0xb6>
 8000890:	2201      	movs	r2, #1
 8000892:	2300      	movs	r3, #0
 8000894:	e733      	b.n	80006fe <__aeabi_fmul+0xb6>
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	03db      	lsls	r3, r3, #15
 800089a:	4323      	orrs	r3, r4
 800089c:	025b      	lsls	r3, r3, #9
 800089e:	0a5b      	lsrs	r3, r3, #9
 80008a0:	22ff      	movs	r2, #255	; 0xff
 80008a2:	e72c      	b.n	80006fe <__aeabi_fmul+0xb6>
 80008a4:	08008f34 	.word	0x08008f34
 80008a8:	f7ffffff 	.word	0xf7ffffff

080008ac <__aeabi_fsub>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	4647      	mov	r7, r8
 80008b0:	46ce      	mov	lr, r9
 80008b2:	0044      	lsls	r4, r0, #1
 80008b4:	0fc2      	lsrs	r2, r0, #31
 80008b6:	b580      	push	{r7, lr}
 80008b8:	0247      	lsls	r7, r0, #9
 80008ba:	0248      	lsls	r0, r1, #9
 80008bc:	0a40      	lsrs	r0, r0, #9
 80008be:	4684      	mov	ip, r0
 80008c0:	4666      	mov	r6, ip
 80008c2:	0048      	lsls	r0, r1, #1
 80008c4:	0a7f      	lsrs	r7, r7, #9
 80008c6:	0e24      	lsrs	r4, r4, #24
 80008c8:	00f6      	lsls	r6, r6, #3
 80008ca:	0025      	movs	r5, r4
 80008cc:	4690      	mov	r8, r2
 80008ce:	00fb      	lsls	r3, r7, #3
 80008d0:	0e00      	lsrs	r0, r0, #24
 80008d2:	0fc9      	lsrs	r1, r1, #31
 80008d4:	46b1      	mov	r9, r6
 80008d6:	28ff      	cmp	r0, #255	; 0xff
 80008d8:	d100      	bne.n	80008dc <__aeabi_fsub+0x30>
 80008da:	e085      	b.n	80009e8 <__aeabi_fsub+0x13c>
 80008dc:	2601      	movs	r6, #1
 80008de:	4071      	eors	r1, r6
 80008e0:	1a26      	subs	r6, r4, r0
 80008e2:	4291      	cmp	r1, r2
 80008e4:	d057      	beq.n	8000996 <__aeabi_fsub+0xea>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	dd43      	ble.n	8000972 <__aeabi_fsub+0xc6>
 80008ea:	2800      	cmp	r0, #0
 80008ec:	d000      	beq.n	80008f0 <__aeabi_fsub+0x44>
 80008ee:	e07f      	b.n	80009f0 <__aeabi_fsub+0x144>
 80008f0:	4649      	mov	r1, r9
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fsub+0x4c>
 80008f6:	e0aa      	b.n	8000a4e <__aeabi_fsub+0x1a2>
 80008f8:	3e01      	subs	r6, #1
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d000      	beq.n	8000900 <__aeabi_fsub+0x54>
 80008fe:	e0f7      	b.n	8000af0 <__aeabi_fsub+0x244>
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	015a      	lsls	r2, r3, #5
 8000904:	d400      	bmi.n	8000908 <__aeabi_fsub+0x5c>
 8000906:	e08b      	b.n	8000a20 <__aeabi_fsub+0x174>
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	099c      	lsrs	r4, r3, #6
 800090c:	0020      	movs	r0, r4
 800090e:	f000 fa2b 	bl	8000d68 <__clzsi2>
 8000912:	3805      	subs	r0, #5
 8000914:	4084      	lsls	r4, r0
 8000916:	4285      	cmp	r5, r0
 8000918:	dd00      	ble.n	800091c <__aeabi_fsub+0x70>
 800091a:	e0d3      	b.n	8000ac4 <__aeabi_fsub+0x218>
 800091c:	1b45      	subs	r5, r0, r5
 800091e:	0023      	movs	r3, r4
 8000920:	2020      	movs	r0, #32
 8000922:	3501      	adds	r5, #1
 8000924:	40eb      	lsrs	r3, r5
 8000926:	1b45      	subs	r5, r0, r5
 8000928:	40ac      	lsls	r4, r5
 800092a:	1e62      	subs	r2, r4, #1
 800092c:	4194      	sbcs	r4, r2
 800092e:	4323      	orrs	r3, r4
 8000930:	2407      	movs	r4, #7
 8000932:	2500      	movs	r5, #0
 8000934:	401c      	ands	r4, r3
 8000936:	2201      	movs	r2, #1
 8000938:	4641      	mov	r1, r8
 800093a:	400a      	ands	r2, r1
 800093c:	2c00      	cmp	r4, #0
 800093e:	d004      	beq.n	800094a <__aeabi_fsub+0x9e>
 8000940:	210f      	movs	r1, #15
 8000942:	4019      	ands	r1, r3
 8000944:	2904      	cmp	r1, #4
 8000946:	d000      	beq.n	800094a <__aeabi_fsub+0x9e>
 8000948:	3304      	adds	r3, #4
 800094a:	0159      	lsls	r1, r3, #5
 800094c:	d400      	bmi.n	8000950 <__aeabi_fsub+0xa4>
 800094e:	e080      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000950:	3501      	adds	r5, #1
 8000952:	b2ec      	uxtb	r4, r5
 8000954:	2dff      	cmp	r5, #255	; 0xff
 8000956:	d000      	beq.n	800095a <__aeabi_fsub+0xae>
 8000958:	e0a3      	b.n	8000aa2 <__aeabi_fsub+0x1f6>
 800095a:	24ff      	movs	r4, #255	; 0xff
 800095c:	2300      	movs	r3, #0
 800095e:	025b      	lsls	r3, r3, #9
 8000960:	05e4      	lsls	r4, r4, #23
 8000962:	0a58      	lsrs	r0, r3, #9
 8000964:	07d2      	lsls	r2, r2, #31
 8000966:	4320      	orrs	r0, r4
 8000968:	4310      	orrs	r0, r2
 800096a:	bc0c      	pop	{r2, r3}
 800096c:	4690      	mov	r8, r2
 800096e:	4699      	mov	r9, r3
 8000970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000972:	2e00      	cmp	r6, #0
 8000974:	d174      	bne.n	8000a60 <__aeabi_fsub+0x1b4>
 8000976:	1c60      	adds	r0, r4, #1
 8000978:	b2c0      	uxtb	r0, r0
 800097a:	2801      	cmp	r0, #1
 800097c:	dc00      	bgt.n	8000980 <__aeabi_fsub+0xd4>
 800097e:	e0a7      	b.n	8000ad0 <__aeabi_fsub+0x224>
 8000980:	464a      	mov	r2, r9
 8000982:	1a9c      	subs	r4, r3, r2
 8000984:	0162      	lsls	r2, r4, #5
 8000986:	d500      	bpl.n	800098a <__aeabi_fsub+0xde>
 8000988:	e0b6      	b.n	8000af8 <__aeabi_fsub+0x24c>
 800098a:	2c00      	cmp	r4, #0
 800098c:	d1be      	bne.n	800090c <__aeabi_fsub+0x60>
 800098e:	2200      	movs	r2, #0
 8000990:	2400      	movs	r4, #0
 8000992:	2300      	movs	r3, #0
 8000994:	e7e3      	b.n	800095e <__aeabi_fsub+0xb2>
 8000996:	2e00      	cmp	r6, #0
 8000998:	dc00      	bgt.n	800099c <__aeabi_fsub+0xf0>
 800099a:	e085      	b.n	8000aa8 <__aeabi_fsub+0x1fc>
 800099c:	2800      	cmp	r0, #0
 800099e:	d046      	beq.n	8000a2e <__aeabi_fsub+0x182>
 80009a0:	2cff      	cmp	r4, #255	; 0xff
 80009a2:	d049      	beq.n	8000a38 <__aeabi_fsub+0x18c>
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	4648      	mov	r0, r9
 80009a8:	04d2      	lsls	r2, r2, #19
 80009aa:	4310      	orrs	r0, r2
 80009ac:	4681      	mov	r9, r0
 80009ae:	2201      	movs	r2, #1
 80009b0:	2e1b      	cmp	r6, #27
 80009b2:	dc09      	bgt.n	80009c8 <__aeabi_fsub+0x11c>
 80009b4:	2020      	movs	r0, #32
 80009b6:	464c      	mov	r4, r9
 80009b8:	1b80      	subs	r0, r0, r6
 80009ba:	4084      	lsls	r4, r0
 80009bc:	464a      	mov	r2, r9
 80009be:	0020      	movs	r0, r4
 80009c0:	40f2      	lsrs	r2, r6
 80009c2:	1e44      	subs	r4, r0, #1
 80009c4:	41a0      	sbcs	r0, r4
 80009c6:	4302      	orrs	r2, r0
 80009c8:	189b      	adds	r3, r3, r2
 80009ca:	015a      	lsls	r2, r3, #5
 80009cc:	d528      	bpl.n	8000a20 <__aeabi_fsub+0x174>
 80009ce:	3501      	adds	r5, #1
 80009d0:	2dff      	cmp	r5, #255	; 0xff
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0x12a>
 80009d4:	e0a8      	b.n	8000b28 <__aeabi_fsub+0x27c>
 80009d6:	2201      	movs	r2, #1
 80009d8:	2407      	movs	r4, #7
 80009da:	4994      	ldr	r1, [pc, #592]	; (8000c2c <__aeabi_fsub+0x380>)
 80009dc:	401a      	ands	r2, r3
 80009de:	085b      	lsrs	r3, r3, #1
 80009e0:	400b      	ands	r3, r1
 80009e2:	4313      	orrs	r3, r2
 80009e4:	401c      	ands	r4, r3
 80009e6:	e7a6      	b.n	8000936 <__aeabi_fsub+0x8a>
 80009e8:	2e00      	cmp	r6, #0
 80009ea:	d000      	beq.n	80009ee <__aeabi_fsub+0x142>
 80009ec:	e778      	b.n	80008e0 <__aeabi_fsub+0x34>
 80009ee:	e775      	b.n	80008dc <__aeabi_fsub+0x30>
 80009f0:	2cff      	cmp	r4, #255	; 0xff
 80009f2:	d054      	beq.n	8000a9e <__aeabi_fsub+0x1f2>
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	4649      	mov	r1, r9
 80009f8:	04d2      	lsls	r2, r2, #19
 80009fa:	4311      	orrs	r1, r2
 80009fc:	4689      	mov	r9, r1
 80009fe:	2201      	movs	r2, #1
 8000a00:	2e1b      	cmp	r6, #27
 8000a02:	dc09      	bgt.n	8000a18 <__aeabi_fsub+0x16c>
 8000a04:	2120      	movs	r1, #32
 8000a06:	4648      	mov	r0, r9
 8000a08:	1b89      	subs	r1, r1, r6
 8000a0a:	4088      	lsls	r0, r1
 8000a0c:	464a      	mov	r2, r9
 8000a0e:	0001      	movs	r1, r0
 8000a10:	40f2      	lsrs	r2, r6
 8000a12:	1e48      	subs	r0, r1, #1
 8000a14:	4181      	sbcs	r1, r0
 8000a16:	430a      	orrs	r2, r1
 8000a18:	1a9b      	subs	r3, r3, r2
 8000a1a:	015a      	lsls	r2, r3, #5
 8000a1c:	d500      	bpl.n	8000a20 <__aeabi_fsub+0x174>
 8000a1e:	e773      	b.n	8000908 <__aeabi_fsub+0x5c>
 8000a20:	2201      	movs	r2, #1
 8000a22:	4641      	mov	r1, r8
 8000a24:	400a      	ands	r2, r1
 8000a26:	0759      	lsls	r1, r3, #29
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fsub+0x180>
 8000a2a:	e789      	b.n	8000940 <__aeabi_fsub+0x94>
 8000a2c:	e011      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000a2e:	4648      	mov	r0, r9
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d158      	bne.n	8000ae6 <__aeabi_fsub+0x23a>
 8000a34:	2cff      	cmp	r4, #255	; 0xff
 8000a36:	d10c      	bne.n	8000a52 <__aeabi_fsub+0x1a6>
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fsub+0x194>
 8000a3e:	e78c      	b.n	800095a <__aeabi_fsub+0xae>
 8000a40:	2080      	movs	r0, #128	; 0x80
 8000a42:	03c0      	lsls	r0, r0, #15
 8000a44:	4303      	orrs	r3, r0
 8000a46:	025b      	lsls	r3, r3, #9
 8000a48:	0a5b      	lsrs	r3, r3, #9
 8000a4a:	24ff      	movs	r4, #255	; 0xff
 8000a4c:	e787      	b.n	800095e <__aeabi_fsub+0xb2>
 8000a4e:	2cff      	cmp	r4, #255	; 0xff
 8000a50:	d025      	beq.n	8000a9e <__aeabi_fsub+0x1f2>
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	2dff      	cmp	r5, #255	; 0xff
 8000a56:	d0f0      	beq.n	8000a3a <__aeabi_fsub+0x18e>
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	0a5b      	lsrs	r3, r3, #9
 8000a5c:	b2ec      	uxtb	r4, r5
 8000a5e:	e77e      	b.n	800095e <__aeabi_fsub+0xb2>
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d04d      	beq.n	8000b00 <__aeabi_fsub+0x254>
 8000a64:	28ff      	cmp	r0, #255	; 0xff
 8000a66:	d018      	beq.n	8000a9a <__aeabi_fsub+0x1ee>
 8000a68:	2480      	movs	r4, #128	; 0x80
 8000a6a:	04e4      	lsls	r4, r4, #19
 8000a6c:	4272      	negs	r2, r6
 8000a6e:	4323      	orrs	r3, r4
 8000a70:	2a1b      	cmp	r2, #27
 8000a72:	dd00      	ble.n	8000a76 <__aeabi_fsub+0x1ca>
 8000a74:	e0c4      	b.n	8000c00 <__aeabi_fsub+0x354>
 8000a76:	001c      	movs	r4, r3
 8000a78:	2520      	movs	r5, #32
 8000a7a:	40d4      	lsrs	r4, r2
 8000a7c:	1aaa      	subs	r2, r5, r2
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	1e5a      	subs	r2, r3, #1
 8000a82:	4193      	sbcs	r3, r2
 8000a84:	4323      	orrs	r3, r4
 8000a86:	464a      	mov	r2, r9
 8000a88:	0005      	movs	r5, r0
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	e738      	b.n	8000902 <__aeabi_fsub+0x56>
 8000a90:	1c72      	adds	r2, r6, #1
 8000a92:	d0f8      	beq.n	8000a86 <__aeabi_fsub+0x1da>
 8000a94:	43f2      	mvns	r2, r6
 8000a96:	28ff      	cmp	r0, #255	; 0xff
 8000a98:	d1ea      	bne.n	8000a70 <__aeabi_fsub+0x1c4>
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	464b      	mov	r3, r9
 8000a9e:	25ff      	movs	r5, #255	; 0xff
 8000aa0:	e7d7      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000aa2:	019b      	lsls	r3, r3, #6
 8000aa4:	0a5b      	lsrs	r3, r3, #9
 8000aa6:	e75a      	b.n	800095e <__aeabi_fsub+0xb2>
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d141      	bne.n	8000b30 <__aeabi_fsub+0x284>
 8000aac:	1c65      	adds	r5, r4, #1
 8000aae:	b2e9      	uxtb	r1, r5
 8000ab0:	2901      	cmp	r1, #1
 8000ab2:	dd45      	ble.n	8000b40 <__aeabi_fsub+0x294>
 8000ab4:	2dff      	cmp	r5, #255	; 0xff
 8000ab6:	d100      	bne.n	8000aba <__aeabi_fsub+0x20e>
 8000ab8:	e74f      	b.n	800095a <__aeabi_fsub+0xae>
 8000aba:	2407      	movs	r4, #7
 8000abc:	444b      	add	r3, r9
 8000abe:	085b      	lsrs	r3, r3, #1
 8000ac0:	401c      	ands	r4, r3
 8000ac2:	e738      	b.n	8000936 <__aeabi_fsub+0x8a>
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <__aeabi_fsub+0x384>)
 8000ac8:	1a2d      	subs	r5, r5, r0
 8000aca:	4023      	ands	r3, r4
 8000acc:	4014      	ands	r4, r2
 8000ace:	e732      	b.n	8000936 <__aeabi_fsub+0x8a>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d11d      	bne.n	8000b10 <__aeabi_fsub+0x264>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d17a      	bne.n	8000bce <__aeabi_fsub+0x322>
 8000ad8:	464b      	mov	r3, r9
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fsub+0x234>
 8000ade:	e091      	b.n	8000c04 <__aeabi_fsub+0x358>
 8000ae0:	000a      	movs	r2, r1
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	e7b5      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000ae6:	3e01      	subs	r6, #1
 8000ae8:	2e00      	cmp	r6, #0
 8000aea:	d119      	bne.n	8000b20 <__aeabi_fsub+0x274>
 8000aec:	444b      	add	r3, r9
 8000aee:	e76c      	b.n	80009ca <__aeabi_fsub+0x11e>
 8000af0:	2cff      	cmp	r4, #255	; 0xff
 8000af2:	d184      	bne.n	80009fe <__aeabi_fsub+0x152>
 8000af4:	25ff      	movs	r5, #255	; 0xff
 8000af6:	e7ac      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000af8:	464a      	mov	r2, r9
 8000afa:	4688      	mov	r8, r1
 8000afc:	1ad4      	subs	r4, r2, r3
 8000afe:	e705      	b.n	800090c <__aeabi_fsub+0x60>
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1c5      	bne.n	8000a90 <__aeabi_fsub+0x1e4>
 8000b04:	000a      	movs	r2, r1
 8000b06:	28ff      	cmp	r0, #255	; 0xff
 8000b08:	d0c8      	beq.n	8000a9c <__aeabi_fsub+0x1f0>
 8000b0a:	0005      	movs	r5, r0
 8000b0c:	464b      	mov	r3, r9
 8000b0e:	e7a0      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d149      	bne.n	8000ba8 <__aeabi_fsub+0x2fc>
 8000b14:	464b      	mov	r3, r9
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d077      	beq.n	8000c0a <__aeabi_fsub+0x35e>
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	25ff      	movs	r5, #255	; 0xff
 8000b1e:	e798      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000b20:	2cff      	cmp	r4, #255	; 0xff
 8000b22:	d000      	beq.n	8000b26 <__aeabi_fsub+0x27a>
 8000b24:	e743      	b.n	80009ae <__aeabi_fsub+0x102>
 8000b26:	e787      	b.n	8000a38 <__aeabi_fsub+0x18c>
 8000b28:	000a      	movs	r2, r1
 8000b2a:	24ff      	movs	r4, #255	; 0xff
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e716      	b.n	800095e <__aeabi_fsub+0xb2>
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	d115      	bne.n	8000b60 <__aeabi_fsub+0x2b4>
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d157      	bne.n	8000be8 <__aeabi_fsub+0x33c>
 8000b38:	28ff      	cmp	r0, #255	; 0xff
 8000b3a:	d1e6      	bne.n	8000b0a <__aeabi_fsub+0x25e>
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	e77b      	b.n	8000a38 <__aeabi_fsub+0x18c>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d120      	bne.n	8000b86 <__aeabi_fsub+0x2da>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d057      	beq.n	8000bf8 <__aeabi_fsub+0x34c>
 8000b48:	4649      	mov	r1, r9
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d053      	beq.n	8000bf6 <__aeabi_fsub+0x34a>
 8000b4e:	444b      	add	r3, r9
 8000b50:	015a      	lsls	r2, r3, #5
 8000b52:	d568      	bpl.n	8000c26 <__aeabi_fsub+0x37a>
 8000b54:	2407      	movs	r4, #7
 8000b56:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <__aeabi_fsub+0x384>)
 8000b58:	401c      	ands	r4, r3
 8000b5a:	2501      	movs	r5, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	e6ea      	b.n	8000936 <__aeabi_fsub+0x8a>
 8000b60:	28ff      	cmp	r0, #255	; 0xff
 8000b62:	d0eb      	beq.n	8000b3c <__aeabi_fsub+0x290>
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	04d2      	lsls	r2, r2, #19
 8000b68:	4276      	negs	r6, r6
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	2e1b      	cmp	r6, #27
 8000b6e:	dc53      	bgt.n	8000c18 <__aeabi_fsub+0x36c>
 8000b70:	2520      	movs	r5, #32
 8000b72:	1bad      	subs	r5, r5, r6
 8000b74:	001a      	movs	r2, r3
 8000b76:	40ab      	lsls	r3, r5
 8000b78:	40f2      	lsrs	r2, r6
 8000b7a:	1e5c      	subs	r4, r3, #1
 8000b7c:	41a3      	sbcs	r3, r4
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	444b      	add	r3, r9
 8000b82:	0005      	movs	r5, r0
 8000b84:	e721      	b.n	80009ca <__aeabi_fsub+0x11e>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0d8      	beq.n	8000b3c <__aeabi_fsub+0x290>
 8000b8a:	4649      	mov	r1, r9
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fsub+0x2e6>
 8000b90:	e752      	b.n	8000a38 <__aeabi_fsub+0x18c>
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	03c9      	lsls	r1, r1, #15
 8000b96:	420f      	tst	r7, r1
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x2f0>
 8000b9a:	e74d      	b.n	8000a38 <__aeabi_fsub+0x18c>
 8000b9c:	4660      	mov	r0, ip
 8000b9e:	4208      	tst	r0, r1
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_fsub+0x2f8>
 8000ba2:	e749      	b.n	8000a38 <__aeabi_fsub+0x18c>
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	e747      	b.n	8000a38 <__aeabi_fsub+0x18c>
 8000ba8:	4648      	mov	r0, r9
 8000baa:	25ff      	movs	r5, #255	; 0xff
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_fsub+0x306>
 8000bb0:	e74f      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	03d2      	lsls	r2, r2, #15
 8000bb6:	4217      	tst	r7, r2
 8000bb8:	d004      	beq.n	8000bc4 <__aeabi_fsub+0x318>
 8000bba:	4660      	mov	r0, ip
 8000bbc:	4210      	tst	r0, r2
 8000bbe:	d101      	bne.n	8000bc4 <__aeabi_fsub+0x318>
 8000bc0:	464b      	mov	r3, r9
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4641      	mov	r1, r8
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	400a      	ands	r2, r1
 8000bcc:	e741      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d01f      	beq.n	8000c14 <__aeabi_fsub+0x368>
 8000bd4:	1a1a      	subs	r2, r3, r0
 8000bd6:	0150      	lsls	r0, r2, #5
 8000bd8:	d520      	bpl.n	8000c1c <__aeabi_fsub+0x370>
 8000bda:	464a      	mov	r2, r9
 8000bdc:	2407      	movs	r4, #7
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	401c      	ands	r4, r3
 8000be2:	4688      	mov	r8, r1
 8000be4:	2500      	movs	r5, #0
 8000be6:	e6a6      	b.n	8000936 <__aeabi_fsub+0x8a>
 8000be8:	1c74      	adds	r4, r6, #1
 8000bea:	d0c9      	beq.n	8000b80 <__aeabi_fsub+0x2d4>
 8000bec:	43f6      	mvns	r6, r6
 8000bee:	28ff      	cmp	r0, #255	; 0xff
 8000bf0:	d1bc      	bne.n	8000b6c <__aeabi_fsub+0x2c0>
 8000bf2:	464b      	mov	r3, r9
 8000bf4:	e720      	b.n	8000a38 <__aeabi_fsub+0x18c>
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	2500      	movs	r5, #0
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	e72b      	b.n	8000a58 <__aeabi_fsub+0x1ac>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e740      	b.n	8000a86 <__aeabi_fsub+0x1da>
 8000c04:	2200      	movs	r2, #0
 8000c06:	2300      	movs	r3, #0
 8000c08:	e6a9      	b.n	800095e <__aeabi_fsub+0xb2>
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	03db      	lsls	r3, r3, #15
 8000c10:	24ff      	movs	r4, #255	; 0xff
 8000c12:	e6a4      	b.n	800095e <__aeabi_fsub+0xb2>
 8000c14:	2500      	movs	r5, #0
 8000c16:	e71c      	b.n	8000a52 <__aeabi_fsub+0x1a6>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e7b1      	b.n	8000b80 <__aeabi_fsub+0x2d4>
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d0f1      	beq.n	8000c04 <__aeabi_fsub+0x358>
 8000c20:	0013      	movs	r3, r2
 8000c22:	2500      	movs	r5, #0
 8000c24:	e6fc      	b.n	8000a20 <__aeabi_fsub+0x174>
 8000c26:	2500      	movs	r5, #0
 8000c28:	e6fa      	b.n	8000a20 <__aeabi_fsub+0x174>
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	7dffffff 	.word	0x7dffffff
 8000c30:	fbffffff 	.word	0xfbffffff

08000c34 <__aeabi_f2iz>:
 8000c34:	0241      	lsls	r1, r0, #9
 8000c36:	0042      	lsls	r2, r0, #1
 8000c38:	0fc3      	lsrs	r3, r0, #31
 8000c3a:	0a49      	lsrs	r1, r1, #9
 8000c3c:	0e12      	lsrs	r2, r2, #24
 8000c3e:	2000      	movs	r0, #0
 8000c40:	2a7e      	cmp	r2, #126	; 0x7e
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_f2iz+0x2c>
 8000c44:	2a9d      	cmp	r2, #157	; 0x9d
 8000c46:	d80c      	bhi.n	8000c62 <__aeabi_f2iz+0x2e>
 8000c48:	2080      	movs	r0, #128	; 0x80
 8000c4a:	0400      	lsls	r0, r0, #16
 8000c4c:	4301      	orrs	r1, r0
 8000c4e:	2a95      	cmp	r2, #149	; 0x95
 8000c50:	dc0a      	bgt.n	8000c68 <__aeabi_f2iz+0x34>
 8000c52:	2096      	movs	r0, #150	; 0x96
 8000c54:	1a82      	subs	r2, r0, r2
 8000c56:	40d1      	lsrs	r1, r2
 8000c58:	4248      	negs	r0, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_f2iz+0x2c>
 8000c5e:	0008      	movs	r0, r1
 8000c60:	4770      	bx	lr
 8000c62:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <__aeabi_f2iz+0x3c>)
 8000c64:	1898      	adds	r0, r3, r2
 8000c66:	e7fb      	b.n	8000c60 <__aeabi_f2iz+0x2c>
 8000c68:	3a96      	subs	r2, #150	; 0x96
 8000c6a:	4091      	lsls	r1, r2
 8000c6c:	e7f4      	b.n	8000c58 <__aeabi_f2iz+0x24>
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	7fffffff 	.word	0x7fffffff

08000c74 <__aeabi_ui2f>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	1e04      	subs	r4, r0, #0
 8000c78:	d034      	beq.n	8000ce4 <__aeabi_ui2f+0x70>
 8000c7a:	f000 f875 	bl	8000d68 <__clzsi2>
 8000c7e:	229e      	movs	r2, #158	; 0x9e
 8000c80:	1a12      	subs	r2, r2, r0
 8000c82:	2a96      	cmp	r2, #150	; 0x96
 8000c84:	dc07      	bgt.n	8000c96 <__aeabi_ui2f+0x22>
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	2808      	cmp	r0, #8
 8000c8a:	dd2e      	ble.n	8000cea <__aeabi_ui2f+0x76>
 8000c8c:	3808      	subs	r0, #8
 8000c8e:	4084      	lsls	r4, r0
 8000c90:	0260      	lsls	r0, r4, #9
 8000c92:	0a40      	lsrs	r0, r0, #9
 8000c94:	e021      	b.n	8000cda <__aeabi_ui2f+0x66>
 8000c96:	2a99      	cmp	r2, #153	; 0x99
 8000c98:	dd09      	ble.n	8000cae <__aeabi_ui2f+0x3a>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	0021      	movs	r1, r4
 8000c9e:	331b      	adds	r3, #27
 8000ca0:	4099      	lsls	r1, r3
 8000ca2:	1e4b      	subs	r3, r1, #1
 8000ca4:	4199      	sbcs	r1, r3
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	1a1b      	subs	r3, r3, r0
 8000caa:	40dc      	lsrs	r4, r3
 8000cac:	430c      	orrs	r4, r1
 8000cae:	2805      	cmp	r0, #5
 8000cb0:	dd01      	ble.n	8000cb6 <__aeabi_ui2f+0x42>
 8000cb2:	1f43      	subs	r3, r0, #5
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <__aeabi_ui2f+0x7c>)
 8000cba:	400b      	ands	r3, r1
 8000cbc:	0765      	lsls	r5, r4, #29
 8000cbe:	d009      	beq.n	8000cd4 <__aeabi_ui2f+0x60>
 8000cc0:	250f      	movs	r5, #15
 8000cc2:	402c      	ands	r4, r5
 8000cc4:	2c04      	cmp	r4, #4
 8000cc6:	d005      	beq.n	8000cd4 <__aeabi_ui2f+0x60>
 8000cc8:	3304      	adds	r3, #4
 8000cca:	015c      	lsls	r4, r3, #5
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_ui2f+0x60>
 8000cce:	229f      	movs	r2, #159	; 0x9f
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	1a12      	subs	r2, r2, r0
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	0a58      	lsrs	r0, r3, #9
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	0240      	lsls	r0, r0, #9
 8000cdc:	05d2      	lsls	r2, r2, #23
 8000cde:	0a40      	lsrs	r0, r0, #9
 8000ce0:	4310      	orrs	r0, r2
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	e7f7      	b.n	8000cda <__aeabi_ui2f+0x66>
 8000cea:	0260      	lsls	r0, r4, #9
 8000cec:	0a40      	lsrs	r0, r0, #9
 8000cee:	e7f4      	b.n	8000cda <__aeabi_ui2f+0x66>
 8000cf0:	fbffffff 	.word	0xfbffffff

08000cf4 <__aeabi_cfrcmple>:
 8000cf4:	4684      	mov	ip, r0
 8000cf6:	1c08      	adds	r0, r1, #0
 8000cf8:	4661      	mov	r1, ip
 8000cfa:	e7ff      	b.n	8000cfc <__aeabi_cfcmpeq>

08000cfc <__aeabi_cfcmpeq>:
 8000cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000cfe:	f000 f8c7 	bl	8000e90 <__lesf2>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d401      	bmi.n	8000d0a <__aeabi_cfcmpeq+0xe>
 8000d06:	2100      	movs	r1, #0
 8000d08:	42c8      	cmn	r0, r1
 8000d0a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d0c <__aeabi_fcmpeq>:
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	f000 f849 	bl	8000da4 <__eqsf2>
 8000d12:	4240      	negs	r0, r0
 8000d14:	3001      	adds	r0, #1
 8000d16:	bd10      	pop	{r4, pc}

08000d18 <__aeabi_fcmplt>:
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	f000 f8b9 	bl	8000e90 <__lesf2>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	db01      	blt.n	8000d26 <__aeabi_fcmplt+0xe>
 8000d22:	2000      	movs	r0, #0
 8000d24:	bd10      	pop	{r4, pc}
 8000d26:	2001      	movs	r0, #1
 8000d28:	bd10      	pop	{r4, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)

08000d2c <__aeabi_fcmple>:
 8000d2c:	b510      	push	{r4, lr}
 8000d2e:	f000 f8af 	bl	8000e90 <__lesf2>
 8000d32:	2800      	cmp	r0, #0
 8000d34:	dd01      	ble.n	8000d3a <__aeabi_fcmple+0xe>
 8000d36:	2000      	movs	r0, #0
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)

08000d40 <__aeabi_fcmpgt>:
 8000d40:	b510      	push	{r4, lr}
 8000d42:	f000 f857 	bl	8000df4 <__gesf2>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	dc01      	bgt.n	8000d4e <__aeabi_fcmpgt+0xe>
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	bd10      	pop	{r4, pc}
 8000d4e:	2001      	movs	r0, #1
 8000d50:	bd10      	pop	{r4, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)

08000d54 <__aeabi_fcmpge>:
 8000d54:	b510      	push	{r4, lr}
 8000d56:	f000 f84d 	bl	8000df4 <__gesf2>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	da01      	bge.n	8000d62 <__aeabi_fcmpge+0xe>
 8000d5e:	2000      	movs	r0, #0
 8000d60:	bd10      	pop	{r4, pc}
 8000d62:	2001      	movs	r0, #1
 8000d64:	bd10      	pop	{r4, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)

08000d68 <__clzsi2>:
 8000d68:	211c      	movs	r1, #28
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d301      	bcc.n	8000d76 <__clzsi2+0xe>
 8000d72:	0c00      	lsrs	r0, r0, #16
 8000d74:	3910      	subs	r1, #16
 8000d76:	0a1b      	lsrs	r3, r3, #8
 8000d78:	4298      	cmp	r0, r3
 8000d7a:	d301      	bcc.n	8000d80 <__clzsi2+0x18>
 8000d7c:	0a00      	lsrs	r0, r0, #8
 8000d7e:	3908      	subs	r1, #8
 8000d80:	091b      	lsrs	r3, r3, #4
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d301      	bcc.n	8000d8a <__clzsi2+0x22>
 8000d86:	0900      	lsrs	r0, r0, #4
 8000d88:	3904      	subs	r1, #4
 8000d8a:	a202      	add	r2, pc, #8	; (adr r2, 8000d94 <__clzsi2+0x2c>)
 8000d8c:	5c10      	ldrb	r0, [r2, r0]
 8000d8e:	1840      	adds	r0, r0, r1
 8000d90:	4770      	bx	lr
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	02020304 	.word	0x02020304
 8000d98:	01010101 	.word	0x01010101
	...

08000da4 <__eqsf2>:
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	0042      	lsls	r2, r0, #1
 8000da8:	024e      	lsls	r6, r1, #9
 8000daa:	004c      	lsls	r4, r1, #1
 8000dac:	0245      	lsls	r5, r0, #9
 8000dae:	0a6d      	lsrs	r5, r5, #9
 8000db0:	0e12      	lsrs	r2, r2, #24
 8000db2:	0fc3      	lsrs	r3, r0, #31
 8000db4:	0a76      	lsrs	r6, r6, #9
 8000db6:	0e24      	lsrs	r4, r4, #24
 8000db8:	0fc9      	lsrs	r1, r1, #31
 8000dba:	2aff      	cmp	r2, #255	; 0xff
 8000dbc:	d00f      	beq.n	8000dde <__eqsf2+0x3a>
 8000dbe:	2cff      	cmp	r4, #255	; 0xff
 8000dc0:	d011      	beq.n	8000de6 <__eqsf2+0x42>
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	42a2      	cmp	r2, r4
 8000dc6:	d000      	beq.n	8000dca <__eqsf2+0x26>
 8000dc8:	bd70      	pop	{r4, r5, r6, pc}
 8000dca:	42b5      	cmp	r5, r6
 8000dcc:	d1fc      	bne.n	8000dc8 <__eqsf2+0x24>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d00d      	beq.n	8000dee <__eqsf2+0x4a>
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d1f8      	bne.n	8000dc8 <__eqsf2+0x24>
 8000dd6:	0028      	movs	r0, r5
 8000dd8:	1e45      	subs	r5, r0, #1
 8000dda:	41a8      	sbcs	r0, r5
 8000ddc:	e7f4      	b.n	8000dc8 <__eqsf2+0x24>
 8000dde:	2001      	movs	r0, #1
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d1f1      	bne.n	8000dc8 <__eqsf2+0x24>
 8000de4:	e7eb      	b.n	8000dbe <__eqsf2+0x1a>
 8000de6:	2001      	movs	r0, #1
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d1ed      	bne.n	8000dc8 <__eqsf2+0x24>
 8000dec:	e7e9      	b.n	8000dc2 <__eqsf2+0x1e>
 8000dee:	2000      	movs	r0, #0
 8000df0:	e7ea      	b.n	8000dc8 <__eqsf2+0x24>
 8000df2:	46c0      	nop			; (mov r8, r8)

08000df4 <__gesf2>:
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	004a      	lsls	r2, r1, #1
 8000df8:	024e      	lsls	r6, r1, #9
 8000dfa:	0245      	lsls	r5, r0, #9
 8000dfc:	0044      	lsls	r4, r0, #1
 8000dfe:	0a6d      	lsrs	r5, r5, #9
 8000e00:	0e24      	lsrs	r4, r4, #24
 8000e02:	0fc3      	lsrs	r3, r0, #31
 8000e04:	0a76      	lsrs	r6, r6, #9
 8000e06:	0e12      	lsrs	r2, r2, #24
 8000e08:	0fc9      	lsrs	r1, r1, #31
 8000e0a:	2cff      	cmp	r4, #255	; 0xff
 8000e0c:	d015      	beq.n	8000e3a <__gesf2+0x46>
 8000e0e:	2aff      	cmp	r2, #255	; 0xff
 8000e10:	d00e      	beq.n	8000e30 <__gesf2+0x3c>
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	d115      	bne.n	8000e42 <__gesf2+0x4e>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d101      	bne.n	8000e1e <__gesf2+0x2a>
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d01c      	beq.n	8000e58 <__gesf2+0x64>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d014      	beq.n	8000e4c <__gesf2+0x58>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d027      	beq.n	8000e76 <__gesf2+0x82>
 8000e26:	2002      	movs	r0, #2
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	4018      	ands	r0, r3
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0ee      	beq.n	8000e12 <__gesf2+0x1e>
 8000e34:	2002      	movs	r0, #2
 8000e36:	4240      	negs	r0, r0
 8000e38:	e7f9      	b.n	8000e2e <__gesf2+0x3a>
 8000e3a:	2d00      	cmp	r5, #0
 8000e3c:	d1fa      	bne.n	8000e34 <__gesf2+0x40>
 8000e3e:	2aff      	cmp	r2, #255	; 0xff
 8000e40:	d00e      	beq.n	8000e60 <__gesf2+0x6c>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d10e      	bne.n	8000e64 <__gesf2+0x70>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d0ed      	beq.n	8000e26 <__gesf2+0x32>
 8000e4a:	e00b      	b.n	8000e64 <__gesf2+0x70>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	3901      	subs	r1, #1
 8000e50:	4399      	bics	r1, r3
 8000e52:	0008      	movs	r0, r1
 8000e54:	3001      	adds	r0, #1
 8000e56:	e7ea      	b.n	8000e2e <__gesf2+0x3a>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	2d00      	cmp	r5, #0
 8000e5c:	d0e7      	beq.n	8000e2e <__gesf2+0x3a>
 8000e5e:	e7e2      	b.n	8000e26 <__gesf2+0x32>
 8000e60:	2e00      	cmp	r6, #0
 8000e62:	d1e7      	bne.n	8000e34 <__gesf2+0x40>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1de      	bne.n	8000e26 <__gesf2+0x32>
 8000e68:	4294      	cmp	r4, r2
 8000e6a:	dd05      	ble.n	8000e78 <__gesf2+0x84>
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	1e58      	subs	r0, r3, #1
 8000e70:	4008      	ands	r0, r1
 8000e72:	3801      	subs	r0, #1
 8000e74:	e7db      	b.n	8000e2e <__gesf2+0x3a>
 8000e76:	2400      	movs	r4, #0
 8000e78:	42a2      	cmp	r2, r4
 8000e7a:	dc04      	bgt.n	8000e86 <__gesf2+0x92>
 8000e7c:	42b5      	cmp	r5, r6
 8000e7e:	d8d2      	bhi.n	8000e26 <__gesf2+0x32>
 8000e80:	2000      	movs	r0, #0
 8000e82:	42b5      	cmp	r5, r6
 8000e84:	d2d3      	bcs.n	8000e2e <__gesf2+0x3a>
 8000e86:	1e58      	subs	r0, r3, #1
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4398      	bics	r0, r3
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	e7ce      	b.n	8000e2e <__gesf2+0x3a>

08000e90 <__lesf2>:
 8000e90:	b530      	push	{r4, r5, lr}
 8000e92:	0042      	lsls	r2, r0, #1
 8000e94:	0244      	lsls	r4, r0, #9
 8000e96:	024d      	lsls	r5, r1, #9
 8000e98:	0fc3      	lsrs	r3, r0, #31
 8000e9a:	0048      	lsls	r0, r1, #1
 8000e9c:	0a64      	lsrs	r4, r4, #9
 8000e9e:	0e12      	lsrs	r2, r2, #24
 8000ea0:	0a6d      	lsrs	r5, r5, #9
 8000ea2:	0e00      	lsrs	r0, r0, #24
 8000ea4:	0fc9      	lsrs	r1, r1, #31
 8000ea6:	2aff      	cmp	r2, #255	; 0xff
 8000ea8:	d012      	beq.n	8000ed0 <__lesf2+0x40>
 8000eaa:	28ff      	cmp	r0, #255	; 0xff
 8000eac:	d00c      	beq.n	8000ec8 <__lesf2+0x38>
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d112      	bne.n	8000ed8 <__lesf2+0x48>
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d119      	bne.n	8000eea <__lesf2+0x5a>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d117      	bne.n	8000eea <__lesf2+0x5a>
 8000eba:	2c00      	cmp	r4, #0
 8000ebc:	d02b      	beq.n	8000f16 <__lesf2+0x86>
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	4018      	ands	r0, r3
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e026      	b.n	8000f16 <__lesf2+0x86>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0f0      	beq.n	8000eae <__lesf2+0x1e>
 8000ecc:	2002      	movs	r0, #2
 8000ece:	e022      	b.n	8000f16 <__lesf2+0x86>
 8000ed0:	2c00      	cmp	r4, #0
 8000ed2:	d1fb      	bne.n	8000ecc <__lesf2+0x3c>
 8000ed4:	28ff      	cmp	r0, #255	; 0xff
 8000ed6:	d01f      	beq.n	8000f18 <__lesf2+0x88>
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d11f      	bne.n	8000f1c <__lesf2+0x8c>
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	d11d      	bne.n	8000f1c <__lesf2+0x8c>
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	4018      	ands	r0, r3
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e015      	b.n	8000f16 <__lesf2+0x86>
 8000eea:	2c00      	cmp	r4, #0
 8000eec:	d00e      	beq.n	8000f0c <__lesf2+0x7c>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d1e5      	bne.n	8000ebe <__lesf2+0x2e>
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4290      	cmp	r0, r2
 8000ef6:	dc04      	bgt.n	8000f02 <__lesf2+0x72>
 8000ef8:	42ac      	cmp	r4, r5
 8000efa:	d8e0      	bhi.n	8000ebe <__lesf2+0x2e>
 8000efc:	2000      	movs	r0, #0
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	d209      	bcs.n	8000f16 <__lesf2+0x86>
 8000f02:	1e58      	subs	r0, r3, #1
 8000f04:	2301      	movs	r3, #1
 8000f06:	4398      	bics	r0, r3
 8000f08:	3001      	adds	r0, #1
 8000f0a:	e004      	b.n	8000f16 <__lesf2+0x86>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	3901      	subs	r1, #1
 8000f10:	4399      	bics	r1, r3
 8000f12:	0008      	movs	r0, r1
 8000f14:	3001      	adds	r0, #1
 8000f16:	bd30      	pop	{r4, r5, pc}
 8000f18:	2d00      	cmp	r5, #0
 8000f1a:	d1d7      	bne.n	8000ecc <__lesf2+0x3c>
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d1ce      	bne.n	8000ebe <__lesf2+0x2e>
 8000f20:	4282      	cmp	r2, r0
 8000f22:	dde7      	ble.n	8000ef4 <__lesf2+0x64>
 8000f24:	2102      	movs	r1, #2
 8000f26:	1e58      	subs	r0, r3, #1
 8000f28:	4008      	ands	r0, r1
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7f3      	b.n	8000f16 <__lesf2+0x86>
 8000f2e:	46c0      	nop			; (mov r8, r8)

08000f30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <vApplicationGetIdleTaskMemory+0x28>)
 8000f40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b004      	add	sp, #16
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	20000090 	.word	0x20000090
 8000f5c:	200000e4 	.word	0x200000e4

08000f60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b0a6      	sub	sp, #152	; 0x98
 8000f64:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f66:	f002 fed7 	bl	8003d18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f6a:	f000 f881 	bl	8001070 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f6e:	f000 f949 	bl	8001204 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8000f72:	f000 f913 	bl	800119c <_ZL19MX_USART2_UART_Initv>
	MX_USART1_UART_Init();
 8000f76:	f000 f8dd 	bl	8001134 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */
	/* Create the mutex(es) */
	/* definition and creation of RF_FIFO */
	osMutexDef(RF_FIFO);
 8000f7a:	2190      	movs	r1, #144	; 0x90
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
	RF_FIFOHandle = osMutexCreate(osMutex(RF_FIFO));
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f006 f9bf 	bl	800730e <osMutexCreate>
 8000f90:	0002      	movs	r2, r0
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <main+0xe4>)
 8000f94:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of CAN_Send */
	osThreadDef(CAN_Send, Start_CAN_Send, osPriorityNormal, 0, 128);
 8000f96:	2174      	movs	r1, #116	; 0x74
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	4a2b      	ldr	r2, [pc, #172]	; (8001048 <main+0xe8>)
 8000f9c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000f9e:	c331      	stmia	r3!, {r0, r4, r5}
 8000fa0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000fa2:	c331      	stmia	r3!, {r0, r4, r5}
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	601a      	str	r2, [r3, #0]
	CAN_SendHandle = osThreadCreate(osThread(CAN_Send), NULL);
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2100      	movs	r1, #0
 8000fac:	0018      	movs	r0, r3
 8000fae:	f006 f94d 	bl	800724c <osThreadCreate>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <main+0xec>)
 8000fb6:	601a      	str	r2, [r3, #0]

	/* definition and creation of CAN_Request */
	osThreadDef(CAN_Request, Start_CAN_Request, osPriorityNormal, 0, 128);
 8000fb8:	2158      	movs	r1, #88	; 0x58
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <main+0xf0>)
 8000fbe:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000fc0:	c331      	stmia	r3!, {r0, r4, r5}
 8000fc2:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000fc4:	c331      	stmia	r3!, {r0, r4, r5}
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	601a      	str	r2, [r3, #0]
	CAN_RequestHandle = osThreadCreate(osThread(CAN_Request), NULL);
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2100      	movs	r1, #0
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f006 f93c 	bl	800724c <osThreadCreate>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <main+0xf4>)
 8000fd8:	601a      	str	r2, [r3, #0]

	/* definition and creation of GPS_Request */
	osThreadDef(GPS_Request, Start_GPS_Request, osPriorityNormal, 0, 128);
 8000fda:	213c      	movs	r1, #60	; 0x3c
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <main+0xf8>)
 8000fe0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000fe2:	c331      	stmia	r3!, {r0, r4, r5}
 8000fe4:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000fe6:	c331      	stmia	r3!, {r0, r4, r5}
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	601a      	str	r2, [r3, #0]
	GPS_RequestHandle = osThreadCreate(osThread(GPS_Request), NULL);
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2100      	movs	r1, #0
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f006 f92b 	bl	800724c <osThreadCreate>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <main+0xfc>)
 8000ffa:	601a      	str	r2, [r3, #0]

	/* definition and creation of IMU_Request */
	osThreadDef(IMU_Request, Start_IMU_Request, osPriorityNormal, 0, 128);
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	4a17      	ldr	r2, [pc, #92]	; (8001060 <main+0x100>)
 8001002:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001004:	c331      	stmia	r3!, {r0, r4, r5}
 8001006:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001008:	c331      	stmia	r3!, {r0, r4, r5}
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	601a      	str	r2, [r3, #0]
	IMU_RequestHandle = osThreadCreate(osThread(IMU_Request), NULL);
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2100      	movs	r1, #0
 8001012:	0018      	movs	r0, r3
 8001014:	f006 f91a 	bl	800724c <osThreadCreate>
 8001018:	0002      	movs	r2, r0
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <main+0x104>)
 800101c:	601a      	str	r2, [r3, #0]

	/* definition and creation of RF_Request */
	osThreadDef(RF_Request, Start_RF_Request, osPriorityNormal, 0, 128);
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <main+0x108>)
 8001022:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001024:	c313      	stmia	r3!, {r0, r1, r4}
 8001026:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001028:	c313      	stmia	r3!, {r0, r1, r4}
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	601a      	str	r2, [r3, #0]
	RF_RequestHandle = osThreadCreate(osThread(RF_Request), NULL);
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2100      	movs	r1, #0
 8001032:	0018      	movs	r0, r3
 8001034:	f006 f90a 	bl	800724c <osThreadCreate>
 8001038:	0002      	movs	r2, r0
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <main+0x10c>)
 800103c:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800103e:	f006 f8fd 	bl	800723c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001042:	e7fe      	b.n	8001042 <main+0xe2>
 8001044:	200003f8 	.word	0x200003f8
 8001048:	08008d8c 	.word	0x08008d8c
 800104c:	200003e4 	.word	0x200003e4
 8001050:	08008db4 	.word	0x08008db4
 8001054:	200003e8 	.word	0x200003e8
 8001058:	08008ddc 	.word	0x08008ddc
 800105c:	200003ec 	.word	0x200003ec
 8001060:	08008e04 	.word	0x08008e04
 8001064:	200003f0 	.word	0x200003f0
 8001068:	08008e2c 	.word	0x08008e2c
 800106c:	200003f4 	.word	0x200003f4

08001070 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b099      	sub	sp, #100	; 0x64
 8001074:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001076:	242c      	movs	r4, #44	; 0x2c
 8001078:	193b      	adds	r3, r7, r4
 800107a:	0018      	movs	r0, r3
 800107c:	2334      	movs	r3, #52	; 0x34
 800107e:	001a      	movs	r2, r3
 8001080:	2100      	movs	r1, #0
 8001082:	f007 fe1e 	bl	8008cc2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001086:	231c      	movs	r3, #28
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	0018      	movs	r0, r3
 800108c:	2310      	movs	r3, #16
 800108e:	001a      	movs	r2, r3
 8001090:	2100      	movs	r1, #0
 8001092:	f007 fe16 	bl	8008cc2 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001096:	003b      	movs	r3, r7
 8001098:	0018      	movs	r0, r3
 800109a:	231c      	movs	r3, #28
 800109c:	001a      	movs	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	f007 fe0f 	bl	8008cc2 <memset>

	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	2220      	movs	r2, #32
 80010a8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	2201      	movs	r2, #1
 80010ae:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	0018      	movs	r0, r3
 80010ba:	f004 fb25 	bl	8005708 <HAL_RCC_OscConfig>
 80010be:	0003      	movs	r3, r0
 80010c0:	1e5a      	subs	r2, r3, #1
 80010c2:	4193      	sbcs	r3, r2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <_Z18SystemClock_Configv+0x5e>
		Error_Handler();
 80010ca:	f000 fa27 	bl	800151c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010ce:	211c      	movs	r1, #28
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2207      	movs	r2, #7
 80010d4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2203      	movs	r2, #3
 80010da:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2101      	movs	r1, #1
 80010ec:	0018      	movs	r0, r3
 80010ee:	f004 fe91 	bl	8005e14 <HAL_RCC_ClockConfig>
 80010f2:	0003      	movs	r3, r0
 80010f4:	1e5a      	subs	r2, r3, #1
 80010f6:	4193      	sbcs	r3, r2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <_Z18SystemClock_Configv+0x92>
		Error_Handler();
 80010fe:	f000 fa0d 	bl	800151c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8001102:	003b      	movs	r3, r7
 8001104:	2203      	movs	r2, #3
 8001106:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_USART2;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001108:	003b      	movs	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800110e:	003b      	movs	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001114:	003b      	movs	r3, r7
 8001116:	0018      	movs	r0, r3
 8001118:	f005 f81e 	bl	8006158 <HAL_RCCEx_PeriphCLKConfig>
 800111c:	0003      	movs	r3, r0
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	4193      	sbcs	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 8001128:	f000 f9f8 	bl	800151c <Error_Handler>
	}
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b019      	add	sp, #100	; 0x64
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <_ZL19MX_USART1_UART_Initv+0x64>)
 800113c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001140:	2296      	movs	r2, #150	; 0x96
 8001142:	0192      	lsls	r2, r2, #6
 8001144:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001178:	0018      	movs	r0, r3
 800117a:	f005 fb09 	bl	8006790 <HAL_UART_Init>
 800117e:	0003      	movs	r3, r0
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	4193      	sbcs	r3, r2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <_ZL19MX_USART1_UART_Initv+0x5a>
		Error_Handler();
 800118a:	f000 f9c7 	bl	800151c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200002e4 	.word	0x200002e4
 8001198:	40013800 	.word	0x40013800

0800119c <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <_ZL19MX_USART2_UART_Initv+0x64>)
 80011a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011a8:	22e1      	movs	r2, #225	; 0xe1
 80011aa:	0212      	lsls	r2, r2, #8
 80011ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x60>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f005 fad5 	bl	8006790 <HAL_UART_Init>
 80011e6:	0003      	movs	r3, r0
 80011e8:	1e5a      	subs	r2, r3, #1
 80011ea:	4193      	sbcs	r3, r2
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <_ZL19MX_USART2_UART_Initv+0x5a>
		Error_Handler();
 80011f2:	f000 f993 	bl	800151c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000364 	.word	0x20000364
 8001200:	40004400 	.word	0x40004400

08001204 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800120a:	240c      	movs	r4, #12
 800120c:	193b      	adds	r3, r7, r4
 800120e:	0018      	movs	r0, r3
 8001210:	2314      	movs	r3, #20
 8001212:	001a      	movs	r2, r3
 8001214:	2100      	movs	r1, #0
 8001216:	f007 fd54 	bl	8008cc2 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <_ZL12MX_GPIO_Initv+0xc8>)
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	0309      	lsls	r1, r1, #12
 8001224:	430a      	orrs	r2, r1
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <_ZL12MX_GPIO_Initv+0xc8>)
 800122a:	695a      	ldr	r2, [r3, #20]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	031b      	lsls	r3, r3, #12
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <_ZL12MX_GPIO_Initv+0xc8>)
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	03c9      	lsls	r1, r1, #15
 8001240:	430a      	orrs	r2, r1
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	03db      	lsls	r3, r3, #15
 800124c:	4013      	ands	r3, r2
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	0289      	lsls	r1, r1, #10
 800125c:	430a      	orrs	r2, r1
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	029b      	lsls	r3, r3, #10
 8001268:	4013      	ands	r3, r2
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800126e:	2390      	movs	r3, #144	; 0x90
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	2200      	movs	r2, #0
 8001274:	2120      	movs	r1, #32
 8001276:	0018      	movs	r0, r3
 8001278:	f003 fc5a 	bl	8004b30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800127c:	193b      	adds	r3, r7, r4
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	0192      	lsls	r2, r2, #6
 8001282:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_ZL12MX_GPIO_Initv+0xcc>)
 8001288:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001290:	193b      	adds	r3, r7, r4
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001294:	0019      	movs	r1, r3
 8001296:	0010      	movs	r0, r2
 8001298:	f003 fad2 	bl	8004840 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800129c:	0021      	movs	r1, r4
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2220      	movs	r2, #32
 80012a2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2201      	movs	r2, #1
 80012a8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012b6:	187a      	adds	r2, r7, r1
 80012b8:	2390      	movs	r3, #144	; 0x90
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	0011      	movs	r1, r2
 80012be:	0018      	movs	r0, r3
 80012c0:	f003 fabe 	bl	8004840 <HAL_GPIO_Init>

}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b009      	add	sp, #36	; 0x24
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	40021000 	.word	0x40021000
 80012d0:	10210000 	.word	0x10210000
 80012d4:	48000800 	.word	0x48000800

080012d8 <_Z14Start_CAN_SendPKv>:
 * @brief  Function implementing the CAN_Send thread.
 * @param  argument: Not used 
 * @retval None
 */
/* USER CODE END Header_Start_CAN_Send */
void Start_CAN_Send(void const *argument) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (!msg0.isPacketEmpty()) {
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <_Z14Start_CAN_SendPKv+0x30>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f001 fa58 	bl	8002798 <_ZN9RF_PACKET13isPacketEmptyEv>
 80012e8:	0003      	movs	r3, r0
 80012ea:	001a      	movs	r2, r3
 80012ec:	2301      	movs	r3, #1
 80012ee:	4053      	eors	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <_Z14Start_CAN_SendPKv+0x26>
			msg0.Send();
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <_Z14Start_CAN_SendPKv+0x30>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f001 f998 	bl	800262e <_ZN9RF_PACKET4SendEv>
		}
		osDelay(1);
 80012fe:	2001      	movs	r0, #1
 8001300:	f005 fff1 	bl	80072e6 <osDelay>
		if (!msg0.isPacketEmpty()) {
 8001304:	e7ec      	b.n	80012e0 <_Z14Start_CAN_SendPKv+0x8>
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	20000568 	.word	0x20000568

0800130c <_Z17Start_CAN_RequestPKv>:
 * @brief Function implementing the CAN_Request thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_CAN_Request */
void Start_CAN_Request(void const *argument) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_CAN_Request */
	/* Infinite loop */
	for (;;) {
		// request data from the motor controller
		mcRequest.txData = { 1, 1, 1 }; // Do we request even if data not processed?
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <_Z17Start_CAN_RequestPKv+0x30>)
 8001316:	2239      	movs	r2, #57	; 0x39
 8001318:	4909      	ldr	r1, [pc, #36]	; (8001340 <_Z17Start_CAN_RequestPKv+0x34>)
 800131a:	189b      	adds	r3, r3, r2
 800131c:	2203      	movs	r2, #3
 800131e:	0018      	movs	r0, r3
 8001320:	f007 fcc6 	bl	8008cb0 <memcpy>
		mcRequest.SendData();
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <_Z17Start_CAN_RequestPKv+0x30>)
 8001326:	0018      	movs	r0, r3
 8001328:	f002 fab8 	bl	800389c <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
		mppt0.SendData();
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <_Z17Start_CAN_RequestPKv+0x38>)
 800132e:	0018      	movs	r0, r3
 8001330:	f002 fab4 	bl	800389c <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
//		mppt1.SendData();
//		mppt2.SendData();
		osDelay(1);
 8001334:	2001      	movs	r0, #1
 8001336:	f005 ffd6 	bl	80072e6 <osDelay>
		mcRequest.txData = { 1, 1, 1 }; // Do we request even if data not processed?
 800133a:	e7eb      	b.n	8001314 <_Z17Start_CAN_RequestPKv+0x8>
 800133c:	20000494 	.word	0x20000494
 8001340:	08008e48 	.word	0x08008e48
 8001344:	200003fc 	.word	0x200003fc

08001348 <_Z17Start_GPS_RequestPKv>:
 * @brief Function implementing the GPS_Request thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_GPS_Request */
void Start_GPS_Request(void const *argument) {
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b08f      	sub	sp, #60	; 0x3c
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_GPS_Request */
	GPS_init(huart1.Instance);
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <_Z17Start_GPS_RequestPKv+0x3c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0018      	movs	r0, r3
 8001356:	f000 fbc3 	bl	8001ae0 <_Z8GPS_initP13USART_TypeDef>
	GPS_startReception();
 800135a:	f000 fc05 	bl	8001b68 <_Z18GPS_startReceptionv>
	/* Infinite loop */
	for (;;) {
		if (GPS_isDataAvailable()) {
 800135e:	f000 fc13 	bl	8001b88 <_Z19GPS_isDataAvailablev>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d00a      	beq.n	800137c <_Z17Start_GPS_RequestPKv+0x34>
			GPS_Data_t data = GPS_getLatestData();
 8001366:	240c      	movs	r4, #12
 8001368:	193b      	adds	r3, r7, r4
 800136a:	0018      	movs	r0, r3
 800136c:	f000 fc1c 	bl	8001ba8 <_Z17GPS_getLatestDatav>
			GPS_TO_RF::AddMessage(&msg0, subsystem_rf_ids::GPS, &data);
 8001370:	193a      	adds	r2, r7, r4
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <_Z17Start_GPS_RequestPKv+0x40>)
 8001374:	2100      	movs	r1, #0
 8001376:	0018      	movs	r0, r3
 8001378:	f001 f8c4 	bl	8002504 <_ZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_data>
		}
		osDelay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f005 ffb2 	bl	80072e6 <osDelay>
	}
 8001382:	e7ec      	b.n	800135e <_Z17Start_GPS_RequestPKv+0x16>
 8001384:	200002e4 	.word	0x200002e4
 8001388:	20000568 	.word	0x20000568

0800138c <_Z17Start_IMU_RequestPKv>:
 * @brief Function implementing the IMU_Request thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_IMU_Request */
void Start_IMU_Request(void const *argument) {
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_IMU_Request */
	bno055Init();
 8001394:	f000 fcc0 	bl	8001d18 <_Z10bno055Initv>
	/* Infinite loop */
	for (;;) {
		IMU_DATA_t imuData = bno055GetPacket();
 8001398:	240c      	movs	r4, #12
 800139a:	193b      	adds	r3, r7, r4
 800139c:	0018      	movs	r0, r3
 800139e:	f000 fcc6 	bl	8001d2e <_Z15bno055GetPacketv>
		IMU_TO_RF::AddMessage(&msg0, subsystem_rf_ids::BNO5550, &imuData);
 80013a2:	193a      	adds	r2, r7, r4
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <_Z17Start_IMU_RequestPKv+0x2c>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	0018      	movs	r0, r3
 80013aa:	f000 fef2 	bl	8002192 <_ZN9IMU_TO_RF10AddMessageEP9RF_PACKEThP10IMU_DATA_t>
		osDelay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f005 ff99 	bl	80072e6 <osDelay>
	}
 80013b4:	e7f0      	b.n	8001398 <_Z17Start_IMU_RequestPKv+0xc>
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	20000568 	.word	0x20000568

080013bc <_Z16Start_RF_RequestPKv>:
 * @brief Function implementing the RF_Request thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RF_Request */
void Start_RF_Request(void const *argument) {
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b09b      	sub	sp, #108	; 0x6c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_RF_Request */
	/* Infinite loop */
	for (;;) {
		// check to see if we have gotten any messages
		if (!motorRx0.isFifoEmpty()) {
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <_Z16Start_RF_RequestPKv+0x128>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f002 fb1e 	bl	8003a08 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 80013cc:	0003      	movs	r3, r0
 80013ce:	001a      	movs	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	4053      	eors	r3, r2
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d019      	beq.n	800140e <_Z16Start_RF_RequestPKv+0x52>
			bool receivedSomething;
			MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET motorPacket =
					motorRx0.GetOldestDataPacket(&receivedSomething);
 80013da:	2344      	movs	r3, #68	; 0x44
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	2457      	movs	r4, #87	; 0x57
 80013e0:	193a      	adds	r2, r7, r4
 80013e2:	4940      	ldr	r1, [pc, #256]	; (80014e4 <_Z16Start_RF_RequestPKv+0x128>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f000 f89e 	bl	8001526 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>
			if (receivedSomething) {
 80013ea:	193b      	adds	r3, r7, r4
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00d      	beq.n	800140e <_Z16Start_RF_RequestPKv+0x52>
				//Nice
				float l = motorPacket.motorRPM;
 80013f2:	2444      	movs	r4, #68	; 0x44
 80013f4:	193b      	adds	r3, r7, r4
 80013f6:	895b      	ldrh	r3, [r3, #10]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff fc3b 	bl	8000c74 <__aeabi_ui2f>
 80013fe:	1c03      	adds	r3, r0, #0
 8001400:	667b      	str	r3, [r7, #100]	; 0x64
				CAN_TO_RF::AddMessage(&msg0, RF_TYPES::MITSUBA_FRAME0,
 8001402:	193b      	adds	r3, r7, r4
 8001404:	4838      	ldr	r0, [pc, #224]	; (80014e8 <_Z16Start_RF_RequestPKv+0x12c>)
 8001406:	2200      	movs	r2, #0
 8001408:	2104      	movs	r1, #4
 800140a:	f000 ff27 	bl	800225c <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv>
						subsystem_rf_ids::MITSUBARX0_RL, &motorPacket);
			}
		}
		if (!motorRx2.isFifoEmpty()) {
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <_Z16Start_RF_RequestPKv+0x130>)
 8001410:	0018      	movs	r0, r3
 8001412:	f002 faf9 	bl	8003a08 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8001416:	0003      	movs	r3, r0
 8001418:	001a      	movs	r2, r3
 800141a:	2301      	movs	r3, #1
 800141c:	4053      	eors	r3, r2
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d019      	beq.n	8001458 <_Z16Start_RF_RequestPKv+0x9c>
			bool receivedSomething;
			MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET motorPacket =
					motorRx2.GetOldestDataPacket(&receivedSomething);
 8001424:	2330      	movs	r3, #48	; 0x30
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2443      	movs	r4, #67	; 0x43
 800142a:	193a      	adds	r2, r7, r4
 800142c:	492f      	ldr	r1, [pc, #188]	; (80014ec <_Z16Start_RF_RequestPKv+0x130>)
 800142e:	0018      	movs	r0, r3
 8001430:	f000 f8a2 	bl	8001578 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb>
			if (receivedSomething) {
 8001434:	193b      	adds	r3, r7, r4
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00d      	beq.n	8001458 <_Z16Start_RF_RequestPKv+0x9c>
				//Nice
				float l = motorPacket.accelPosError;
 800143c:	2430      	movs	r4, #48	; 0x30
 800143e:	193b      	adds	r3, r7, r4
 8001440:	7a1b      	ldrb	r3, [r3, #8]
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fc16 	bl	8000c74 <__aeabi_ui2f>
 8001448:	1c03      	adds	r3, r0, #0
 800144a:	663b      	str	r3, [r7, #96]	; 0x60
				CAN_TO_RF::AddMessage(&msg0, RF_TYPES::MITSUBA_FRAME2,
 800144c:	193b      	adds	r3, r7, r4
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <_Z16Start_RF_RequestPKv+0x12c>)
 8001450:	2200      	movs	r2, #0
 8001452:	2106      	movs	r1, #6
 8001454:	f000 ff02 	bl	800225c <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv>
						subsystem_rf_ids::MITSUBARX2_RL, &motorPacket);
			}
		}
		if (!mppt0.isFifoEmpty()) {
 8001458:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <_Z16Start_RF_RequestPKv+0x134>)
 800145a:	0018      	movs	r0, r3
 800145c:	f002 fad4 	bl	8003a08 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8001460:	0003      	movs	r3, r0
 8001462:	001a      	movs	r2, r3
 8001464:	2301      	movs	r3, #1
 8001466:	4053      	eors	r3, r2
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d015      	beq.n	800149a <_Z16Start_RF_RequestPKv+0xde>
			bool receivedSomething;
			PROTON1_MESSAGE_0_DATA_PACKET mpptPacket =
					mppt0.GetOldestDataPacket(&receivedSomething);
 800146e:	231c      	movs	r3, #28
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	242f      	movs	r4, #47	; 0x2f
 8001474:	193a      	adds	r2, r7, r4
 8001476:	491e      	ldr	r1, [pc, #120]	; (80014f0 <_Z16Start_RF_RequestPKv+0x134>)
 8001478:	0018      	movs	r0, r3
 800147a:	f000 f8a6 	bl	80015ca <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI17PROTON1_MESSAGE_029PROTON1_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>
			if (receivedSomething) {
 800147e:	193b      	adds	r3, r7, r4
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <_Z16Start_RF_RequestPKv+0xde>
				//Nice
				float vin = mpptPacket.arrayVoltage;
 8001486:	221c      	movs	r2, #28
 8001488:	18bb      	adds	r3, r7, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	65fb      	str	r3, [r7, #92]	; 0x5c
				CAN_TO_RF::AddMessage(&msg0, RF_TYPES::PROTON1,
 800148e:	18bb      	adds	r3, r7, r2
 8001490:	4815      	ldr	r0, [pc, #84]	; (80014e8 <_Z16Start_RF_RequestPKv+0x12c>)
 8001492:	2200      	movs	r2, #0
 8001494:	2101      	movs	r1, #1
 8001496:	f000 fee1 	bl	800225c <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv>
//				float vin = mpptPacket.arrayVoltage;
//				CAN_TO_RF::AddMessage(&msg0, RF_TYPES::PROTON1,
//						subsystem_rf_ids::MPPT2, &mpptPacket);
//			}
//		}
		if (!bms0.isFifoEmpty()) {
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <_Z16Start_RF_RequestPKv+0x138>)
 800149c:	0018      	movs	r0, r3
 800149e:	f002 fab3 	bl	8003a08 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 80014a2:	0003      	movs	r3, r0
 80014a4:	001a      	movs	r2, r3
 80014a6:	2301      	movs	r3, #1
 80014a8:	4053      	eors	r3, r2
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d015      	beq.n	80014dc <_Z16Start_RF_RequestPKv+0x120>
			bool receivedSomething;
			ORION_MESSAGE_0_DATA_PACKET bmsPacket = bms0.GetOldestDataPacket(
					&receivedSomething);
 80014b0:	2308      	movs	r3, #8
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	241b      	movs	r4, #27
 80014b6:	193a      	adds	r2, r7, r4
 80014b8:	490e      	ldr	r1, [pc, #56]	; (80014f4 <_Z16Start_RF_RequestPKv+0x138>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 f8ad 	bl	800161a <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI15ORION_MESSAGE_027ORION_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>
			if (receivedSomething) {
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d009      	beq.n	80014dc <_Z16Start_RF_RequestPKv+0x120>
				//Nice
				float voltH = bmsPacket.highCellVoltage;
 80014c8:	2208      	movs	r2, #8
 80014ca:	18bb      	adds	r3, r7, r2
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	65bb      	str	r3, [r7, #88]	; 0x58
				CAN_TO_RF::AddMessage(&msg0, RF_TYPES::ORION,
 80014d0:	18bb      	adds	r3, r7, r2
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <_Z16Start_RF_RequestPKv+0x12c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	2102      	movs	r1, #2
 80014d8:	f000 fec0 	bl	800225c <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv>
						subsystem_rf_ids::ORION0, &bmsPacket);
			}
		}
		osDelay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f005 ff02 	bl	80072e6 <osDelay>
	}
 80014e2:	e76f      	b.n	80013c4 <_Z16Start_RF_RequestPKv+0x8>
 80014e4:	200004d0 	.word	0x200004d0
 80014e8:	20000568 	.word	0x20000568
 80014ec:	2000051c 	.word	0x2000051c
 80014f0:	200003fc 	.word	0x200003fc
 80014f4:	20000448 	.word	0x20000448

080014f8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800150a:	f002 fc19 	bl	8003d40 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40012c00 	.word	0x40012c00

0800151c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 8001526:	b590      	push	{r4, r7, lr}
 8001528:	b08b      	sub	sp, #44	; 0x2c
 800152a:	af00      	add	r7, sp, #0
 800152c:	61f8      	str	r0, [r7, #28]
 800152e:	61b9      	str	r1, [r7, #24]
 8001530:	617a      	str	r2, [r7, #20]
	{
		CHILD_DATA returnData;
	    if(success)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01a      	beq.n	800156e <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	3312      	adds	r3, #18
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	0011      	movs	r1, r2
 8001540:	0018      	movs	r0, r3
 8001542:	f000 f892 	bl	800166a <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8001546:	0003      	movs	r3, r0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00d      	beq.n	800156e <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 8001552:	69fc      	ldr	r4, [r7, #28]
 8001554:	003b      	movs	r3, r7
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	0011      	movs	r1, r2
 800155a:	0018      	movs	r0, r3
 800155c:	f001 fa58 	bl	8002a10 <_ZN25MITSUBA_DRIVER_RX_FRAME_017arrayToDataPacketEPh>
 8001560:	003b      	movs	r3, r7
 8001562:	0020      	movs	r0, r4
 8001564:	0019      	movs	r1, r3
 8001566:	2310      	movs	r3, #16
 8001568:	001a      	movs	r2, r3
 800156a:	f007 fba1 	bl	8008cb0 <memcpy>
	        }
	    }
	    return returnData;
 800156e:	46c0      	nop			; (mov r8, r8)
	}
 8001570:	69f8      	ldr	r0, [r7, #28]
 8001572:	46bd      	mov	sp, r7
 8001574:	b00b      	add	sp, #44	; 0x2c
 8001576:	bd90      	pop	{r4, r7, pc}

08001578 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb>:
	CHILD_DATA GetOldestDataPacket(bool* success)
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b08d      	sub	sp, #52	; 0x34
 800157c:	af00      	add	r7, sp, #0
 800157e:	6278      	str	r0, [r7, #36]	; 0x24
 8001580:	6239      	str	r1, [r7, #32]
 8001582:	61fa      	str	r2, [r7, #28]
	    if(success)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01a      	beq.n	80015c0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	3312      	adds	r3, #18
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	0011      	movs	r1, r2
 8001592:	0018      	movs	r0, r3
 8001594:	f000 f869 	bl	800166a <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8001598:	0003      	movs	r3, r0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
	        if(*success)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00d      	beq.n	80015c0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE19GetOldestDataPacketEPb+0x48>
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 80015a4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80015a6:	003b      	movs	r3, r7
 80015a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015aa:	0011      	movs	r1, r2
 80015ac:	0018      	movs	r0, r3
 80015ae:	f001 fc8e 	bl	8002ece <_ZN25MITSUBA_DRIVER_RX_FRAME_217arrayToDataPacketEPh>
 80015b2:	003b      	movs	r3, r7
 80015b4:	0020      	movs	r0, r4
 80015b6:	0019      	movs	r1, r3
 80015b8:	2313      	movs	r3, #19
 80015ba:	001a      	movs	r2, r3
 80015bc:	f007 fb78 	bl	8008cb0 <memcpy>
	    return returnData;
 80015c0:	46c0      	nop			; (mov r8, r8)
	}
 80015c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b00d      	add	sp, #52	; 0x34
 80015c8:	bd90      	pop	{r4, r7, pc}

080015ca <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI17PROTON1_MESSAGE_029PROTON1_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	CHILD_DATA GetOldestDataPacket(bool* success)
 80015ca:	b590      	push	{r4, r7, lr}
 80015cc:	b08b      	sub	sp, #44	; 0x2c
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	61f8      	str	r0, [r7, #28]
 80015d2:	61b9      	str	r1, [r7, #24]
 80015d4:	617a      	str	r2, [r7, #20]
	    if(success)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d019      	beq.n	8001610 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI17PROTON1_MESSAGE_029PROTON1_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x46>
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	3312      	adds	r3, #18
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 f840 	bl	800166a <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 80015ea:	0003      	movs	r3, r0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
	        if(*success)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00c      	beq.n	8001610 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI17PROTON1_MESSAGE_029PROTON1_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x46>
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 80015f6:	69fc      	ldr	r4, [r7, #28]
 80015f8:	003b      	movs	r3, r7
 80015fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fc:	0011      	movs	r1, r2
 80015fe:	0018      	movs	r0, r3
 8001600:	f001 fffc 	bl	80035fc <_ZN17PROTON1_MESSAGE_017arrayToDataPacketEPh>
 8001604:	003a      	movs	r2, r7
 8001606:	0023      	movs	r3, r4
 8001608:	ca13      	ldmia	r2!, {r0, r1, r4}
 800160a:	c313      	stmia	r3!, {r0, r1, r4}
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	601a      	str	r2, [r3, #0]
	    return returnData;
 8001610:	46c0      	nop			; (mov r8, r8)
	}
 8001612:	69f8      	ldr	r0, [r7, #28]
 8001614:	46bd      	mov	sp, r7
 8001616:	b00b      	add	sp, #44	; 0x2c
 8001618:	bd90      	pop	{r4, r7, pc}

0800161a <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI15ORION_MESSAGE_027ORION_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	CHILD_DATA GetOldestDataPacket(bool* success)
 800161a:	b590      	push	{r4, r7, lr}
 800161c:	b08b      	sub	sp, #44	; 0x2c
 800161e:	af00      	add	r7, sp, #0
 8001620:	61f8      	str	r0, [r7, #28]
 8001622:	61b9      	str	r1, [r7, #24]
 8001624:	617a      	str	r2, [r7, #20]
	    if(success)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d019      	beq.n	8001660 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI15ORION_MESSAGE_027ORION_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x46>
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	3312      	adds	r3, #18
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f000 f818 	bl	800166a <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 800163a:	0003      	movs	r3, r0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
	        if(*success)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00c      	beq.n	8001660 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI15ORION_MESSAGE_027ORION_MESSAGE_0_DATA_PACKETE19GetOldestDataPacketEPb+0x46>
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 8001646:	69fc      	ldr	r4, [r7, #28]
 8001648:	003b      	movs	r3, r7
 800164a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164c:	0011      	movs	r1, r2
 800164e:	0018      	movs	r0, r3
 8001650:	f001 feaa 	bl	80033a8 <_ZN15ORION_MESSAGE_017arrayToDataPacketEPh>
 8001654:	003a      	movs	r2, r7
 8001656:	0023      	movs	r3, r4
 8001658:	ca13      	ldmia	r2!, {r0, r1, r4}
 800165a:	c313      	stmia	r3!, {r0, r1, r4}
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	601a      	str	r2, [r3, #0]
	    return returnData;
 8001660:	46c0      	nop			; (mov r8, r8)
	}
 8001662:	69f8      	ldr	r0, [r7, #28]
 8001664:	46bd      	mov	sp, r7
 8001666:	b00b      	add	sp, #44	; 0x2c
 8001668:	bd90      	pop	{r4, r7, pc}

0800166a <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
            {
                emptyNotFull = false;
            }
        }
    }
    T* PopFront(bool* success)
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
    {
    	 uint16_t prevTailIndex = 0;
 8001674:	230e      	movs	r3, #14
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	2200      	movs	r2, #0
 800167a:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	8b5a      	ldrh	r2, [r3, #26]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	8b1b      	ldrh	r3, [r3, #24]
 8001684:	429a      	cmp	r2, r3
 8001686:	d10a      	bne.n	800169e <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7f1b      	ldrb	r3, [r3, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
        {
            //Fail to read since we are empty
            if(success)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d022      	beq.n	80016dc <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                *success = false;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
            if(success)
 800169c:	e01e      	b.n	80016dc <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            }
        }else
        {
            if(success)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
            {
                *success = true;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
            }
            prevTailIndex = tailIndex;
 80016aa:	230e      	movs	r3, #14
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	8b52      	ldrh	r2, [r2, #26]
 80016b2:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	8b5b      	ldrh	r3, [r3, #26]
 80016b8:	3301      	adds	r3, #1
 80016ba:	2103      	movs	r1, #3
 80016bc:	0018      	movs	r0, r3
 80016be:	f7fe fe93 	bl	80003e8 <__aeabi_idivmod>
 80016c2:	000b      	movs	r3, r1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	835a      	strh	r2, [r3, #26]
            //If tail caught up to head then we are empty
            if(tailIndex == headIndex)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	8b5a      	ldrh	r2, [r3, #26]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8b1b      	ldrh	r3, [r3, #24]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d102      	bne.n	80016dc <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            {
                emptyNotFull = true;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	771a      	strb	r2, [r3, #28]
            }
        }
        return fifoData[prevTailIndex];
 80016dc:	230e      	movs	r3, #14
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	18d3      	adds	r3, r2, r3
    }
 80016e8:	0018      	movs	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b004      	add	sp, #16
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_Z41__static_initialization_and_destruction_0ii>:
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d12a      	bne.n	8001756 <_Z41__static_initialization_and_destruction_0ii+0x66>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d126      	bne.n	8001756 <_Z41__static_initialization_and_destruction_0ii+0x66>
PROTON1_MESSAGE_0 mppt0(subsystem_info::MPPT0_MSG_ID);
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	00da      	lsls	r2, r3, #3
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800170e:	0011      	movs	r1, r2
 8001710:	0018      	movs	r0, r3
 8001712:	f001 ffd3 	bl	80036bc <_ZN17PROTON1_MESSAGE_0C1Et>
ORION_MESSAGE_0 bms0(subsystem_info::BMS0_MSG_ID);
 8001716:	23d6      	movs	r3, #214	; 0xd6
 8001718:	00da      	lsls	r2, r3, #3
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800171c:	0011      	movs	r1, r2
 800171e:	0018      	movs	r0, r3
 8001720:	f001 fea4 	bl	800346c <_ZN15ORION_MESSAGE_0C1Et>
MITSUBA_DRIVER_TX_RL_MESSAGE mcRequest(subsystem_info::MOTORTX_RL_MSG_ID);
 8001724:	4a11      	ldr	r2, [pc, #68]	; (800176c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001728:	0011      	movs	r1, r2
 800172a:	0018      	movs	r0, r3
 800172c:	f001 f872 	bl	8002814 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>
MITSUBA_DRIVER_RX_FRAME_0 motorRx0(subsystem_info::MOTORRX0_RL_MSG_ID);
 8001730:	4a10      	ldr	r2, [pc, #64]	; (8001774 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001734:	0011      	movs	r1, r2
 8001736:	0018      	movs	r0, r3
 8001738:	f001 f9f0 	bl	8002b1c <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>
MITSUBA_DRIVER_RX_FRAME_2 motorRx2(subsystem_info::MOTORRX2_RL_MSG_ID);
 800173c:	4a0f      	ldr	r2, [pc, #60]	; (800177c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001740:	0011      	movs	r1, r2
 8001742:	0018      	movs	r0, r3
 8001744:	f001 fc92 	bl	800306c <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em>
RF_PACKET msg0 { huart2.Instance };
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800174e:	0011      	movs	r1, r2
 8001750:	0018      	movs	r0, r3
 8001752:	f000 ff45 	bl	80025e0 <_ZN9RF_PACKETC1EP13USART_TypeDef>
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	0000ffff 	.word	0x0000ffff
 8001764:	200003fc 	.word	0x200003fc
 8001768:	20000448 	.word	0x20000448
 800176c:	08f89540 	.word	0x08f89540
 8001770:	20000494 	.word	0x20000494
 8001774:	08850225 	.word	0x08850225
 8001778:	200004d0 	.word	0x200004d0
 800177c:	08a50225 	.word	0x08a50225
 8001780:	2000051c 	.word	0x2000051c
 8001784:	20000364 	.word	0x20000364
 8001788:	20000568 	.word	0x20000568

0800178c <_GLOBAL__sub_I_huart1>:
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <_GLOBAL__sub_I_huart1+0x14>)
 8001792:	0019      	movs	r1, r3
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff ffab 	bl	80016f0 <_Z41__static_initialization_and_destruction_0ii>
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	0000ffff 	.word	0x0000ffff

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_MspInit+0x50>)
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_MspInit+0x50>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	619a      	str	r2, [r3, #24]
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x50>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x50>)
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_MspInit+0x50>)
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	0549      	lsls	r1, r1, #21
 80017cc:	430a      	orrs	r2, r1
 80017ce:	61da      	str	r2, [r3, #28]
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_MspInit+0x50>)
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	055b      	lsls	r3, r3, #21
 80017d8:	4013      	ands	r3, r2
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80017de:	2302      	movs	r3, #2
 80017e0:	425b      	negs	r3, r3
 80017e2:	2200      	movs	r2, #0
 80017e4:	2103      	movs	r1, #3
 80017e6:	0018      	movs	r0, r3
 80017e8:	f002 ffbe 	bl	8004768 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	231c      	movs	r3, #28
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	0018      	movs	r0, r3
 8001806:	2314      	movs	r3, #20
 8001808:	001a      	movs	r2, r3
 800180a:	2100      	movs	r1, #0
 800180c:	f007 fa59 	bl	8008cc2 <memset>
  if(huart->Instance==USART1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a3d      	ldr	r2, [pc, #244]	; (800190c <HAL_UART_MspInit+0x114>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d13c      	bne.n	8001894 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <HAL_UART_MspInit+0x118>)
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <HAL_UART_MspInit+0x118>)
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	01c9      	lsls	r1, r1, #7
 8001824:	430a      	orrs	r2, r1
 8001826:	619a      	str	r2, [r3, #24]
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_UART_MspInit+0x118>)
 800182a:	699a      	ldr	r2, [r3, #24]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	01db      	lsls	r3, r3, #7
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_UART_MspInit+0x118>)
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_UART_MspInit+0x118>)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	0289      	lsls	r1, r1, #10
 8001840:	430a      	orrs	r2, r1
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_UART_MspInit+0x118>)
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	029b      	lsls	r3, r3, #10
 800184c:	4013      	ands	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001852:	211c      	movs	r1, #28
 8001854:	187b      	adds	r3, r7, r1
 8001856:	22c0      	movs	r2, #192	; 0xc0
 8001858:	00d2      	lsls	r2, r2, #3
 800185a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	187b      	adds	r3, r7, r1
 800185e:	2202      	movs	r2, #2
 8001860:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	187b      	adds	r3, r7, r1
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001868:	187b      	adds	r3, r7, r1
 800186a:	2203      	movs	r2, #3
 800186c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2201      	movs	r2, #1
 8001872:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	187a      	adds	r2, r7, r1
 8001876:	2390      	movs	r3, #144	; 0x90
 8001878:	05db      	lsls	r3, r3, #23
 800187a:	0011      	movs	r1, r2
 800187c:	0018      	movs	r0, r3
 800187e:	f002 ffdf 	bl	8004840 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2103      	movs	r1, #3
 8001886:	201b      	movs	r0, #27
 8001888:	f002 ff6e 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800188c:	201b      	movs	r0, #27
 800188e:	f002 ff80 	bl	8004792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001892:	e037      	b.n	8001904 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_UART_MspInit+0x11c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d132      	bne.n	8001904 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_UART_MspInit+0x118>)
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_UART_MspInit+0x118>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	0289      	lsls	r1, r1, #10
 80018a8:	430a      	orrs	r2, r1
 80018aa:	61da      	str	r2, [r3, #28]
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_UART_MspInit+0x118>)
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	029b      	lsls	r3, r3, #10
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0x118>)
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_UART_MspInit+0x118>)
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0289      	lsls	r1, r1, #10
 80018c4:	430a      	orrs	r2, r1
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_UART_MspInit+0x118>)
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	029b      	lsls	r3, r3, #10
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018d6:	211c      	movs	r1, #28
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2202      	movs	r2, #2
 80018e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2201      	movs	r2, #1
 80018f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	187a      	adds	r2, r7, r1
 80018f8:	2390      	movs	r3, #144	; 0x90
 80018fa:	05db      	lsls	r3, r3, #23
 80018fc:	0011      	movs	r1, r2
 80018fe:	0018      	movs	r0, r3
 8001900:	f002 ff9e 	bl	8004840 <HAL_GPIO_Init>
}
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	46bd      	mov	sp, r7
 8001908:	b00c      	add	sp, #48	; 0x30
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40013800 	.word	0x40013800
 8001910:	40021000 	.word	0x40021000
 8001914:	40004400 	.word	0x40004400

08001918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	0019      	movs	r1, r3
 800192e:	200d      	movs	r0, #13
 8001930:	f002 ff1a 	bl	8004768 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 8001934:	200d      	movs	r0, #13
 8001936:	f002 ff2c 	bl	8004792 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_InitTick+0xa8>)
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_InitTick+0xa8>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0109      	lsls	r1, r1, #4
 8001944:	430a      	orrs	r2, r1
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_InitTick+0xa8>)
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001956:	230c      	movs	r3, #12
 8001958:	18fa      	adds	r2, r7, r3
 800195a:	2310      	movs	r3, #16
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	0011      	movs	r1, r2
 8001960:	0018      	movs	r0, r3
 8001962:	f004 fbcf 	bl	8006104 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001966:	f004 fbb7 	bl	80060d8 <HAL_RCC_GetPCLK1Freq>
 800196a:	0003      	movs	r3, r0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	4914      	ldr	r1, [pc, #80]	; (80019c4 <HAL_InitTick+0xac>)
 8001972:	0018      	movs	r0, r3
 8001974:	f7fe fbc8 	bl	8000108 <__udivsi3>
 8001978:	0003      	movs	r3, r0
 800197a:	3b01      	subs	r3, #1
 800197c:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0xb0>)
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <HAL_InitTick+0xb4>)
 8001982:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_InitTick+0xb0>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <HAL_InitTick+0xb8>)
 8001988:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_InitTick+0xb0>)
 800198c:	6a3a      	ldr	r2, [r7, #32]
 800198e:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_InitTick+0xb0>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_InitTick+0xb0>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_InitTick+0xb0>)
 800199e:	0018      	movs	r0, r3
 80019a0:	f004 fcda 	bl	8006358 <HAL_TIM_Base_Init>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d105      	bne.n	80019b4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_InitTick+0xb0>)
 80019aa:	0018      	movs	r0, r3
 80019ac:	f004 fd08 	bl	80063c0 <HAL_TIM_Base_Start_IT>
 80019b0:	0003      	movs	r3, r0
 80019b2:	e000      	b.n	80019b6 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b00a      	add	sp, #40	; 0x28
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	40021000 	.word	0x40021000
 80019c4:	000f4240 	.word	0x000f4240
 80019c8:	200019b0 	.word	0x200019b0
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	000003e7 	.word	0x000003e7

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f004 fd0a 	bl	8006404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	200019b0 	.word	0x200019b0

080019fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <USART1_IRQHandler+0x14>)
 8001a02:	0018      	movs	r0, r3
 8001a04:	f004 ff18 	bl	8006838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	200002e4 	.word	0x200002e4

08001a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	return 1;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_kill>:

int _kill(int pid, int sig)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a2a:	f007 f917 	bl	8008c5c <__errno>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	2216      	movs	r2, #22
 8001a32:	601a      	str	r2, [r3, #0]
	return -1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	425b      	negs	r3, r3
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_exit>:

void _exit (int status)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a48:	2301      	movs	r3, #1
 8001a4a:	425a      	negs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0011      	movs	r1, r2
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff ffe5 	bl	8001a20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a56:	e7fe      	b.n	8001a56 <_exit+0x16>

08001a58 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <SystemInit+0x70>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <SystemInit+0x70>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <SystemInit+0x70>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <SystemInit+0x70>)
 8001a6e:	4917      	ldr	r1, [pc, #92]	; (8001acc <SystemInit+0x74>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <SystemInit+0x70>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <SystemInit+0x70>)
 8001a7a:	4915      	ldr	r1, [pc, #84]	; (8001ad0 <SystemInit+0x78>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <SystemInit+0x70>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <SystemInit+0x70>)
 8001a86:	4913      	ldr	r1, [pc, #76]	; (8001ad4 <SystemInit+0x7c>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <SystemInit+0x70>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <SystemInit+0x70>)
 8001a92:	4911      	ldr	r1, [pc, #68]	; (8001ad8 <SystemInit+0x80>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <SystemInit+0x70>)
 8001a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <SystemInit+0x70>)
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <SystemInit+0x70>)
 8001aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <SystemInit+0x70>)
 8001aaa:	490c      	ldr	r1, [pc, #48]	; (8001adc <SystemInit+0x84>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SystemInit+0x70>)
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SystemInit+0x70>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <SystemInit+0x70>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]

}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08ffb80c 	.word	0x08ffb80c
 8001ad0:	fef6ffff 	.word	0xfef6ffff
 8001ad4:	fffbffff 	.word	0xfffbffff
 8001ad8:	ffc0ffff 	.word	0xffc0ffff
 8001adc:	fffcfe2c 	.word	0xfffcfe2c

08001ae0 <_Z8GPS_initP13USART_TypeDef>:

//Private Function Definitions

//Public Function Definitions
void GPS_init(USART_TypeDef* uart_instance)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b090      	sub	sp, #64	; 0x40
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	uartInstance = uart_instance;
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <_Z8GPS_initP13USART_TypeDef+0x7c>)
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	601a      	str	r2, [r3, #0]
	//GPRMC only
	const char options[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n";
 8001aee:	2308      	movs	r3, #8
 8001af0:	18fa      	adds	r2, r7, r3
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <_Z8GPS_initP13USART_TypeDef+0x80>)
 8001af4:	0010      	movs	r0, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	2334      	movs	r3, #52	; 0x34
 8001afa:	001a      	movs	r2, r3
 8001afc:	f007 f8d8 	bl	8008cb0 <memcpy>
	for(uint16_t i = 0; i < sizeof(options); i++)
 8001b00:	233e      	movs	r3, #62	; 0x3e
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	2200      	movs	r2, #0
 8001b06:	801a      	strh	r2, [r3, #0]
 8001b08:	233e      	movs	r3, #62	; 0x3e
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	2b33      	cmp	r3, #51	; 0x33
 8001b10:	d81a      	bhi.n	8001b48 <_Z8GPS_initP13USART_TypeDef+0x68>
	{
		while(!(uartInstance->ISR & USART_ISR_TXE));
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <_Z8GPS_initP13USART_TypeDef+0x7c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	425a      	negs	r2, r3
 8001b1e:	4153      	adcs	r3, r2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d000      	beq.n	8001b28 <_Z8GPS_initP13USART_TypeDef+0x48>
 8001b26:	e7f4      	b.n	8001b12 <_Z8GPS_initP13USART_TypeDef+0x32>
		uartInstance->TDR = options[i];
 8001b28:	213e      	movs	r1, #62	; 0x3e
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	2208      	movs	r2, #8
 8001b30:	18ba      	adds	r2, r7, r2
 8001b32:	5cd2      	ldrb	r2, [r2, r3]
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <_Z8GPS_initP13USART_TypeDef+0x7c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	b292      	uxth	r2, r2
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
	for(uint16_t i = 0; i < sizeof(options); i++)
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	881a      	ldrh	r2, [r3, #0]
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	3201      	adds	r2, #1
 8001b44:	801a      	strh	r2, [r3, #0]
 8001b46:	e7df      	b.n	8001b08 <_Z8GPS_initP13USART_TypeDef+0x28>
	}
	memset(rxMessage,0, RX_MESSAGE_MAX_SIZE);
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <_Z8GPS_initP13USART_TypeDef+0x84>)
 8001b4a:	2264      	movs	r2, #100	; 0x64
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f007 f8b7 	bl	8008cc2 <memset>
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b010      	add	sp, #64	; 0x40
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000638 	.word	0x20000638
 8001b60:	08008e4c 	.word	0x08008e4c
 8001b64:	2000071c 	.word	0x2000071c

08001b68 <_Z18GPS_startReceptionv>:

void GPS_startReception(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	//Enable interrupts
	uartInstance->CR1 |= USART_CR1_RXNEIE;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <_Z18GPS_startReceptionv+0x1c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <_Z18GPS_startReceptionv+0x1c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2120      	movs	r1, #32
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	20000638 	.word	0x20000638

08001b88 <_Z19GPS_isDataAvailablev>:

bool GPS_isDataAvailable(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	return !dataFIFO.IsEmpty();
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <_Z19GPS_isDataAvailablev+0x1c>)
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 f839 	bl	8001c06 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE7IsEmptyEv>
 8001b94:	0003      	movs	r3, r0
 8001b96:	001a      	movs	r2, r3
 8001b98:	2301      	movs	r3, #1
 8001b9a:	4053      	eors	r3, r2
 8001b9c:	b2db      	uxtb	r3, r3
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	2000063c 	.word	0x2000063c

08001ba8 <_Z17GPS_getLatestDatav>:

GPS_Data_t GPS_getLatestData(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	bool success;
	return *dataFIFO.PopFront(&success);
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	18fa      	adds	r2, r7, r3
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_Z17GPS_getLatestDatav+0x30>)
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f000 f83c 	bl	8001c36 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PopFrontEPb>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	0011      	movs	r1, r2
 8001bc6:	232b      	movs	r3, #43	; 0x2b
 8001bc8:	001a      	movs	r2, r3
 8001bca:	f007 f871 	bl	8008cb0 <memcpy>
}
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b004      	add	sp, #16
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	2000063c 	.word	0x2000063c

08001bdc <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EEC1Ev>:
    HELPER_FIFO():
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	22d8      	movs	r2, #216	; 0xd8
 8001be8:	2100      	movs	r1, #0
 8001bea:	5299      	strh	r1, [r3, r2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	22da      	movs	r2, #218	; 0xda
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5299      	strh	r1, [r3, r2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	22dc      	movs	r2, #220	; 0xdc
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	5499      	strb	r1, [r3, r2]
    {}
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE7IsEmptyEv>:
    bool IsEmpty()
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
        return (headIndex == tailIndex ? emptyNotFull : false);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	22d8      	movs	r2, #216	; 0xd8
 8001c12:	5a9a      	ldrh	r2, [r3, r2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	21da      	movs	r1, #218	; 0xda
 8001c18:	5a5b      	ldrh	r3, [r3, r1]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d106      	bne.n	8001c2c <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE7IsEmptyEv+0x26>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	22dc      	movs	r2, #220	; 0xdc
 8001c22:	5c9b      	ldrb	r3, [r3, r2]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE7IsEmptyEv+0x26>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE7IsEmptyEv+0x28>
 8001c2c:	2300      	movs	r3, #0
    }
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b002      	add	sp, #8
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PopFrontEPb>:
    T* PopFront(bool* success)
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
    	 uint16_t prevTailIndex = 0;
 8001c40:	230e      	movs	r3, #14
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2200      	movs	r2, #0
 8001c46:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	22da      	movs	r2, #218	; 0xda
 8001c4c:	5a9a      	ldrh	r2, [r3, r2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	21d8      	movs	r1, #216	; 0xd8
 8001c52:	5a5b      	ldrh	r3, [r3, r1]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d10b      	bne.n	8001c70 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PopFrontEPb+0x3a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	22dc      	movs	r2, #220	; 0xdc
 8001c5c:	5c9b      	ldrb	r3, [r3, r2]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PopFrontEPb+0x3a>
            if(success)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d028      	beq.n	8001cba <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PopFrontEPb+0x84>
                *success = false;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
            if(success)
 8001c6e:	e024      	b.n	8001cba <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PopFrontEPb+0x84>
            if(success)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PopFrontEPb+0x46>
                *success = true;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
            prevTailIndex = tailIndex;
 8001c7c:	230e      	movs	r3, #14
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	21da      	movs	r1, #218	; 0xda
 8001c84:	5a52      	ldrh	r2, [r2, r1]
 8001c86:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	22da      	movs	r2, #218	; 0xda
 8001c8c:	5a9b      	ldrh	r3, [r3, r2]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	2105      	movs	r1, #5
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7fe fba8 	bl	80003e8 <__aeabi_idivmod>
 8001c98:	000b      	movs	r3, r1
 8001c9a:	b299      	uxth	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	22da      	movs	r2, #218	; 0xda
 8001ca0:	5299      	strh	r1, [r3, r2]
            if(tailIndex == headIndex)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	22da      	movs	r2, #218	; 0xda
 8001ca6:	5a9a      	ldrh	r2, [r3, r2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	21d8      	movs	r1, #216	; 0xd8
 8001cac:	5a5b      	ldrh	r3, [r3, r1]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d103      	bne.n	8001cba <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PopFrontEPb+0x84>
                emptyNotFull = true;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	22dc      	movs	r2, #220	; 0xdc
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
        return fifoData[prevTailIndex];
 8001cba:	230e      	movs	r3, #14
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	222b      	movs	r2, #43	; 0x2b
 8001cc2:	4353      	muls	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	18d3      	adds	r3, r2, r3
    }
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b004      	add	sp, #16
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_Z41__static_initialization_and_destruction_0ii>:
	uint8_t trueCourseDigits = 0;
	trueCourseDigits = strcspn(p, ",");
	strncpy(output->trueCourse, p, trueCourseDigits); //Copy to true course
	output->trueCourse[trueCourseDigits] = '\0';
	return 1;
}
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d103      	bne.n	8001cf0 <_Z41__static_initialization_and_destruction_0ii+0x20>
static HELPER_FIFO<GPS_Data_t,FIFO_DEPTH,1> dataFIFO;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff ff76 	bl	8001bdc <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EEC1Ev>
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	0000ffff 	.word	0x0000ffff
 8001cfc:	2000063c 	.word	0x2000063c

08001d00 <_GLOBAL__sub_I__Z8GPS_initP13USART_TypeDef>:
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <_GLOBAL__sub_I__Z8GPS_initP13USART_TypeDef+0x14>)
 8001d06:	0019      	movs	r1, r3
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7ff ffe1 	bl	8001cd0 <_Z41__static_initialization_and_destruction_0ii>
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	0000ffff 	.word	0x0000ffff

08001d18 <_Z10bno055Initv>:
 */
static void MX_I2C1_Init(void);


void bno055Init()
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 8001d1c:	f000 f908 	bl	8001f30 <_ZL12MX_I2C1_Initv>
    //configure sensors
    bno055SendReg(OPR_MODE, IMU);
 8001d20:	2109      	movs	r1, #9
 8001d22:	203d      	movs	r0, #61	; 0x3d
 8001d24:	f000 f88a 	bl	8001e3c <_ZL13bno055SendReghh>
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_Z15bno055GetPacketv>:

IMU_DATA_t bno055GetPacket()
{
 8001d2e:	b5b0      	push	{r4, r5, r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
	IMU_DATA_t data;
	data.accel = bno055ReadAccel();
 8001d36:	68fc      	ldr	r4, [r7, #12]
 8001d38:	003b      	movs	r3, r7
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 f82c 	bl	8001d98 <_Z15bno055ReadAccelv>
 8001d40:	003b      	movs	r3, r7
 8001d42:	0020      	movs	r0, r4
 8001d44:	0019      	movs	r1, r3
 8001d46:	2306      	movs	r3, #6
 8001d48:	001a      	movs	r2, r3
 8001d4a:	f006 ffb1 	bl	8008cb0 <memcpy>
	data.gyro = bno055ReadMag();
 8001d4e:	68fc      	ldr	r4, [r7, #12]
 8001d50:	2506      	movs	r5, #6
 8001d52:	003b      	movs	r3, r7
 8001d54:	0018      	movs	r0, r3
 8001d56:	f000 f82c 	bl	8001db2 <_Z13bno055ReadMagv>
 8001d5a:	003a      	movs	r2, r7
 8001d5c:	1963      	adds	r3, r4, r5
 8001d5e:	0011      	movs	r1, r2
 8001d60:	2206      	movs	r2, #6
 8001d62:	0018      	movs	r0, r3
 8001d64:	f006 ffa4 	bl	8008cb0 <memcpy>
	data.linear = bno055ReadLinAccel();
 8001d68:	68fc      	ldr	r4, [r7, #12]
 8001d6a:	003b      	movs	r3, r7
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f000 f82d 	bl	8001dcc <_Z18bno055ReadLinAccelv>
 8001d72:	003a      	movs	r2, r7
 8001d74:	0023      	movs	r3, r4
 8001d76:	330c      	adds	r3, #12
 8001d78:	0011      	movs	r1, r2
 8001d7a:	2206      	movs	r2, #6
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f006 ff97 	bl	8008cb0 <memcpy>
	data.temp = bno055ReadTemp();
 8001d82:	f000 f830 	bl	8001de6 <_Z14bno055ReadTempv>
 8001d86:	0003      	movs	r3, r0
 8001d88:	001a      	movs	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	749a      	strb	r2, [r3, #18]
	return data;
 8001d8e:	46c0      	nop			; (mov r8, r8)
}
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b004      	add	sp, #16
 8001d96:	bdb0      	pop	{r4, r5, r7, pc}

08001d98 <_Z15bno055ReadAccelv>:

struct bno055_3axis bno055ReadAccel()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    return bno055Read3Axis(ACC_DATA_X_LSB);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2108      	movs	r1, #8
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 f897 	bl	8001ed8 <_ZL15bno055Read3Axish>
}
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_Z13bno055ReadMagv>:
struct bno055_3axis bno055ReadGyro()
{
    return bno055Read3Axis(GYR_DATA_X_LSB);
}
struct bno055_3axis bno055ReadMag()
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
    return bno055Read3Axis(MAG_DATA_X_LSB);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	210e      	movs	r1, #14
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 f88a 	bl	8001ed8 <_ZL15bno055Read3Axish>
}
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_Z18bno055ReadLinAccelv>:
    quat.y = bno055ReadData(QUA_DATA_Y_LSB);
    quat.z = bno055ReadData(QUA_DATA_Z_LSB);
    return quat;
}
struct bno055_3axis bno055ReadLinAccel()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    return bno055Read3Axis(LIA_DATA_X_LSB);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2128      	movs	r1, #40	; 0x28
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 f87d 	bl	8001ed8 <_ZL15bno055Read3Axish>
}
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b002      	add	sp, #8
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_Z14bno055ReadTempv>:
struct bno055_3axis bno055ReadGrav()
{
    return bno055Read3Axis(GRV_DATA_X_LSB);
}
uint8_t bno055ReadTemp()
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
    return bno055ReadReg(TEMP);
 8001dea:	2034      	movs	r0, #52	; 0x34
 8001dec:	f000 f804 	bl	8001df8 <_ZL13bno055ReadRegh>
 8001df0:	0003      	movs	r3, r0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_ZL13bno055ReadRegh>:

static uint8_t bno055ReadReg(uint8_t reg)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af04      	add	r7, sp, #16
 8001dfe:	0002      	movs	r2, r0
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[1] = { 0x00 };
 8001e04:	210c      	movs	r1, #12
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDRESS<<1, reg, 1, buffer, 1, 100);
 8001e0c:	1dfb      	adds	r3, r7, #7
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <_ZL13bno055ReadRegh+0x40>)
 8001e14:	2364      	movs	r3, #100	; 0x64
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	000c      	movs	r4, r1
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2301      	movs	r3, #1
 8001e24:	2150      	movs	r1, #80	; 0x50
 8001e26:	f003 f865 	bl	8004ef4 <HAL_I2C_Mem_Read>
    return buffer[0];
 8001e2a:	0021      	movs	r1, r4
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b005      	add	sp, #20
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	20000780 	.word	0x20000780

08001e3c <_ZL13bno055SendReghh>:

static void bno055SendReg(uint8_t reg, uint8_t data)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af04      	add	r7, sp, #16
 8001e42:	0002      	movs	r2, r0
 8001e44:	1dfb      	adds	r3, r7, #7
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	1dbb      	adds	r3, r7, #6
 8001e4a:	1c0a      	adds	r2, r1, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[1] = { data };
 8001e4e:	210c      	movs	r1, #12
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	1dba      	adds	r2, r7, #6
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDRESS<<1, reg, 1, buffer, 1, 100);
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4807      	ldr	r0, [pc, #28]	; (8001e7c <_ZL13bno055SendReghh+0x40>)
 8001e60:	2364      	movs	r3, #100	; 0x64
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	2301      	movs	r3, #1
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	2150      	movs	r1, #80	; 0x50
 8001e70:	f002 ff12 	bl	8004c98 <HAL_I2C_Mem_Write>
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000780 	.word	0x20000780

08001e80 <_ZL14bno055ReadDatah>:

static int16_t bno055ReadData(uint8_t lsbReg)
{
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	0002      	movs	r2, r0
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
    uint8_t msbReg = lsbReg + 1; //Little endian
 8001e8c:	250f      	movs	r5, #15
 8001e8e:	197b      	adds	r3, r7, r5
 8001e90:	1dfa      	adds	r2, r7, #7
 8001e92:	7812      	ldrb	r2, [r2, #0]
 8001e94:	3201      	adds	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]

    uint8_t lsbData = bno055ReadReg(lsbReg);
 8001e98:	260e      	movs	r6, #14
 8001e9a:	19bc      	adds	r4, r7, r6
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff ffa9 	bl	8001df8 <_ZL13bno055ReadRegh>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	7023      	strb	r3, [r4, #0]
    uint8_t msbData = bno055ReadReg(msbReg);
 8001eaa:	230d      	movs	r3, #13
 8001eac:	18fc      	adds	r4, r7, r3
 8001eae:	197b      	adds	r3, r7, r5
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7ff ffa0 	bl	8001df8 <_ZL13bno055ReadRegh>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	7023      	strb	r3, [r4, #0]


    return (msbData << 8) | lsbData;
 8001ebc:	230d      	movs	r3, #13
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	19bb      	adds	r3, r7, r6
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	b21b      	sxth	r3, r3
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b005      	add	sp, #20
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed8 <_ZL15bno055Read3Axish>:

static struct bno055_3axis bno055Read3Axis(uint8_t reg)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	000a      	movs	r2, r1
 8001ee2:	1cfb      	adds	r3, r7, #3
 8001ee4:	701a      	strb	r2, [r3, #0]
    struct bno055_3axis data;
    data.x = bno055ReadData(reg);
 8001ee6:	1cfb      	adds	r3, r7, #3
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff ffc8 	bl	8001e80 <_ZL14bno055ReadDatah>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	801a      	strh	r2, [r3, #0]
    data.y = bno055ReadData(reg+2);
 8001ef8:	1cfb      	adds	r3, r7, #3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	3302      	adds	r3, #2
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff ffbd 	bl	8001e80 <_ZL14bno055ReadDatah>
 8001f06:	0003      	movs	r3, r0
 8001f08:	001a      	movs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	805a      	strh	r2, [r3, #2]
    data.z = bno055ReadData(reg+4);
 8001f0e:	1cfb      	adds	r3, r7, #3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	3304      	adds	r3, #4
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7ff ffb2 	bl	8001e80 <_ZL14bno055ReadDatah>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	001a      	movs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	809a      	strh	r2, [r3, #4]
    return data;
 8001f24:	46c0      	nop			; (mov r8, r8)
}
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <_ZL12MX_I2C1_Initv>:

static void MX_I2C1_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f36:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <_ZL12MX_I2C1_Initv+0x90>)
 8001f38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f3c:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <_ZL12MX_I2C1_Initv+0x94>)
 8001f3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f002 fdfd 	bl	8004b6c <HAL_I2C_Init>
 8001f72:	0003      	movs	r3, r0
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	4193      	sbcs	r3, r2
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 8001f7e:	f7ff facd 	bl	800151c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f84:	2100      	movs	r1, #0
 8001f86:	0018      	movs	r0, r3
 8001f88:	f003 fb26 	bl	80055d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	1e5a      	subs	r2, r3, #1
 8001f90:	4193      	sbcs	r3, r2
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 8001f98:	f7ff fac0 	bl	800151c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_ZL12MX_I2C1_Initv+0x8c>)
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f003 fb65 	bl	8005670 <HAL_I2CEx_ConfigDigitalFilter>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	4193      	sbcs	r3, r2
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 8001fb2:	f7ff fab3 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000780 	.word	0x20000780
 8001fc0:	40005400 	.word	0x40005400
 8001fc4:	2000090e 	.word	0x2000090e

08001fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	2314      	movs	r3, #20
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	2314      	movs	r3, #20
 8001fd8:	001a      	movs	r2, r3
 8001fda:	2100      	movs	r1, #0
 8001fdc:	f006 fe71 	bl	8008cc2 <memset>
  if(hi2c->Instance==I2C1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_I2C_MspInit+0x90>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d131      	bne.n	800204e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_I2C_MspInit+0x94>)
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_I2C_MspInit+0x94>)
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	02c9      	lsls	r1, r1, #11
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	615a      	str	r2, [r3, #20]
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_I2C_MspInit+0x94>)
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	02db      	lsls	r3, r3, #11
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
	/**I2C1 GPIO Configuration
	PB6     ------> I2C1_SCL
	PB7     ------> I2C1_SDA
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002006:	2114      	movs	r1, #20
 8002008:	187b      	adds	r3, r7, r1
 800200a:	22c0      	movs	r2, #192	; 0xc0
 800200c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200e:	187b      	adds	r3, r7, r1
 8002010:	2212      	movs	r2, #18
 8002012:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002014:	187b      	adds	r3, r7, r1
 8002016:	2201      	movs	r2, #1
 8002018:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201a:	187b      	adds	r3, r7, r1
 800201c:	2203      	movs	r2, #3
 800201e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002020:	187b      	adds	r3, r7, r1
 8002022:	2201      	movs	r2, #1
 8002024:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	187b      	adds	r3, r7, r1
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_I2C_MspInit+0x98>)
 800202a:	0019      	movs	r1, r3
 800202c:	0010      	movs	r0, r2
 800202e:	f002 fc07 	bl	8004840 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_I2C_MspInit+0x94>)
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_I2C_MspInit+0x94>)
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	0389      	lsls	r1, r1, #14
 800203c:	430a      	orrs	r2, r1
 800203e:	61da      	str	r2, [r3, #28]
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_I2C_MspInit+0x94>)
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	039b      	lsls	r3, r3, #14
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b00a      	add	sp, #40	; 0x28
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	40005400 	.word	0x40005400
 800205c:	40021000 	.word	0x40021000
 8002060:	48000400 	.word	0x48000400

08002064 <_ZN18RF_DATA_LINK_LAYER15handleByteStuffEhtt>:

//Public Function Prototypes

//Private Function Definitions
inline void RF_DATA_LINK_LAYER::handleByteStuff(uint8_t data, uint16_t index, uint16_t message_length)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	000c      	movs	r4, r1
 800206e:	0010      	movs	r0, r2
 8002070:	0019      	movs	r1, r3
 8002072:	230b      	movs	r3, #11
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	1c22      	adds	r2, r4, #0
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	2408      	movs	r4, #8
 800207c:	193b      	adds	r3, r7, r4
 800207e:	1c02      	adds	r2, r0, #0
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	1dbb      	adds	r3, r7, #6
 8002084:	1c0a      	adds	r2, r1, #0
 8002086:	801a      	strh	r2, [r3, #0]
	if(index != 0 && index != (message_length - 1))
 8002088:	193b      	adds	r3, r7, r4
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <_ZN18RF_DATA_LINK_LAYER15handleByteStuffEhtt+0x64>
 8002090:	2308      	movs	r3, #8
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	1dbb      	adds	r3, r7, #6
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	3b01      	subs	r3, #1
 800209c:	429a      	cmp	r2, r3
 800209e:	d013      	beq.n	80020c8 <_ZN18RF_DATA_LINK_LAYER15handleByteStuffEhtt+0x64>
	{
		if(data == RF_DATA_LINK_LAYER::START_CHAR || data == RF_DATA_LINK_LAYER::END_CHAR || data == RF_DATA_LINK_LAYER::ESC_CHAR)
 80020a0:	230b      	movs	r3, #11
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d009      	beq.n	80020be <_ZN18RF_DATA_LINK_LAYER15handleByteStuffEhtt+0x5a>
 80020aa:	230b      	movs	r3, #11
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b3f      	cmp	r3, #63	; 0x3f
 80020b2:	d004      	beq.n	80020be <_ZN18RF_DATA_LINK_LAYER15handleByteStuffEhtt+0x5a>
 80020b4:	230b      	movs	r3, #11
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b2f      	cmp	r3, #47	; 0x2f
 80020bc:	d104      	bne.n	80020c8 <_ZN18RF_DATA_LINK_LAYER15handleByteStuffEhtt+0x64>
		{
			sendData(RF_DATA_LINK_LAYER::ESC_CHAR);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212f      	movs	r1, #47	; 0x2f
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 f804 	bl	80020d0 <_ZN18RF_DATA_LINK_LAYER8sendDataEh>
		}
	}
}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b005      	add	sp, #20
 80020ce:	bd90      	pop	{r4, r7, pc}

080020d0 <_ZN18RF_DATA_LINK_LAYER8sendDataEh>:

inline void RF_DATA_LINK_LAYER::sendData(uint8_t data)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	000a      	movs	r2, r1
 80020da:	1cfb      	adds	r3, r7, #3
 80020dc:	701a      	strb	r2, [r3, #0]
	while(!(this->uartInstance->ISR & USART_ISR_TXE));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	4013      	ands	r3, r2
 80020e8:	425a      	negs	r2, r3
 80020ea:	4153      	adcs	r3, r2
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d000      	beq.n	80020f4 <_ZN18RF_DATA_LINK_LAYER8sendDataEh+0x24>
 80020f2:	e7f4      	b.n	80020de <_ZN18RF_DATA_LINK_LAYER8sendDataEh+0xe>
	this->uartInstance->TDR = data;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	1cfa      	adds	r2, r7, #3
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	b292      	uxth	r2, r2
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <_ZN18RF_DATA_LINK_LAYERC1EP13USART_TypeDef>:
//Public Function Definitions
RF_DATA_LINK_LAYER::RF_DATA_LINK_LAYER(USART_TypeDef* uart_instance):
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
uartInstance{uart_instance}
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	601a      	str	r2, [r3, #0]
{}
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <_ZN18RF_DATA_LINK_LAYER11sendMessageEPht>:

void RF_DATA_LINK_LAYER::sendMessage(uint8_t* data, uint16_t data_length)
{
 8002122:	b5b0      	push	{r4, r5, r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	1dbb      	adds	r3, r7, #6
 800212e:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < data_length; i++)
 8002130:	2316      	movs	r3, #22
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2200      	movs	r2, #0
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	2316      	movs	r3, #22
 800213a:	18fa      	adds	r2, r7, r3
 800213c:	1dbb      	adds	r3, r7, #6
 800213e:	8812      	ldrh	r2, [r2, #0]
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d221      	bcs.n	800218a <_ZN18RF_DATA_LINK_LAYER11sendMessageEPht+0x68>
	{
		handleByteStuff(data[i], i, data_length);
 8002146:	2016      	movs	r0, #22
 8002148:	183b      	adds	r3, r7, r0
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	18d3      	adds	r3, r2, r3
 8002150:	7819      	ldrb	r1, [r3, #0]
 8002152:	1dbb      	adds	r3, r7, #6
 8002154:	881c      	ldrh	r4, [r3, #0]
 8002156:	0005      	movs	r5, r0
 8002158:	183b      	adds	r3, r7, r0
 800215a:	881a      	ldrh	r2, [r3, #0]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	0023      	movs	r3, r4
 8002160:	f7ff ff80 	bl	8002064 <_ZN18RF_DATA_LINK_LAYER15handleByteStuffEhtt>
		sendData(data[i]);
 8002164:	0028      	movs	r0, r5
 8002166:	0004      	movs	r4, r0
 8002168:	183b      	adds	r3, r7, r0
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	18d3      	adds	r3, r2, r3
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0011      	movs	r1, r2
 8002176:	0018      	movs	r0, r3
 8002178:	f7ff ffaa 	bl	80020d0 <_ZN18RF_DATA_LINK_LAYER8sendDataEh>
	for(uint16_t i = 0; i < data_length; i++)
 800217c:	0020      	movs	r0, r4
 800217e:	183b      	adds	r3, r7, r0
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	183b      	adds	r3, r7, r0
 8002184:	3201      	adds	r2, #1
 8002186:	801a      	strh	r2, [r3, #0]
 8002188:	e7d6      	b.n	8002138 <_ZN18RF_DATA_LINK_LAYER11sendMessageEPht+0x16>
	}
}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b006      	add	sp, #24
 8002190:	bdb0      	pop	{r4, r5, r7, pc}

08002192 <_ZN9IMU_TO_RF10AddMessageEP9RF_PACKEThP10IMU_DATA_t>:
//Public Function Definitions
namespace IMU_TO_RF
{
	#define PACKET_SIZE 20
	bool AddMessage(RF_PACKET* tx_packet, uint8_t rf_id, IMU_DATA_t* tx_msg)
	{
 8002192:	b590      	push	{r4, r7, lr}
 8002194:	b093      	sub	sp, #76	; 0x4c
 8002196:	af02      	add	r7, sp, #8
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	230b      	movs	r3, #11
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	1c0a      	adds	r2, r1, #0
 80021a2:	701a      	strb	r2, [r3, #0]
		bool success = false;
 80021a4:	233f      	movs	r3, #63	; 0x3f
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
		if(tx_packet != nullptr && tx_msg != nullptr)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04c      	beq.n	800224c <_ZN9IMU_TO_RF10AddMessageEP9RF_PACKEThP10IMU_DATA_t+0xba>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d049      	beq.n	800224c <_ZN9IMU_TO_RF10AddMessageEP9RF_PACKEThP10IMU_DATA_t+0xba>
		{
			uint16_t convertedData[PACKET_SIZE];
			convertedData[0] = tx_msg->accel.x;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	5e9b      	ldrsh	r3, [r3, r2]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	2114      	movs	r1, #20
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	801a      	strh	r2, [r3, #0]
			convertedData[1] = tx_msg->accel.y;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	5e9b      	ldrsh	r3, [r3, r2]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	187b      	adds	r3, r7, r1
 80021d0:	805a      	strh	r2, [r3, #2]
			convertedData[2] = tx_msg->accel.z;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	5e9b      	ldrsh	r3, [r3, r2]
 80021d8:	b29a      	uxth	r2, r3
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	809a      	strh	r2, [r3, #4]

			convertedData[3] = tx_msg->gyro.x;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2206      	movs	r2, #6
 80021e2:	5e9b      	ldrsh	r3, [r3, r2]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	80da      	strh	r2, [r3, #6]
			convertedData[4] = tx_msg->gyro.y;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2208      	movs	r2, #8
 80021ee:	5e9b      	ldrsh	r3, [r3, r2]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	811a      	strh	r2, [r3, #8]
			convertedData[5] = tx_msg->gyro.z;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	220a      	movs	r2, #10
 80021fa:	5e9b      	ldrsh	r3, [r3, r2]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	187b      	adds	r3, r7, r1
 8002200:	815a      	strh	r2, [r3, #10]

			convertedData[6] = tx_msg->linear.x;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	220c      	movs	r2, #12
 8002206:	5e9b      	ldrsh	r3, [r3, r2]
 8002208:	b29a      	uxth	r2, r3
 800220a:	187b      	adds	r3, r7, r1
 800220c:	819a      	strh	r2, [r3, #12]
			convertedData[7] = tx_msg->linear.y;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	220e      	movs	r2, #14
 8002212:	5e9b      	ldrsh	r3, [r3, r2]
 8002214:	b29a      	uxth	r2, r3
 8002216:	187b      	adds	r3, r7, r1
 8002218:	81da      	strh	r2, [r3, #14]
			convertedData[8] = tx_msg->linear.z;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2210      	movs	r2, #16
 800221e:	5e9b      	ldrsh	r3, [r3, r2]
 8002220:	b29a      	uxth	r2, r3
 8002222:	187b      	adds	r3, r7, r1
 8002224:	821a      	strh	r2, [r3, #16]

			convertedData[9] = ((uint16_t)tx_msg->temp) & 0x00FF ;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7c9b      	ldrb	r3, [r3, #18]
 800222a:	b29a      	uxth	r2, r3
 800222c:	187b      	adds	r3, r7, r1
 800222e:	825a      	strh	r2, [r3, #18]

			success = tx_packet->AddToPacket((uint8_t)RF_TYPES::IMU, rf_id, PACKET_SIZE, (uint8_t*)convertedData);
 8002230:	233f      	movs	r3, #63	; 0x3f
 8002232:	18fc      	adds	r4, r7, r3
 8002234:	230b      	movs	r3, #11
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	187b      	adds	r3, r7, r1
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2314      	movs	r3, #20
 8002242:	2103      	movs	r1, #3
 8002244:	f000 fa16 	bl	8002674 <_ZN9RF_PACKET11AddToPacketEhhhPh>
 8002248:	0003      	movs	r3, r0
 800224a:	7023      	strb	r3, [r4, #0]
		}
		return success;
 800224c:	233f      	movs	r3, #63	; 0x3f
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	781b      	ldrb	r3, [r3, #0]
	}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b011      	add	sp, #68	; 0x44
 8002258:	bd90      	pop	{r4, r7, pc}
	...

0800225c <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv>:

namespace CAN_TO_RF
{
//TODO Make this a template
    bool AddMessage(RF_PACKET* tx_packet, RF_TYPES rf_addr, uint8_t rf_id, void* tx_msg)
    {
 800225c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225e:	b08d      	sub	sp, #52	; 0x34
 8002260:	af02      	add	r7, sp, #8
 8002262:	6178      	str	r0, [r7, #20]
 8002264:	6139      	str	r1, [r7, #16]
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	230f      	movs	r3, #15
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	701a      	strb	r2, [r3, #0]
        bool success = false;
 800226e:	231f      	movs	r3, #31
 8002270:	2208      	movs	r2, #8
 8002272:	4694      	mov	ip, r2
 8002274:	44bc      	add	ip, r7
 8002276:	4463      	add	r3, ip
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
        if(tx_packet != nullptr && tx_msg != nullptr)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d100      	bne.n	8002284 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x28>
 8002282:	e108      	b.n	8002496 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x23a>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d100      	bne.n	800228c <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x30>
 800228a:	e104      	b.n	8002496 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x23a>
        {
            if(rf_addr > RF_TYPES::START && rf_addr < RF_TYPES::END)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	da00      	bge.n	8002294 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x38>
 8002292:	e100      	b.n	8002496 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x23a>
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b06      	cmp	r3, #6
 8002298:	dd00      	ble.n	800229c <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x40>
 800229a:	e0fc      	b.n	8002496 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x23a>
            {
            	bool msgValid = true;
 800229c:	231e      	movs	r3, #30
 800229e:	2208      	movs	r2, #8
 80022a0:	4694      	mov	ip, r2
 80022a2:	44bc      	add	ip, r7
 80022a4:	4463      	add	r3, ip
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
                static constexpr uint8_t MAX_CAN_MSG_SIZE = 8;
                uint8_t convertedData[MAX_CAN_MSG_SIZE];
                uint8_t actualMessageSize = 0;
 80022aa:	231d      	movs	r3, #29
 80022ac:	2208      	movs	r2, #8
 80022ae:	4694      	mov	ip, r2
 80022b0:	44bc      	add	ip, r7
 80022b2:	4463      	add	r3, ip
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
                switch(rf_addr)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d900      	bls.n	80022c0 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x64>
 80022be:	e0bf      	b.n	8002440 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x1e4>
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	009a      	lsls	r2, r3, #2
 80022c4:	4b79      	ldr	r3, [pc, #484]	; (80024ac <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x250>)
 80022c6:	18d3      	adds	r3, r2, r3
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	469f      	mov	pc, r3
                {
                    case RF_TYPES::PROTON1:
                    {
                        actualMessageSize = PROTON1_MESSAGE_0::NUM_BYTES;
 80022cc:	231d      	movs	r3, #29
 80022ce:	2208      	movs	r2, #8
 80022d0:	4694      	mov	ip, r2
 80022d2:	44bc      	add	ip, r7
 80022d4:	4463      	add	r3, ip
 80022d6:	2208      	movs	r2, #8
 80022d8:	701a      	strb	r2, [r3, #0]
                        PROTON1_MESSAGE_0::dataPacketToArray(*static_cast<PROTON1_MESSAGE_0_DATA_PACKET*>(tx_msg), convertedData);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2214      	movs	r2, #20
 80022de:	2108      	movs	r1, #8
 80022e0:	468c      	mov	ip, r1
 80022e2:	44bc      	add	ip, r7
 80022e4:	4462      	add	r2, ip
 80022e6:	9200      	str	r2, [sp, #0]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f001 f912 	bl	8003518 <_ZN17PROTON1_MESSAGE_017dataPacketToArrayE29PROTON1_MESSAGE_0_DATA_PACKETPh>
                        break;
 80022f4:	e0ac      	b.n	8002450 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x1f4>
                    }
                    case RF_TYPES::ORION:
                    {
                        actualMessageSize = ORION_MESSAGE_0::NUM_BYTES;
 80022f6:	231d      	movs	r3, #29
 80022f8:	2208      	movs	r2, #8
 80022fa:	4694      	mov	ip, r2
 80022fc:	44bc      	add	ip, r7
 80022fe:	4463      	add	r3, ip
 8002300:	2208      	movs	r2, #8
 8002302:	701a      	strb	r2, [r3, #0]
                        ORION_MESSAGE_0::dataPacketToArray(*static_cast<ORION_MESSAGE_0_DATA_PACKET*>(tx_msg), convertedData);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2214      	movs	r2, #20
 8002308:	2108      	movs	r1, #8
 800230a:	468c      	mov	ip, r1
 800230c:	44bc      	add	ip, r7
 800230e:	4462      	add	r2, ip
 8002310:	9200      	str	r2, [sp, #0]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	6859      	ldr	r1, [r3, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f000 ffd1 	bl	80032c0 <_ZN15ORION_MESSAGE_017dataPacketToArrayE27ORION_MESSAGE_0_DATA_PACKETPh>
                        break;
 800231e:	e097      	b.n	8002450 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x1f4>
                    }
                    case RF_TYPES::MITSUBA_FRAME0:
                    {
                    	actualMessageSize = MITSUBA_DRIVER_RX_FRAME_0::NUM_BYTES;
 8002320:	231d      	movs	r3, #29
 8002322:	2208      	movs	r2, #8
 8002324:	4694      	mov	ip, r2
 8002326:	44bc      	add	ip, r7
 8002328:	4463      	add	r3, ip
 800232a:	2208      	movs	r2, #8
 800232c:	701a      	strb	r2, [r3, #0]
                    	MITSUBA_DRIVER_RX_FRAME_0::dataPacketToArray(*static_cast<MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET*>(tx_msg), convertedData);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2214      	movs	r2, #20
 8002332:	2108      	movs	r1, #8
 8002334:	468c      	mov	ip, r1
 8002336:	44bc      	add	ip, r7
 8002338:	4462      	add	r2, ip
 800233a:	9200      	str	r2, [sp, #0]
 800233c:	881a      	ldrh	r2, [r3, #0]
 800233e:	8859      	ldrh	r1, [r3, #2]
 8002340:	0409      	lsls	r1, r1, #16
 8002342:	430a      	orrs	r2, r1
 8002344:	0010      	movs	r0, r2
 8002346:	889a      	ldrh	r2, [r3, #4]
 8002348:	88d9      	ldrh	r1, [r3, #6]
 800234a:	0409      	lsls	r1, r1, #16
 800234c:	430a      	orrs	r2, r1
 800234e:	0016      	movs	r6, r2
 8002350:	891a      	ldrh	r2, [r3, #8]
 8002352:	8959      	ldrh	r1, [r3, #10]
 8002354:	0409      	lsls	r1, r1, #16
 8002356:	430a      	orrs	r2, r1
 8002358:	0015      	movs	r5, r2
 800235a:	899a      	ldrh	r2, [r3, #12]
 800235c:	89db      	ldrh	r3, [r3, #14]
 800235e:	041b      	lsls	r3, r3, #16
 8002360:	4313      	orrs	r3, r2
 8002362:	001c      	movs	r4, r3
 8002364:	0031      	movs	r1, r6
 8002366:	002a      	movs	r2, r5
 8002368:	0023      	movs	r3, r4
 800236a:	f000 fa6d 	bl	8002848 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>
                    	break;
 800236e:	e06f      	b.n	8002450 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x1f4>
                    }
                    case RF_TYPES::MITSUBA_FRAME1:
					{
						actualMessageSize = MITSUBA_DRIVER_RX_FRAME_1::NUM_BYTES;
 8002370:	231d      	movs	r3, #29
 8002372:	2208      	movs	r2, #8
 8002374:	4694      	mov	ip, r2
 8002376:	44bc      	add	ip, r7
 8002378:	4463      	add	r3, ip
 800237a:	2205      	movs	r2, #5
 800237c:	701a      	strb	r2, [r3, #0]
						MITSUBA_DRIVER_RX_FRAME_1::dataPacketToArray(*static_cast<MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET*>(tx_msg), convertedData);
 800237e:	2314      	movs	r3, #20
 8002380:	2208      	movs	r2, #8
 8002382:	18ba      	adds	r2, r7, r2
 8002384:	18d0      	adds	r0, r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	8859      	ldrh	r1, [r3, #2]
 800238c:	0409      	lsls	r1, r1, #16
 800238e:	430a      	orrs	r2, r1
 8002390:	0014      	movs	r4, r2
 8002392:	889a      	ldrh	r2, [r3, #4]
 8002394:	88d9      	ldrh	r1, [r3, #6]
 8002396:	0409      	lsls	r1, r1, #16
 8002398:	430a      	orrs	r2, r1
 800239a:	0011      	movs	r1, r2
 800239c:	891a      	ldrh	r2, [r3, #8]
 800239e:	895b      	ldrh	r3, [r3, #10]
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	4313      	orrs	r3, r2
 80023a4:	001a      	movs	r2, r3
 80023a6:	0003      	movs	r3, r0
 80023a8:	0020      	movs	r0, r4
 80023aa:	f000 fbd1 	bl	8002b50 <_ZN25MITSUBA_DRIVER_RX_FRAME_117dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETPh>
						break;
 80023ae:	e04f      	b.n	8002450 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x1f4>
					}
                    case RF_TYPES::MITSUBA_FRAME2:
					{
						actualMessageSize = MITSUBA_DRIVER_RX_FRAME_2::NUM_BYTES;
 80023b0:	231d      	movs	r3, #29
 80023b2:	2208      	movs	r2, #8
 80023b4:	4694      	mov	ip, r2
 80023b6:	44bc      	add	ip, r7
 80023b8:	4463      	add	r3, ip
 80023ba:	2205      	movs	r2, #5
 80023bc:	701a      	strb	r2, [r3, #0]
						MITSUBA_DRIVER_RX_FRAME_2::dataPacketToArray(*static_cast<MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET*>(tx_msg), convertedData);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2214      	movs	r2, #20
 80023c2:	2108      	movs	r1, #8
 80023c4:	468c      	mov	ip, r1
 80023c6:	44bc      	add	ip, r7
 80023c8:	4462      	add	r2, ip
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	7859      	ldrb	r1, [r3, #1]
 80023d0:	0209      	lsls	r1, r1, #8
 80023d2:	430a      	orrs	r2, r1
 80023d4:	7899      	ldrb	r1, [r3, #2]
 80023d6:	0409      	lsls	r1, r1, #16
 80023d8:	430a      	orrs	r2, r1
 80023da:	78d9      	ldrb	r1, [r3, #3]
 80023dc:	0609      	lsls	r1, r1, #24
 80023de:	430a      	orrs	r2, r1
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	791a      	ldrb	r2, [r3, #4]
 80023e4:	7959      	ldrb	r1, [r3, #5]
 80023e6:	0209      	lsls	r1, r1, #8
 80023e8:	430a      	orrs	r2, r1
 80023ea:	7999      	ldrb	r1, [r3, #6]
 80023ec:	0409      	lsls	r1, r1, #16
 80023ee:	430a      	orrs	r2, r1
 80023f0:	79d9      	ldrb	r1, [r3, #7]
 80023f2:	0609      	lsls	r1, r1, #24
 80023f4:	430a      	orrs	r2, r1
 80023f6:	0016      	movs	r6, r2
 80023f8:	7a1a      	ldrb	r2, [r3, #8]
 80023fa:	7a59      	ldrb	r1, [r3, #9]
 80023fc:	0209      	lsls	r1, r1, #8
 80023fe:	430a      	orrs	r2, r1
 8002400:	7a99      	ldrb	r1, [r3, #10]
 8002402:	0409      	lsls	r1, r1, #16
 8002404:	430a      	orrs	r2, r1
 8002406:	7ad9      	ldrb	r1, [r3, #11]
 8002408:	0609      	lsls	r1, r1, #24
 800240a:	430a      	orrs	r2, r1
 800240c:	0015      	movs	r5, r2
 800240e:	7b1a      	ldrb	r2, [r3, #12]
 8002410:	7b59      	ldrb	r1, [r3, #13]
 8002412:	0209      	lsls	r1, r1, #8
 8002414:	430a      	orrs	r2, r1
 8002416:	7b99      	ldrb	r1, [r3, #14]
 8002418:	0409      	lsls	r1, r1, #16
 800241a:	430a      	orrs	r2, r1
 800241c:	7bd9      	ldrb	r1, [r3, #15]
 800241e:	0609      	lsls	r1, r1, #24
 8002420:	430a      	orrs	r2, r1
 8002422:	0014      	movs	r4, r2
 8002424:	466a      	mov	r2, sp
 8002426:	0010      	movs	r0, r2
 8002428:	3310      	adds	r3, #16
 800242a:	2203      	movs	r2, #3
 800242c:	0019      	movs	r1, r3
 800242e:	f006 fc3f 	bl	8008cb0 <memcpy>
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	0031      	movs	r1, r6
 8002436:	002a      	movs	r2, r5
 8002438:	0023      	movs	r3, r4
 800243a:	f000 fc35 	bl	8002ca8 <_ZN25MITSUBA_DRIVER_RX_FRAME_217dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETPh>
						break;
 800243e:	e007      	b.n	8002450 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x1f4>
					}
                    default:
                    {
                    	msgValid = false;
 8002440:	231e      	movs	r3, #30
 8002442:	2208      	movs	r2, #8
 8002444:	4694      	mov	ip, r2
 8002446:	44bc      	add	ip, r7
 8002448:	4463      	add	r3, ip
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
                    	break;
 800244e:	46c0      	nop			; (mov r8, r8)
                    }
                }
                if(msgValid)
 8002450:	231e      	movs	r3, #30
 8002452:	2208      	movs	r2, #8
 8002454:	4694      	mov	ip, r2
 8002456:	44bc      	add	ip, r7
 8002458:	4463      	add	r3, ip
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01a      	beq.n	8002496 <_ZN9CAN_TO_RF10AddMessageEP9RF_PACKET8RF_TYPEShPv+0x23a>
                {
                    success = tx_packet->AddToPacket((uint8_t)rf_addr, rf_id, actualMessageSize, convertedData);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	b2d9      	uxtb	r1, r3
 8002464:	231f      	movs	r3, #31
 8002466:	2208      	movs	r2, #8
 8002468:	18ba      	adds	r2, r7, r2
 800246a:	18d4      	adds	r4, r2, r3
 800246c:	231d      	movs	r3, #29
 800246e:	2208      	movs	r2, #8
 8002470:	4694      	mov	ip, r2
 8002472:	44bc      	add	ip, r7
 8002474:	4463      	add	r3, ip
 8002476:	781d      	ldrb	r5, [r3, #0]
 8002478:	230f      	movs	r3, #15
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	2314      	movs	r3, #20
 8002482:	2608      	movs	r6, #8
 8002484:	46b4      	mov	ip, r6
 8002486:	44bc      	add	ip, r7
 8002488:	4463      	add	r3, ip
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	002b      	movs	r3, r5
 800248e:	f000 f8f1 	bl	8002674 <_ZN9RF_PACKET11AddToPacketEhhhPh>
 8002492:	0003      	movs	r3, r0
 8002494:	7023      	strb	r3, [r4, #0]
                }
            }
        }
        return success;
 8002496:	231f      	movs	r3, #31
 8002498:	2208      	movs	r2, #8
 800249a:	4694      	mov	ip, r2
 800249c:	44bc      	add	ip, r7
 800249e:	4463      	add	r3, ip
 80024a0:	781b      	ldrb	r3, [r3, #0]
    }
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b00b      	add	sp, #44	; 0x2c
 80024a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	08008f8c 	.word	0x08008f8c

080024b0 <_ZZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_dataENKUlPcS4_E_clES4_S4_>:
			//Add 3 for the 3 commas
			char convertedData[GPS_MSG_MAX_BYTES + 3];
			//4 is the amount of parameters to send: lat, lon, speed, trueCourse
			uint8_t index = 0;
			//Define lambda to convert parameter string to data
			auto addToConvertedData = [&index](char* convertedData, char* parameterString) -> void {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
				uint8_t parameterIndex = 0;
 80024bc:	2317      	movs	r3, #23
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
				while(parameterString[parameterIndex])
 80024c4:	2317      	movs	r3, #23
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	18d3      	adds	r3, r2, r3
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <_ZZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_dataENKUlPcS4_E_clES4_S4_+0x4c>
				{
					convertedData[index++] = parameterString[parameterIndex++];
 80024d4:	2217      	movs	r2, #23
 80024d6:	18bb      	adds	r3, r7, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	18ba      	adds	r2, r7, r2
 80024dc:	1c59      	adds	r1, r3, #1
 80024de:	7011      	strb	r1, [r2, #0]
 80024e0:	001a      	movs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	1899      	adds	r1, r3, r2
			auto addToConvertedData = [&index](char* convertedData, char* parameterString) -> void {
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
					convertedData[index++] = parameterString[parameterIndex++];
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	1c50      	adds	r0, r2, #1
 80024ee:	b2c0      	uxtb	r0, r0
 80024f0:	7018      	strb	r0, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	780a      	ldrb	r2, [r1, #0]
 80024f8:	701a      	strb	r2, [r3, #0]
				while(parameterString[parameterIndex])
 80024fa:	e7e3      	b.n	80024c4 <_ZZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_dataENKUlPcS4_E_clES4_S4_+0x14>
				}
			};
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b006      	add	sp, #24
 8002502:	bd80      	pop	{r7, pc}

08002504 <_ZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_data>:
	{
 8002504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002506:	b095      	sub	sp, #84	; 0x54
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	230b      	movs	r3, #11
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	1c0a      	adds	r2, r1, #0
 8002514:	701a      	strb	r2, [r3, #0]
		bool success = false;
 8002516:	2347      	movs	r3, #71	; 0x47
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
        if(tx_packet != nullptr && tx_msg != nullptr)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d056      	beq.n	80025d2 <_ZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_data+0xce>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d053      	beq.n	80025d2 <_ZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_data+0xce>
			uint8_t index = 0;
 800252a:	2446      	movs	r4, #70	; 0x46
 800252c:	193b      	adds	r3, r7, r4
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
			};
 8002532:	193b      	adds	r3, r7, r4
 8002534:	643b      	str	r3, [r7, #64]	; 0x40
			//Add all of the parameters to the converted data
			addToConvertedData(convertedData, tx_msg->latitude);
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	2510      	movs	r5, #16
 800253a:	1979      	adds	r1, r7, r5
 800253c:	2640      	movs	r6, #64	; 0x40
 800253e:	19bb      	adds	r3, r7, r6
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff ffb5 	bl	80024b0 <_ZZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_dataENKUlPcS4_E_clES4_S4_>
			convertedData[index++] = ',';
 8002546:	193b      	adds	r3, r7, r4
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	b2d1      	uxtb	r1, r2
 800254e:	193a      	adds	r2, r7, r4
 8002550:	7011      	strb	r1, [r2, #0]
 8002552:	001a      	movs	r2, r3
 8002554:	197b      	adds	r3, r7, r5
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	5499      	strb	r1, [r3, r2]
			addToConvertedData(convertedData, tx_msg->longitude);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	330b      	adds	r3, #11
 800255e:	001a      	movs	r2, r3
 8002560:	1979      	adds	r1, r7, r5
 8002562:	19bb      	adds	r3, r7, r6
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff ffa3 	bl	80024b0 <_ZZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_dataENKUlPcS4_E_clES4_S4_>
			convertedData[index++] = ',';
 800256a:	193b      	adds	r3, r7, r4
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	b2d1      	uxtb	r1, r2
 8002572:	193a      	adds	r2, r7, r4
 8002574:	7011      	strb	r1, [r2, #0]
 8002576:	001a      	movs	r2, r3
 8002578:	197b      	adds	r3, r7, r5
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	5499      	strb	r1, [r3, r2]
			addToConvertedData(convertedData, tx_msg->speed);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3317      	adds	r3, #23
 8002582:	001a      	movs	r2, r3
 8002584:	1979      	adds	r1, r7, r5
 8002586:	19bb      	adds	r3, r7, r6
 8002588:	0018      	movs	r0, r3
 800258a:	f7ff ff91 	bl	80024b0 <_ZZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_dataENKUlPcS4_E_clES4_S4_>
			convertedData[index++] = ',';
 800258e:	193b      	adds	r3, r7, r4
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	b2d1      	uxtb	r1, r2
 8002596:	193a      	adds	r2, r7, r4
 8002598:	7011      	strb	r1, [r2, #0]
 800259a:	001a      	movs	r2, r3
 800259c:	197b      	adds	r3, r7, r5
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	5499      	strb	r1, [r3, r2]
			addToConvertedData(convertedData, tx_msg->trueCourse);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3321      	adds	r3, #33	; 0x21
 80025a6:	001a      	movs	r2, r3
 80025a8:	1979      	adds	r1, r7, r5
 80025aa:	19bb      	adds	r3, r7, r6
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff ff7f 	bl	80024b0 <_ZZN9GPS_TO_RF10AddMessageEP9RF_PACKEThP8gps_dataENKUlPcS4_E_clES4_S4_>
			//Add RF packet
			success = tx_packet->AddToPacket((uint8_t)RF_TYPES::GPS, rf_id, index, (uint8_t*)convertedData);
 80025b2:	193b      	adds	r3, r7, r4
 80025b4:	7819      	ldrb	r1, [r3, #0]
 80025b6:	2347      	movs	r3, #71	; 0x47
 80025b8:	18fc      	adds	r4, r7, r3
 80025ba:	230b      	movs	r3, #11
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	197b      	adds	r3, r7, r5
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	000b      	movs	r3, r1
 80025c8:	2100      	movs	r1, #0
 80025ca:	f000 f853 	bl	8002674 <_ZN9RF_PACKET11AddToPacketEhhhPh>
 80025ce:	0003      	movs	r3, r0
 80025d0:	7023      	strb	r3, [r4, #0]
        }
        return success;
 80025d2:	2347      	movs	r3, #71	; 0x47
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	781b      	ldrb	r3, [r3, #0]
	}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b013      	add	sp, #76	; 0x4c
 80025de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025e0 <_ZN9RF_PACKETC1EP13USART_TypeDef>:
//Public Function Prototypes

//Private Function Definitions

//Public Function Definitions
RF_PACKET::RF_PACKET(USART_TypeDef* uart_instance):
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
RF_DATA_LINK_LAYER{uart_instance} ,dataPacket{0}, numMessagesInPacket{0}, packetLength{RF_PACKET::MIN_PACKET_LENGTH}
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	0011      	movs	r1, r2
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff fd89 	bl	8002108 <_ZN18RF_DATA_LINK_LAYERC1EP13USART_TypeDef>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	22c8      	movs	r2, #200	; 0xc8
 80025fc:	2100      	movs	r1, #0
 80025fe:	0018      	movs	r0, r3
 8002600:	f006 fb5f 	bl	8008cc2 <memset>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	22cc      	movs	r2, #204	; 0xcc
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	22cd      	movs	r2, #205	; 0xcd
 8002610:	2103      	movs	r1, #3
 8002612:	5499      	strb	r1, [r3, r2]
{
	dataPacket[0] = RF_DATA_LINK_LAYER::START_CHAR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	22ff      	movs	r2, #255	; 0xff
 8002618:	711a      	strb	r2, [r3, #4]
	dataPacket[1] = this->numMessagesInPacket;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	22cc      	movs	r2, #204	; 0xcc
 800261e:	5c9a      	ldrb	r2, [r3, r2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	715a      	strb	r2, [r3, #5]
}
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}

0800262e <_ZN9RF_PACKET4SendEv>:

void RF_PACKET::Send()
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
	//Set the num messages in packet
	this->dataPacket[1] = this->numMessagesInPacket;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	22cc      	movs	r2, #204	; 0xcc
 800263a:	5c9a      	ldrb	r2, [r3, r2]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	715a      	strb	r2, [r3, #5]
	//Add the end character
	this->dataPacket[this->packetLength - 1] = RF_DATA_LINK_LAYER::END_CHAR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	22cd      	movs	r2, #205	; 0xcd
 8002644:	5c9b      	ldrb	r3, [r3, r2]
 8002646:	3b01      	subs	r3, #1
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	18d3      	adds	r3, r2, r3
 800264c:	223f      	movs	r2, #63	; 0x3f
 800264e:	711a      	strb	r2, [r3, #4]
	//Send out Message
	this->sendMessage(this->dataPacket, this->packetLength);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1d19      	adds	r1, r3, #4
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	22cd      	movs	r2, #205	; 0xcd
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	b29b      	uxth	r3, r3
 800265e:	001a      	movs	r2, r3
 8002660:	f7ff fd5f 	bl	8002122 <_ZN18RF_DATA_LINK_LAYER11sendMessageEPht>
	//Reset data packet
	this->ClearPacket();
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	0018      	movs	r0, r3
 8002668:	f000 f886 	bl	8002778 <_ZN9RF_PACKET11ClearPacketEv>
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <_ZN9RF_PACKET11AddToPacketEhhhPh>:

bool RF_PACKET::AddToPacket(uint8_t address, uint8_t id, uint8_t data_size, uint8_t* data)
{
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	000c      	movs	r4, r1
 800267e:	0010      	movs	r0, r2
 8002680:	0019      	movs	r1, r3
 8002682:	1cfb      	adds	r3, r7, #3
 8002684:	1c22      	adds	r2, r4, #0
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	1cbb      	adds	r3, r7, #2
 800268a:	1c02      	adds	r2, r0, #0
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	1c7b      	adds	r3, r7, #1
 8002690:	1c0a      	adds	r2, r1, #0
 8002692:	701a      	strb	r2, [r3, #0]
	bool packetSmallEnough = false;
 8002694:	230f      	movs	r3, #15
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
	//Continue only if data size isn't 0
	if(data_size != 0)
 800269c:	1c7b      	adds	r3, r7, #1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d062      	beq.n	800276a <_ZN9RF_PACKET11AddToPacketEhhhPh+0xf6>
	{
		//Continue if the total packet length after adding 1 byte for address + 1 byte for data size + @data_size
		//bytes for this message is less than or equal to max length.
		if(this->packetLength + 3 + data_size <= RF_PACKET::MAX_PACKET_LENGTH)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	22cd      	movs	r2, #205	; 0xcd
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	1cda      	adds	r2, r3, #3
 80026ac:	1c7b      	adds	r3, r7, #1
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	18d3      	adds	r3, r2, r3
 80026b2:	2bc8      	cmp	r3, #200	; 0xc8
 80026b4:	dc59      	bgt.n	800276a <_ZN9RF_PACKET11AddToPacketEhhhPh+0xf6>
		{
			this->dataPacket[(this->packetLength++) - 1] = address;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	22cd      	movs	r2, #205	; 0xcd
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	b2d0      	uxtb	r0, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	21cd      	movs	r1, #205	; 0xcd
 80026c4:	5450      	strb	r0, [r2, r1]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	18d3      	adds	r3, r2, r3
 80026cc:	1cfa      	adds	r2, r7, #3
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	711a      	strb	r2, [r3, #4]
			this->dataPacket[(this->packetLength++) - 1] = id;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	22cd      	movs	r2, #205	; 0xcd
 80026d6:	5c9b      	ldrb	r3, [r3, r2]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	b2d0      	uxtb	r0, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	21cd      	movs	r1, #205	; 0xcd
 80026e0:	5450      	strb	r0, [r2, r1]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	18d3      	adds	r3, r2, r3
 80026e8:	1cba      	adds	r2, r7, #2
 80026ea:	7812      	ldrb	r2, [r2, #0]
 80026ec:	711a      	strb	r2, [r3, #4]
			this->dataPacket[(this->packetLength++) - 1] = data_size;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	22cd      	movs	r2, #205	; 0xcd
 80026f2:	5c9b      	ldrb	r3, [r3, r2]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	b2d0      	uxtb	r0, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	21cd      	movs	r1, #205	; 0xcd
 80026fc:	5450      	strb	r0, [r2, r1]
 80026fe:	3b01      	subs	r3, #1
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	18d3      	adds	r3, r2, r3
 8002704:	1c7a      	adds	r2, r7, #1
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	711a      	strb	r2, [r3, #4]
			for(uint8_t i = 0; i < data_size; i++)
 800270a:	230e      	movs	r3, #14
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	230e      	movs	r3, #14
 8002714:	18fa      	adds	r2, r7, r3
 8002716:	1c7b      	adds	r3, r7, #1
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d218      	bcs.n	8002752 <_ZN9RF_PACKET11AddToPacketEhhhPh+0xde>
			{
				this->dataPacket[(this->packetLength++) - 1] = data[i];
 8002720:	250e      	movs	r5, #14
 8002722:	197b      	adds	r3, r7, r5
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	6a3a      	ldr	r2, [r7, #32]
 8002728:	18d2      	adds	r2, r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	21cd      	movs	r1, #205	; 0xcd
 800272e:	5c5b      	ldrb	r3, [r3, r1]
 8002730:	1c59      	adds	r1, r3, #1
 8002732:	b2cc      	uxtb	r4, r1
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	20cd      	movs	r0, #205	; 0xcd
 8002738:	540c      	strb	r4, [r1, r0]
 800273a:	3b01      	subs	r3, #1
 800273c:	7811      	ldrb	r1, [r2, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	18d3      	adds	r3, r2, r3
 8002742:	1c0a      	adds	r2, r1, #0
 8002744:	711a      	strb	r2, [r3, #4]
			for(uint8_t i = 0; i < data_size; i++)
 8002746:	197b      	adds	r3, r7, r5
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	197b      	adds	r3, r7, r5
 800274c:	3201      	adds	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e7df      	b.n	8002712 <_ZN9RF_PACKET11AddToPacketEhhhPh+0x9e>
			}
			packetSmallEnough = true;
 8002752:	230f      	movs	r3, #15
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
			this->numMessagesInPacket++;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	22cc      	movs	r2, #204	; 0xcc
 800275e:	5c9b      	ldrb	r3, [r3, r2]
 8002760:	3301      	adds	r3, #1
 8002762:	b2d9      	uxtb	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	22cc      	movs	r2, #204	; 0xcc
 8002768:	5499      	strb	r1, [r3, r2]
		}
	}
	return packetSmallEnough;
 800276a:	230f      	movs	r3, #15
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	781b      	ldrb	r3, [r3, #0]
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b004      	add	sp, #16
 8002776:	bdb0      	pop	{r4, r5, r7, pc}

08002778 <_ZN9RF_PACKET11ClearPacketEv>:

void RF_PACKET::ClearPacket(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	this->packetLength = RF_PACKET::MIN_PACKET_LENGTH;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	22cd      	movs	r2, #205	; 0xcd
 8002784:	2103      	movs	r1, #3
 8002786:	5499      	strb	r1, [r3, r2]
	this->numMessagesInPacket = 0;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	22cc      	movs	r2, #204	; 0xcc
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <_ZN9RF_PACKET13isPacketEmptyEv>:

bool RF_PACKET::isPacketEmpty(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	if(this->numMessagesInPacket == 0)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	22cc      	movs	r2, #204	; 0xcc
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <_ZN9RF_PACKET13isPacketEmptyEv+0x16>
	{
		return true;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <_ZN9RF_PACKET13isPacketEmptyEv+0x18>
	}
	return false;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>:
//Private Function Definitions

//Protected Function Definitions
/*****************TX Classes*****************/
void MITSUBA_DRIVER_TX_RL_MESSAGE::dataPacketToArray(MITSUBA_DRIVER_TX_RL_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	6018      	str	r0, [r3, #0]
 80027c2:	6039      	str	r1, [r7, #0]
	output[0] = 0;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]

	output[0] |= static_cast<uint8_t>(input.requestFrame0) << 0;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	1d3a      	adds	r2, r7, #4
 80027d0:	7812      	ldrb	r2, [r2, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame1) << 1;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b25a      	sxtb	r2, r3
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.requestFrame2) << 2;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b25a      	sxtb	r2, r3
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	789b      	ldrb	r3, [r3, #2]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	b25b      	sxtb	r3, r3
 8002804:	b2da      	uxtb	r2, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	701a      	strb	r2, [r3, #0]
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em>:

	return output;
}

//Public Function Definitions
MITSUBA_DRIVER_TX_RL_MESSAGE::MITSUBA_DRIVER_TX_RL_MESSAGE(uint32_t message_id):
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af02      	add	r7, sp, #8
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_TX_RL_MESSAGE, MITSUBA_DRIVER_TX_RL_DATA_PACKET>{message_id,subsystem_info::MOTORTX_RL_MSG_LENGTH, true, false, false}
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	2300      	movs	r3, #0
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	2300      	movs	r3, #0
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2301      	movs	r3, #1
 800282c:	2201      	movs	r2, #1
 800282e:	f000 fc37 	bl	80030a0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGEC1Em+0x30>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	601a      	str	r2, [r3, #0]
{}
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b002      	add	sp, #8
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	08008fe0 	.word	0x08008fe0

08002848 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>:
/*****************RX Classes*****************/
//RX Frame 0
void MITSUBA_DRIVER_RX_FRAME_0::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	003c      	movs	r4, r7
 8002850:	6020      	str	r0, [r4, #0]
 8002852:	6061      	str	r1, [r4, #4]
 8002854:	60a2      	str	r2, [r4, #8]
 8002856:	60e3      	str	r3, [r4, #12]
	output[0] = 0;
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battVoltage);
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	003b      	movs	r3, r7
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4313      	orrs	r3, r2
 800286a:	b2da      	uxtb	r2, r3
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	3301      	adds	r3, #1
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.battVoltage >> 8);
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	3301      	adds	r3, #1
 800287c:	7819      	ldrb	r1, [r3, #0]
 800287e:	003b      	movs	r3, r7
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	121b      	asrs	r3, r3, #8
 8002884:	b2da      	uxtb	r2, r3
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	3301      	adds	r3, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrent) << 2);
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	3301      	adds	r3, #1
 8002894:	7819      	ldrb	r1, [r3, #0]
 8002896:	003b      	movs	r3, r7
 8002898:	885b      	ldrh	r3, [r3, #2]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	3301      	adds	r3, #1
 80028a4:	430a      	orrs	r2, r1
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	3302      	adds	r3, #2
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.battCurrent >> 6);
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	3302      	adds	r3, #2
 80028b6:	7819      	ldrb	r1, [r3, #0]
 80028b8:	003b      	movs	r3, r7
 80028ba:	885b      	ldrh	r3, [r3, #2]
 80028bc:	119b      	asrs	r3, r3, #6
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	3302      	adds	r3, #2
 80028c4:	430a      	orrs	r2, r1
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(static_cast<uint32_t>(input.battCurrentDir) << 3);
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	3302      	adds	r3, #2
 80028ce:	7819      	ldrb	r1, [r3, #0]
 80028d0:	003b      	movs	r3, r7
 80028d2:	791b      	ldrb	r3, [r3, #4]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	3302      	adds	r3, #2
 80028dc:	430a      	orrs	r2, r1
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.motorCurrentPkAvg << 4);
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	3302      	adds	r3, #2
 80028e6:	7819      	ldrb	r1, [r3, #0]
 80028e8:	003b      	movs	r3, r7
 80028ea:	88db      	ldrh	r3, [r3, #6]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	3302      	adds	r3, #2
 80028f6:	430a      	orrs	r2, r1
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	3303      	adds	r3, #3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorCurrentPkAvg >> 4);
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	3303      	adds	r3, #3
 8002908:	7819      	ldrb	r1, [r3, #0]
 800290a:	003b      	movs	r3, r7
 800290c:	88db      	ldrh	r3, [r3, #6]
 800290e:	111b      	asrs	r3, r3, #4
 8002910:	b2da      	uxtb	r2, r3
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	3303      	adds	r3, #3
 8002916:	430a      	orrs	r2, r1
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(static_cast<uint32_t>(input.FETtemp) << 6);
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	3303      	adds	r3, #3
 8002920:	7819      	ldrb	r1, [r3, #0]
 8002922:	003b      	movs	r3, r7
 8002924:	7a1b      	ldrb	r3, [r3, #8]
 8002926:	019b      	lsls	r3, r3, #6
 8002928:	b2da      	uxtb	r2, r3
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	3303      	adds	r3, #3
 800292e:	430a      	orrs	r2, r1
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]


	uint32_t convMotorRPM = input.motorRPM * 1;
 8002934:	003b      	movs	r3, r7
 8002936:	895b      	ldrh	r3, [r3, #10]
 8002938:	617b      	str	r3, [r7, #20]
	output[4] = 0;
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	3304      	adds	r3, #4
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.FETtemp >> 2);
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	3304      	adds	r3, #4
 8002946:	7819      	ldrb	r1, [r3, #0]
 8002948:	003b      	movs	r3, r7
 800294a:	7a1b      	ldrb	r3, [r3, #8]
 800294c:	109b      	asrs	r3, r3, #2
 800294e:	b2da      	uxtb	r2, r3
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	3304      	adds	r3, #4
 8002954:	430a      	orrs	r2, r1
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]
	output[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	3304      	adds	r3, #4
 800295e:	7819      	ldrb	r1, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	b2da      	uxtb	r2, r3
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	3304      	adds	r3, #4
 800296c:	430a      	orrs	r2, r1
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

	output[5] = 0;
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	3305      	adds	r3, #5
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	3305      	adds	r3, #5
 800297e:	7819      	ldrb	r1, [r3, #0]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	b2db      	uxtb	r3, r3
 8002986:	227f      	movs	r2, #127	; 0x7f
 8002988:	4013      	ands	r3, r2
 800298a:	b2da      	uxtb	r2, r3
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	3305      	adds	r3, #5
 8002990:	430a      	orrs	r2, r1
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
	output[5] |= (static_cast<uint8_t>(input.PWMDuty << 7));
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	3305      	adds	r3, #5
 800299a:	7819      	ldrb	r1, [r3, #0]
 800299c:	003b      	movs	r3, r7
 800299e:	899b      	ldrh	r3, [r3, #12]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	01db      	lsls	r3, r3, #7
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	3305      	adds	r3, #5
 80029aa:	430a      	orrs	r2, r1
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

	output[6] = 0;
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	3306      	adds	r3, #6
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
	output[6] |= static_cast<uint8_t>(input.PWMDuty >> 1);
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	3306      	adds	r3, #6
 80029bc:	7819      	ldrb	r1, [r3, #0]
 80029be:	003b      	movs	r3, r7
 80029c0:	899b      	ldrh	r3, [r3, #12]
 80029c2:	105b      	asrs	r3, r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	3306      	adds	r3, #6
 80029ca:	430a      	orrs	r2, r1
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]

	output[7] = 0;
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	3307      	adds	r3, #7
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(input.PWMDuty >> 9);
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	3307      	adds	r3, #7
 80029dc:	7819      	ldrb	r1, [r3, #0]
 80029de:	003b      	movs	r3, r7
 80029e0:	899b      	ldrh	r3, [r3, #12]
 80029e2:	125b      	asrs	r3, r3, #9
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	3307      	adds	r3, #7
 80029ea:	430a      	orrs	r2, r1
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]
	output[7] |= static_cast<uint8_t>(static_cast<uint32_t>(input.LeadAngle) << 1);
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	3307      	adds	r3, #7
 80029f4:	7819      	ldrb	r1, [r3, #0]
 80029f6:	003b      	movs	r3, r7
 80029f8:	7b9b      	ldrb	r3, [r3, #14]
 80029fa:	18db      	adds	r3, r3, r3
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	3307      	adds	r3, #7
 8002a02:	430a      	orrs	r2, r1
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b007      	add	sp, #28
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <_ZN25MITSUBA_DRIVER_RX_FRAME_017arrayToDataPacketEPh>:

MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET MITSUBA_DRIVER_RX_FRAME_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
	MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET output;
	uint32_t preBattVoltage = (static_cast<uint32_t>(input[1] & 3) << 8) | (input[0]);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	021a      	lsls	r2, r3, #8
 8002a22:	23c0      	movs	r3, #192	; 0xc0
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4013      	ands	r3, r2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	7812      	ldrb	r2, [r2, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61fb      	str	r3, [r7, #28]
	output.battVoltage = static_cast<uint16_t>(preBattVoltage);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	801a      	strh	r2, [r3, #0]

	uint32_t preBattCurrent = (static_cast<uint32_t>(input[2] & 7) << 6) | (input[1] >> 2);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	019a      	lsls	r2, r3, #6
 8002a40:	23e0      	movs	r3, #224	; 0xe0
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4013      	ands	r3, r2
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	3201      	adds	r2, #1
 8002a4a:	7812      	ldrb	r2, [r2, #0]
 8002a4c:	1092      	asrs	r2, r2, #2
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
	output.battCurrent = static_cast<uint16_t>(preBattCurrent);
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	805a      	strh	r2, [r3, #2]

	output.battCurrentDir = static_cast<bool>(input[2] & 8);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	001a      	movs	r2, r3
 8002a62:	2308      	movs	r3, #8
 8002a64:	4013      	ands	r3, r2
 8002a66:	1e5a      	subs	r2, r3, #1
 8002a68:	4193      	sbcs	r3, r2
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	711a      	strb	r2, [r3, #4]

	uint32_t preMotorCurrent = static_cast<uint32_t>((input[3] & 0x3F) << 4) | (input[2] >> 4);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	3303      	adds	r3, #3
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	001a      	movs	r2, r3
 8002a7a:	23fc      	movs	r3, #252	; 0xfc
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	3202      	adds	r2, #2
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	1112      	asrs	r2, r2, #4
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
	output.motorCurrentPkAvg = static_cast<uint16_t>(preMotorCurrent);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	80da      	strh	r2, [r3, #6]

	uint32_t preFETtemp = static_cast<uint32_t>((input[4] & 7) << 2) | (input[3] >> 6);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3304      	adds	r3, #4
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	231c      	movs	r3, #28
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	3203      	adds	r2, #3
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	1192      	asrs	r2, r2, #6
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
	output.FETtemp = static_cast<uint8_t>(preFETtemp);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	721a      	strb	r2, [r3, #8]

	uint32_t preMotorRPM = (static_cast<uint32_t>(input[5] & 0x7F) << 5) | (input[4] >> 3);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	3305      	adds	r3, #5
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	23fe      	movs	r3, #254	; 0xfe
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	3204      	adds	r2, #4
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	10d2      	asrs	r2, r2, #3
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
	output.motorRPM = static_cast<uint16_t>(preMotorRPM);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	815a      	strh	r2, [r3, #10]

	uint32_t preDuty = (static_cast<uint32_t>(input[7] & 1) << 9) | (input[6] << 1) | (input[5] >> 7);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	3307      	adds	r3, #7
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	025a      	lsls	r2, r3, #9
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	3206      	adds	r2, #6
 8002aea:	7812      	ldrb	r2, [r2, #0]
 8002aec:	0052      	lsls	r2, r2, #1
 8002aee:	4313      	orrs	r3, r2
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	3205      	adds	r2, #5
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	11d2      	asrs	r2, r2, #7
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
	output.PWMDuty = static_cast<uint16_t>(preDuty);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	819a      	strh	r2, [r3, #12]

	output.LeadAngle = static_cast<uint8_t>((input[7] >> 1));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	3307      	adds	r3, #7
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	105b      	asrs	r3, r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	739a      	strb	r2, [r3, #14]

	return output;
 8002b12:	46c0      	nop			; (mov r8, r8)
}
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b008      	add	sp, #32
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em>:

MITSUBA_DRIVER_RX_FRAME_0::MITSUBA_DRIVER_RX_FRAME_0(uint32_t message_id):
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_0, MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKET>{message_id,subsystem_info::MOTORRX0_RL_MSG_LENGTH, true, true, false}
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2301      	movs	r3, #1
 8002b34:	2208      	movs	r2, #8
 8002b36:	f000 fad9 	bl	80030ec <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <_ZN25MITSUBA_DRIVER_RX_FRAME_0C1Em+0x30>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	601a      	str	r2, [r3, #0]
{}
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	08008fc8 	.word	0x08008fc8

08002b50 <_ZN25MITSUBA_DRIVER_RX_FRAME_117dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKETPh>:

//RX Frame 1
void MITSUBA_DRIVER_RX_FRAME_1::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	1d3c      	adds	r4, r7, #4
 8002b58:	6020      	str	r0, [r4, #0]
 8002b5a:	6061      	str	r1, [r4, #4]
 8002b5c:	60a2      	str	r2, [r4, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
	output[0] = 0;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.powerMode);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	1d3a      	adds	r2, r7, #4
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.MCmode) << 1;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	b25a      	sxtb	r2, r3
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	785b      	ldrb	r3, [r3, #1]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.AcceleratorPosition << 2);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	885b      	ldrh	r3, [r3, #2]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.AcceleratorPosition >> 6);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	7819      	ldrb	r1, [r3, #0]
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	885b      	ldrh	r3, [r3, #2]
 8002bb6:	119b      	asrs	r3, r3, #6
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.regenVRposition << 4);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	7819      	ldrb	r1, [r3, #0]
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	3302      	adds	r3, #2
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.regenVRposition >> 4);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	3302      	adds	r3, #2
 8002bea:	7819      	ldrb	r1, [r3, #0]
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	889b      	ldrh	r3, [r3, #4]
 8002bf0:	111b      	asrs	r3, r3, #4
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(static_cast<uint32_t>(input.digitSWposition) << 6);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	3302      	adds	r3, #2
 8002c02:	7819      	ldrb	r1, [r3, #0]
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	799b      	ldrb	r3, [r3, #6]
 8002c08:	019b      	lsls	r3, r3, #6
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	3302      	adds	r3, #2
 8002c10:	430a      	orrs	r2, r1
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3303      	adds	r3, #3
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.digitSWposition >> 2);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3303      	adds	r3, #3
 8002c22:	7819      	ldrb	r1, [r3, #0]
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	799b      	ldrb	r3, [r3, #6]
 8002c28:	109b      	asrs	r3, r3, #2
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	3303      	adds	r3, #3
 8002c30:	430a      	orrs	r2, r1
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.outTargetVal << 2);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	3303      	adds	r3, #3
 8002c3a:	7819      	ldrb	r1, [r3, #0]
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	891b      	ldrh	r3, [r3, #8]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3303      	adds	r3, #3
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

	output[4] = 0;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3304      	adds	r3, #4
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.outTargetVal >> 6);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	7819      	ldrb	r1, [r3, #0]
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	891b      	ldrh	r3, [r3, #8]
 8002c62:	119b      	asrs	r3, r3, #6
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(input.driveActStat << 4);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3304      	adds	r3, #4
 8002c74:	7819      	ldrb	r1, [r3, #0]
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	7a9b      	ldrb	r3, [r3, #10]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	3304      	adds	r3, #4
 8002c82:	430a      	orrs	r2, r1
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]
	output[4] |= static_cast<uint8_t>(static_cast<uint8_t>(input.regenStat) << 6);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	7819      	ldrb	r1, [r3, #0]
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	7adb      	ldrb	r3, [r3, #11]
 8002c92:	019b      	lsls	r3, r3, #6
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b005      	add	sp, #20
 8002ca6:	bd90      	pop	{r4, r7, pc}

08002ca8 <_ZN25MITSUBA_DRIVER_RX_FRAME_217dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETPh>:
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_1, MITSUBA_DRIVER_RX_FRAME_1_DATA_PACKET>{message_id,subsystem_info::MOTORRX1_RL_MSG_LENGTH, true, true, false}
{}

//RX Frame 2
void MITSUBA_DRIVER_RX_FRAME_2::dataPacketToArray(MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8002ca8:	b084      	sub	sp, #16
 8002caa:	b5b0      	push	{r4, r5, r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	2518      	movs	r5, #24
 8002cb2:	197c      	adds	r4, r7, r5
 8002cb4:	6020      	str	r0, [r4, #0]
 8002cb6:	6061      	str	r1, [r4, #4]
 8002cb8:	60a2      	str	r2, [r4, #8]
 8002cba:	60e3      	str	r3, [r4, #12]
	uint32_t convOverHeadLevel = input.overHeatLevel;
 8002cbc:	0029      	movs	r1, r5
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	7c9b      	ldrb	r3, [r3, #18]
 8002cc2:	607b      	str	r3, [r7, #4]

	output[0] = 0;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.adSensorError) << 0;
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	187a      	adds	r2, r7, r1
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.motorCurrSensorUError) << 1;
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b25a      	sxtb	r2, r3
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.motorCurrSensorWError) << 2;
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b25a      	sxtb	r2, r3
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	789b      	ldrb	r3, [r3, #2]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	4313      	orrs	r3, r2
 8002d02:	b25b      	sxtb	r3, r3
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.fetThermError) << 3;
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b25a      	sxtb	r2, r3
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	78db      	ldrb	r3, [r3, #3]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battVoltSensorError) << 5;
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b25a      	sxtb	r2, r3
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	791b      	ldrb	r3, [r3, #4]
 8002d2c:	015b      	lsls	r3, r3, #5
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	4313      	orrs	r3, r2
 8002d32:	b25b      	sxtb	r3, r3
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battCurrSensorError) << 6;
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	b25a      	sxtb	r2, r3
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	795b      	ldrb	r3, [r3, #5]
 8002d44:	019b      	lsls	r3, r3, #6
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	701a      	strb	r2, [r3, #0]
	output[0] |= static_cast<uint8_t>(input.battCurrSensorAdjError) << 7;
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b25a      	sxtb	r2, r3
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	799b      	ldrb	r3, [r3, #6]
 8002d5c:	01db      	lsls	r3, r3, #7
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	4313      	orrs	r3, r2
 8002d62:	b25b      	sxtb	r3, r3
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	701a      	strb	r2, [r3, #0]

	output[1] = 0;
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.motorCurrSensorAdjError) << 0;
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	3301      	adds	r3, #1
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	0008      	movs	r0, r1
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	79db      	ldrb	r3, [r3, #7]
 8002d7e:	0019      	movs	r1, r3
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	3301      	adds	r3, #1
 8002d84:	430a      	orrs	r2, r1
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.accelPosError) << 1;
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b25a      	sxtb	r2, r3
 8002d92:	0001      	movs	r1, r0
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	7a1b      	ldrb	r3, [r3, #8]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	b25b      	sxtb	r3, r3
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	b25a      	sxtb	r2, r3
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	3301      	adds	r3, #1
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
	output[1] |= static_cast<uint8_t>(input.contVoltSensorError) << 3;
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	3301      	adds	r3, #1
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b25a      	sxtb	r2, r3
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	7a5b      	ldrb	r3, [r3, #9]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	b25a      	sxtb	r2, r3
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]

	output[2] = 0;
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.powerSystemError) << 0;
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	3302      	adds	r3, #2
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	0008      	movs	r0, r1
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	7a9b      	ldrb	r3, [r3, #10]
 8002dd8:	0019      	movs	r1, r3
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	3302      	adds	r3, #2
 8002dde:	430a      	orrs	r2, r1
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overCurrError) << 1;
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	3302      	adds	r3, #2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b25a      	sxtb	r2, r3
 8002dec:	0001      	movs	r1, r0
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	7adb      	ldrb	r3, [r3, #11]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	b25b      	sxtb	r3, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b25a      	sxtb	r2, r3
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overVoltError) << 3;
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	3302      	adds	r3, #2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	b25a      	sxtb	r2, r3
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	7b1b      	ldrb	r3, [r3, #12]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	4313      	orrs	r3, r2
 8002e14:	b25a      	sxtb	r2, r3
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	3302      	adds	r3, #2
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
	output[2] |= static_cast<uint8_t>(input.overCurrLimit) << 5;
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	3302      	adds	r3, #2
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b25a      	sxtb	r2, r3
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	7b5b      	ldrb	r3, [r3, #13]
 8002e2a:	015b      	lsls	r3, r3, #5
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	b25a      	sxtb	r2, r3
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	3302      	adds	r3, #2
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

	output[3] = 0;
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	3303      	adds	r3, #3
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorSystemError) << 0;
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	3303      	adds	r3, #3
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	0008      	movs	r0, r1
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	7b9b      	ldrb	r3, [r3, #14]
 8002e4e:	0019      	movs	r1, r3
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	3303      	adds	r3, #3
 8002e54:	430a      	orrs	r2, r1
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.motorLock) << 1;
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	3303      	adds	r3, #3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b25a      	sxtb	r2, r3
 8002e62:	0001      	movs	r1, r0
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	7bdb      	ldrb	r3, [r3, #15]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b25a      	sxtb	r2, r3
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	3303      	adds	r3, #3
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.hallSensorShort) << 2;
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	3303      	adds	r3, #3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b25a      	sxtb	r2, r3
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	7c1b      	ldrb	r3, [r3, #16]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b25a      	sxtb	r2, r3
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	3303      	adds	r3, #3
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]
	output[3] |= static_cast<uint8_t>(input.hallSensorOpen) << 3;
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	3303      	adds	r3, #3
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b25a      	sxtb	r2, r3
 8002e9c:	187b      	adds	r3, r7, r1
 8002e9e:	7c5b      	ldrb	r3, [r3, #17]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	b25a      	sxtb	r2, r3
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	3303      	adds	r3, #3
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]

	output[4] = static_cast<uint32_t>(convOverHeadLevel) & 0x3;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	2103      	movs	r1, #3
 8002eba:	400a      	ands	r2, r1
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bcb0      	pop	{r4, r5, r7}
 8002ec8:	bc08      	pop	{r3}
 8002eca:	b004      	add	sp, #16
 8002ecc:	4718      	bx	r3

08002ece <_ZN25MITSUBA_DRIVER_RX_FRAME_217arrayToDataPacketEPh>:

MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET MITSUBA_DRIVER_RX_FRAME_2::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
	MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET output;

	output.adSensorError 			= input[0] & (1 << 0);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	001a      	movs	r2, r3
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	1e5a      	subs	r2, r3, #1
 8002ee4:	4193      	sbcs	r3, r2
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	701a      	strb	r2, [r3, #0]
	output.motorCurrSensorUError 	= input[0] & (1 << 1);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	1e5a      	subs	r2, r3, #1
 8002ef8:	4193      	sbcs	r3, r2
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	705a      	strb	r2, [r3, #1]
	output.motorCurrSensorWError 	= input[0] & (1 << 2);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	001a      	movs	r2, r3
 8002f06:	2304      	movs	r3, #4
 8002f08:	4013      	ands	r3, r2
 8002f0a:	1e5a      	subs	r2, r3, #1
 8002f0c:	4193      	sbcs	r3, r2
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	709a      	strb	r2, [r3, #2]
	output.fetThermError 			= input[0] & (1 << 3);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	001a      	movs	r2, r3
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	1e5a      	subs	r2, r3, #1
 8002f20:	4193      	sbcs	r3, r2
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	70da      	strb	r2, [r3, #3]
	output.battVoltSensorError 		= input[0] & (1 << 5);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	2320      	movs	r3, #32
 8002f30:	4013      	ands	r3, r2
 8002f32:	1e5a      	subs	r2, r3, #1
 8002f34:	4193      	sbcs	r3, r2
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	711a      	strb	r2, [r3, #4]
	output.battCurrSensorError 		= input[0] & (1 << 6);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	001a      	movs	r2, r3
 8002f42:	2340      	movs	r3, #64	; 0x40
 8002f44:	4013      	ands	r3, r2
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	715a      	strb	r2, [r3, #5]
	output.battCurrSensorAdjError 	= input[0] & (1 << 7);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	09db      	lsrs	r3, r3, #7
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	719a      	strb	r2, [r3, #6]

	output.motorCurrSensorAdjError	= input[1] & (1 << 0);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	001a      	movs	r2, r3
 8002f68:	2301      	movs	r3, #1
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	1e5a      	subs	r2, r3, #1
 8002f6e:	4193      	sbcs	r3, r2
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	71da      	strb	r2, [r3, #7]
	output.accelPosError			= input[1] & (1 << 1);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	2302      	movs	r3, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	1e5a      	subs	r2, r3, #1
 8002f84:	4193      	sbcs	r3, r2
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	721a      	strb	r2, [r3, #8]
	output.contVoltSensorError		= input[1] & (1 << 3);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	001a      	movs	r2, r3
 8002f94:	2308      	movs	r3, #8
 8002f96:	4013      	ands	r3, r2
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	4193      	sbcs	r3, r2
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	725a      	strb	r2, [r3, #9]

	output.powerSystemError 		= input[2] & (1 << 0);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	2301      	movs	r3, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	1e5a      	subs	r2, r3, #1
 8002fb0:	4193      	sbcs	r3, r2
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	729a      	strb	r2, [r3, #10]
	output.overCurrError			= input[2] & (1 << 1);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	3302      	adds	r3, #2
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	1e5a      	subs	r2, r3, #1
 8002fc6:	4193      	sbcs	r3, r2
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	72da      	strb	r2, [r3, #11]
	output.overVoltError			= input[2] & (1 << 3);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	4013      	ands	r3, r2
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	4193      	sbcs	r3, r2
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	731a      	strb	r2, [r3, #12]
	output.overCurrLimit			= input[2] & (1 << 5);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	001a      	movs	r2, r3
 8002fec:	2320      	movs	r3, #32
 8002fee:	4013      	ands	r3, r2
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	4193      	sbcs	r3, r2
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	735a      	strb	r2, [r3, #13]

	output.motorSystemError 		= input[3] & (1 << 0);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	3303      	adds	r3, #3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	001a      	movs	r2, r3
 8003002:	2301      	movs	r3, #1
 8003004:	4013      	ands	r3, r2
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	4193      	sbcs	r3, r2
 800300a:	b2da      	uxtb	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	739a      	strb	r2, [r3, #14]
	output.motorLock		 		= input[3] & (1 << 1);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	3303      	adds	r3, #3
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	001a      	movs	r2, r3
 8003018:	2302      	movs	r3, #2
 800301a:	4013      	ands	r3, r2
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	4193      	sbcs	r3, r2
 8003020:	b2da      	uxtb	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	73da      	strb	r2, [r3, #15]
	output.hallSensorShort			= input[3] & (1 << 2);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	3303      	adds	r3, #3
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	001a      	movs	r2, r3
 800302e:	2304      	movs	r3, #4
 8003030:	4013      	ands	r3, r2
 8003032:	1e5a      	subs	r2, r3, #1
 8003034:	4193      	sbcs	r3, r2
 8003036:	b2da      	uxtb	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	741a      	strb	r2, [r3, #16]
	output.hallSensorOpen			= input[3] & (1 << 3);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	3303      	adds	r3, #3
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	001a      	movs	r2, r3
 8003044:	2308      	movs	r3, #8
 8003046:	4013      	ands	r3, r2
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	4193      	sbcs	r3, r2
 800304c:	b2da      	uxtb	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	745a      	strb	r2, [r3, #17]

	output.overHeatLevel			= input[4] & 0x3;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	3304      	adds	r3, #4
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2203      	movs	r2, #3
 800305a:	4013      	ands	r3, r2
 800305c:	b2da      	uxtb	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	749a      	strb	r2, [r3, #18]

	return output;
 8003062:	46c0      	nop			; (mov r8, r8)
}
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em>:

//Public Function Definitions
MITSUBA_DRIVER_RX_FRAME_2::MITSUBA_DRIVER_RX_FRAME_2(uint32_t message_id):
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af02      	add	r7, sp, #8
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MITSUBA_DRIVER_RX_FRAME_2, MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKET>{message_id,subsystem_info::MOTORRX2_RL_MSG_LENGTH, true, true, false}
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	6839      	ldr	r1, [r7, #0]
 800307a:	2300      	movs	r3, #0
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2301      	movs	r3, #1
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2301      	movs	r3, #1
 8003084:	2205      	movs	r2, #5
 8003086:	f000 f857 	bl	8003138 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb>
 800308a:	4a04      	ldr	r2, [pc, #16]	; (800309c <_ZN25MITSUBA_DRIVER_RX_FRAME_2C1Em+0x30>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	601a      	str	r2, [r3, #0]
{}
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b002      	add	sp, #8
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	08008fb0 	.word	0x08008fb0

080030a0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb>:
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	0019      	movs	r1, r3
 80030ac:	1dfb      	adds	r3, r7, #7
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	1dbb      	adds	r3, r7, #6
 80030b2:	1c0a      	adds	r2, r1, #0
 80030b4:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	1dbb      	adds	r3, r7, #6
 80030ba:	781c      	ldrb	r4, [r3, #0]
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	2324      	movs	r3, #36	; 0x24
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	2320      	movs	r3, #32
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	0023      	movs	r3, r4
 80030d4:	f000 fb96 	bl	8003804 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 80030d8:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETEC1Emhbbb+0x48>)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	601a      	str	r2, [r3, #0]
		{}
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b005      	add	sp, #20
 80030e6:	bd90      	pop	{r4, r7, pc}
 80030e8:	08008fec 	.word	0x08008fec

080030ec <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	0019      	movs	r1, r3
 80030f8:	1dfb      	adds	r3, r7, #7
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	1dbb      	adds	r3, r7, #6
 80030fe:	1c0a      	adds	r2, r1, #0
 8003100:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	1dbb      	adds	r3, r7, #6
 8003106:	781c      	ldrb	r4, [r3, #0]
 8003108:	1dfb      	adds	r3, r7, #7
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	2324      	movs	r3, #36	; 0x24
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	2320      	movs	r3, #32
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	0023      	movs	r3, r4
 8003120:	f000 fb70 	bl	8003804 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8003124:	4a03      	ldr	r2, [pc, #12]	; (8003134 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb+0x48>)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	601a      	str	r2, [r3, #0]
		{}
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b005      	add	sp, #20
 8003132:	bd90      	pop	{r4, r7, pc}
 8003134:	08008fd4 	.word	0x08008fd4

08003138 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b087      	sub	sp, #28
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	0019      	movs	r1, r3
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	1dbb      	adds	r3, r7, #6
 800314a:	1c0a      	adds	r2, r1, #0
 800314c:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	1dbb      	adds	r3, r7, #6
 8003152:	781c      	ldrb	r4, [r3, #0]
 8003154:	1dfb      	adds	r3, r7, #7
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	2324      	movs	r3, #36	; 0x24
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	2320      	movs	r3, #32
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	0023      	movs	r3, r4
 800316c:	f000 fb4a 	bl	8003804 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8003170:	4a03      	ldr	r2, [pc, #12]	; (8003180 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETEC1Emhbbb+0x48>)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	601a      	str	r2, [r3, #0]
		{}
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b005      	add	sp, #20
 800317e:	bd90      	pop	{r4, r7, pc}
 8003180:	08008fbc 	.word	0x08008fbc

08003184 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_237MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8003184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003186:	b085      	sub	sp, #20
 8003188:	af02      	add	r7, sp, #8
 800318a:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3309      	adds	r3, #9
 8003190:	0019      	movs	r1, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2239      	movs	r2, #57	; 0x39
 8003196:	9101      	str	r1, [sp, #4]
 8003198:	5c99      	ldrb	r1, [r3, r2]
 800319a:	1898      	adds	r0, r3, r2
 800319c:	7840      	ldrb	r0, [r0, #1]
 800319e:	0200      	lsls	r0, r0, #8
 80031a0:	4301      	orrs	r1, r0
 80031a2:	1898      	adds	r0, r3, r2
 80031a4:	7880      	ldrb	r0, [r0, #2]
 80031a6:	0400      	lsls	r0, r0, #16
 80031a8:	4301      	orrs	r1, r0
 80031aa:	1898      	adds	r0, r3, r2
 80031ac:	78c0      	ldrb	r0, [r0, #3]
 80031ae:	0600      	lsls	r0, r0, #24
 80031b0:	4301      	orrs	r1, r0
 80031b2:	6039      	str	r1, [r7, #0]
 80031b4:	1899      	adds	r1, r3, r2
 80031b6:	7908      	ldrb	r0, [r1, #4]
 80031b8:	794c      	ldrb	r4, [r1, #5]
 80031ba:	0224      	lsls	r4, r4, #8
 80031bc:	4320      	orrs	r0, r4
 80031be:	798c      	ldrb	r4, [r1, #6]
 80031c0:	0424      	lsls	r4, r4, #16
 80031c2:	4320      	orrs	r0, r4
 80031c4:	79c9      	ldrb	r1, [r1, #7]
 80031c6:	0609      	lsls	r1, r1, #24
 80031c8:	4301      	orrs	r1, r0
 80031ca:	000e      	movs	r6, r1
 80031cc:	1899      	adds	r1, r3, r2
 80031ce:	7a08      	ldrb	r0, [r1, #8]
 80031d0:	7a4c      	ldrb	r4, [r1, #9]
 80031d2:	0224      	lsls	r4, r4, #8
 80031d4:	4320      	orrs	r0, r4
 80031d6:	7a8c      	ldrb	r4, [r1, #10]
 80031d8:	0424      	lsls	r4, r4, #16
 80031da:	4320      	orrs	r0, r4
 80031dc:	7ac9      	ldrb	r1, [r1, #11]
 80031de:	0609      	lsls	r1, r1, #24
 80031e0:	4301      	orrs	r1, r0
 80031e2:	000d      	movs	r5, r1
 80031e4:	1899      	adds	r1, r3, r2
 80031e6:	7b08      	ldrb	r0, [r1, #12]
 80031e8:	7b4c      	ldrb	r4, [r1, #13]
 80031ea:	0224      	lsls	r4, r4, #8
 80031ec:	4320      	orrs	r0, r4
 80031ee:	7b8c      	ldrb	r4, [r1, #14]
 80031f0:	0424      	lsls	r4, r4, #16
 80031f2:	4320      	orrs	r0, r4
 80031f4:	7bc9      	ldrb	r1, [r1, #15]
 80031f6:	0609      	lsls	r1, r1, #24
 80031f8:	4301      	orrs	r1, r0
 80031fa:	000c      	movs	r4, r1
 80031fc:	2110      	movs	r1, #16
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	185b      	adds	r3, r3, r1
 8003202:	466a      	mov	r2, sp
 8003204:	0010      	movs	r0, r2
 8003206:	0019      	movs	r1, r3
 8003208:	2303      	movs	r3, #3
 800320a:	001a      	movs	r2, r3
 800320c:	f005 fd50 	bl	8008cb0 <memcpy>
 8003210:	6838      	ldr	r0, [r7, #0]
 8003212:	0031      	movs	r1, r6
 8003214:	002a      	movs	r2, r5
 8003216:	0023      	movs	r3, r4
 8003218:	f7ff fd46 	bl	8002ca8 <_ZN25MITSUBA_DRIVER_RX_FRAME_217dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_2_DATA_PACKETPh>
	}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b003      	add	sp, #12
 8003222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003224 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI25MITSUBA_DRIVER_RX_FRAME_037MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 8003224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003226:	b085      	sub	sp, #20
 8003228:	af02      	add	r7, sp, #8
 800322a:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3309      	adds	r3, #9
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	223a      	movs	r2, #58	; 0x3a
 8003236:	9100      	str	r1, [sp, #0]
 8003238:	5a99      	ldrh	r1, [r3, r2]
 800323a:	1898      	adds	r0, r3, r2
 800323c:	8840      	ldrh	r0, [r0, #2]
 800323e:	0400      	lsls	r0, r0, #16
 8003240:	4301      	orrs	r1, r0
 8003242:	6039      	str	r1, [r7, #0]
 8003244:	1899      	adds	r1, r3, r2
 8003246:	8888      	ldrh	r0, [r1, #4]
 8003248:	88c9      	ldrh	r1, [r1, #6]
 800324a:	0409      	lsls	r1, r1, #16
 800324c:	4301      	orrs	r1, r0
 800324e:	000e      	movs	r6, r1
 8003250:	1899      	adds	r1, r3, r2
 8003252:	8908      	ldrh	r0, [r1, #8]
 8003254:	8949      	ldrh	r1, [r1, #10]
 8003256:	0409      	lsls	r1, r1, #16
 8003258:	4301      	orrs	r1, r0
 800325a:	000d      	movs	r5, r1
 800325c:	189b      	adds	r3, r3, r2
 800325e:	899a      	ldrh	r2, [r3, #12]
 8003260:	89db      	ldrh	r3, [r3, #14]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	4313      	orrs	r3, r2
 8003266:	001c      	movs	r4, r3
 8003268:	6838      	ldr	r0, [r7, #0]
 800326a:	0031      	movs	r1, r6
 800326c:	002a      	movs	r2, r5
 800326e:	0023      	movs	r3, r4
 8003270:	f7ff faea 	bl	8002848 <_ZN25MITSUBA_DRIVER_RX_FRAME_017dataPacketToArrayE37MITSUBA_DRIVER_RX_FRAME_0_DATA_PACKETPh>
	}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b003      	add	sp, #12
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800327c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI28MITSUBA_DRIVER_TX_RL_MESSAGE32MITSUBA_DRIVER_TX_RL_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3309      	adds	r3, #9
 8003288:	001c      	movs	r4, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2239      	movs	r2, #57	; 0x39
 800328e:	5c99      	ldrb	r1, [r3, r2]
 8003290:	1898      	adds	r0, r3, r2
 8003292:	7840      	ldrb	r0, [r0, #1]
 8003294:	0200      	lsls	r0, r0, #8
 8003296:	4301      	orrs	r1, r0
 8003298:	189b      	adds	r3, r3, r2
 800329a:	789b      	ldrb	r3, [r3, #2]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	430b      	orrs	r3, r1
 80032a0:	001a      	movs	r2, r3
 80032a2:	2300      	movs	r3, #0
 80032a4:	0212      	lsls	r2, r2, #8
 80032a6:	0a12      	lsrs	r2, r2, #8
 80032a8:	0e1b      	lsrs	r3, r3, #24
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	4313      	orrs	r3, r2
 80032ae:	0021      	movs	r1, r4
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff fa81 	bl	80027b8 <_ZN28MITSUBA_DRIVER_TX_RL_MESSAGE17dataPacketToArrayE32MITSUBA_DRIVER_TX_RL_DATA_PACKETPh>
	}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b003      	add	sp, #12
 80032bc:	bd90      	pop	{r4, r7, pc}
	...

080032c0 <_ZN15ORION_MESSAGE_017dataPacketToArrayE27ORION_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void ORION_MESSAGE_0::dataPacketToArray(ORION_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	003c      	movs	r4, r7
 80032c8:	6020      	str	r0, [r4, #0]
 80032ca:	6061      	str	r1, [r4, #4]
 80032cc:	60a2      	str	r2, [r4, #8]
 80032ce:	60e3      	str	r3, [r4, #12]
	float convLowCellVoltage = input.lowCellVoltage * 10000;
 80032d0:	003b      	movs	r3, r7
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4932      	ldr	r1, [pc, #200]	; (80033a0 <_ZN15ORION_MESSAGE_017dataPacketToArrayE27ORION_MESSAGE_0_DATA_PACKETPh+0xe0>)
 80032d6:	1c18      	adds	r0, r3, #0
 80032d8:	f7fd f9b6 	bl	8000648 <__aeabi_fmul>
 80032dc:	1c03      	adds	r3, r0, #0
 80032de:	61fb      	str	r3, [r7, #28]
	float convHighCellVoltage = input.highCellVoltage * 10000;
 80032e0:	003b      	movs	r3, r7
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	492e      	ldr	r1, [pc, #184]	; (80033a0 <_ZN15ORION_MESSAGE_017dataPacketToArrayE27ORION_MESSAGE_0_DATA_PACKETPh+0xe0>)
 80032e6:	1c18      	adds	r0, r3, #0
 80032e8:	f7fd f9ae 	bl	8000648 <__aeabi_fmul>
 80032ec:	1c03      	adds	r3, r0, #0
 80032ee:	61bb      	str	r3, [r7, #24]
	float convAvgCellVoltage = input.avgCellVoltage * 10000;
 80032f0:	003b      	movs	r3, r7
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	492a      	ldr	r1, [pc, #168]	; (80033a0 <_ZN15ORION_MESSAGE_017dataPacketToArrayE27ORION_MESSAGE_0_DATA_PACKETPh+0xe0>)
 80032f6:	1c18      	adds	r0, r3, #0
 80032f8:	f7fd f9a6 	bl	8000648 <__aeabi_fmul>
 80032fc:	1c03      	adds	r3, r0, #0
 80032fe:	617b      	str	r3, [r7, #20]
	float convPackSummedVoltage = input.packSummedVoltage * 1000;
 8003300:	003b      	movs	r3, r7
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4927      	ldr	r1, [pc, #156]	; (80033a4 <_ZN15ORION_MESSAGE_017dataPacketToArrayE27ORION_MESSAGE_0_DATA_PACKETPh+0xe4>)
 8003306:	1c18      	adds	r0, r3, #0
 8003308:	f7fd f99e 	bl	8000648 <__aeabi_fmul>
 800330c:	1c03      	adds	r3, r0, #0
 800330e:	613b      	str	r3, [r7, #16]

	output[0] = static_cast<uint32_t>(convLowCellVoltage) & 0xFF;
 8003310:	69f8      	ldr	r0, [r7, #28]
 8003312:	f7fd f86f 	bl	80003f4 <__aeabi_f2uiz>
 8003316:	0003      	movs	r3, r0
 8003318:	b2da      	uxtb	r2, r3
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	701a      	strb	r2, [r3, #0]
	output[1] = (static_cast<uint32_t>(convLowCellVoltage) >> 8) & 0xFF;
 800331e:	69f8      	ldr	r0, [r7, #28]
 8003320:	f7fd f868 	bl	80003f4 <__aeabi_f2uiz>
 8003324:	0003      	movs	r3, r0
 8003326:	0a1a      	lsrs	r2, r3, #8
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	3301      	adds	r3, #1
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]
	output[2] = static_cast<uint32_t>(convHighCellVoltage) & 0xFF;
 8003330:	69b8      	ldr	r0, [r7, #24]
 8003332:	f7fd f85f 	bl	80003f4 <__aeabi_f2uiz>
 8003336:	0002      	movs	r2, r0
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	3302      	adds	r3, #2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	701a      	strb	r2, [r3, #0]
	output[3] = (static_cast<uint32_t>(convHighCellVoltage) >> 8) & 0xFF;
 8003340:	69b8      	ldr	r0, [r7, #24]
 8003342:	f7fd f857 	bl	80003f4 <__aeabi_f2uiz>
 8003346:	0003      	movs	r3, r0
 8003348:	0a1a      	lsrs	r2, r3, #8
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	3303      	adds	r3, #3
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]
	output[4] = static_cast<uint32_t>(convAvgCellVoltage) & 0xFF;
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f7fd f84e 	bl	80003f4 <__aeabi_f2uiz>
 8003358:	0002      	movs	r2, r0
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	3304      	adds	r3, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
	output[5] = (static_cast<uint32_t>(convAvgCellVoltage) >> 8) & 0xFF;
 8003362:	6978      	ldr	r0, [r7, #20]
 8003364:	f7fd f846 	bl	80003f4 <__aeabi_f2uiz>
 8003368:	0003      	movs	r3, r0
 800336a:	0a1a      	lsrs	r2, r3, #8
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	3305      	adds	r3, #5
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]
	output[6] = static_cast<uint32_t>(convPackSummedVoltage) & 0xFF;
 8003374:	6938      	ldr	r0, [r7, #16]
 8003376:	f7fd f83d 	bl	80003f4 <__aeabi_f2uiz>
 800337a:	0002      	movs	r2, r0
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	3306      	adds	r3, #6
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]
	output[7] = (static_cast<uint32_t>(convPackSummedVoltage) >> 8) & 0xFF;
 8003384:	6938      	ldr	r0, [r7, #16]
 8003386:	f7fd f835 	bl	80003f4 <__aeabi_f2uiz>
 800338a:	0003      	movs	r3, r0
 800338c:	0a1a      	lsrs	r2, r3, #8
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	3307      	adds	r3, #7
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b009      	add	sp, #36	; 0x24
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	461c4000 	.word	0x461c4000
 80033a4:	447a0000 	.word	0x447a0000

080033a8 <_ZN15ORION_MESSAGE_017arrayToDataPacketEPh>:

ORION_MESSAGE_0_DATA_PACKET ORION_MESSAGE_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
	ORION_MESSAGE_0_DATA_PACKET output;
	uint32_t preLCV = (static_cast<uint32_t>(input[1]) << 8) | input[0];
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
	uint32_t preHCV = (static_cast<uint32_t>(input[3]) << 8) | input[2];
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	3303      	adds	r3, #3
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	3202      	adds	r2, #2
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
	uint32_t preACV = (static_cast<uint32_t>(input[5]) << 8) | input[4];
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	3305      	adds	r3, #5
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	3204      	adds	r2, #4
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
	uint32_t prePCV = (static_cast<uint32_t>(input[7]) << 8) | input[6];
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	3307      	adds	r3, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	3206      	adds	r2, #6
 80033f2:	7812      	ldrb	r2, [r2, #0]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]
	output.lowCellVoltage = static_cast<float>(preLCV)/10000;
 80033f8:	6978      	ldr	r0, [r7, #20]
 80033fa:	f7fd fc3b 	bl	8000c74 <__aeabi_ui2f>
 80033fe:	1c03      	adds	r3, r0, #0
 8003400:	4918      	ldr	r1, [pc, #96]	; (8003464 <_ZN15ORION_MESSAGE_017arrayToDataPacketEPh+0xbc>)
 8003402:	1c18      	adds	r0, r3, #0
 8003404:	f7fd f80e 	bl	8000424 <__aeabi_fdiv>
 8003408:	1c03      	adds	r3, r0, #0
 800340a:	1c1a      	adds	r2, r3, #0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	601a      	str	r2, [r3, #0]
	output.highCellVoltage = static_cast<float>(preHCV)/10000;
 8003410:	6938      	ldr	r0, [r7, #16]
 8003412:	f7fd fc2f 	bl	8000c74 <__aeabi_ui2f>
 8003416:	1c03      	adds	r3, r0, #0
 8003418:	4912      	ldr	r1, [pc, #72]	; (8003464 <_ZN15ORION_MESSAGE_017arrayToDataPacketEPh+0xbc>)
 800341a:	1c18      	adds	r0, r3, #0
 800341c:	f7fd f802 	bl	8000424 <__aeabi_fdiv>
 8003420:	1c03      	adds	r3, r0, #0
 8003422:	1c1a      	adds	r2, r3, #0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	605a      	str	r2, [r3, #4]
	output.avgCellVoltage = static_cast<float>(preACV)/10000;
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7fd fc23 	bl	8000c74 <__aeabi_ui2f>
 800342e:	1c03      	adds	r3, r0, #0
 8003430:	490c      	ldr	r1, [pc, #48]	; (8003464 <_ZN15ORION_MESSAGE_017arrayToDataPacketEPh+0xbc>)
 8003432:	1c18      	adds	r0, r3, #0
 8003434:	f7fc fff6 	bl	8000424 <__aeabi_fdiv>
 8003438:	1c03      	adds	r3, r0, #0
 800343a:	1c1a      	adds	r2, r3, #0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	609a      	str	r2, [r3, #8]
	//TODO: figure out whether this should be 1000 or 100
	output.packSummedVoltage = static_cast<float>(prePCV)/1000;
 8003440:	68b8      	ldr	r0, [r7, #8]
 8003442:	f7fd fc17 	bl	8000c74 <__aeabi_ui2f>
 8003446:	1c03      	adds	r3, r0, #0
 8003448:	4907      	ldr	r1, [pc, #28]	; (8003468 <_ZN15ORION_MESSAGE_017arrayToDataPacketEPh+0xc0>)
 800344a:	1c18      	adds	r0, r3, #0
 800344c:	f7fc ffea 	bl	8000424 <__aeabi_fdiv>
 8003450:	1c03      	adds	r3, r0, #0
 8003452:	1c1a      	adds	r2, r3, #0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]

	return output;
 8003458:	46c0      	nop			; (mov r8, r8)
}
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	46bd      	mov	sp, r7
 800345e:	b006      	add	sp, #24
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	461c4000 	.word	0x461c4000
 8003468:	447a0000 	.word	0x447a0000

0800346c <_ZN15ORION_MESSAGE_0C1Et>:

//Public Function Definitions
ORION_MESSAGE_0::ORION_MESSAGE_0(uint16_t message_id):
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	000a      	movs	r2, r1
 8003476:	1cbb      	adds	r3, r7, #2
 8003478:	801a      	strh	r2, [r3, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<ORION_MESSAGE_0, ORION_MESSAGE_0_DATA_PACKET>{message_id,subsystem_info::BMS0_MSG_LENGTH, false, false, false}
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	1cbb      	adds	r3, r7, #2
 800347e:	8819      	ldrh	r1, [r3, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	2300      	movs	r3, #0
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	2208      	movs	r2, #8
 800348c:	f000 f80a 	bl	80034a4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI15ORION_MESSAGE_027ORION_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 8003490:	4a03      	ldr	r2, [pc, #12]	; (80034a0 <_ZN15ORION_MESSAGE_0C1Et+0x34>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	601a      	str	r2, [r3, #0]
{}
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b002      	add	sp, #8
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	08008ff8 	.word	0x08008ff8

080034a4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI15ORION_MESSAGE_027ORION_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	0019      	movs	r1, r3
 80034b0:	1dfb      	adds	r3, r7, #7
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	1dbb      	adds	r3, r7, #6
 80034b6:	1c0a      	adds	r2, r1, #0
 80034b8:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	1dbb      	adds	r3, r7, #6
 80034be:	781c      	ldrb	r4, [r3, #0]
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	2324      	movs	r3, #36	; 0x24
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	2320      	movs	r3, #32
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	0023      	movs	r3, r4
 80034d8:	f000 f994 	bl	8003804 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 80034dc:	4a03      	ldr	r2, [pc, #12]	; (80034ec <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI15ORION_MESSAGE_027ORION_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	601a      	str	r2, [r3, #0]
		{}
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b005      	add	sp, #20
 80034ea:	bd90      	pop	{r4, r7, pc}
 80034ec:	08009004 	.word	0x08009004

080034f0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI15ORION_MESSAGE_027ORION_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3309      	adds	r3, #9
 80034fc:	001a      	movs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	9200      	str	r2, [sp, #0]
 8003502:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003504:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003506:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350a:	f7ff fed9 	bl	80032c0 <_ZN15ORION_MESSAGE_017dataPacketToArrayE27ORION_MESSAGE_0_DATA_PACKETPh>
	}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b002      	add	sp, #8
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <_ZN17PROTON1_MESSAGE_017dataPacketToArrayE29PROTON1_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void PROTON1_MESSAGE_0::dataPacketToArray(PROTON1_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	003c      	movs	r4, r7
 8003520:	6020      	str	r0, [r4, #0]
 8003522:	6061      	str	r1, [r4, #4]
 8003524:	60a2      	str	r2, [r4, #8]
 8003526:	60e3      	str	r3, [r4, #12]
	assert_param(output != nullptr);

	float convArrayVoltage = input.arrayVoltage * 100;
 8003528:	003b      	movs	r3, r7
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4932      	ldr	r1, [pc, #200]	; (80035f8 <_ZN17PROTON1_MESSAGE_017dataPacketToArrayE29PROTON1_MESSAGE_0_DATA_PACKETPh+0xe0>)
 800352e:	1c18      	adds	r0, r3, #0
 8003530:	f7fd f88a 	bl	8000648 <__aeabi_fmul>
 8003534:	1c03      	adds	r3, r0, #0
 8003536:	61fb      	str	r3, [r7, #28]
	float convArrayCurrent = input.arrayCurrent * 100;
 8003538:	003b      	movs	r3, r7
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	492e      	ldr	r1, [pc, #184]	; (80035f8 <_ZN17PROTON1_MESSAGE_017dataPacketToArrayE29PROTON1_MESSAGE_0_DATA_PACKETPh+0xe0>)
 800353e:	1c18      	adds	r0, r3, #0
 8003540:	f7fd f882 	bl	8000648 <__aeabi_fmul>
 8003544:	1c03      	adds	r3, r0, #0
 8003546:	61bb      	str	r3, [r7, #24]
	float convBatteryVoltage = input.batteryVoltage * 100;
 8003548:	003b      	movs	r3, r7
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	492a      	ldr	r1, [pc, #168]	; (80035f8 <_ZN17PROTON1_MESSAGE_017dataPacketToArrayE29PROTON1_MESSAGE_0_DATA_PACKETPh+0xe0>)
 800354e:	1c18      	adds	r0, r3, #0
 8003550:	f7fd f87a 	bl	8000648 <__aeabi_fmul>
 8003554:	1c03      	adds	r3, r0, #0
 8003556:	617b      	str	r3, [r7, #20]
	float convMpptTemperature = input.mpptTemperature * 100;
 8003558:	003b      	movs	r3, r7
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4926      	ldr	r1, [pc, #152]	; (80035f8 <_ZN17PROTON1_MESSAGE_017dataPacketToArrayE29PROTON1_MESSAGE_0_DATA_PACKETPh+0xe0>)
 800355e:	1c18      	adds	r0, r3, #0
 8003560:	f7fd f872 	bl	8000648 <__aeabi_fmul>
 8003564:	1c03      	adds	r3, r0, #0
 8003566:	613b      	str	r3, [r7, #16]

	output[0] = static_cast<uint32_t>(convArrayVoltage) & 0xFF;
 8003568:	69f8      	ldr	r0, [r7, #28]
 800356a:	f7fc ff43 	bl	80003f4 <__aeabi_f2uiz>
 800356e:	0003      	movs	r3, r0
 8003570:	b2da      	uxtb	r2, r3
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	701a      	strb	r2, [r3, #0]
	output[1] = (static_cast<uint32_t>(convArrayVoltage) >> 8) & 0xFF;
 8003576:	69f8      	ldr	r0, [r7, #28]
 8003578:	f7fc ff3c 	bl	80003f4 <__aeabi_f2uiz>
 800357c:	0003      	movs	r3, r0
 800357e:	0a1a      	lsrs	r2, r3, #8
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	3301      	adds	r3, #1
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]
	output[2] = static_cast<uint32_t>(convArrayCurrent) & 0xFF;
 8003588:	69b8      	ldr	r0, [r7, #24]
 800358a:	f7fc ff33 	bl	80003f4 <__aeabi_f2uiz>
 800358e:	0002      	movs	r2, r0
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	3302      	adds	r3, #2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]
	output[3] = (static_cast<uint32_t>(convArrayCurrent) >> 8) & 0xFF;
 8003598:	69b8      	ldr	r0, [r7, #24]
 800359a:	f7fc ff2b 	bl	80003f4 <__aeabi_f2uiz>
 800359e:	0003      	movs	r3, r0
 80035a0:	0a1a      	lsrs	r2, r3, #8
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	3303      	adds	r3, #3
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
	output[4] = static_cast<uint32_t>(convBatteryVoltage) & 0xFF;
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f7fc ff22 	bl	80003f4 <__aeabi_f2uiz>
 80035b0:	0002      	movs	r2, r0
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	3304      	adds	r3, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]
	output[5] = (static_cast<uint32_t>(convBatteryVoltage) >> 8) & 0xFF;
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7fc ff1a 	bl	80003f4 <__aeabi_f2uiz>
 80035c0:	0003      	movs	r3, r0
 80035c2:	0a1a      	lsrs	r2, r3, #8
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	3305      	adds	r3, #5
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
	output[6] = static_cast<uint32_t>(convMpptTemperature) & 0xFF;
 80035cc:	6938      	ldr	r0, [r7, #16]
 80035ce:	f7fc ff11 	bl	80003f4 <__aeabi_f2uiz>
 80035d2:	0002      	movs	r2, r0
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	3306      	adds	r3, #6
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]
	output[7] = (static_cast<uint32_t>(convMpptTemperature) >> 8) & 0xFF;
 80035dc:	6938      	ldr	r0, [r7, #16]
 80035de:	f7fc ff09 	bl	80003f4 <__aeabi_f2uiz>
 80035e2:	0003      	movs	r3, r0
 80035e4:	0a1a      	lsrs	r2, r3, #8
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	3307      	adds	r3, #7
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b009      	add	sp, #36	; 0x24
 80035f4:	bd90      	pop	{r4, r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	42c80000 	.word	0x42c80000

080035fc <_ZN17PROTON1_MESSAGE_017arrayToDataPacketEPh>:

PROTON1_MESSAGE_0_DATA_PACKET PROTON1_MESSAGE_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
	assert_param(input != nullptr);

	PROTON1_MESSAGE_0_DATA_PACKET output;
	uint32_t preArrayVoltage = (static_cast<uint32_t>(input[1]) << 8) | input[0];
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
	uint32_t preArrayCurrent = (static_cast<uint32_t>(input[3]) << 8) | input[2];
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	3303      	adds	r3, #3
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	3202      	adds	r2, #2
 8003622:	7812      	ldrb	r2, [r2, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
	uint32_t preBatteryVoltage = (static_cast<uint32_t>(input[5]) << 8) | input[4];
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	3305      	adds	r3, #5
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	3204      	adds	r2, #4
 8003634:	7812      	ldrb	r2, [r2, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
	uint32_t preMpptTemperature = (static_cast<uint32_t>(input[7]) << 8) | input[6];
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	3307      	adds	r3, #7
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	3206      	adds	r2, #6
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
	output.arrayVoltage = static_cast<float>(preArrayVoltage)/100;
 800364c:	6978      	ldr	r0, [r7, #20]
 800364e:	f7fd fb11 	bl	8000c74 <__aeabi_ui2f>
 8003652:	1c03      	adds	r3, r0, #0
 8003654:	4918      	ldr	r1, [pc, #96]	; (80036b8 <_ZN17PROTON1_MESSAGE_017arrayToDataPacketEPh+0xbc>)
 8003656:	1c18      	adds	r0, r3, #0
 8003658:	f7fc fee4 	bl	8000424 <__aeabi_fdiv>
 800365c:	1c03      	adds	r3, r0, #0
 800365e:	1c1a      	adds	r2, r3, #0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	601a      	str	r2, [r3, #0]
	output.arrayCurrent = static_cast<float>(preArrayCurrent)/100;
 8003664:	6938      	ldr	r0, [r7, #16]
 8003666:	f7fd fb05 	bl	8000c74 <__aeabi_ui2f>
 800366a:	1c03      	adds	r3, r0, #0
 800366c:	4912      	ldr	r1, [pc, #72]	; (80036b8 <_ZN17PROTON1_MESSAGE_017arrayToDataPacketEPh+0xbc>)
 800366e:	1c18      	adds	r0, r3, #0
 8003670:	f7fc fed8 	bl	8000424 <__aeabi_fdiv>
 8003674:	1c03      	adds	r3, r0, #0
 8003676:	1c1a      	adds	r2, r3, #0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	605a      	str	r2, [r3, #4]
	output.batteryVoltage = static_cast<float>(preBatteryVoltage)/100;
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7fd faf9 	bl	8000c74 <__aeabi_ui2f>
 8003682:	1c03      	adds	r3, r0, #0
 8003684:	490c      	ldr	r1, [pc, #48]	; (80036b8 <_ZN17PROTON1_MESSAGE_017arrayToDataPacketEPh+0xbc>)
 8003686:	1c18      	adds	r0, r3, #0
 8003688:	f7fc fecc 	bl	8000424 <__aeabi_fdiv>
 800368c:	1c03      	adds	r3, r0, #0
 800368e:	1c1a      	adds	r2, r3, #0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]
	output.mpptTemperature = static_cast<float>(preMpptTemperature)/100;
 8003694:	68b8      	ldr	r0, [r7, #8]
 8003696:	f7fd faed 	bl	8000c74 <__aeabi_ui2f>
 800369a:	1c03      	adds	r3, r0, #0
 800369c:	4906      	ldr	r1, [pc, #24]	; (80036b8 <_ZN17PROTON1_MESSAGE_017arrayToDataPacketEPh+0xbc>)
 800369e:	1c18      	adds	r0, r3, #0
 80036a0:	f7fc fec0 	bl	8000424 <__aeabi_fdiv>
 80036a4:	1c03      	adds	r3, r0, #0
 80036a6:	1c1a      	adds	r2, r3, #0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60da      	str	r2, [r3, #12]

	return output;
 80036ac:	46c0      	nop			; (mov r8, r8)
}
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b006      	add	sp, #24
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	42c80000 	.word	0x42c80000

080036bc <_ZN17PROTON1_MESSAGE_0C1Et>:

//Public Function Definitions
PROTON1_MESSAGE_0::PROTON1_MESSAGE_0(uint16_t message_id):
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	000a      	movs	r2, r1
 80036c6:	1cbb      	adds	r3, r7, #2
 80036c8:	801a      	strh	r2, [r3, #0]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<PROTON1_MESSAGE_0, PROTON1_MESSAGE_0_DATA_PACKET>{message_id,subsystem_info::MPPT0_MSG_LENGTH, false, false, true}
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	1cbb      	adds	r3, r7, #2
 80036ce:	8819      	ldrh	r1, [r3, #0]
 80036d0:	2301      	movs	r3, #1
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	2300      	movs	r3, #0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2300      	movs	r3, #0
 80036da:	2208      	movs	r2, #8
 80036dc:	f000 f80a 	bl	80036f4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI17PROTON1_MESSAGE_029PROTON1_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 80036e0:	4a03      	ldr	r2, [pc, #12]	; (80036f0 <_ZN17PROTON1_MESSAGE_0C1Et+0x34>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
{}
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	08009010 	.word	0x08009010

080036f4 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI17PROTON1_MESSAGE_029PROTON1_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	0019      	movs	r1, r3
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	1dbb      	adds	r3, r7, #6
 8003706:	1c0a      	adds	r2, r1, #0
 8003708:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	1dbb      	adds	r3, r7, #6
 800370e:	781c      	ldrb	r4, [r3, #0]
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	2324      	movs	r3, #36	; 0x24
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2320      	movs	r3, #32
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	0023      	movs	r3, r4
 8003728:	f000 f86c 	bl	8003804 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 800372c:	4a03      	ldr	r2, [pc, #12]	; (800373c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI17PROTON1_MESSAGE_029PROTON1_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	601a      	str	r2, [r3, #0]
		{}
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b005      	add	sp, #20
 800373a:	bd90      	pop	{r4, r7, pc}
 800373c:	0800901c 	.word	0x0800901c

08003740 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI17PROTON1_MESSAGE_029PROTON1_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af02      	add	r7, sp, #8
 8003746:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3309      	adds	r3, #9
 800374c:	001a      	movs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	9200      	str	r2, [sp, #0]
 8003752:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003754:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375a:	f7ff fedd 	bl	8003518 <_ZN17PROTON1_MESSAGE_017dataPacketToArrayE29PROTON1_MESSAGE_0_DATA_PACKETPh>
	}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003766:	b590      	push	{r4, r7, lr}
 8003768:	b08d      	sub	sp, #52	; 0x34
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2100      	movs	r1, #0
 8003772:	0018      	movs	r0, r3
 8003774:	f000 fd33 	bl	80041de <HAL_CAN_GetRxFifoFillLevel>
 8003778:	0003      	movs	r3, r0
 800377a:	1e5a      	subs	r2, r3, #1
 800377c:	4193      	sbcs	r3, r2
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d02e      	beq.n	80037e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 8003784:	2308      	movs	r3, #8
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2410      	movs	r4, #16
 800378a:	193a      	adds	r2, r7, r4
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	2100      	movs	r1, #0
 8003790:	f000 fc09 	bl	8003fa6 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 8003794:	193b      	adds	r3, r7, r4
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 800379c:	2310      	movs	r3, #16
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	e002      	b.n	80037aa <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 80037a4:	2310      	movs	r3, #16
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 f864 	bl	8003878 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 80037b0:	0003      	movs	r3, r0
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0d9      	beq.n	800376e <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	7a1b      	ldrb	r3, [r3, #8]
 80037be:	001a      	movs	r2, r3
 80037c0:	2310      	movs	r3, #16
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d1d1      	bne.n	800376e <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 80037ca:	2308      	movs	r3, #8
 80037cc:	18fa      	adds	r2, r7, r3
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	0011      	movs	r1, r2
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 f926 	bl	8003a24 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 f87f 	bl	80038de <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 80037e0:	e7c5      	b.n	800376e <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b00d      	add	sp, #52	; 0x34
 80037e8:	bd90      	pop	{r4, r7, pc}
	...

080037ec <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <CEC_CAN_IRQHandler+0x14>)
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 fd1e 	bl	8004234 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	20000844 	.word	0x20000844

08003804 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	0019      	movs	r1, r3
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	1dbb      	adds	r3, r7, #6
 8003816:	1c0a      	adds	r2, r1, #0
 8003818:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 800381a:	4a16      	ldr	r2, [pc, #88]	; (8003874 <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1dfa      	adds	r2, r7, #7
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	721a      	strb	r2, [r3, #8]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3312      	adds	r3, #18
 8003832:	0018      	movs	r0, r3
 8003834:	f000 f909 	bl	8003a4a <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1dba      	adds	r2, r7, #6
 800383c:	2130      	movs	r1, #48	; 0x30
 800383e:	7812      	ldrb	r2, [r2, #0]
 8003840:	545a      	strb	r2, [r3, r1]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2218      	movs	r2, #24
 8003846:	18ba      	adds	r2, r7, r2
 8003848:	2131      	movs	r1, #49	; 0x31
 800384a:	7812      	ldrb	r2, [r2, #0]
 800384c:	545a      	strb	r2, [r3, r1]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	221c      	movs	r2, #28
 8003852:	18ba      	adds	r2, r7, r2
 8003854:	2132      	movs	r1, #50	; 0x32
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	545a      	strb	r2, [r3, r1]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	635a      	str	r2, [r3, #52]	; 0x34
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2238      	movs	r2, #56	; 0x38
 8003864:	2100      	movs	r1, #0
 8003866:	5499      	strb	r1, [r3, r2]
{}
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b004      	add	sp, #16
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	08009028 	.word	0x08009028

08003878 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 8003884:	0011      	movs	r1, r2
 8003886:	0018      	movs	r0, r3
 8003888:	f000 f9a6 	bl	8003bd8 <_ZN14RX_BINARY_TREE11FindElementEm>
 800388c:	0003      	movs	r3, r0
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	200007cc 	.word	0x200007cc

0800389c <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>:
        isReceiving = true;
    } 
}

void SUBSYSTEM_DATA_MODULE::SendData(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	if(this->isRxOnly)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2231      	movs	r2, #49	; 0x31
 80038a8:	5c9b      	ldrb	r3, [r3, r2]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d113      	bne.n	80038d6 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	{
		//Do Nothing
	}else if(this->isTxRtr)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2232      	movs	r2, #50	; 0x32
 80038b2:	5c9b      	ldrb	r3, [r3, r2]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x26>
	{
		//Send RTR message
		this->sendRTRMessage();
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 f862 	bl	8003984 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>
	}else{
		//Send normal data message
	    this->fillTransmitBuffer();
	    this->sendTransmitBufferData();
	}
}
 80038c0:	e009      	b.n	80038d6 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	    this->fillTransmitBuffer();
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	0010      	movs	r0, r2
 80038cc:	4798      	blx	r3
	    this->sendTransmitBufferData();
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 f815 	bl	8003900 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b002      	add	sp, #8
 80038dc:	bd80      	pop	{r7, pc}

080038de <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	0010      	movs	r0, r2
 80038f6:	4798      	blx	r3
    }
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>:
	//Start the CAN bus
	HAL_CAN_Start(&hcan);
}

void SUBSYSTEM_DATA_MODULE::sendTransmitBufferData(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d033      	beq.n	8003978 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x78>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8003910:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8003912:	0018      	movs	r0, r3
 8003914:	f000 fb0f 	bl	8003f36 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003918:	0003      	movs	r3, r0
 800391a:	425a      	negs	r2, r3
 800391c:	4153      	adcs	r3, r2
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d000      	beq.n	8003926 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x26>
 8003924:	e7f4      	b.n	8003910 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_DATA;
 8003926:	210c      	movs	r1, #12
 8003928:	187b      	adds	r3, r7, r1
 800392a:	2200      	movs	r2, #0
 800392c:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	7a1b      	ldrb	r3, [r3, #8]
 8003932:	001a      	movs	r2, r3
 8003934:	187b      	adds	r3, r7, r1
 8003936:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2230      	movs	r2, #48	; 0x30
 800393c:	5c9b      	ldrb	r3, [r3, r2]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x54>
		{
			pHeader.ExtId = this->messageIdentifier;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	210c      	movs	r1, #12
 8003948:	187b      	adds	r3, r7, r1
 800394a:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 800394c:	187b      	adds	r3, r7, r1
 800394e:	2204      	movs	r2, #4
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	e007      	b.n	8003964 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x64>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	210c      	movs	r1, #12
 800395a:	187b      	adds	r3, r7, r1
 800395c:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 800395e:	187b      	adds	r3, r7, r1
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3309      	adds	r3, #9
 8003968:	001a      	movs	r2, r3
 800396a:	2324      	movs	r3, #36	; 0x24
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	210c      	movs	r1, #12
 8003970:	1879      	adds	r1, r7, r1
 8003972:	4803      	ldr	r0, [pc, #12]	; (8003980 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8003974:	f000 fa00 	bl	8003d78 <HAL_CAN_AddTxMessage>
	}
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b00a      	add	sp, #40	; 0x28
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000844 	.word	0x20000844

08003984 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>:

void SUBSYSTEM_DATA_MODULE::sendRTRMessage(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d033      	beq.n	80039fc <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x78>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8003996:	0018      	movs	r0, r3
 8003998:	f000 facd 	bl	8003f36 <HAL_CAN_GetTxMailboxesFreeLevel>
 800399c:	0003      	movs	r3, r0
 800399e:	425a      	negs	r2, r3
 80039a0:	4153      	adcs	r3, r2
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d000      	beq.n	80039aa <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x26>
 80039a8:	e7f4      	b.n	8003994 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_REMOTE;
 80039aa:	210c      	movs	r1, #12
 80039ac:	187b      	adds	r3, r7, r1
 80039ae:	2202      	movs	r2, #2
 80039b0:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	7a1b      	ldrb	r3, [r3, #8]
 80039b6:	001a      	movs	r2, r3
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2230      	movs	r2, #48	; 0x30
 80039c0:	5c9b      	ldrb	r3, [r3, r2]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x54>
		{
			pHeader.ExtId = this->messageIdentifier;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	210c      	movs	r1, #12
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	2204      	movs	r2, #4
 80039d4:	609a      	str	r2, [r3, #8]
 80039d6:	e007      	b.n	80039e8 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x64>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	210c      	movs	r1, #12
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	2200      	movs	r2, #0
 80039e6:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		//It doesn't matter what is in transmit buffer, since this doesnt send a data frame
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3309      	adds	r3, #9
 80039ec:	001a      	movs	r2, r3
 80039ee:	2324      	movs	r3, #36	; 0x24
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	210c      	movs	r1, #12
 80039f4:	1879      	adds	r1, r7, r1
 80039f6:	4803      	ldr	r0, [pc, #12]	; (8003a04 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 80039f8:	f000 f9be 	bl	8003d78 <HAL_CAN_AddTxMessage>
	}
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b00a      	add	sp, #40	; 0x28
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000844 	.word	0x20000844

08003a08 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>:

bool SUBSYSTEM_DATA_MODULE::isFifoEmpty(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
    return this->storageFifo.IsEmpty();
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3312      	adds	r3, #18
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 f82a 	bl	8003a6e <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>
 8003a1a:	0003      	movs	r3, r0
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3312      	adds	r3, #18
 8003a32:	240f      	movs	r4, #15
 8003a34:	193a      	adds	r2, r7, r4
 8003a36:	6839      	ldr	r1, [r7, #0]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f000 f82d 	bl	8003a98 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 8003a3e:	193b      	adds	r3, r7, r4
 8003a40:	781b      	ldrb	r3, [r3, #0]
}
 8003a42:	0018      	movs	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b005      	add	sp, #20
 8003a48:	bd90      	pop	{r4, r7, pc}

08003a4a <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
    HELPER_FIFO():
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	831a      	strh	r2, [r3, #24]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	835a      	strh	r2, [r3, #26]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	771a      	strb	r2, [r3, #28]
    {}
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b002      	add	sp, #8
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>:
    bool IsEmpty()
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
        return (headIndex == tailIndex ? emptyNotFull : false);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8b1a      	ldrh	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8b5b      	ldrh	r3, [r3, #26]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d105      	bne.n	8003a8e <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7f1b      	ldrb	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x22>
 8003a8e:	2300      	movs	r3, #0
    }
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    void PushBack(T* const next_element, bool* success)
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
        if(tailIndex == headIndex && !emptyNotFull)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8b5a      	ldrh	r2, [r3, #26]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8b1b      	ldrh	r3, [r3, #24]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d10d      	bne.n	8003acc <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	7f1b      	ldrb	r3, [r3, #28]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4053      	eors	r3, r2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
            if(success)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d025      	beq.n	8003b10 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                *success = false;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
            if(success)
 8003aca:	e021      	b.n	8003b10 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            if(success)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
                *success = true;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
            copyArrayData(headIndex,next_element);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8b19      	ldrh	r1, [r3, #24]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f000 f819 	bl	8003b18 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8b1b      	ldrh	r3, [r3, #24]
 8003aea:	3301      	adds	r3, #1
 8003aec:	2103      	movs	r1, #3
 8003aee:	0018      	movs	r0, r3
 8003af0:	f7fc fc7a 	bl	80003e8 <__aeabi_idivmod>
 8003af4:	000b      	movs	r3, r1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	831a      	strh	r2, [r3, #24]
            if(headIndex == tailIndex)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8b1a      	ldrh	r2, [r3, #24]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8b5b      	ldrh	r3, [r3, #26]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d103      	bne.n	8003b10 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                emptyNotFull = false;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	771a      	strb	r2, [r3, #28]
    }
 8003b0e:	e7ff      	b.n	8003b10 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b004      	add	sp, #16
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	230a      	movs	r3, #10
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	1c0a      	adds	r2, r1, #0
 8003b28:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8003b2a:	2316      	movs	r3, #22
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	2200      	movs	r2, #0
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	2316      	movs	r3, #22
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d815      	bhi.n	8003b68 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x50>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8003b3c:	2416      	movs	r4, #22
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	18d1      	adds	r1, r2, r3
 8003b46:	230a      	movs	r3, #10
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	881a      	ldrh	r2, [r3, #0]
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	7808      	ldrb	r0, [r1, #0]
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	00d2      	lsls	r2, r2, #3
 8003b56:	188a      	adds	r2, r1, r2
 8003b58:	1c01      	adds	r1, r0, #0
 8003b5a:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	193b      	adds	r3, r7, r4
 8003b62:	3201      	adds	r2, #1
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	e7e4      	b.n	8003b32 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
        }
    }
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b007      	add	sp, #28
 8003b6e:	bd90      	pop	{r4, r7, pc}

08003b70 <_Z41__static_initialization_and_destruction_0ii>:
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d107      	bne.n	8003b90 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d103      	bne.n	8003b90 <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 f814 	bl	8003bb8 <_ZN14RX_BINARY_TREEC1Ev>
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	0000ffff 	.word	0x0000ffff
 8003b9c:	200007cc 	.word	0x200007cc

08003ba0 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f7ff ffe1 	bl	8003b70 <_Z41__static_initialization_and_destruction_0ii>
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	0000ffff 	.word	0x0000ffff

08003bb8 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	671a      	str	r2, [r3, #112]	; 0x70
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2274      	movs	r2, #116	; 0x74
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5299      	strh	r1, [r3, r2]
{}
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZN14RX_BINARY_TREE11FindElementEm>:
    }
    return false;
}

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	0018      	movs	r0, r3
 8003bec:	f000 f80d 	bl	8003c0a <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e001      	b.n	8003c02 <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b004      	add	sp, #16
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	e034      	b.n	8003c8a <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 f833 	bl	8003c92 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	2301      	movs	r3, #1
 8003c30:	1c19      	adds	r1, r3, #0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	db01      	blt.n	8003c3c <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	1c19      	adds	r1, r3, #0
 8003c3c:	b2cb      	uxtb	r3, r1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7ff ffdd 	bl	8003c0a <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8003c50:	0003      	movs	r3, r0
 8003c52:	e01a      	b.n	8003c8a <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	0011      	movs	r1, r2
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 f819 	bl	8003c92 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8003c60:	0002      	movs	r2, r0
 8003c62:	2301      	movs	r3, #1
 8003c64:	1c19      	adds	r1, r3, #0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	dc01      	bgt.n	8003c70 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	1c19      	adds	r1, r3, #0
 8003c70:	b2cb      	uxtb	r3, r1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6899      	ldr	r1, [r3, #8]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7ff ffc3 	bl	8003c0a <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8003c84:	0003      	movs	r3, r0
 8003c86:	e000      	b.n	8003c8a <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 8003c88:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b004      	add	sp, #16
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <_ZN14RX_BINARY_TREE8node_keyEP4Node>:
        return 0;  
    return N->height;  
}

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	425b      	negs	r3, r3
 8003ca6:	e009      	b.n	8003cbc <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	425b      	negs	r3, r3
 8003cb4:	e002      	b.n	8003cbc <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cc4:	480d      	ldr	r0, [pc, #52]	; (8003cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cc8:	480d      	ldr	r0, [pc, #52]	; (8003d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cca:	490e      	ldr	r1, [pc, #56]	; (8003d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ccc:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <LoopForever+0xe>)
  movs r3, #0
 8003cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cd0:	e002      	b.n	8003cd8 <LoopCopyDataInit>

08003cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cd6:	3304      	adds	r3, #4

08003cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cdc:	d3f9      	bcc.n	8003cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cde:	4a0b      	ldr	r2, [pc, #44]	; (8003d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ce0:	4c0b      	ldr	r4, [pc, #44]	; (8003d10 <LoopForever+0x16>)
  movs r3, #0
 8003ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ce4:	e001      	b.n	8003cea <LoopFillZerobss>

08003ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ce8:	3204      	adds	r2, #4

08003cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cec:	d3fb      	bcc.n	8003ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003cee:	f7fd feb3 	bl	8001a58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003cf2:	f004 ffb9 	bl	8008c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cf6:	f7fd f933 	bl	8000f60 <main>

08003cfa <LoopForever>:

LoopForever:
    b LoopForever
 8003cfa:	e7fe      	b.n	8003cfa <LoopForever>
  ldr   r0, =_estack
 8003cfc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003d08:	08009040 	.word	0x08009040
  ldr r2, =_sbss
 8003d0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003d10:	200019f8 	.word	0x200019f8

08003d14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d14:	e7fe      	b.n	8003d14 <ADC1_COMP_IRQHandler>
	...

08003d18 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_Init+0x24>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_Init+0x24>)
 8003d22:	2110      	movs	r1, #16
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7fd fdf5 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d2e:	f7fd fd39 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	40022000 	.word	0x40022000

08003d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_IncTick+0x1c>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	001a      	movs	r2, r3
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_IncTick+0x20>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	18d2      	adds	r2, r2, r3
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <HAL_IncTick+0x20>)
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	20000004 	.word	0x20000004
 8003d60:	200019f0 	.word	0x200019f0

08003d64 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  return uwTick;
 8003d68:	4b02      	ldr	r3, [pc, #8]	; (8003d74 <HAL_GetTick+0x10>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	200019f0 	.word	0x200019f0

08003d78 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d86:	201f      	movs	r0, #31
 8003d88:	183b      	adds	r3, r7, r0
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	2120      	movs	r1, #32
 8003d8e:	5c52      	ldrb	r2, [r2, r1]
 8003d90:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d9a:	183b      	adds	r3, r7, r0
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d005      	beq.n	8003dae <HAL_CAN_AddTxMessage+0x36>
 8003da2:	231f      	movs	r3, #31
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d000      	beq.n	8003dae <HAL_CAN_AddTxMessage+0x36>
 8003dac:	e0b7      	b.n	8003f1e <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	04db      	lsls	r3, r3, #19
 8003db4:	4013      	ands	r3, r2
 8003db6:	d10a      	bne.n	8003dce <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	051b      	lsls	r3, r3, #20
 8003dbe:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dc0:	d105      	bne.n	8003dce <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	055b      	lsls	r3, r3, #21
 8003dc8:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003dca:	d100      	bne.n	8003dce <HAL_CAN_AddTxMessage+0x56>
 8003dcc:	e09e      	b.n	8003f0c <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	0e1b      	lsrs	r3, r3, #24
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d908      	bls.n	8003df0 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	0412      	lsls	r2, r2, #16
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e09e      	b.n	8003f2e <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003df0:	2201      	movs	r2, #1
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	409a      	lsls	r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4311      	orrs	r1, r2
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	3218      	adds	r2, #24
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	50d1      	str	r1, [r2, r3]
 8003e1a:	e00f      	b.n	8003e3c <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e26:	431a      	orrs	r2, r3
 8003e28:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8003e32:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	3218      	adds	r2, #24
 8003e38:	0112      	lsls	r2, r2, #4
 8003e3a:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3318      	adds	r3, #24
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	18cb      	adds	r3, r1, r3
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	7d1b      	ldrb	r3, [r3, #20]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d112      	bne.n	8003e7e <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3318      	adds	r3, #24
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	18d3      	adds	r3, r2, r3
 8003e64:	3304      	adds	r3, #4
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	431a      	orrs	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	3318      	adds	r3, #24
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	18cb      	adds	r3, r1, r3
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3307      	adds	r3, #7
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	061a      	lsls	r2, r3, #24
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3306      	adds	r3, #6
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3305      	adds	r3, #5
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	6979      	ldr	r1, [r7, #20]
 8003eaa:	23c6      	movs	r3, #198	; 0xc6
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	0109      	lsls	r1, r1, #4
 8003eb0:	1841      	adds	r1, r0, r1
 8003eb2:	18cb      	adds	r3, r1, r3
 8003eb4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3303      	adds	r3, #3
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	061a      	lsls	r2, r3, #24
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	23c4      	movs	r3, #196	; 0xc4
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	0109      	lsls	r1, r1, #4
 8003ee6:	1841      	adds	r1, r0, r1
 8003ee8:	18cb      	adds	r3, r1, r3
 8003eea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	3218      	adds	r2, #24
 8003ef4:	0112      	lsls	r2, r2, #4
 8003ef6:	58d2      	ldr	r2, [r2, r3]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2101      	movs	r1, #1
 8003efe:	4311      	orrs	r1, r2
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	3218      	adds	r2, #24
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e010      	b.n	8003f2e <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	0392      	lsls	r2, r2, #14
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e007      	b.n	8003f2e <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	2280      	movs	r2, #128	; 0x80
 8003f24:	02d2      	lsls	r2, r2, #11
 8003f26:	431a      	orrs	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
  }
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b008      	add	sp, #32
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f42:	200b      	movs	r0, #11
 8003f44:	183b      	adds	r3, r7, r0
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	2120      	movs	r1, #32
 8003f4a:	5c52      	ldrb	r2, [r2, r1]
 8003f4c:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f4e:	183b      	adds	r3, r7, r0
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d004      	beq.n	8003f60 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8003f56:	230b      	movs	r3, #11
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d11d      	bne.n	8003f9c <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	2380      	movs	r3, #128	; 0x80
 8003f68:	04db      	lsls	r3, r3, #19
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d002      	beq.n	8003f74 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3301      	adds	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	051b      	lsls	r3, r3, #20
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d002      	beq.n	8003f88 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3301      	adds	r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	055b      	lsls	r3, r3, #21
 8003f92:	4013      	ands	r3, r2
 8003f94:	d002      	beq.n	8003f9c <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b004      	add	sp, #16
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fb4:	2017      	movs	r0, #23
 8003fb6:	183b      	adds	r3, r7, r0
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	2120      	movs	r1, #32
 8003fbc:	5c52      	ldrb	r2, [r2, r1]
 8003fbe:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fc0:	183b      	adds	r3, r7, r0
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d005      	beq.n	8003fd4 <HAL_CAN_GetRxMessage+0x2e>
 8003fc8:	2317      	movs	r3, #23
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d000      	beq.n	8003fd4 <HAL_CAN_GetRxMessage+0x2e>
 8003fd2:	e0f8      	b.n	80041c6 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d117      	bne.n	8004016 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	0392      	lsls	r2, r2, #14
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0ee      	b.n	80041d6 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2203      	movs	r2, #3
 8004000:	4013      	ands	r3, r2
 8004002:	d108      	bne.n	8004016 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	0392      	lsls	r2, r2, #14
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0df      	b.n	80041d6 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	321b      	adds	r2, #27
 800401e:	0112      	lsls	r2, r2, #4
 8004020:	58d3      	ldr	r3, [r2, r3]
 8004022:	2204      	movs	r2, #4
 8004024:	401a      	ands	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	321b      	adds	r2, #27
 800403a:	0112      	lsls	r2, r2, #4
 800403c:	58d3      	ldr	r3, [r2, r3]
 800403e:	0d5b      	lsrs	r3, r3, #21
 8004040:	055b      	lsls	r3, r3, #21
 8004042:	0d5a      	lsrs	r2, r3, #21
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e00a      	b.n	8004060 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	321b      	adds	r2, #27
 8004052:	0112      	lsls	r2, r2, #4
 8004054:	58d3      	ldr	r3, [r2, r3]
 8004056:	08db      	lsrs	r3, r3, #3
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	08da      	lsrs	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	321b      	adds	r2, #27
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	58d3      	ldr	r3, [r2, r3]
 800406c:	2202      	movs	r2, #2
 800406e:	401a      	ands	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	331b      	adds	r3, #27
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	18d3      	adds	r3, r2, r3
 8004080:	3304      	adds	r3, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	220f      	movs	r2, #15
 8004086:	401a      	ands	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	331b      	adds	r3, #27
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	18d3      	adds	r3, r2, r3
 8004098:	3304      	adds	r3, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	22ff      	movs	r2, #255	; 0xff
 80040a0:	401a      	ands	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	331b      	adds	r3, #27
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	18d3      	adds	r3, r2, r3
 80040b2:	3304      	adds	r3, #4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0c1b      	lsrs	r3, r3, #16
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	0c1a      	lsrs	r2, r3, #16
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	23dc      	movs	r3, #220	; 0xdc
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	0112      	lsls	r2, r2, #4
 80040cc:	188a      	adds	r2, r1, r2
 80040ce:	18d3      	adds	r3, r2, r3
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	23dc      	movs	r3, #220	; 0xdc
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	0112      	lsls	r2, r2, #4
 80040e4:	188a      	adds	r2, r1, r2
 80040e6:	18d3      	adds	r3, r2, r3
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	0a1a      	lsrs	r2, r3, #8
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6819      	ldr	r1, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	23dc      	movs	r3, #220	; 0xdc
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	0112      	lsls	r2, r2, #4
 8004100:	188a      	adds	r2, r1, r2
 8004102:	18d3      	adds	r3, r2, r3
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0c1a      	lsrs	r2, r3, #16
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	3302      	adds	r3, #2
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	23dc      	movs	r3, #220	; 0xdc
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	188a      	adds	r2, r1, r2
 800411e:	18d3      	adds	r3, r2, r3
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0e1a      	lsrs	r2, r3, #24
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	3303      	adds	r3, #3
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	23de      	movs	r3, #222	; 0xde
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	0112      	lsls	r2, r2, #4
 8004138:	188a      	adds	r2, r1, r2
 800413a:	18d3      	adds	r3, r2, r3
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	3304      	adds	r3, #4
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	23de      	movs	r3, #222	; 0xde
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	0112      	lsls	r2, r2, #4
 8004152:	188a      	adds	r2, r1, r2
 8004154:	18d3      	adds	r3, r2, r3
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0a1a      	lsrs	r2, r3, #8
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	3305      	adds	r3, #5
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	23de      	movs	r3, #222	; 0xde
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	0112      	lsls	r2, r2, #4
 800416e:	188a      	adds	r2, r1, r2
 8004170:	18d3      	adds	r3, r2, r3
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0c1a      	lsrs	r2, r3, #16
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	3306      	adds	r3, #6
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6819      	ldr	r1, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	23de      	movs	r3, #222	; 0xde
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	0112      	lsls	r2, r2, #4
 800418a:	188a      	adds	r2, r1, r2
 800418c:	18d3      	adds	r3, r2, r3
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0e1a      	lsrs	r2, r3, #24
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	3307      	adds	r3, #7
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d108      	bne.n	80041b2 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2120      	movs	r1, #32
 80041ac:	430a      	orrs	r2, r1
 80041ae:	60da      	str	r2, [r3, #12]
 80041b0:	e007      	b.n	80041c2 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2120      	movs	r1, #32
 80041be:	430a      	orrs	r2, r1
 80041c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e007      	b.n	80041d6 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2280      	movs	r2, #128	; 0x80
 80041cc:	02d2      	lsls	r2, r2, #11
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
  }
}
 80041d6:	0018      	movs	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	b006      	add	sp, #24
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041ec:	200b      	movs	r0, #11
 80041ee:	183b      	adds	r3, r7, r0
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	2120      	movs	r1, #32
 80041f4:	5c52      	ldrb	r2, [r2, r1]
 80041f6:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041f8:	183b      	adds	r3, r7, r0
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d004      	beq.n	800420a <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8004200:	230b      	movs	r3, #11
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d10f      	bne.n	800422a <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d106      	bne.n	800421e <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2203      	movs	r2, #3
 8004218:	4013      	ands	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e005      	b.n	800422a <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2203      	movs	r2, #3
 8004226:	4013      	ands	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b004      	add	sp, #16
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800423c:	2300      	movs	r3, #0
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2201      	movs	r2, #1
 8004274:	4013      	ands	r3, r2
 8004276:	d100      	bne.n	800427a <HAL_CAN_IRQHandler+0x46>
 8004278:	e084      	b.n	8004384 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	d024      	beq.n	80042cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2201      	movs	r2, #1
 8004288:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2202      	movs	r2, #2
 800428e:	4013      	ands	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 f97e 	bl	8004596 <HAL_CAN_TxMailbox0CompleteCallback>
 800429a:	e017      	b.n	80042cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2204      	movs	r2, #4
 80042a0:	4013      	ands	r3, r2
 80042a2:	d005      	beq.n	80042b0 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	0112      	lsls	r2, r2, #4
 80042aa:	4313      	orrs	r3, r2
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
 80042ae:	e00d      	b.n	80042cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2208      	movs	r2, #8
 80042b4:	4013      	ands	r3, r2
 80042b6:	d005      	beq.n	80042c4 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2280      	movs	r2, #128	; 0x80
 80042bc:	0152      	lsls	r2, r2, #5
 80042be:	4313      	orrs	r3, r2
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	e003      	b.n	80042cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 f97d 	bl	80045c6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4013      	ands	r3, r2
 80042d4:	d028      	beq.n	8004328 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	0052      	lsls	r2, r2, #1
 80042de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4013      	ands	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 f95a 	bl	80045a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80042f2:	e019      	b.n	8004328 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4013      	ands	r3, r2
 80042fc:	d005      	beq.n	800430a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	0192      	lsls	r2, r2, #6
 8004304:	4313      	orrs	r3, r2
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
 8004308:	e00e      	b.n	8004328 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	4013      	ands	r3, r2
 8004312:	d005      	beq.n	8004320 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	01d2      	lsls	r2, r2, #7
 800431a:	4313      	orrs	r3, r2
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
 800431e:	e003      	b.n	8004328 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0018      	movs	r0, r3
 8004324:	f000 f957 	bl	80045d6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	025b      	lsls	r3, r3, #9
 800432e:	4013      	ands	r3, r2
 8004330:	d028      	beq.n	8004384 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2280      	movs	r2, #128	; 0x80
 8004338:	0252      	lsls	r2, r2, #9
 800433a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	2380      	movs	r3, #128	; 0x80
 8004340:	029b      	lsls	r3, r3, #10
 8004342:	4013      	ands	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f000 f934 	bl	80045b6 <HAL_CAN_TxMailbox2CompleteCallback>
 800434e:	e019      	b.n	8004384 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	02db      	lsls	r3, r3, #11
 8004356:	4013      	ands	r3, r2
 8004358:	d005      	beq.n	8004366 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	2280      	movs	r2, #128	; 0x80
 800435e:	0212      	lsls	r2, r2, #8
 8004360:	4313      	orrs	r3, r2
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
 8004364:	e00e      	b.n	8004384 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	031b      	lsls	r3, r3, #12
 800436c:	4013      	ands	r3, r2
 800436e:	d005      	beq.n	800437c <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	0252      	lsls	r2, r2, #9
 8004376:	4313      	orrs	r3, r2
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
 800437a:	e003      	b.n	8004384 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	0018      	movs	r0, r3
 8004380:	f000 f931 	bl	80045e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	2208      	movs	r2, #8
 8004388:	4013      	ands	r3, r2
 800438a:	d00c      	beq.n	80043a6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2210      	movs	r2, #16
 8004390:	4013      	ands	r3, r2
 8004392:	d008      	beq.n	80043a6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	2280      	movs	r2, #128	; 0x80
 8004398:	0092      	lsls	r2, r2, #2
 800439a:	4313      	orrs	r3, r2
 800439c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2210      	movs	r2, #16
 80043a4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	2204      	movs	r2, #4
 80043aa:	4013      	ands	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2208      	movs	r2, #8
 80043b2:	4013      	ands	r3, r2
 80043b4:	d007      	beq.n	80043c6 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2208      	movs	r2, #8
 80043bc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f000 f918 	bl	80045f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	2202      	movs	r2, #2
 80043ca:	4013      	ands	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2203      	movs	r2, #3
 80043d6:	4013      	ands	r3, r2
 80043d8:	d003      	beq.n	80043e2 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	0018      	movs	r0, r3
 80043de:	f7ff f9c2 	bl	8003766 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	2240      	movs	r2, #64	; 0x40
 80043e6:	4013      	ands	r3, r2
 80043e8:	d00c      	beq.n	8004404 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2210      	movs	r2, #16
 80043ee:	4013      	ands	r3, r2
 80043f0:	d008      	beq.n	8004404 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	00d2      	lsls	r2, r2, #3
 80043f8:	4313      	orrs	r3, r2
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2210      	movs	r2, #16
 8004402:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	2220      	movs	r2, #32
 8004408:	4013      	ands	r3, r2
 800440a:	d00b      	beq.n	8004424 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2208      	movs	r2, #8
 8004410:	4013      	ands	r3, r2
 8004412:	d007      	beq.n	8004424 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2208      	movs	r2, #8
 800441a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	0018      	movs	r0, r3
 8004420:	f000 f8f9 	bl	8004616 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	2210      	movs	r2, #16
 8004428:	4013      	ands	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2203      	movs	r2, #3
 8004434:	4013      	ands	r3, r2
 8004436:	d003      	beq.n	8004440 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	0018      	movs	r0, r3
 800443c:	f000 f8e3 	bl	8004606 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	029b      	lsls	r3, r3, #10
 8004446:	4013      	ands	r3, r2
 8004448:	d00b      	beq.n	8004462 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2210      	movs	r2, #16
 800444e:	4013      	ands	r3, r2
 8004450:	d007      	beq.n	8004462 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2210      	movs	r2, #16
 8004458:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0018      	movs	r0, r3
 800445e:	f000 f8e2 	bl	8004626 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004462:	6a3a      	ldr	r2, [r7, #32]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	025b      	lsls	r3, r3, #9
 8004468:	4013      	ands	r3, r2
 800446a:	d00b      	beq.n	8004484 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2208      	movs	r2, #8
 8004470:	4013      	ands	r3, r2
 8004472:	d007      	beq.n	8004484 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2208      	movs	r2, #8
 800447a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	0018      	movs	r0, r3
 8004480:	f000 f8d9 	bl	8004636 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004484:	6a3a      	ldr	r2, [r7, #32]
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	4013      	ands	r3, r2
 800448c:	d100      	bne.n	8004490 <HAL_CAN_IRQHandler+0x25c>
 800448e:	e071      	b.n	8004574 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2204      	movs	r2, #4
 8004494:	4013      	ands	r3, r2
 8004496:	d100      	bne.n	800449a <HAL_CAN_IRQHandler+0x266>
 8004498:	e068      	b.n	800456c <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800449a:	6a3a      	ldr	r2, [r7, #32]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4013      	ands	r3, r2
 80044a2:	d007      	beq.n	80044b4 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044aa:	d003      	beq.n	80044b4 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	2201      	movs	r2, #1
 80044b0:	4313      	orrs	r3, r2
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044b4:	6a3a      	ldr	r2, [r7, #32]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4013      	ands	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2202      	movs	r2, #2
 80044c2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044c4:	d003      	beq.n	80044ce <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	2202      	movs	r2, #2
 80044ca:	4313      	orrs	r3, r2
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044ce:	6a3a      	ldr	r2, [r7, #32]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4013      	ands	r3, r2
 80044d6:	d007      	beq.n	80044e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2204      	movs	r2, #4
 80044dc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044de:	d003      	beq.n	80044e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	2204      	movs	r2, #4
 80044e4:	4313      	orrs	r3, r2
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044e8:	6a3a      	ldr	r2, [r7, #32]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	4013      	ands	r3, r2
 80044f0:	d03c      	beq.n	800456c <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2270      	movs	r2, #112	; 0x70
 80044f6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044f8:	d038      	beq.n	800456c <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2270      	movs	r2, #112	; 0x70
 80044fe:	4013      	ands	r3, r2
 8004500:	2b30      	cmp	r3, #48	; 0x30
 8004502:	d016      	beq.n	8004532 <HAL_CAN_IRQHandler+0x2fe>
 8004504:	d804      	bhi.n	8004510 <HAL_CAN_IRQHandler+0x2dc>
 8004506:	2b10      	cmp	r3, #16
 8004508:	d009      	beq.n	800451e <HAL_CAN_IRQHandler+0x2ea>
 800450a:	2b20      	cmp	r3, #32
 800450c:	d00c      	beq.n	8004528 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800450e:	e025      	b.n	800455c <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8004510:	2b50      	cmp	r3, #80	; 0x50
 8004512:	d018      	beq.n	8004546 <HAL_CAN_IRQHandler+0x312>
 8004514:	2b60      	cmp	r3, #96	; 0x60
 8004516:	d01b      	beq.n	8004550 <HAL_CAN_IRQHandler+0x31c>
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d00f      	beq.n	800453c <HAL_CAN_IRQHandler+0x308>
            break;
 800451c:	e01e      	b.n	800455c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	2208      	movs	r2, #8
 8004522:	4313      	orrs	r3, r2
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004526:	e019      	b.n	800455c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	2210      	movs	r2, #16
 800452c:	4313      	orrs	r3, r2
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004530:	e014      	b.n	800455c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	2220      	movs	r2, #32
 8004536:	4313      	orrs	r3, r2
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800453a:	e00f      	b.n	800455c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	2240      	movs	r2, #64	; 0x40
 8004540:	4313      	orrs	r3, r2
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004544:	e00a      	b.n	800455c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	2280      	movs	r2, #128	; 0x80
 800454a:	4313      	orrs	r3, r2
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800454e:	e005      	b.n	800455c <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	2280      	movs	r2, #128	; 0x80
 8004554:	0052      	lsls	r2, r2, #1
 8004556:	4313      	orrs	r3, r2
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800455a:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2170      	movs	r1, #112	; 0x70
 8004568:	438a      	bics	r2, r1
 800456a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2204      	movs	r2, #4
 8004572:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 f85c 	bl	8004646 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	46bd      	mov	sp, r7
 8004592:	b00a      	add	sp, #40	; 0x28
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b002      	add	sp, #8
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b002      	add	sp, #8
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b002      	add	sp, #8
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b002      	add	sp, #8
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	0002      	movs	r2, r0
 8004660:	1dfb      	adds	r3, r7, #7
 8004662:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004664:	1dfb      	adds	r3, r7, #7
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b7f      	cmp	r3, #127	; 0x7f
 800466a:	d809      	bhi.n	8004680 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800466c:	1dfb      	adds	r3, r7, #7
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	001a      	movs	r2, r3
 8004672:	231f      	movs	r3, #31
 8004674:	401a      	ands	r2, r3
 8004676:	4b04      	ldr	r3, [pc, #16]	; (8004688 <__NVIC_EnableIRQ+0x30>)
 8004678:	2101      	movs	r1, #1
 800467a:	4091      	lsls	r1, r2
 800467c:	000a      	movs	r2, r1
 800467e:	601a      	str	r2, [r3, #0]
  }
}
 8004680:	46c0      	nop			; (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}
 8004688:	e000e100 	.word	0xe000e100

0800468c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800468c:	b590      	push	{r4, r7, lr}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	0002      	movs	r2, r0
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	1dfb      	adds	r3, r7, #7
 8004698:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800469a:	1dfb      	adds	r3, r7, #7
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b7f      	cmp	r3, #127	; 0x7f
 80046a0:	d828      	bhi.n	80046f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046a2:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <__NVIC_SetPriority+0xd4>)
 80046a4:	1dfb      	adds	r3, r7, #7
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	b25b      	sxtb	r3, r3
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	33c0      	adds	r3, #192	; 0xc0
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	589b      	ldr	r3, [r3, r2]
 80046b2:	1dfa      	adds	r2, r7, #7
 80046b4:	7812      	ldrb	r2, [r2, #0]
 80046b6:	0011      	movs	r1, r2
 80046b8:	2203      	movs	r2, #3
 80046ba:	400a      	ands	r2, r1
 80046bc:	00d2      	lsls	r2, r2, #3
 80046be:	21ff      	movs	r1, #255	; 0xff
 80046c0:	4091      	lsls	r1, r2
 80046c2:	000a      	movs	r2, r1
 80046c4:	43d2      	mvns	r2, r2
 80046c6:	401a      	ands	r2, r3
 80046c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	019b      	lsls	r3, r3, #6
 80046ce:	22ff      	movs	r2, #255	; 0xff
 80046d0:	401a      	ands	r2, r3
 80046d2:	1dfb      	adds	r3, r7, #7
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	0018      	movs	r0, r3
 80046d8:	2303      	movs	r3, #3
 80046da:	4003      	ands	r3, r0
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046e0:	481f      	ldr	r0, [pc, #124]	; (8004760 <__NVIC_SetPriority+0xd4>)
 80046e2:	1dfb      	adds	r3, r7, #7
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	430a      	orrs	r2, r1
 80046ec:	33c0      	adds	r3, #192	; 0xc0
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80046f2:	e031      	b.n	8004758 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046f4:	4a1b      	ldr	r2, [pc, #108]	; (8004764 <__NVIC_SetPriority+0xd8>)
 80046f6:	1dfb      	adds	r3, r7, #7
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	0019      	movs	r1, r3
 80046fc:	230f      	movs	r3, #15
 80046fe:	400b      	ands	r3, r1
 8004700:	3b08      	subs	r3, #8
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	3306      	adds	r3, #6
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	3304      	adds	r3, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	1dfa      	adds	r2, r7, #7
 8004710:	7812      	ldrb	r2, [r2, #0]
 8004712:	0011      	movs	r1, r2
 8004714:	2203      	movs	r2, #3
 8004716:	400a      	ands	r2, r1
 8004718:	00d2      	lsls	r2, r2, #3
 800471a:	21ff      	movs	r1, #255	; 0xff
 800471c:	4091      	lsls	r1, r2
 800471e:	000a      	movs	r2, r1
 8004720:	43d2      	mvns	r2, r2
 8004722:	401a      	ands	r2, r3
 8004724:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	019b      	lsls	r3, r3, #6
 800472a:	22ff      	movs	r2, #255	; 0xff
 800472c:	401a      	ands	r2, r3
 800472e:	1dfb      	adds	r3, r7, #7
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	0018      	movs	r0, r3
 8004734:	2303      	movs	r3, #3
 8004736:	4003      	ands	r3, r0
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800473c:	4809      	ldr	r0, [pc, #36]	; (8004764 <__NVIC_SetPriority+0xd8>)
 800473e:	1dfb      	adds	r3, r7, #7
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	001c      	movs	r4, r3
 8004744:	230f      	movs	r3, #15
 8004746:	4023      	ands	r3, r4
 8004748:	3b08      	subs	r3, #8
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	430a      	orrs	r2, r1
 800474e:	3306      	adds	r3, #6
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	18c3      	adds	r3, r0, r3
 8004754:	3304      	adds	r3, #4
 8004756:	601a      	str	r2, [r3, #0]
}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b003      	add	sp, #12
 800475e:	bd90      	pop	{r4, r7, pc}
 8004760:	e000e100 	.word	0xe000e100
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	210f      	movs	r1, #15
 8004774:	187b      	adds	r3, r7, r1
 8004776:	1c02      	adds	r2, r0, #0
 8004778:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	187b      	adds	r3, r7, r1
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	b25b      	sxtb	r3, r3
 8004782:	0011      	movs	r1, r2
 8004784:	0018      	movs	r0, r3
 8004786:	f7ff ff81 	bl	800468c <__NVIC_SetPriority>
}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b004      	add	sp, #16
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	0002      	movs	r2, r0
 800479a:	1dfb      	adds	r3, r7, #7
 800479c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800479e:	1dfb      	adds	r3, r7, #7
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	b25b      	sxtb	r3, r3
 80047a4:	0018      	movs	r0, r3
 80047a6:	f7ff ff57 	bl	8004658 <__NVIC_EnableIRQ>
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b002      	add	sp, #8
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	230f      	movs	r3, #15
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2221      	movs	r2, #33	; 0x21
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d007      	beq.n	80047de <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80047d4:	230f      	movs	r3, #15
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	2201      	movs	r2, #1
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	e028      	b.n	8004830 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	210e      	movs	r1, #14
 80047ea:	438a      	bics	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2101      	movs	r1, #1
 80047fa:	438a      	bics	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	2101      	movs	r1, #1
 8004808:	4091      	lsls	r1, r2
 800480a:	000a      	movs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	2101      	movs	r1, #1
 8004814:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	2100      	movs	r1, #0
 800481c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	2b00      	cmp	r3, #0
 8004824:	d004      	beq.n	8004830 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	0010      	movs	r0, r2
 800482e:	4798      	blx	r3
    } 
  }
  return status;
 8004830:	230f      	movs	r3, #15
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	781b      	ldrb	r3, [r3, #0]
}
 8004836:	0018      	movs	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	b004      	add	sp, #16
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800484e:	e155      	b.n	8004afc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2101      	movs	r1, #1
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4091      	lsls	r1, r2
 800485a:	000a      	movs	r2, r1
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d100      	bne.n	8004868 <HAL_GPIO_Init+0x28>
 8004866:	e146      	b.n	8004af6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d00b      	beq.n	8004888 <HAL_GPIO_Init+0x48>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d007      	beq.n	8004888 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800487c:	2b11      	cmp	r3, #17
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b12      	cmp	r3, #18
 8004886:	d130      	bne.n	80048ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	2203      	movs	r2, #3
 8004894:	409a      	lsls	r2, r3
 8004896:	0013      	movs	r3, r2
 8004898:	43da      	mvns	r2, r3
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4013      	ands	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	409a      	lsls	r2, r3
 80048aa:	0013      	movs	r3, r2
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048be:	2201      	movs	r2, #1
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	409a      	lsls	r2, r3
 80048c4:	0013      	movs	r3, r2
 80048c6:	43da      	mvns	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	2201      	movs	r2, #1
 80048d6:	401a      	ands	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	409a      	lsls	r2, r3
 80048dc:	0013      	movs	r3, r2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	2203      	movs	r2, #3
 80048f6:	409a      	lsls	r2, r3
 80048f8:	0013      	movs	r3, r2
 80048fa:	43da      	mvns	r2, r3
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4013      	ands	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	409a      	lsls	r2, r3
 800490c:	0013      	movs	r3, r2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0xea>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b12      	cmp	r3, #18
 8004928:	d123      	bne.n	8004972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	08da      	lsrs	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3208      	adds	r2, #8
 8004932:	0092      	lsls	r2, r2, #2
 8004934:	58d3      	ldr	r3, [r2, r3]
 8004936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2207      	movs	r2, #7
 800493c:	4013      	ands	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	220f      	movs	r2, #15
 8004942:	409a      	lsls	r2, r3
 8004944:	0013      	movs	r3, r2
 8004946:	43da      	mvns	r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4013      	ands	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2107      	movs	r1, #7
 8004956:	400b      	ands	r3, r1
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	409a      	lsls	r2, r3
 800495c:	0013      	movs	r3, r2
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	08da      	lsrs	r2, r3, #3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3208      	adds	r2, #8
 800496c:	0092      	lsls	r2, r2, #2
 800496e:	6939      	ldr	r1, [r7, #16]
 8004970:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	2203      	movs	r2, #3
 800497e:	409a      	lsls	r2, r3
 8004980:	0013      	movs	r3, r2
 8004982:	43da      	mvns	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2203      	movs	r2, #3
 8004990:	401a      	ands	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	409a      	lsls	r2, r3
 8004998:	0013      	movs	r3, r2
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	2380      	movs	r3, #128	; 0x80
 80049ac:	055b      	lsls	r3, r3, #21
 80049ae:	4013      	ands	r3, r2
 80049b0:	d100      	bne.n	80049b4 <HAL_GPIO_Init+0x174>
 80049b2:	e0a0      	b.n	8004af6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b4:	4b57      	ldr	r3, [pc, #348]	; (8004b14 <HAL_GPIO_Init+0x2d4>)
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	4b56      	ldr	r3, [pc, #344]	; (8004b14 <HAL_GPIO_Init+0x2d4>)
 80049ba:	2101      	movs	r1, #1
 80049bc:	430a      	orrs	r2, r1
 80049be:	619a      	str	r2, [r3, #24]
 80049c0:	4b54      	ldr	r3, [pc, #336]	; (8004b14 <HAL_GPIO_Init+0x2d4>)
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2201      	movs	r2, #1
 80049c6:	4013      	ands	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049cc:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_GPIO_Init+0x2d8>)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	089b      	lsrs	r3, r3, #2
 80049d2:	3302      	adds	r3, #2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	589b      	ldr	r3, [r3, r2]
 80049d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2203      	movs	r2, #3
 80049de:	4013      	ands	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	220f      	movs	r2, #15
 80049e4:	409a      	lsls	r2, r3
 80049e6:	0013      	movs	r3, r2
 80049e8:	43da      	mvns	r2, r3
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4013      	ands	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	2390      	movs	r3, #144	; 0x90
 80049f4:	05db      	lsls	r3, r3, #23
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d019      	beq.n	8004a2e <HAL_GPIO_Init+0x1ee>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a47      	ldr	r2, [pc, #284]	; (8004b1c <HAL_GPIO_Init+0x2dc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_GPIO_Init+0x1ea>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a46      	ldr	r2, [pc, #280]	; (8004b20 <HAL_GPIO_Init+0x2e0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00d      	beq.n	8004a26 <HAL_GPIO_Init+0x1e6>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a45      	ldr	r2, [pc, #276]	; (8004b24 <HAL_GPIO_Init+0x2e4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <HAL_GPIO_Init+0x1e2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a44      	ldr	r2, [pc, #272]	; (8004b28 <HAL_GPIO_Init+0x2e8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_GPIO_Init+0x1de>
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	e008      	b.n	8004a30 <HAL_GPIO_Init+0x1f0>
 8004a1e:	2305      	movs	r3, #5
 8004a20:	e006      	b.n	8004a30 <HAL_GPIO_Init+0x1f0>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e004      	b.n	8004a30 <HAL_GPIO_Init+0x1f0>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e002      	b.n	8004a30 <HAL_GPIO_Init+0x1f0>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <HAL_GPIO_Init+0x1f0>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	2103      	movs	r1, #3
 8004a34:	400a      	ands	r2, r1
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	4093      	lsls	r3, r2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a40:	4935      	ldr	r1, [pc, #212]	; (8004b18 <HAL_GPIO_Init+0x2d8>)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	3302      	adds	r3, #2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <HAL_GPIO_Init+0x2ec>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	43da      	mvns	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	2380      	movs	r3, #128	; 0x80
 8004a64:	025b      	lsls	r3, r3, #9
 8004a66:	4013      	ands	r3, r2
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a72:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <HAL_GPIO_Init+0x2ec>)
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004a78:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <HAL_GPIO_Init+0x2ec>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	43da      	mvns	r2, r3
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4013      	ands	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	029b      	lsls	r3, r3, #10
 8004a90:	4013      	ands	r3, r2
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a9c:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <HAL_GPIO_Init+0x2ec>)
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aa2:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <HAL_GPIO_Init+0x2ec>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	43da      	mvns	r2, r3
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	035b      	lsls	r3, r3, #13
 8004aba:	4013      	ands	r3, r2
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_GPIO_Init+0x2ec>)
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004acc:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <HAL_GPIO_Init+0x2ec>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	43da      	mvns	r2, r3
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	039b      	lsls	r3, r3, #14
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <HAL_GPIO_Init+0x2ec>)
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	3301      	adds	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	40da      	lsrs	r2, r3
 8004b04:	1e13      	subs	r3, r2, #0
 8004b06:	d000      	beq.n	8004b0a <HAL_GPIO_Init+0x2ca>
 8004b08:	e6a2      	b.n	8004850 <HAL_GPIO_Init+0x10>
  } 
}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b006      	add	sp, #24
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	48000400 	.word	0x48000400
 8004b20:	48000800 	.word	0x48000800
 8004b24:	48000c00 	.word	0x48000c00
 8004b28:	48001000 	.word	0x48001000
 8004b2c:	40010400 	.word	0x40010400

08004b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	0008      	movs	r0, r1
 8004b3a:	0011      	movs	r1, r2
 8004b3c:	1cbb      	adds	r3, r7, #2
 8004b3e:	1c02      	adds	r2, r0, #0
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	1c7b      	adds	r3, r7, #1
 8004b44:	1c0a      	adds	r2, r1, #0
 8004b46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b48:	1c7b      	adds	r3, r7, #1
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b50:	1cbb      	adds	r3, r7, #2
 8004b52:	881a      	ldrh	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b58:	e003      	b.n	8004b62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b5a:	1cbb      	adds	r3, r7, #2
 8004b5c:	881a      	ldrh	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b002      	add	sp, #8
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e082      	b.n	8004c84 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2241      	movs	r2, #65	; 0x41
 8004b82:	5c9b      	ldrb	r3, [r3, r2]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2240      	movs	r2, #64	; 0x40
 8004b8e:	2100      	movs	r1, #0
 8004b90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7fd fa17 	bl	8001fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2241      	movs	r2, #65	; 0x41
 8004b9e:	2124      	movs	r1, #36	; 0x24
 8004ba0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2101      	movs	r1, #1
 8004bae:	438a      	bics	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4934      	ldr	r1, [pc, #208]	; (8004c8c <HAL_I2C_Init+0x120>)
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4931      	ldr	r1, [pc, #196]	; (8004c90 <HAL_I2C_Init+0x124>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d108      	bne.n	8004bea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	0209      	lsls	r1, r1, #8
 8004be4:	430a      	orrs	r2, r1
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	e007      	b.n	8004bfa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2184      	movs	r1, #132	; 0x84
 8004bf4:	0209      	lsls	r1, r1, #8
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d104      	bne.n	8004c0c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	0112      	lsls	r2, r2, #4
 8004c0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	491f      	ldr	r1, [pc, #124]	; (8004c94 <HAL_I2C_Init+0x128>)
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	491a      	ldr	r1, [pc, #104]	; (8004c90 <HAL_I2C_Init+0x124>)
 8004c28:	400a      	ands	r2, r1
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	431a      	orrs	r2, r3
 8004c36:	0011      	movs	r1, r2
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	021a      	lsls	r2, r3, #8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69d9      	ldr	r1, [r3, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1a      	ldr	r2, [r3, #32]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2101      	movs	r1, #1
 8004c62:	430a      	orrs	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2241      	movs	r2, #65	; 0x41
 8004c70:	2120      	movs	r1, #32
 8004c72:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2242      	movs	r2, #66	; 0x42
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	f0ffffff 	.word	0xf0ffffff
 8004c90:	ffff7fff 	.word	0xffff7fff
 8004c94:	02008000 	.word	0x02008000

08004c98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b089      	sub	sp, #36	; 0x24
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	000c      	movs	r4, r1
 8004ca2:	0010      	movs	r0, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	1c22      	adds	r2, r4, #0
 8004cac:	801a      	strh	r2, [r3, #0]
 8004cae:	2308      	movs	r3, #8
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	1c02      	adds	r2, r0, #0
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	1dbb      	adds	r3, r7, #6
 8004cb8:	1c0a      	adds	r2, r1, #0
 8004cba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2241      	movs	r2, #65	; 0x41
 8004cc0:	5c9b      	ldrb	r3, [r3, r2]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d000      	beq.n	8004cca <HAL_I2C_Mem_Write+0x32>
 8004cc8:	e10c      	b.n	8004ee4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_I2C_Mem_Write+0x42>
 8004cd0:	232c      	movs	r3, #44	; 0x2c
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d105      	bne.n	8004ce6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2280      	movs	r2, #128	; 0x80
 8004cde:	0092      	lsls	r2, r2, #2
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0ff      	b.n	8004ee6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2240      	movs	r2, #64	; 0x40
 8004cea:	5c9b      	ldrb	r3, [r3, r2]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_I2C_Mem_Write+0x5c>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e0f8      	b.n	8004ee6 <HAL_I2C_Mem_Write+0x24e>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2240      	movs	r2, #64	; 0x40
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cfc:	f7ff f832 	bl	8003d64 <HAL_GetTick>
 8004d00:	0003      	movs	r3, r0
 8004d02:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	0219      	lsls	r1, r3, #8
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2319      	movs	r3, #25
 8004d10:	2201      	movs	r2, #1
 8004d12:	f000 fb0b 	bl	800532c <I2C_WaitOnFlagUntilTimeout>
 8004d16:	1e03      	subs	r3, r0, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0e3      	b.n	8004ee6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2241      	movs	r2, #65	; 0x41
 8004d22:	2121      	movs	r1, #33	; 0x21
 8004d24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2242      	movs	r2, #66	; 0x42
 8004d2a:	2140      	movs	r1, #64	; 0x40
 8004d2c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	222c      	movs	r2, #44	; 0x2c
 8004d3e:	18ba      	adds	r2, r7, r2
 8004d40:	8812      	ldrh	r2, [r2, #0]
 8004d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d4a:	1dbb      	adds	r3, r7, #6
 8004d4c:	881c      	ldrh	r4, [r3, #0]
 8004d4e:	2308      	movs	r3, #8
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	881a      	ldrh	r2, [r3, #0]
 8004d54:	230a      	movs	r3, #10
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	8819      	ldrh	r1, [r3, #0]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	0023      	movs	r3, r4
 8004d66:	f000 f9f9 	bl	800515c <I2C_RequestMemoryWrite>
 8004d6a:	1e03      	subs	r3, r0, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2240      	movs	r2, #64	; 0x40
 8004d72:	2100      	movs	r1, #0
 8004d74:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e0b5      	b.n	8004ee6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2bff      	cmp	r3, #255	; 0xff
 8004d82:	d911      	bls.n	8004da8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	22ff      	movs	r2, #255	; 0xff
 8004d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	045c      	lsls	r4, r3, #17
 8004d94:	230a      	movs	r3, #10
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	8819      	ldrh	r1, [r3, #0]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	0023      	movs	r3, r4
 8004da2:	f000 fbe3 	bl	800556c <I2C_TransferConfig>
 8004da6:	e012      	b.n	8004dce <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	049c      	lsls	r4, r3, #18
 8004dbc:	230a      	movs	r3, #10
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	8819      	ldrh	r1, [r3, #0]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	0023      	movs	r3, r4
 8004dca:	f000 fbcf 	bl	800556c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f000 fae8 	bl	80053aa <I2C_WaitOnTXISFlagUntilTimeout>
 8004dda:	1e03      	subs	r3, r0, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e081      	b.n	8004ee6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d03a      	beq.n	8004e92 <HAL_I2C_Mem_Write+0x1fa>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d136      	bne.n	8004e92 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	0013      	movs	r3, r2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2180      	movs	r1, #128	; 0x80
 8004e32:	f000 fa7b 	bl	800532c <I2C_WaitOnFlagUntilTimeout>
 8004e36:	1e03      	subs	r3, r0, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e053      	b.n	8004ee6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2bff      	cmp	r3, #255	; 0xff
 8004e46:	d911      	bls.n	8004e6c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	22ff      	movs	r2, #255	; 0xff
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	045c      	lsls	r4, r3, #17
 8004e58:	230a      	movs	r3, #10
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	8819      	ldrh	r1, [r3, #0]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	2300      	movs	r3, #0
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	0023      	movs	r3, r4
 8004e66:	f000 fb81 	bl	800556c <I2C_TransferConfig>
 8004e6a:	e012      	b.n	8004e92 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	049c      	lsls	r4, r3, #18
 8004e80:	230a      	movs	r3, #10
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	8819      	ldrh	r1, [r3, #0]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	0023      	movs	r3, r4
 8004e8e:	f000 fb6d 	bl	800556c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d198      	bne.n	8004dce <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f000 fac0 	bl	8005428 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ea8:	1e03      	subs	r3, r0, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e01a      	b.n	8004ee6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	490b      	ldr	r1, [pc, #44]	; (8004ef0 <HAL_I2C_Mem_Write+0x258>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2241      	movs	r2, #65	; 0x41
 8004ecc:	2120      	movs	r1, #32
 8004ece:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2242      	movs	r2, #66	; 0x42
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2240      	movs	r2, #64	; 0x40
 8004edc:	2100      	movs	r1, #0
 8004ede:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b007      	add	sp, #28
 8004eec:	bd90      	pop	{r4, r7, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	fe00e800 	.word	0xfe00e800

08004ef4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b089      	sub	sp, #36	; 0x24
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	000c      	movs	r4, r1
 8004efe:	0010      	movs	r0, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	230a      	movs	r3, #10
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	1c22      	adds	r2, r4, #0
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	1c02      	adds	r2, r0, #0
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	1dbb      	adds	r3, r7, #6
 8004f14:	1c0a      	adds	r2, r1, #0
 8004f16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2241      	movs	r2, #65	; 0x41
 8004f1c:	5c9b      	ldrb	r3, [r3, r2]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d000      	beq.n	8004f26 <HAL_I2C_Mem_Read+0x32>
 8004f24:	e110      	b.n	8005148 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <HAL_I2C_Mem_Read+0x42>
 8004f2c:	232c      	movs	r3, #44	; 0x2c
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d105      	bne.n	8004f42 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2280      	movs	r2, #128	; 0x80
 8004f3a:	0092      	lsls	r2, r2, #2
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e103      	b.n	800514a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2240      	movs	r2, #64	; 0x40
 8004f46:	5c9b      	ldrb	r3, [r3, r2]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_I2C_Mem_Read+0x5c>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e0fc      	b.n	800514a <HAL_I2C_Mem_Read+0x256>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2240      	movs	r2, #64	; 0x40
 8004f54:	2101      	movs	r1, #1
 8004f56:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f58:	f7fe ff04 	bl	8003d64 <HAL_GetTick>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	0219      	lsls	r1, r3, #8
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	2319      	movs	r3, #25
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f000 f9dd 	bl	800532c <I2C_WaitOnFlagUntilTimeout>
 8004f72:	1e03      	subs	r3, r0, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e0e7      	b.n	800514a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2241      	movs	r2, #65	; 0x41
 8004f7e:	2122      	movs	r1, #34	; 0x22
 8004f80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2242      	movs	r2, #66	; 0x42
 8004f86:	2140      	movs	r1, #64	; 0x40
 8004f88:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	222c      	movs	r2, #44	; 0x2c
 8004f9a:	18ba      	adds	r2, r7, r2
 8004f9c:	8812      	ldrh	r2, [r2, #0]
 8004f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fa6:	1dbb      	adds	r3, r7, #6
 8004fa8:	881c      	ldrh	r4, [r3, #0]
 8004faa:	2308      	movs	r3, #8
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	881a      	ldrh	r2, [r3, #0]
 8004fb0:	230a      	movs	r3, #10
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	8819      	ldrh	r1, [r3, #0]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	0023      	movs	r3, r4
 8004fc2:	f000 f92f 	bl	8005224 <I2C_RequestMemoryRead>
 8004fc6:	1e03      	subs	r3, r0, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2240      	movs	r2, #64	; 0x40
 8004fce:	2100      	movs	r1, #0
 8004fd0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e0b9      	b.n	800514a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2bff      	cmp	r3, #255	; 0xff
 8004fde:	d911      	bls.n	8005004 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	22ff      	movs	r2, #255	; 0xff
 8004fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	045c      	lsls	r4, r3, #17
 8004ff0:	230a      	movs	r3, #10
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	8819      	ldrh	r1, [r3, #0]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	4b56      	ldr	r3, [pc, #344]	; (8005154 <HAL_I2C_Mem_Read+0x260>)
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	0023      	movs	r3, r4
 8004ffe:	f000 fab5 	bl	800556c <I2C_TransferConfig>
 8005002:	e012      	b.n	800502a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005012:	b2da      	uxtb	r2, r3
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	049c      	lsls	r4, r3, #18
 8005018:	230a      	movs	r3, #10
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	8819      	ldrh	r1, [r3, #0]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <HAL_I2C_Mem_Read+0x260>)
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	0023      	movs	r3, r4
 8005026:	f000 faa1 	bl	800556c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800502a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	0013      	movs	r3, r2
 8005034:	2200      	movs	r2, #0
 8005036:	2104      	movs	r1, #4
 8005038:	f000 f978 	bl	800532c <I2C_WaitOnFlagUntilTimeout>
 800503c:	1e03      	subs	r3, r0, #0
 800503e:	d001      	beq.n	8005044 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e082      	b.n	800514a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d03a      	beq.n	80050f6 <HAL_I2C_Mem_Read+0x202>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	2b00      	cmp	r3, #0
 8005086:	d136      	bne.n	80050f6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	0013      	movs	r3, r2
 8005092:	2200      	movs	r2, #0
 8005094:	2180      	movs	r1, #128	; 0x80
 8005096:	f000 f949 	bl	800532c <I2C_WaitOnFlagUntilTimeout>
 800509a:	1e03      	subs	r3, r0, #0
 800509c:	d001      	beq.n	80050a2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e053      	b.n	800514a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2bff      	cmp	r3, #255	; 0xff
 80050aa:	d911      	bls.n	80050d0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	22ff      	movs	r2, #255	; 0xff
 80050b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	045c      	lsls	r4, r3, #17
 80050bc:	230a      	movs	r3, #10
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	8819      	ldrh	r1, [r3, #0]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	2300      	movs	r3, #0
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	0023      	movs	r3, r4
 80050ca:	f000 fa4f 	bl	800556c <I2C_TransferConfig>
 80050ce:	e012      	b.n	80050f6 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	049c      	lsls	r4, r3, #18
 80050e4:	230a      	movs	r3, #10
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	8819      	ldrh	r1, [r3, #0]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	2300      	movs	r3, #0
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	0023      	movs	r3, r4
 80050f2:	f000 fa3b 	bl	800556c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d194      	bne.n	800502a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	0018      	movs	r0, r3
 8005108:	f000 f98e 	bl	8005428 <I2C_WaitOnSTOPFlagUntilTimeout>
 800510c:	1e03      	subs	r3, r0, #0
 800510e:	d001      	beq.n	8005114 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e01a      	b.n	800514a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2220      	movs	r2, #32
 800511a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	490c      	ldr	r1, [pc, #48]	; (8005158 <HAL_I2C_Mem_Read+0x264>)
 8005128:	400a      	ands	r2, r1
 800512a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2241      	movs	r2, #65	; 0x41
 8005130:	2120      	movs	r1, #32
 8005132:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2242      	movs	r2, #66	; 0x42
 8005138:	2100      	movs	r1, #0
 800513a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2240      	movs	r2, #64	; 0x40
 8005140:	2100      	movs	r1, #0
 8005142:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e000      	b.n	800514a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
  }
}
 800514a:	0018      	movs	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	b007      	add	sp, #28
 8005150:	bd90      	pop	{r4, r7, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	80002400 	.word	0x80002400
 8005158:	fe00e800 	.word	0xfe00e800

0800515c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b5b0      	push	{r4, r5, r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	000c      	movs	r4, r1
 8005166:	0010      	movs	r0, r2
 8005168:	0019      	movs	r1, r3
 800516a:	250a      	movs	r5, #10
 800516c:	197b      	adds	r3, r7, r5
 800516e:	1c22      	adds	r2, r4, #0
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	2308      	movs	r3, #8
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	1c02      	adds	r2, r0, #0
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	1dbb      	adds	r3, r7, #6
 800517c:	1c0a      	adds	r2, r1, #0
 800517e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005180:	1dbb      	adds	r3, r7, #6
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	2380      	movs	r3, #128	; 0x80
 8005188:	045c      	lsls	r4, r3, #17
 800518a:	197b      	adds	r3, r7, r5
 800518c:	8819      	ldrh	r1, [r3, #0]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	4b23      	ldr	r3, [pc, #140]	; (8005220 <I2C_RequestMemoryWrite+0xc4>)
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	0023      	movs	r3, r4
 8005196:	f000 f9e9 	bl	800556c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	6a39      	ldr	r1, [r7, #32]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	0018      	movs	r0, r3
 80051a2:	f000 f902 	bl	80053aa <I2C_WaitOnTXISFlagUntilTimeout>
 80051a6:	1e03      	subs	r3, r0, #0
 80051a8:	d001      	beq.n	80051ae <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e033      	b.n	8005216 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ae:	1dbb      	adds	r3, r7, #6
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d107      	bne.n	80051c6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051b6:	2308      	movs	r3, #8
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
 80051c4:	e019      	b.n	80051fa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051c6:	2308      	movs	r3, #8
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	0a1b      	lsrs	r3, r3, #8
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	6a39      	ldr	r1, [r7, #32]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 f8e3 	bl	80053aa <I2C_WaitOnTXISFlagUntilTimeout>
 80051e4:	1e03      	subs	r3, r0, #0
 80051e6:	d001      	beq.n	80051ec <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e014      	b.n	8005216 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051ec:	2308      	movs	r3, #8
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	0013      	movs	r3, r2
 8005204:	2200      	movs	r2, #0
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	f000 f890 	bl	800532c <I2C_WaitOnFlagUntilTimeout>
 800520c:	1e03      	subs	r3, r0, #0
 800520e:	d001      	beq.n	8005214 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b004      	add	sp, #16
 800521c:	bdb0      	pop	{r4, r5, r7, pc}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	80002000 	.word	0x80002000

08005224 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b5b0      	push	{r4, r5, r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af02      	add	r7, sp, #8
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	000c      	movs	r4, r1
 800522e:	0010      	movs	r0, r2
 8005230:	0019      	movs	r1, r3
 8005232:	250a      	movs	r5, #10
 8005234:	197b      	adds	r3, r7, r5
 8005236:	1c22      	adds	r2, r4, #0
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	2308      	movs	r3, #8
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	1c02      	adds	r2, r0, #0
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	1dbb      	adds	r3, r7, #6
 8005244:	1c0a      	adds	r2, r1, #0
 8005246:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005248:	1dbb      	adds	r3, r7, #6
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	197b      	adds	r3, r7, r5
 8005250:	8819      	ldrh	r1, [r3, #0]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	4b23      	ldr	r3, [pc, #140]	; (80052e4 <I2C_RequestMemoryRead+0xc0>)
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	2300      	movs	r3, #0
 800525a:	f000 f987 	bl	800556c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800525e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005260:	6a39      	ldr	r1, [r7, #32]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	0018      	movs	r0, r3
 8005266:	f000 f8a0 	bl	80053aa <I2C_WaitOnTXISFlagUntilTimeout>
 800526a:	1e03      	subs	r3, r0, #0
 800526c:	d001      	beq.n	8005272 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e033      	b.n	80052da <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005272:	1dbb      	adds	r3, r7, #6
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d107      	bne.n	800528a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800527a:	2308      	movs	r3, #8
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b2da      	uxtb	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	629a      	str	r2, [r3, #40]	; 0x28
 8005288:	e019      	b.n	80052be <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800528a:	2308      	movs	r3, #8
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	0a1b      	lsrs	r3, r3, #8
 8005292:	b29b      	uxth	r3, r3
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800529c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529e:	6a39      	ldr	r1, [r7, #32]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	0018      	movs	r0, r3
 80052a4:	f000 f881 	bl	80053aa <I2C_WaitOnTXISFlagUntilTimeout>
 80052a8:	1e03      	subs	r3, r0, #0
 80052aa:	d001      	beq.n	80052b0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e014      	b.n	80052da <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052b0:	2308      	movs	r3, #8
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	0013      	movs	r3, r2
 80052c8:	2200      	movs	r2, #0
 80052ca:	2140      	movs	r1, #64	; 0x40
 80052cc:	f000 f82e 	bl	800532c <I2C_WaitOnFlagUntilTimeout>
 80052d0:	1e03      	subs	r3, r0, #0
 80052d2:	d001      	beq.n	80052d8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b004      	add	sp, #16
 80052e0:	bdb0      	pop	{r4, r5, r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	80002000 	.word	0x80002000

080052e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2202      	movs	r2, #2
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d103      	bne.n	8005306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2201      	movs	r2, #1
 800530e:	4013      	ands	r3, r2
 8005310:	2b01      	cmp	r3, #1
 8005312:	d007      	beq.n	8005324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2101      	movs	r1, #1
 8005320:	430a      	orrs	r2, r1
 8005322:	619a      	str	r2, [r3, #24]
  }
}
 8005324:	46c0      	nop			; (mov r8, r8)
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}

0800532c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	1dfb      	adds	r3, r7, #7
 800533a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800533c:	e021      	b.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	3301      	adds	r3, #1
 8005342:	d01e      	beq.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005344:	f7fe fd0e 	bl	8003d64 <HAL_GetTick>
 8005348:	0002      	movs	r2, r0
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d302      	bcc.n	800535a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d113      	bne.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	2220      	movs	r2, #32
 8005360:	431a      	orrs	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2241      	movs	r2, #65	; 0x41
 800536a:	2120      	movs	r1, #32
 800536c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2242      	movs	r2, #66	; 0x42
 8005372:	2100      	movs	r1, #0
 8005374:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2240      	movs	r2, #64	; 0x40
 800537a:	2100      	movs	r1, #0
 800537c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e00f      	b.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	4013      	ands	r3, r2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	425a      	negs	r2, r3
 8005392:	4153      	adcs	r3, r2
 8005394:	b2db      	uxtb	r3, r3
 8005396:	001a      	movs	r2, r3
 8005398:	1dfb      	adds	r3, r7, #7
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d0ce      	beq.n	800533e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	0018      	movs	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b004      	add	sp, #16
 80053a8:	bd80      	pop	{r7, pc}

080053aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053b6:	e02b      	b.n	8005410 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 f86e 	bl	80054a0 <I2C_IsAcknowledgeFailed>
 80053c4:	1e03      	subs	r3, r0, #0
 80053c6:	d001      	beq.n	80053cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e029      	b.n	8005420 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3301      	adds	r3, #1
 80053d0:	d01e      	beq.n	8005410 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d2:	f7fe fcc7 	bl	8003d64 <HAL_GetTick>
 80053d6:	0002      	movs	r2, r0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d302      	bcc.n	80053e8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d113      	bne.n	8005410 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	2220      	movs	r2, #32
 80053ee:	431a      	orrs	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2241      	movs	r2, #65	; 0x41
 80053f8:	2120      	movs	r1, #32
 80053fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2242      	movs	r2, #66	; 0x42
 8005400:	2100      	movs	r1, #0
 8005402:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2240      	movs	r2, #64	; 0x40
 8005408:	2100      	movs	r1, #0
 800540a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e007      	b.n	8005420 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2202      	movs	r2, #2
 8005418:	4013      	ands	r3, r2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d1cc      	bne.n	80053b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b004      	add	sp, #16
 8005426:	bd80      	pop	{r7, pc}

08005428 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005434:	e028      	b.n	8005488 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	0018      	movs	r0, r3
 800543e:	f000 f82f 	bl	80054a0 <I2C_IsAcknowledgeFailed>
 8005442:	1e03      	subs	r3, r0, #0
 8005444:	d001      	beq.n	800544a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e026      	b.n	8005498 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544a:	f7fe fc8b 	bl	8003d64 <HAL_GetTick>
 800544e:	0002      	movs	r2, r0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d113      	bne.n	8005488 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005464:	2220      	movs	r2, #32
 8005466:	431a      	orrs	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2241      	movs	r2, #65	; 0x41
 8005470:	2120      	movs	r1, #32
 8005472:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2242      	movs	r2, #66	; 0x42
 8005478:	2100      	movs	r1, #0
 800547a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2240      	movs	r2, #64	; 0x40
 8005480:	2100      	movs	r1, #0
 8005482:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e007      	b.n	8005498 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2220      	movs	r2, #32
 8005490:	4013      	ands	r3, r2
 8005492:	2b20      	cmp	r3, #32
 8005494:	d1cf      	bne.n	8005436 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	b004      	add	sp, #16
 800549e:	bd80      	pop	{r7, pc}

080054a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2210      	movs	r2, #16
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b10      	cmp	r3, #16
 80054b8:	d151      	bne.n	800555e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ba:	e021      	b.n	8005500 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	3301      	adds	r3, #1
 80054c0:	d01e      	beq.n	8005500 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fe fc4f 	bl	8003d64 <HAL_GetTick>
 80054c6:	0002      	movs	r2, r0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <I2C_IsAcknowledgeFailed+0x38>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d113      	bne.n	8005500 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054dc:	2220      	movs	r2, #32
 80054de:	431a      	orrs	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2241      	movs	r2, #65	; 0x41
 80054e8:	2120      	movs	r1, #32
 80054ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2242      	movs	r2, #66	; 0x42
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2240      	movs	r2, #64	; 0x40
 80054f8:	2100      	movs	r1, #0
 80054fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e02f      	b.n	8005560 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2220      	movs	r2, #32
 8005508:	4013      	ands	r3, r2
 800550a:	2b20      	cmp	r3, #32
 800550c:	d1d6      	bne.n	80054bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2210      	movs	r2, #16
 8005514:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2220      	movs	r2, #32
 800551c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	0018      	movs	r0, r3
 8005522:	f7ff fee1 	bl	80052e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	490d      	ldr	r1, [pc, #52]	; (8005568 <I2C_IsAcknowledgeFailed+0xc8>)
 8005532:	400a      	ands	r2, r1
 8005534:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	2204      	movs	r2, #4
 800553c:	431a      	orrs	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2241      	movs	r2, #65	; 0x41
 8005546:	2120      	movs	r1, #32
 8005548:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2242      	movs	r2, #66	; 0x42
 800554e:	2100      	movs	r1, #0
 8005550:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2240      	movs	r2, #64	; 0x40
 8005556:	2100      	movs	r1, #0
 8005558:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	0018      	movs	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	b004      	add	sp, #16
 8005566:	bd80      	pop	{r7, pc}
 8005568:	fe00e800 	.word	0xfe00e800

0800556c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	0008      	movs	r0, r1
 8005576:	0011      	movs	r1, r2
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	240a      	movs	r4, #10
 800557c:	193b      	adds	r3, r7, r4
 800557e:	1c02      	adds	r2, r0, #0
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	2009      	movs	r0, #9
 8005584:	183b      	adds	r3, r7, r0
 8005586:	1c0a      	adds	r2, r1, #0
 8005588:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	6a3a      	ldr	r2, [r7, #32]
 8005592:	0d51      	lsrs	r1, r2, #21
 8005594:	2280      	movs	r2, #128	; 0x80
 8005596:	00d2      	lsls	r2, r2, #3
 8005598:	400a      	ands	r2, r1
 800559a:	490e      	ldr	r1, [pc, #56]	; (80055d4 <I2C_TransferConfig+0x68>)
 800559c:	430a      	orrs	r2, r1
 800559e:	43d2      	mvns	r2, r2
 80055a0:	401a      	ands	r2, r3
 80055a2:	0011      	movs	r1, r2
 80055a4:	193b      	adds	r3, r7, r4
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	059b      	lsls	r3, r3, #22
 80055aa:	0d9a      	lsrs	r2, r3, #22
 80055ac:	183b      	adds	r3, r7, r0
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	0418      	lsls	r0, r3, #16
 80055b2:	23ff      	movs	r3, #255	; 0xff
 80055b4:	041b      	lsls	r3, r3, #16
 80055b6:	4003      	ands	r3, r0
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	431a      	orrs	r2, r3
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	431a      	orrs	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b005      	add	sp, #20
 80055d0:	bd90      	pop	{r4, r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	03ff63ff 	.word	0x03ff63ff

080055d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2241      	movs	r2, #65	; 0x41
 80055e6:	5c9b      	ldrb	r3, [r3, r2]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d138      	bne.n	8005660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2240      	movs	r2, #64	; 0x40
 80055f2:	5c9b      	ldrb	r3, [r3, r2]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e032      	b.n	8005662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2240      	movs	r2, #64	; 0x40
 8005600:	2101      	movs	r1, #1
 8005602:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2241      	movs	r2, #65	; 0x41
 8005608:	2124      	movs	r1, #36	; 0x24
 800560a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2101      	movs	r1, #1
 8005618:	438a      	bics	r2, r1
 800561a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4911      	ldr	r1, [pc, #68]	; (800566c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005628:	400a      	ands	r2, r1
 800562a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2101      	movs	r1, #1
 8005648:	430a      	orrs	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2241      	movs	r2, #65	; 0x41
 8005650:	2120      	movs	r1, #32
 8005652:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2240      	movs	r2, #64	; 0x40
 8005658:	2100      	movs	r1, #0
 800565a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	0018      	movs	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	b002      	add	sp, #8
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	ffffefff 	.word	0xffffefff

08005670 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2241      	movs	r2, #65	; 0x41
 800567e:	5c9b      	ldrb	r3, [r3, r2]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b20      	cmp	r3, #32
 8005684:	d139      	bne.n	80056fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2240      	movs	r2, #64	; 0x40
 800568a:	5c9b      	ldrb	r3, [r3, r2]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005690:	2302      	movs	r3, #2
 8005692:	e033      	b.n	80056fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2240      	movs	r2, #64	; 0x40
 8005698:	2101      	movs	r1, #1
 800569a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2241      	movs	r2, #65	; 0x41
 80056a0:	2124      	movs	r1, #36	; 0x24
 80056a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2101      	movs	r1, #1
 80056b0:	438a      	bics	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a11      	ldr	r2, [pc, #68]	; (8005704 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2101      	movs	r1, #1
 80056e2:	430a      	orrs	r2, r1
 80056e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2241      	movs	r2, #65	; 0x41
 80056ea:	2120      	movs	r1, #32
 80056ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2240      	movs	r2, #64	; 0x40
 80056f2:	2100      	movs	r1, #0
 80056f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e000      	b.n	80056fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
  }
}
 80056fc:	0018      	movs	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	b004      	add	sp, #16
 8005702:	bd80      	pop	{r7, pc}
 8005704:	fffff0ff 	.word	0xfffff0ff

08005708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f000 fb76 	bl	8005e08 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	4013      	ands	r3, r2
 8005724:	d100      	bne.n	8005728 <HAL_RCC_OscConfig+0x20>
 8005726:	e08e      	b.n	8005846 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005728:	4bc5      	ldr	r3, [pc, #788]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	220c      	movs	r2, #12
 800572e:	4013      	ands	r3, r2
 8005730:	2b04      	cmp	r3, #4
 8005732:	d00e      	beq.n	8005752 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005734:	4bc2      	ldr	r3, [pc, #776]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	220c      	movs	r2, #12
 800573a:	4013      	ands	r3, r2
 800573c:	2b08      	cmp	r3, #8
 800573e:	d117      	bne.n	8005770 <HAL_RCC_OscConfig+0x68>
 8005740:	4bbf      	ldr	r3, [pc, #764]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	23c0      	movs	r3, #192	; 0xc0
 8005746:	025b      	lsls	r3, r3, #9
 8005748:	401a      	ands	r2, r3
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	025b      	lsls	r3, r3, #9
 800574e:	429a      	cmp	r2, r3
 8005750:	d10e      	bne.n	8005770 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005752:	4bbb      	ldr	r3, [pc, #748]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	029b      	lsls	r3, r3, #10
 800575a:	4013      	ands	r3, r2
 800575c:	d100      	bne.n	8005760 <HAL_RCC_OscConfig+0x58>
 800575e:	e071      	b.n	8005844 <HAL_RCC_OscConfig+0x13c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d000      	beq.n	800576a <HAL_RCC_OscConfig+0x62>
 8005768:	e06c      	b.n	8005844 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f000 fb4c 	bl	8005e08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d107      	bne.n	8005788 <HAL_RCC_OscConfig+0x80>
 8005778:	4bb1      	ldr	r3, [pc, #708]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4bb0      	ldr	r3, [pc, #704]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800577e:	2180      	movs	r1, #128	; 0x80
 8005780:	0249      	lsls	r1, r1, #9
 8005782:	430a      	orrs	r2, r1
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e02f      	b.n	80057e8 <HAL_RCC_OscConfig+0xe0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10c      	bne.n	80057aa <HAL_RCC_OscConfig+0xa2>
 8005790:	4bab      	ldr	r3, [pc, #684]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4baa      	ldr	r3, [pc, #680]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005796:	49ab      	ldr	r1, [pc, #684]	; (8005a44 <HAL_RCC_OscConfig+0x33c>)
 8005798:	400a      	ands	r2, r1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	4ba8      	ldr	r3, [pc, #672]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4ba7      	ldr	r3, [pc, #668]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057a2:	49a9      	ldr	r1, [pc, #676]	; (8005a48 <HAL_RCC_OscConfig+0x340>)
 80057a4:	400a      	ands	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e01e      	b.n	80057e8 <HAL_RCC_OscConfig+0xe0>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d10e      	bne.n	80057d0 <HAL_RCC_OscConfig+0xc8>
 80057b2:	4ba3      	ldr	r3, [pc, #652]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4ba2      	ldr	r3, [pc, #648]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	02c9      	lsls	r1, r1, #11
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	4b9f      	ldr	r3, [pc, #636]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	4b9e      	ldr	r3, [pc, #632]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	0249      	lsls	r1, r1, #9
 80057ca:	430a      	orrs	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e00b      	b.n	80057e8 <HAL_RCC_OscConfig+0xe0>
 80057d0:	4b9b      	ldr	r3, [pc, #620]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b9a      	ldr	r3, [pc, #616]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057d6:	499b      	ldr	r1, [pc, #620]	; (8005a44 <HAL_RCC_OscConfig+0x33c>)
 80057d8:	400a      	ands	r2, r1
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	4b98      	ldr	r3, [pc, #608]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b97      	ldr	r3, [pc, #604]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057e2:	4999      	ldr	r1, [pc, #612]	; (8005a48 <HAL_RCC_OscConfig+0x340>)
 80057e4:	400a      	ands	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d014      	beq.n	800581a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fe fab8 	bl	8003d64 <HAL_GetTick>
 80057f4:	0003      	movs	r3, r0
 80057f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057fa:	f7fe fab3 	bl	8003d64 <HAL_GetTick>
 80057fe:	0002      	movs	r2, r0
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b64      	cmp	r3, #100	; 0x64
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e2fd      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580c:	4b8c      	ldr	r3, [pc, #560]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	029b      	lsls	r3, r3, #10
 8005814:	4013      	ands	r3, r2
 8005816:	d0f0      	beq.n	80057fa <HAL_RCC_OscConfig+0xf2>
 8005818:	e015      	b.n	8005846 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581a:	f7fe faa3 	bl	8003d64 <HAL_GetTick>
 800581e:	0003      	movs	r3, r0
 8005820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005824:	f7fe fa9e 	bl	8003d64 <HAL_GetTick>
 8005828:	0002      	movs	r2, r0
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e2e8      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005836:	4b82      	ldr	r3, [pc, #520]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	4013      	ands	r3, r2
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x11c>
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2202      	movs	r2, #2
 800584c:	4013      	ands	r3, r2
 800584e:	d100      	bne.n	8005852 <HAL_RCC_OscConfig+0x14a>
 8005850:	e06c      	b.n	800592c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005852:	4b7b      	ldr	r3, [pc, #492]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	220c      	movs	r2, #12
 8005858:	4013      	ands	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800585c:	4b78      	ldr	r3, [pc, #480]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	220c      	movs	r2, #12
 8005862:	4013      	ands	r3, r2
 8005864:	2b08      	cmp	r3, #8
 8005866:	d11f      	bne.n	80058a8 <HAL_RCC_OscConfig+0x1a0>
 8005868:	4b75      	ldr	r3, [pc, #468]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	23c0      	movs	r3, #192	; 0xc0
 800586e:	025b      	lsls	r3, r3, #9
 8005870:	401a      	ands	r2, r3
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	429a      	cmp	r2, r3
 8005878:	d116      	bne.n	80058a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587a:	4b71      	ldr	r3, [pc, #452]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2202      	movs	r2, #2
 8005880:	4013      	ands	r3, r2
 8005882:	d005      	beq.n	8005890 <HAL_RCC_OscConfig+0x188>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d001      	beq.n	8005890 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e2bb      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005890:	4b6b      	ldr	r3, [pc, #428]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	22f8      	movs	r2, #248	; 0xf8
 8005896:	4393      	bics	r3, r2
 8005898:	0019      	movs	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	00da      	lsls	r2, r3, #3
 80058a0:	4b67      	ldr	r3, [pc, #412]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058a2:	430a      	orrs	r2, r1
 80058a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	e041      	b.n	800592c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d024      	beq.n	80058fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b0:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4b62      	ldr	r3, [pc, #392]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058b6:	2101      	movs	r1, #1
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058bc:	f7fe fa52 	bl	8003d64 <HAL_GetTick>
 80058c0:	0003      	movs	r3, r0
 80058c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058c6:	f7fe fa4d 	bl	8003d64 <HAL_GetTick>
 80058ca:	0002      	movs	r2, r0
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e297      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d8:	4b59      	ldr	r3, [pc, #356]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2202      	movs	r2, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	d0f1      	beq.n	80058c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e2:	4b57      	ldr	r3, [pc, #348]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	22f8      	movs	r2, #248	; 0xf8
 80058e8:	4393      	bics	r3, r2
 80058ea:	0019      	movs	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	00da      	lsls	r2, r3, #3
 80058f2:	4b53      	ldr	r3, [pc, #332]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e018      	b.n	800592c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058fa:	4b51      	ldr	r3, [pc, #324]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005900:	2101      	movs	r1, #1
 8005902:	438a      	bics	r2, r1
 8005904:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fe fa2d 	bl	8003d64 <HAL_GetTick>
 800590a:	0003      	movs	r3, r0
 800590c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005910:	f7fe fa28 	bl	8003d64 <HAL_GetTick>
 8005914:	0002      	movs	r2, r0
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e272      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005922:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2202      	movs	r2, #2
 8005928:	4013      	ands	r3, r2
 800592a:	d1f1      	bne.n	8005910 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2208      	movs	r2, #8
 8005932:	4013      	ands	r3, r2
 8005934:	d036      	beq.n	80059a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d019      	beq.n	8005972 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800593e:	4b40      	ldr	r3, [pc, #256]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005942:	4b3f      	ldr	r3, [pc, #252]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005944:	2101      	movs	r1, #1
 8005946:	430a      	orrs	r2, r1
 8005948:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800594a:	f7fe fa0b 	bl	8003d64 <HAL_GetTick>
 800594e:	0003      	movs	r3, r0
 8005950:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005954:	f7fe fa06 	bl	8003d64 <HAL_GetTick>
 8005958:	0002      	movs	r2, r0
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e250      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005966:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2202      	movs	r2, #2
 800596c:	4013      	ands	r3, r2
 800596e:	d0f1      	beq.n	8005954 <HAL_RCC_OscConfig+0x24c>
 8005970:	e018      	b.n	80059a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005972:	4b33      	ldr	r3, [pc, #204]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005976:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005978:	2101      	movs	r1, #1
 800597a:	438a      	bics	r2, r1
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597e:	f7fe f9f1 	bl	8003d64 <HAL_GetTick>
 8005982:	0003      	movs	r3, r0
 8005984:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005988:	f7fe f9ec 	bl	8003d64 <HAL_GetTick>
 800598c:	0002      	movs	r2, r0
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e236      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800599a:	4b29      	ldr	r3, [pc, #164]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2202      	movs	r2, #2
 80059a0:	4013      	ands	r3, r2
 80059a2:	d1f1      	bne.n	8005988 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2204      	movs	r2, #4
 80059aa:	4013      	ands	r3, r2
 80059ac:	d100      	bne.n	80059b0 <HAL_RCC_OscConfig+0x2a8>
 80059ae:	e0b5      	b.n	8005b1c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b0:	231f      	movs	r3, #31
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059b8:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80059ba:	69da      	ldr	r2, [r3, #28]
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	055b      	lsls	r3, r3, #21
 80059c0:	4013      	ands	r3, r2
 80059c2:	d111      	bne.n	80059e8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c4:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80059ca:	2180      	movs	r1, #128	; 0x80
 80059cc:	0549      	lsls	r1, r1, #21
 80059ce:	430a      	orrs	r2, r1
 80059d0:	61da      	str	r2, [r3, #28]
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	055b      	lsls	r3, r3, #21
 80059da:	4013      	ands	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80059e0:	231f      	movs	r3, #31
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e8:	4b18      	ldr	r3, [pc, #96]	; (8005a4c <HAL_RCC_OscConfig+0x344>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	4013      	ands	r3, r2
 80059f2:	d11a      	bne.n	8005a2a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059f4:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <HAL_RCC_OscConfig+0x344>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <HAL_RCC_OscConfig+0x344>)
 80059fa:	2180      	movs	r1, #128	; 0x80
 80059fc:	0049      	lsls	r1, r1, #1
 80059fe:	430a      	orrs	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a02:	f7fe f9af 	bl	8003d64 <HAL_GetTick>
 8005a06:	0003      	movs	r3, r0
 8005a08:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a0c:	f7fe f9aa 	bl	8003d64 <HAL_GetTick>
 8005a10:	0002      	movs	r2, r0
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b64      	cmp	r3, #100	; 0x64
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e1f4      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_RCC_OscConfig+0x344>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	2380      	movs	r3, #128	; 0x80
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4013      	ands	r3, r2
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d10e      	bne.n	8005a50 <HAL_RCC_OscConfig+0x348>
 8005a32:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	4b02      	ldr	r3, [pc, #8]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005a38:	2101      	movs	r1, #1
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	621a      	str	r2, [r3, #32]
 8005a3e:	e035      	b.n	8005aac <HAL_RCC_OscConfig+0x3a4>
 8005a40:	40021000 	.word	0x40021000
 8005a44:	fffeffff 	.word	0xfffeffff
 8005a48:	fffbffff 	.word	0xfffbffff
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10c      	bne.n	8005a72 <HAL_RCC_OscConfig+0x36a>
 8005a58:	4bca      	ldr	r3, [pc, #808]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	4bc9      	ldr	r3, [pc, #804]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a5e:	2101      	movs	r1, #1
 8005a60:	438a      	bics	r2, r1
 8005a62:	621a      	str	r2, [r3, #32]
 8005a64:	4bc7      	ldr	r3, [pc, #796]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	4bc6      	ldr	r3, [pc, #792]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a6a:	2104      	movs	r1, #4
 8005a6c:	438a      	bics	r2, r1
 8005a6e:	621a      	str	r2, [r3, #32]
 8005a70:	e01c      	b.n	8005aac <HAL_RCC_OscConfig+0x3a4>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x38c>
 8005a7a:	4bc2      	ldr	r3, [pc, #776]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	4bc1      	ldr	r3, [pc, #772]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a80:	2104      	movs	r1, #4
 8005a82:	430a      	orrs	r2, r1
 8005a84:	621a      	str	r2, [r3, #32]
 8005a86:	4bbf      	ldr	r3, [pc, #764]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a88:	6a1a      	ldr	r2, [r3, #32]
 8005a8a:	4bbe      	ldr	r3, [pc, #760]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	621a      	str	r2, [r3, #32]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0x3a4>
 8005a94:	4bbb      	ldr	r3, [pc, #748]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	4bba      	ldr	r3, [pc, #744]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	438a      	bics	r2, r1
 8005a9e:	621a      	str	r2, [r3, #32]
 8005aa0:	4bb8      	ldr	r3, [pc, #736]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	4bb7      	ldr	r3, [pc, #732]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005aa6:	2104      	movs	r1, #4
 8005aa8:	438a      	bics	r2, r1
 8005aaa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d014      	beq.n	8005ade <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ab4:	f7fe f956 	bl	8003d64 <HAL_GetTick>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abc:	e009      	b.n	8005ad2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fe f951 	bl	8003d64 <HAL_GetTick>
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	4aaf      	ldr	r2, [pc, #700]	; (8005d88 <HAL_RCC_OscConfig+0x680>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e19a      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad2:	4bac      	ldr	r3, [pc, #688]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x3b6>
 8005adc:	e013      	b.n	8005b06 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ade:	f7fe f941 	bl	8003d64 <HAL_GetTick>
 8005ae2:	0003      	movs	r3, r0
 8005ae4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae6:	e009      	b.n	8005afc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae8:	f7fe f93c 	bl	8003d64 <HAL_GetTick>
 8005aec:	0002      	movs	r2, r0
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	4aa5      	ldr	r2, [pc, #660]	; (8005d88 <HAL_RCC_OscConfig+0x680>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e185      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afc:	4ba1      	ldr	r3, [pc, #644]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	2202      	movs	r2, #2
 8005b02:	4013      	ands	r3, r2
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b06:	231f      	movs	r3, #31
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d105      	bne.n	8005b1c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b10:	4b9c      	ldr	r3, [pc, #624]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	4b9b      	ldr	r3, [pc, #620]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b16:	499d      	ldr	r1, [pc, #628]	; (8005d8c <HAL_RCC_OscConfig+0x684>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2210      	movs	r2, #16
 8005b22:	4013      	ands	r3, r2
 8005b24:	d063      	beq.n	8005bee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d12a      	bne.n	8005b84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005b2e:	4b95      	ldr	r3, [pc, #596]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b32:	4b94      	ldr	r3, [pc, #592]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b34:	2104      	movs	r1, #4
 8005b36:	430a      	orrs	r2, r1
 8005b38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005b3a:	4b92      	ldr	r3, [pc, #584]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3e:	4b91      	ldr	r3, [pc, #580]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b40:	2101      	movs	r1, #1
 8005b42:	430a      	orrs	r2, r1
 8005b44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b46:	f7fe f90d 	bl	8003d64 <HAL_GetTick>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005b50:	f7fe f908 	bl	8003d64 <HAL_GetTick>
 8005b54:	0002      	movs	r2, r0
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e152      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005b62:	4b88      	ldr	r3, [pc, #544]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	2202      	movs	r2, #2
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d0f1      	beq.n	8005b50 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005b6c:	4b85      	ldr	r3, [pc, #532]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b70:	22f8      	movs	r2, #248	; 0xf8
 8005b72:	4393      	bics	r3, r2
 8005b74:	0019      	movs	r1, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	00da      	lsls	r2, r3, #3
 8005b7c:	4b81      	ldr	r3, [pc, #516]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34
 8005b82:	e034      	b.n	8005bee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	3305      	adds	r3, #5
 8005b8a:	d111      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005b8c:	4b7d      	ldr	r3, [pc, #500]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b90:	4b7c      	ldr	r3, [pc, #496]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b92:	2104      	movs	r1, #4
 8005b94:	438a      	bics	r2, r1
 8005b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005b98:	4b7a      	ldr	r3, [pc, #488]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	22f8      	movs	r2, #248	; 0xf8
 8005b9e:	4393      	bics	r3, r2
 8005ba0:	0019      	movs	r1, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	00da      	lsls	r2, r3, #3
 8005ba8:	4b76      	ldr	r3, [pc, #472]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005baa:	430a      	orrs	r2, r1
 8005bac:	635a      	str	r2, [r3, #52]	; 0x34
 8005bae:	e01e      	b.n	8005bee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005bb0:	4b74      	ldr	r3, [pc, #464]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb4:	4b73      	ldr	r3, [pc, #460]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005bbc:	4b71      	ldr	r3, [pc, #452]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc0:	4b70      	ldr	r3, [pc, #448]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	438a      	bics	r2, r1
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc8:	f7fe f8cc 	bl	8003d64 <HAL_GetTick>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005bd2:	f7fe f8c7 	bl	8003d64 <HAL_GetTick>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e111      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005be4:	4b67      	ldr	r3, [pc, #412]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be8:	2202      	movs	r2, #2
 8005bea:	4013      	ands	r3, r2
 8005bec:	d1f1      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d05c      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005bf8:	4b62      	ldr	r3, [pc, #392]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	220c      	movs	r2, #12
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d00e      	beq.n	8005c22 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005c04:	4b5f      	ldr	r3, [pc, #380]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	220c      	movs	r2, #12
 8005c0a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d114      	bne.n	8005c3a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005c10:	4b5c      	ldr	r3, [pc, #368]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	23c0      	movs	r3, #192	; 0xc0
 8005c16:	025b      	lsls	r3, r3, #9
 8005c18:	401a      	ands	r2, r3
 8005c1a:	23c0      	movs	r3, #192	; 0xc0
 8005c1c:	025b      	lsls	r3, r3, #9
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d10b      	bne.n	8005c3a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005c22:	4b58      	ldr	r3, [pc, #352]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	025b      	lsls	r3, r3, #9
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d040      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x5a8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d03c      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e0e6      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01b      	beq.n	8005c7a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005c42:	4b50      	ldr	r3, [pc, #320]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c46:	4b4f      	ldr	r3, [pc, #316]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c48:	2180      	movs	r1, #128	; 0x80
 8005c4a:	0249      	lsls	r1, r1, #9
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fe f888 	bl	8003d64 <HAL_GetTick>
 8005c54:	0003      	movs	r3, r0
 8005c56:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c5a:	f7fe f883 	bl	8003d64 <HAL_GetTick>
 8005c5e:	0002      	movs	r2, r0
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e0cd      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005c6c:	4b45      	ldr	r3, [pc, #276]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	025b      	lsls	r3, r3, #9
 8005c74:	4013      	ands	r3, r2
 8005c76:	d0f0      	beq.n	8005c5a <HAL_RCC_OscConfig+0x552>
 8005c78:	e01b      	b.n	8005cb2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005c7a:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c7e:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c80:	4943      	ldr	r1, [pc, #268]	; (8005d90 <HAL_RCC_OscConfig+0x688>)
 8005c82:	400a      	ands	r2, r1
 8005c84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c86:	f7fe f86d 	bl	8003d64 <HAL_GetTick>
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c90:	f7fe f868 	bl	8003d64 <HAL_GetTick>
 8005c94:	0002      	movs	r2, r0
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e0b2      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005ca2:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	025b      	lsls	r3, r3, #9
 8005caa:	4013      	ands	r3, r2
 8005cac:	d1f0      	bne.n	8005c90 <HAL_RCC_OscConfig+0x588>
 8005cae:	e000      	b.n	8005cb2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005cb0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d100      	bne.n	8005cbc <HAL_RCC_OscConfig+0x5b4>
 8005cba:	e0a4      	b.n	8005e06 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cbc:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	220c      	movs	r2, #12
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d100      	bne.n	8005cca <HAL_RCC_OscConfig+0x5c2>
 8005cc8:	e078      	b.n	8005dbc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d14c      	bne.n	8005d6c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd2:	4b2c      	ldr	r3, [pc, #176]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005cd8:	492e      	ldr	r1, [pc, #184]	; (8005d94 <HAL_RCC_OscConfig+0x68c>)
 8005cda:	400a      	ands	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cde:	f7fe f841 	bl	8003d64 <HAL_GetTick>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fe f83c 	bl	8003d64 <HAL_GetTick>
 8005cec:	0002      	movs	r2, r0
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e086      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cfa:	4b22      	ldr	r3, [pc, #136]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	049b      	lsls	r3, r3, #18
 8005d02:	4013      	ands	r3, r2
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d06:	4b1f      	ldr	r3, [pc, #124]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0a:	220f      	movs	r2, #15
 8005d0c:	4393      	bics	r3, r2
 8005d0e:	0019      	movs	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d14:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d16:	430a      	orrs	r2, r1
 8005d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <HAL_RCC_OscConfig+0x690>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	0019      	movs	r1, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d34:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	0449      	lsls	r1, r1, #17
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d42:	f7fe f80f 	bl	8003d64 <HAL_GetTick>
 8005d46:	0003      	movs	r3, r0
 8005d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fe f80a 	bl	8003d64 <HAL_GetTick>
 8005d50:	0002      	movs	r2, r0
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e054      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	049b      	lsls	r3, r3, #18
 8005d66:	4013      	ands	r3, r2
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCC_OscConfig+0x644>
 8005d6a:	e04c      	b.n	8005e06 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d72:	4908      	ldr	r1, [pc, #32]	; (8005d94 <HAL_RCC_OscConfig+0x68c>)
 8005d74:	400a      	ands	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fd fff4 	bl	8003d64 <HAL_GetTick>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d80:	e015      	b.n	8005dae <HAL_RCC_OscConfig+0x6a6>
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	40021000 	.word	0x40021000
 8005d88:	00001388 	.word	0x00001388
 8005d8c:	efffffff 	.word	0xefffffff
 8005d90:	fffeffff 	.word	0xfffeffff
 8005d94:	feffffff 	.word	0xfeffffff
 8005d98:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fd ffe2 	bl	8003d64 <HAL_GetTick>
 8005da0:	0002      	movs	r2, r0
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e02c      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dae:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <HAL_RCC_OscConfig+0x708>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	2380      	movs	r3, #128	; 0x80
 8005db4:	049b      	lsls	r3, r3, #18
 8005db6:	4013      	ands	r3, r2
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x694>
 8005dba:	e024      	b.n	8005e06 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e01f      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005dc8:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <HAL_RCC_OscConfig+0x708>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005dce:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <HAL_RCC_OscConfig+0x708>)
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	23c0      	movs	r3, #192	; 0xc0
 8005dd8:	025b      	lsls	r3, r3, #9
 8005dda:	401a      	ands	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d10e      	bne.n	8005e02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	220f      	movs	r2, #15
 8005de8:	401a      	ands	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d107      	bne.n	8005e02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	23f0      	movs	r3, #240	; 0xf0
 8005df6:	039b      	lsls	r3, r3, #14
 8005df8:	401a      	ands	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d001      	beq.n	8005e06 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	0018      	movs	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b008      	add	sp, #32
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40021000 	.word	0x40021000

08005e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e0bf      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e28:	4b61      	ldr	r3, [pc, #388]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4013      	ands	r3, r2
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d911      	bls.n	8005e5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e36:	4b5e      	ldr	r3, [pc, #376]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4393      	bics	r3, r2
 8005e3e:	0019      	movs	r1, r3
 8005e40:	4b5b      	ldr	r3, [pc, #364]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e48:	4b59      	ldr	r3, [pc, #356]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	4013      	ands	r3, r2
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0a6      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	4013      	ands	r3, r2
 8005e62:	d015      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2204      	movs	r2, #4
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d006      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005e6e:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	4b50      	ldr	r3, [pc, #320]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005e74:	21e0      	movs	r1, #224	; 0xe0
 8005e76:	00c9      	lsls	r1, r1, #3
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7c:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	22f0      	movs	r2, #240	; 0xf0
 8005e82:	4393      	bics	r3, r2
 8005e84:	0019      	movs	r1, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2201      	movs	r2, #1
 8005e96:	4013      	ands	r3, r2
 8005e98:	d04c      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	2380      	movs	r3, #128	; 0x80
 8005ea8:	029b      	lsls	r3, r3, #10
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d120      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07a      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d107      	bne.n	8005eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eba:	4b3e      	ldr	r3, [pc, #248]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	2380      	movs	r3, #128	; 0x80
 8005ec0:	049b      	lsls	r3, r3, #18
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d114      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e06e      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d107      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005ed2:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	025b      	lsls	r3, r3, #9
 8005eda:	4013      	ands	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e062      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee2:	4b34      	ldr	r3, [pc, #208]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e05b      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ef0:	4b30      	ldr	r3, [pc, #192]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	4393      	bics	r3, r2
 8005ef8:	0019      	movs	r1, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f00:	430a      	orrs	r2, r1
 8005f02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f04:	f7fd ff2e 	bl	8003d64 <HAL_GetTick>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0c:	e009      	b.n	8005f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f0e:	f7fd ff29 	bl	8003d64 <HAL_GetTick>
 8005f12:	0002      	movs	r2, r0
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	4a27      	ldr	r2, [pc, #156]	; (8005fb8 <HAL_RCC_ClockConfig+0x1a4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e042      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	220c      	movs	r2, #12
 8005f28:	401a      	ands	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d1ec      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f34:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d211      	bcs.n	8005f66 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f42:	4b1b      	ldr	r3, [pc, #108]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2201      	movs	r2, #1
 8005f48:	4393      	bics	r3, r2
 8005f4a:	0019      	movs	r1, r3
 8005f4c:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f54:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d001      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e020      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <HAL_RCC_ClockConfig+0x1a8>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f84:	f000 f820 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
 8005f88:	0001      	movs	r1, r0
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	091b      	lsrs	r3, r3, #4
 8005f90:	220f      	movs	r2, #15
 8005f92:	4013      	ands	r3, r2
 8005f94:	4a0a      	ldr	r2, [pc, #40]	; (8005fc0 <HAL_RCC_ClockConfig+0x1ac>)
 8005f96:	5cd3      	ldrb	r3, [r2, r3]
 8005f98:	000a      	movs	r2, r1
 8005f9a:	40da      	lsrs	r2, r3
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f7fb fcb9 	bl	8001918 <HAL_InitTick>
  
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	0018      	movs	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b004      	add	sp, #16
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40022000 	.word	0x40022000
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	00001388 	.word	0x00001388
 8005fbc:	fffff8ff 	.word	0xfffff8ff
 8005fc0:	08008f74 	.word	0x08008f74
 8005fc4:	20000000 	.word	0x20000000

08005fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc8:	b590      	push	{r4, r7, lr}
 8005fca:	b08f      	sub	sp, #60	; 0x3c
 8005fcc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005fce:	2314      	movs	r3, #20
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	4a37      	ldr	r2, [pc, #220]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8005fd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005fd6:	c313      	stmia	r3!, {r0, r1, r4}
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005fdc:	1d3b      	adds	r3, r7, #4
 8005fde:	4a35      	ldr	r2, [pc, #212]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xec>)
 8005fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8005fe4:	6812      	ldr	r2, [r2, #0]
 8005fe6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fec:	2300      	movs	r3, #0
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005ffc:	4b2e      	ldr	r3, [pc, #184]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	220c      	movs	r2, #12
 8006006:	4013      	ands	r3, r2
 8006008:	2b08      	cmp	r3, #8
 800600a:	d006      	beq.n	800601a <HAL_RCC_GetSysClockFreq+0x52>
 800600c:	2b0c      	cmp	r3, #12
 800600e:	d043      	beq.n	8006098 <HAL_RCC_GetSysClockFreq+0xd0>
 8006010:	2b04      	cmp	r3, #4
 8006012:	d144      	bne.n	800609e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006014:	4b29      	ldr	r3, [pc, #164]	; (80060bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8006016:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006018:	e044      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	0c9b      	lsrs	r3, r3, #18
 800601e:	220f      	movs	r2, #15
 8006020:	4013      	ands	r3, r2
 8006022:	2214      	movs	r2, #20
 8006024:	18ba      	adds	r2, r7, r2
 8006026:	5cd3      	ldrb	r3, [r2, r3]
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800602a:	4b23      	ldr	r3, [pc, #140]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	220f      	movs	r2, #15
 8006030:	4013      	ands	r3, r2
 8006032:	1d3a      	adds	r2, r7, #4
 8006034:	5cd3      	ldrb	r3, [r2, r3]
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603a:	23c0      	movs	r3, #192	; 0xc0
 800603c:	025b      	lsls	r3, r3, #9
 800603e:	401a      	ands	r2, r3
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	025b      	lsls	r3, r3, #9
 8006044:	429a      	cmp	r2, r3
 8006046:	d109      	bne.n	800605c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800604a:	481c      	ldr	r0, [pc, #112]	; (80060bc <HAL_RCC_GetSysClockFreq+0xf4>)
 800604c:	f7fa f85c 	bl	8000108 <__udivsi3>
 8006050:	0003      	movs	r3, r0
 8006052:	001a      	movs	r2, r3
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	4353      	muls	r3, r2
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
 800605a:	e01a      	b.n	8006092 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800605c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605e:	23c0      	movs	r3, #192	; 0xc0
 8006060:	025b      	lsls	r3, r3, #9
 8006062:	401a      	ands	r2, r3
 8006064:	23c0      	movs	r3, #192	; 0xc0
 8006066:	025b      	lsls	r3, r3, #9
 8006068:	429a      	cmp	r2, r3
 800606a:	d109      	bne.n	8006080 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800606c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800606e:	4814      	ldr	r0, [pc, #80]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006070:	f7fa f84a 	bl	8000108 <__udivsi3>
 8006074:	0003      	movs	r3, r0
 8006076:	001a      	movs	r2, r3
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	4353      	muls	r3, r2
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
 800607e:	e008      	b.n	8006092 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006082:	480e      	ldr	r0, [pc, #56]	; (80060bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8006084:	f7fa f840 	bl	8000108 <__udivsi3>
 8006088:	0003      	movs	r3, r0
 800608a:	001a      	movs	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	4353      	muls	r3, r2
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006096:	e005      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006098:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800609a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800609c:	e002      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800609e:	4b07      	ldr	r3, [pc, #28]	; (80060bc <HAL_RCC_GetSysClockFreq+0xf4>)
 80060a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80060a6:	0018      	movs	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	b00f      	add	sp, #60	; 0x3c
 80060ac:	bd90      	pop	{r4, r7, pc}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	08008e8c 	.word	0x08008e8c
 80060b4:	08008e9c 	.word	0x08008e9c
 80060b8:	40021000 	.word	0x40021000
 80060bc:	007a1200 	.word	0x007a1200
 80060c0:	02dc6c00 	.word	0x02dc6c00

080060c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80060ca:	681b      	ldr	r3, [r3, #0]
}
 80060cc:	0018      	movs	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	20000000 	.word	0x20000000

080060d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80060dc:	f7ff fff2 	bl	80060c4 <HAL_RCC_GetHCLKFreq>
 80060e0:	0001      	movs	r1, r0
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	2207      	movs	r2, #7
 80060ea:	4013      	ands	r3, r2
 80060ec:	4a04      	ldr	r2, [pc, #16]	; (8006100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060ee:	5cd3      	ldrb	r3, [r2, r3]
 80060f0:	40d9      	lsrs	r1, r3
 80060f2:	000b      	movs	r3, r1
}    
 80060f4:	0018      	movs	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	40021000 	.word	0x40021000
 8006100:	08008f84 	.word	0x08008f84

08006104 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2207      	movs	r2, #7
 8006112:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <HAL_RCC_GetClockConfig+0x4c>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2203      	movs	r2, #3
 800611a:	401a      	ands	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <HAL_RCC_GetClockConfig+0x4c>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	22f0      	movs	r2, #240	; 0xf0
 8006126:	401a      	ands	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800612c:	4b08      	ldr	r3, [pc, #32]	; (8006150 <HAL_RCC_GetClockConfig+0x4c>)
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	23e0      	movs	r3, #224	; 0xe0
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	401a      	ands	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800613a:	4b06      	ldr	r3, [pc, #24]	; (8006154 <HAL_RCC_GetClockConfig+0x50>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	401a      	ands	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	601a      	str	r2, [r3, #0]
}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	46bd      	mov	sp, r7
 800614a:	b002      	add	sp, #8
 800614c:	bd80      	pop	{r7, pc}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	40021000 	.word	0x40021000
 8006154:	40022000 	.word	0x40022000

08006158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	2380      	movs	r3, #128	; 0x80
 800616e:	025b      	lsls	r3, r3, #9
 8006170:	4013      	ands	r3, r2
 8006172:	d100      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006174:	e08f      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006176:	2317      	movs	r3, #23
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800617e:	4b6f      	ldr	r3, [pc, #444]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006180:	69da      	ldr	r2, [r3, #28]
 8006182:	2380      	movs	r3, #128	; 0x80
 8006184:	055b      	lsls	r3, r3, #21
 8006186:	4013      	ands	r3, r2
 8006188:	d111      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800618a:	4b6c      	ldr	r3, [pc, #432]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	4b6b      	ldr	r3, [pc, #428]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	0549      	lsls	r1, r1, #21
 8006194:	430a      	orrs	r2, r1
 8006196:	61da      	str	r2, [r3, #28]
 8006198:	4b68      	ldr	r3, [pc, #416]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	055b      	lsls	r3, r3, #21
 80061a0:	4013      	ands	r3, r2
 80061a2:	60bb      	str	r3, [r7, #8]
 80061a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061a6:	2317      	movs	r3, #23
 80061a8:	18fb      	adds	r3, r7, r3
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ae:	4b64      	ldr	r3, [pc, #400]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4013      	ands	r3, r2
 80061b8:	d11a      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ba:	4b61      	ldr	r3, [pc, #388]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b60      	ldr	r3, [pc, #384]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80061c0:	2180      	movs	r1, #128	; 0x80
 80061c2:	0049      	lsls	r1, r1, #1
 80061c4:	430a      	orrs	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061c8:	f7fd fdcc 	bl	8003d64 <HAL_GetTick>
 80061cc:	0003      	movs	r3, r0
 80061ce:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d0:	e008      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d2:	f7fd fdc7 	bl	8003d64 <HAL_GetTick>
 80061d6:	0002      	movs	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b64      	cmp	r3, #100	; 0x64
 80061de:	d901      	bls.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e0a6      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e4:	4b56      	ldr	r3, [pc, #344]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	4013      	ands	r3, r2
 80061ee:	d0f0      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061f0:	4b52      	ldr	r3, [pc, #328]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	23c0      	movs	r3, #192	; 0xc0
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4013      	ands	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d034      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	23c0      	movs	r3, #192	; 0xc0
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4013      	ands	r3, r2
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	429a      	cmp	r2, r3
 8006210:	d02c      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006212:	4b4a      	ldr	r3, [pc, #296]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	4a4b      	ldr	r2, [pc, #300]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006218:	4013      	ands	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800621c:	4b47      	ldr	r3, [pc, #284]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800621e:	6a1a      	ldr	r2, [r3, #32]
 8006220:	4b46      	ldr	r3, [pc, #280]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	0249      	lsls	r1, r1, #9
 8006226:	430a      	orrs	r2, r1
 8006228:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800622a:	4b44      	ldr	r3, [pc, #272]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	4b43      	ldr	r3, [pc, #268]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006230:	4945      	ldr	r1, [pc, #276]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006232:	400a      	ands	r2, r1
 8006234:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006236:	4b41      	ldr	r3, [pc, #260]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	4013      	ands	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fd fd8e 	bl	8003d64 <HAL_GetTick>
 8006248:	0003      	movs	r3, r0
 800624a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624c:	e009      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624e:	f7fd fd89 	bl	8003d64 <HAL_GetTick>
 8006252:	0002      	movs	r2, r0
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	4a3c      	ldr	r2, [pc, #240]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e067      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006262:	4b36      	ldr	r3, [pc, #216]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	2202      	movs	r2, #2
 8006268:	4013      	ands	r3, r2
 800626a:	d0f0      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800626c:	4b33      	ldr	r3, [pc, #204]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	4a34      	ldr	r2, [pc, #208]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006272:	4013      	ands	r3, r2
 8006274:	0019      	movs	r1, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	4b30      	ldr	r3, [pc, #192]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800627c:	430a      	orrs	r2, r1
 800627e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006280:	2317      	movs	r3, #23
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d105      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628a:	4b2c      	ldr	r3, [pc, #176]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800628c:	69da      	ldr	r2, [r3, #28]
 800628e:	4b2b      	ldr	r3, [pc, #172]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006290:	492f      	ldr	r1, [pc, #188]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006292:	400a      	ands	r2, r1
 8006294:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2201      	movs	r2, #1
 800629c:	4013      	ands	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062a0:	4b26      	ldr	r3, [pc, #152]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	2203      	movs	r2, #3
 80062a6:	4393      	bics	r3, r2
 80062a8:	0019      	movs	r1, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	4b23      	ldr	r3, [pc, #140]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062b0:	430a      	orrs	r2, r1
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2202      	movs	r2, #2
 80062ba:	4013      	ands	r3, r2
 80062bc:	d009      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062be:	4b1f      	ldr	r3, [pc, #124]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	4a24      	ldr	r2, [pc, #144]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	0019      	movs	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	4b1b      	ldr	r3, [pc, #108]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062ce:	430a      	orrs	r2, r1
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2220      	movs	r2, #32
 80062d8:	4013      	ands	r3, r2
 80062da:	d009      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062dc:	4b17      	ldr	r3, [pc, #92]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	2210      	movs	r2, #16
 80062e2:	4393      	bics	r3, r2
 80062e4:	0019      	movs	r1, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	4b14      	ldr	r3, [pc, #80]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062ec:	430a      	orrs	r2, r1
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	029b      	lsls	r3, r3, #10
 80062f8:	4013      	ands	r3, r2
 80062fa:	d009      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062fc:	4b0f      	ldr	r3, [pc, #60]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	2280      	movs	r2, #128	; 0x80
 8006302:	4393      	bics	r3, r2
 8006304:	0019      	movs	r1, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	4b0c      	ldr	r3, [pc, #48]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800630c:	430a      	orrs	r2, r1
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4013      	ands	r3, r2
 800631a:	d009      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800631c:	4b07      	ldr	r3, [pc, #28]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	2240      	movs	r2, #64	; 0x40
 8006322:	4393      	bics	r3, r2
 8006324:	0019      	movs	r1, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695a      	ldr	r2, [r3, #20]
 800632a:	4b04      	ldr	r3, [pc, #16]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800632c:	430a      	orrs	r2, r1
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	0018      	movs	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	b006      	add	sp, #24
 8006338:	bd80      	pop	{r7, pc}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	40021000 	.word	0x40021000
 8006340:	40007000 	.word	0x40007000
 8006344:	fffffcff 	.word	0xfffffcff
 8006348:	fffeffff 	.word	0xfffeffff
 800634c:	00001388 	.word	0x00001388
 8006350:	efffffff 	.word	0xefffffff
 8006354:	fffcffff 	.word	0xfffcffff

08006358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e01e      	b.n	80063a8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	223d      	movs	r2, #61	; 0x3d
 800636e:	5c9b      	ldrb	r3, [r3, r2]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d107      	bne.n	8006386 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	223c      	movs	r2, #60	; 0x3c
 800637a:	2100      	movs	r1, #0
 800637c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	0018      	movs	r0, r3
 8006382:	f000 f815 	bl	80063b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	223d      	movs	r2, #61	; 0x3d
 800638a:	2102      	movs	r1, #2
 800638c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3304      	adds	r3, #4
 8006396:	0019      	movs	r1, r3
 8006398:	0010      	movs	r0, r2
 800639a:	f000 f969 	bl	8006670 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	223d      	movs	r2, #61	; 0x3d
 80063a2:	2101      	movs	r1, #1
 80063a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	0018      	movs	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b002      	add	sp, #8
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063b8:	46c0      	nop			; (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b002      	add	sp, #8
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2101      	movs	r1, #1
 80063d4:	430a      	orrs	r2, r1
 80063d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2207      	movs	r2, #7
 80063e0:	4013      	ands	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b06      	cmp	r3, #6
 80063e8:	d007      	beq.n	80063fa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2101      	movs	r1, #1
 80063f6:	430a      	orrs	r2, r1
 80063f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	0018      	movs	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	b004      	add	sp, #16
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2202      	movs	r2, #2
 8006414:	4013      	ands	r3, r2
 8006416:	2b02      	cmp	r3, #2
 8006418:	d124      	bne.n	8006464 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	2202      	movs	r2, #2
 8006422:	4013      	ands	r3, r2
 8006424:	2b02      	cmp	r3, #2
 8006426:	d11d      	bne.n	8006464 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2203      	movs	r2, #3
 800642e:	4252      	negs	r2, r2
 8006430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	2203      	movs	r2, #3
 8006440:	4013      	ands	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	0018      	movs	r0, r3
 8006448:	f000 f8fa 	bl	8006640 <HAL_TIM_IC_CaptureCallback>
 800644c:	e007      	b.n	800645e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	0018      	movs	r0, r3
 8006452:	f000 f8ed 	bl	8006630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	0018      	movs	r0, r3
 800645a:	f000 f8f9 	bl	8006650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2204      	movs	r2, #4
 800646c:	4013      	ands	r3, r2
 800646e:	2b04      	cmp	r3, #4
 8006470:	d125      	bne.n	80064be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	2204      	movs	r2, #4
 800647a:	4013      	ands	r3, r2
 800647c:	2b04      	cmp	r3, #4
 800647e:	d11e      	bne.n	80064be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2205      	movs	r2, #5
 8006486:	4252      	negs	r2, r2
 8006488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	23c0      	movs	r3, #192	; 0xc0
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4013      	ands	r3, r2
 800649c:	d004      	beq.n	80064a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	0018      	movs	r0, r3
 80064a2:	f000 f8cd 	bl	8006640 <HAL_TIM_IC_CaptureCallback>
 80064a6:	e007      	b.n	80064b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	0018      	movs	r0, r3
 80064ac:	f000 f8c0 	bl	8006630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0018      	movs	r0, r3
 80064b4:	f000 f8cc 	bl	8006650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2208      	movs	r2, #8
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d124      	bne.n	8006516 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2208      	movs	r2, #8
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d11d      	bne.n	8006516 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2209      	movs	r2, #9
 80064e0:	4252      	negs	r2, r2
 80064e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2204      	movs	r2, #4
 80064e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	2203      	movs	r2, #3
 80064f2:	4013      	ands	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	0018      	movs	r0, r3
 80064fa:	f000 f8a1 	bl	8006640 <HAL_TIM_IC_CaptureCallback>
 80064fe:	e007      	b.n	8006510 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	0018      	movs	r0, r3
 8006504:	f000 f894 	bl	8006630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	0018      	movs	r0, r3
 800650c:	f000 f8a0 	bl	8006650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2210      	movs	r2, #16
 800651e:	4013      	ands	r3, r2
 8006520:	2b10      	cmp	r3, #16
 8006522:	d125      	bne.n	8006570 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	2210      	movs	r2, #16
 800652c:	4013      	ands	r3, r2
 800652e:	2b10      	cmp	r3, #16
 8006530:	d11e      	bne.n	8006570 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2211      	movs	r2, #17
 8006538:	4252      	negs	r2, r2
 800653a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2208      	movs	r2, #8
 8006540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	23c0      	movs	r3, #192	; 0xc0
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4013      	ands	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	0018      	movs	r0, r3
 8006554:	f000 f874 	bl	8006640 <HAL_TIM_IC_CaptureCallback>
 8006558:	e007      	b.n	800656a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	0018      	movs	r0, r3
 800655e:	f000 f867 	bl	8006630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0018      	movs	r0, r3
 8006566:	f000 f873 	bl	8006650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2201      	movs	r2, #1
 8006578:	4013      	ands	r3, r2
 800657a:	2b01      	cmp	r3, #1
 800657c:	d10f      	bne.n	800659e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	4013      	ands	r3, r2
 8006588:	2b01      	cmp	r3, #1
 800658a:	d108      	bne.n	800659e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2202      	movs	r2, #2
 8006592:	4252      	negs	r2, r2
 8006594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	0018      	movs	r0, r3
 800659a:	f7fa ffad 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2280      	movs	r2, #128	; 0x80
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b80      	cmp	r3, #128	; 0x80
 80065aa:	d10f      	bne.n	80065cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	2280      	movs	r2, #128	; 0x80
 80065b4:	4013      	ands	r3, r2
 80065b6:	2b80      	cmp	r3, #128	; 0x80
 80065b8:	d108      	bne.n	80065cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2281      	movs	r2, #129	; 0x81
 80065c0:	4252      	negs	r2, r2
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 f8da 	bl	8006780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2240      	movs	r2, #64	; 0x40
 80065d4:	4013      	ands	r3, r2
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d10f      	bne.n	80065fa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	2240      	movs	r2, #64	; 0x40
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d108      	bne.n	80065fa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2241      	movs	r2, #65	; 0x41
 80065ee:	4252      	negs	r2, r2
 80065f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	0018      	movs	r0, r3
 80065f6:	f000 f833 	bl	8006660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2220      	movs	r2, #32
 8006602:	4013      	ands	r3, r2
 8006604:	2b20      	cmp	r3, #32
 8006606:	d10f      	bne.n	8006628 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	4013      	ands	r3, r2
 8006612:	2b20      	cmp	r3, #32
 8006614:	d108      	bne.n	8006628 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2221      	movs	r2, #33	; 0x21
 800661c:	4252      	negs	r2, r2
 800661e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	0018      	movs	r0, r3
 8006624:	f000 f8a4 	bl	8006770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006628:	46c0      	nop			; (mov r8, r8)
 800662a:	46bd      	mov	sp, r7
 800662c:	b002      	add	sp, #8
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006638:	46c0      	nop			; (mov r8, r8)
 800663a:	46bd      	mov	sp, r7
 800663c:	b002      	add	sp, #8
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006648:	46c0      	nop			; (mov r8, r8)
 800664a:	46bd      	mov	sp, r7
 800664c:	b002      	add	sp, #8
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006658:	46c0      	nop			; (mov r8, r8)
 800665a:	46bd      	mov	sp, r7
 800665c:	b002      	add	sp, #8
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006668:	46c0      	nop			; (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	b002      	add	sp, #8
 800666e:	bd80      	pop	{r7, pc}

08006670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a34      	ldr	r2, [pc, #208]	; (8006754 <TIM_Base_SetConfig+0xe4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d008      	beq.n	800669a <TIM_Base_SetConfig+0x2a>
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	2380      	movs	r3, #128	; 0x80
 800668c:	05db      	lsls	r3, r3, #23
 800668e:	429a      	cmp	r2, r3
 8006690:	d003      	beq.n	800669a <TIM_Base_SetConfig+0x2a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a30      	ldr	r2, [pc, #192]	; (8006758 <TIM_Base_SetConfig+0xe8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d108      	bne.n	80066ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2270      	movs	r2, #112	; 0x70
 800669e:	4393      	bics	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a29      	ldr	r2, [pc, #164]	; (8006754 <TIM_Base_SetConfig+0xe4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <TIM_Base_SetConfig+0x76>
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	2380      	movs	r3, #128	; 0x80
 80066b8:	05db      	lsls	r3, r3, #23
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d013      	beq.n	80066e6 <TIM_Base_SetConfig+0x76>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a25      	ldr	r2, [pc, #148]	; (8006758 <TIM_Base_SetConfig+0xe8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00f      	beq.n	80066e6 <TIM_Base_SetConfig+0x76>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a24      	ldr	r2, [pc, #144]	; (800675c <TIM_Base_SetConfig+0xec>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00b      	beq.n	80066e6 <TIM_Base_SetConfig+0x76>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a23      	ldr	r2, [pc, #140]	; (8006760 <TIM_Base_SetConfig+0xf0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d007      	beq.n	80066e6 <TIM_Base_SetConfig+0x76>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a22      	ldr	r2, [pc, #136]	; (8006764 <TIM_Base_SetConfig+0xf4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_Base_SetConfig+0x76>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a21      	ldr	r2, [pc, #132]	; (8006768 <TIM_Base_SetConfig+0xf8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d108      	bne.n	80066f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4a20      	ldr	r2, [pc, #128]	; (800676c <TIM_Base_SetConfig+0xfc>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2280      	movs	r2, #128	; 0x80
 80066fc:	4393      	bics	r3, r2
 80066fe:	001a      	movs	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a0c      	ldr	r2, [pc, #48]	; (8006754 <TIM_Base_SetConfig+0xe4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00b      	beq.n	800673e <TIM_Base_SetConfig+0xce>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a0d      	ldr	r2, [pc, #52]	; (8006760 <TIM_Base_SetConfig+0xf0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d007      	beq.n	800673e <TIM_Base_SetConfig+0xce>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a0c      	ldr	r2, [pc, #48]	; (8006764 <TIM_Base_SetConfig+0xf4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <TIM_Base_SetConfig+0xce>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <TIM_Base_SetConfig+0xf8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d103      	bne.n	8006746 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	615a      	str	r2, [r3, #20]
}
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b004      	add	sp, #16
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40012c00 	.word	0x40012c00
 8006758:	40000400 	.word	0x40000400
 800675c:	40002000 	.word	0x40002000
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400
 8006768:	40014800 	.word	0x40014800
 800676c:	fffffcff 	.word	0xfffffcff

08006770 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006778:	46c0      	nop			; (mov r8, r8)
 800677a:	46bd      	mov	sp, r7
 800677c:	b002      	add	sp, #8
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006788:	46c0      	nop			; (mov r8, r8)
 800678a:	46bd      	mov	sp, r7
 800678c:	b002      	add	sp, #8
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e044      	b.n	800682c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d107      	bne.n	80067ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2270      	movs	r2, #112	; 0x70
 80067ae:	2100      	movs	r1, #0
 80067b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	0018      	movs	r0, r3
 80067b6:	f7fb f81f 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2224      	movs	r2, #36	; 0x24
 80067be:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2101      	movs	r1, #1
 80067cc:	438a      	bics	r2, r1
 80067ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	0018      	movs	r0, r3
 80067d4:	f000 f97c 	bl	8006ad0 <UART_SetConfig>
 80067d8:	0003      	movs	r3, r0
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e024      	b.n	800682c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0018      	movs	r0, r3
 80067ee:	f000 fb3b 	bl	8006e68 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	490d      	ldr	r1, [pc, #52]	; (8006834 <HAL_UART_Init+0xa4>)
 80067fe:	400a      	ands	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	212a      	movs	r1, #42	; 0x2a
 800680e:	438a      	bics	r2, r1
 8006810:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2101      	movs	r1, #1
 800681e:	430a      	orrs	r2, r1
 8006820:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0018      	movs	r0, r3
 8006826:	f000 fbd3 	bl	8006fd0 <UART_CheckIdleState>
 800682a:	0003      	movs	r3, r0
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	b002      	add	sp, #8
 8006832:	bd80      	pop	{r7, pc}
 8006834:	ffffb7ff 	.word	0xffffb7ff

08006838 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4a93      	ldr	r2, [pc, #588]	; (8006aa8 <HAL_UART_IRQHandler+0x270>)
 800685c:	4013      	ands	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d112      	bne.n	800688c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2220      	movs	r2, #32
 800686a:	4013      	ands	r3, r2
 800686c:	d00e      	beq.n	800688c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2220      	movs	r2, #32
 8006872:	4013      	ands	r3, r2
 8006874:	d00a      	beq.n	800688c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687a:	2b00      	cmp	r3, #0
 800687c:	d100      	bne.n	8006880 <HAL_UART_IRQHandler+0x48>
 800687e:	e10b      	b.n	8006a98 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	0010      	movs	r0, r2
 8006888:	4798      	blx	r3
      }
      return;
 800688a:	e105      	b.n	8006a98 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d100      	bne.n	8006894 <HAL_UART_IRQHandler+0x5c>
 8006892:	e0cd      	b.n	8006a30 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2201      	movs	r2, #1
 8006898:	4013      	ands	r3, r2
 800689a:	d105      	bne.n	80068a8 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	2390      	movs	r3, #144	; 0x90
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	4013      	ands	r3, r2
 80068a4:	d100      	bne.n	80068a8 <HAL_UART_IRQHandler+0x70>
 80068a6:	e0c3      	b.n	8006a30 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	2201      	movs	r2, #1
 80068ac:	4013      	ands	r3, r2
 80068ae:	d00e      	beq.n	80068ce <HAL_UART_IRQHandler+0x96>
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4013      	ands	r3, r2
 80068b8:	d009      	beq.n	80068ce <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2201      	movs	r2, #1
 80068c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c6:	2201      	movs	r2, #1
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	2202      	movs	r2, #2
 80068d2:	4013      	ands	r3, r2
 80068d4:	d00d      	beq.n	80068f2 <HAL_UART_IRQHandler+0xba>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2201      	movs	r2, #1
 80068da:	4013      	ands	r3, r2
 80068dc:	d009      	beq.n	80068f2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2202      	movs	r2, #2
 80068e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ea:	2204      	movs	r2, #4
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2204      	movs	r2, #4
 80068f6:	4013      	ands	r3, r2
 80068f8:	d00d      	beq.n	8006916 <HAL_UART_IRQHandler+0xde>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2201      	movs	r2, #1
 80068fe:	4013      	ands	r3, r2
 8006900:	d009      	beq.n	8006916 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2204      	movs	r2, #4
 8006908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690e:	2202      	movs	r2, #2
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2208      	movs	r2, #8
 800691a:	4013      	ands	r3, r2
 800691c:	d011      	beq.n	8006942 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	2220      	movs	r2, #32
 8006922:	4013      	ands	r3, r2
 8006924:	d103      	bne.n	800692e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2201      	movs	r2, #1
 800692a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800692c:	d009      	beq.n	8006942 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2208      	movs	r2, #8
 8006934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800693a:	2208      	movs	r2, #8
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	2380      	movs	r3, #128	; 0x80
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	4013      	ands	r3, r2
 800694a:	d00f      	beq.n	800696c <HAL_UART_IRQHandler+0x134>
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	2380      	movs	r3, #128	; 0x80
 8006950:	04db      	lsls	r3, r3, #19
 8006952:	4013      	ands	r3, r2
 8006954:	d00a      	beq.n	800696c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2280      	movs	r2, #128	; 0x80
 800695c:	0112      	lsls	r2, r2, #4
 800695e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006964:	2220      	movs	r2, #32
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d100      	bne.n	8006976 <HAL_UART_IRQHandler+0x13e>
 8006974:	e092      	b.n	8006a9c <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	2220      	movs	r2, #32
 800697a:	4013      	ands	r3, r2
 800697c:	d00c      	beq.n	8006998 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2220      	movs	r2, #32
 8006982:	4013      	ands	r3, r2
 8006984:	d008      	beq.n	8006998 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800698a:	2b00      	cmp	r3, #0
 800698c:	d004      	beq.n	8006998 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	0010      	movs	r0, r2
 8006996:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800699c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2240      	movs	r2, #64	; 0x40
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d003      	beq.n	80069b4 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2228      	movs	r2, #40	; 0x28
 80069b0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b2:	d033      	beq.n	8006a1c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	0018      	movs	r0, r3
 80069b8:	f000 fbce 	bl	8007158 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2240      	movs	r2, #64	; 0x40
 80069c4:	4013      	ands	r3, r2
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d123      	bne.n	8006a12 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2140      	movs	r1, #64	; 0x40
 80069d6:	438a      	bics	r2, r1
 80069d8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d012      	beq.n	8006a08 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e6:	4a31      	ldr	r2, [pc, #196]	; (8006aac <HAL_UART_IRQHandler+0x274>)
 80069e8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ee:	0018      	movs	r0, r3
 80069f0:	f7fd fedf 	bl	80047b2 <HAL_DMA_Abort_IT>
 80069f4:	1e03      	subs	r3, r0, #0
 80069f6:	d019      	beq.n	8006a2c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a02:	0018      	movs	r0, r3
 8006a04:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a06:	e011      	b.n	8006a2c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f000 f858 	bl	8006ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a10:	e00c      	b.n	8006a2c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	0018      	movs	r0, r3
 8006a16:	f000 f853 	bl	8006ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1a:	e007      	b.n	8006a2c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	0018      	movs	r0, r3
 8006a20:	f000 f84e 	bl	8006ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006a2a:	e037      	b.n	8006a9c <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2c:	46c0      	nop			; (mov r8, r8)
    return;
 8006a2e:	e035      	b.n	8006a9c <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	2380      	movs	r3, #128	; 0x80
 8006a34:	035b      	lsls	r3, r3, #13
 8006a36:	4013      	ands	r3, r2
 8006a38:	d00e      	beq.n	8006a58 <HAL_UART_IRQHandler+0x220>
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	03db      	lsls	r3, r3, #15
 8006a40:	4013      	ands	r3, r2
 8006a42:	d009      	beq.n	8006a58 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2280      	movs	r2, #128	; 0x80
 8006a4a:	0352      	lsls	r2, r2, #13
 8006a4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f000 fbd2 	bl	80071fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a56:	e024      	b.n	8006aa2 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	2280      	movs	r2, #128	; 0x80
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d00d      	beq.n	8006a7c <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2280      	movs	r2, #128	; 0x80
 8006a64:	4013      	ands	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d017      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	0010      	movs	r0, r2
 8006a78:	4798      	blx	r3
    }
    return;
 8006a7a:	e011      	b.n	8006aa0 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	2240      	movs	r2, #64	; 0x40
 8006a80:	4013      	ands	r3, r2
 8006a82:	d00e      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x26a>
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2240      	movs	r2, #64	; 0x40
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d00a      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f000 fb99 	bl	80071c6 <UART_EndTransmit_IT>
    return;
 8006a94:	46c0      	nop			; (mov r8, r8)
 8006a96:	e004      	b.n	8006aa2 <HAL_UART_IRQHandler+0x26a>
      return;
 8006a98:	46c0      	nop			; (mov r8, r8)
 8006a9a:	e002      	b.n	8006aa2 <HAL_UART_IRQHandler+0x26a>
    return;
 8006a9c:	46c0      	nop			; (mov r8, r8)
 8006a9e:	e000      	b.n	8006aa2 <HAL_UART_IRQHandler+0x26a>
    return;
 8006aa0:	46c0      	nop			; (mov r8, r8)
  }

}
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b008      	add	sp, #32
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	0000080f 	.word	0x0000080f
 8006aac:	08007199 	.word	0x08007199

08006ab0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ab8:	46c0      	nop			; (mov r8, r8)
 8006aba:	46bd      	mov	sp, r7
 8006abc:	b002      	add	sp, #8
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ac8:	46c0      	nop			; (mov r8, r8)
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b002      	add	sp, #8
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006adc:	2317      	movs	r3, #23
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4ac5      	ldr	r2, [pc, #788]	; (8006e18 <UART_SetConfig+0x348>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	0019      	movs	r1, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4ac0      	ldr	r2, [pc, #768]	; (8006e1c <UART_SetConfig+0x34c>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	4ab7      	ldr	r2, [pc, #732]	; (8006e20 <UART_SetConfig+0x350>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	0019      	movs	r1, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4ab3      	ldr	r2, [pc, #716]	; (8006e24 <UART_SetConfig+0x354>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d125      	bne.n	8006ba6 <UART_SetConfig+0xd6>
 8006b5a:	4bb3      	ldr	r3, [pc, #716]	; (8006e28 <UART_SetConfig+0x358>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	2203      	movs	r2, #3
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d00f      	beq.n	8006b86 <UART_SetConfig+0xb6>
 8006b66:	d304      	bcc.n	8006b72 <UART_SetConfig+0xa2>
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d011      	beq.n	8006b90 <UART_SetConfig+0xc0>
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d005      	beq.n	8006b7c <UART_SetConfig+0xac>
 8006b70:	e013      	b.n	8006b9a <UART_SetConfig+0xca>
 8006b72:	231f      	movs	r3, #31
 8006b74:	18fb      	adds	r3, r7, r3
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	e064      	b.n	8006c46 <UART_SetConfig+0x176>
 8006b7c:	231f      	movs	r3, #31
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	2202      	movs	r2, #2
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	e05f      	b.n	8006c46 <UART_SetConfig+0x176>
 8006b86:	231f      	movs	r3, #31
 8006b88:	18fb      	adds	r3, r7, r3
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e05a      	b.n	8006c46 <UART_SetConfig+0x176>
 8006b90:	231f      	movs	r3, #31
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	2208      	movs	r2, #8
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e055      	b.n	8006c46 <UART_SetConfig+0x176>
 8006b9a:	231f      	movs	r3, #31
 8006b9c:	18fb      	adds	r3, r7, r3
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	e04f      	b.n	8006c46 <UART_SetConfig+0x176>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4aa0      	ldr	r2, [pc, #640]	; (8006e2c <UART_SetConfig+0x35c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d132      	bne.n	8006c16 <UART_SetConfig+0x146>
 8006bb0:	4b9d      	ldr	r3, [pc, #628]	; (8006e28 <UART_SetConfig+0x358>)
 8006bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb4:	23c0      	movs	r3, #192	; 0xc0
 8006bb6:	029b      	lsls	r3, r3, #10
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2280      	movs	r2, #128	; 0x80
 8006bbc:	0252      	lsls	r2, r2, #9
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d019      	beq.n	8006bf6 <UART_SetConfig+0x126>
 8006bc2:	2280      	movs	r2, #128	; 0x80
 8006bc4:	0252      	lsls	r2, r2, #9
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d802      	bhi.n	8006bd0 <UART_SetConfig+0x100>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <UART_SetConfig+0x112>
 8006bce:	e01c      	b.n	8006c0a <UART_SetConfig+0x13a>
 8006bd0:	2280      	movs	r2, #128	; 0x80
 8006bd2:	0292      	lsls	r2, r2, #10
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d013      	beq.n	8006c00 <UART_SetConfig+0x130>
 8006bd8:	22c0      	movs	r2, #192	; 0xc0
 8006bda:	0292      	lsls	r2, r2, #10
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d005      	beq.n	8006bec <UART_SetConfig+0x11c>
 8006be0:	e013      	b.n	8006c0a <UART_SetConfig+0x13a>
 8006be2:	231f      	movs	r3, #31
 8006be4:	18fb      	adds	r3, r7, r3
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	e02c      	b.n	8006c46 <UART_SetConfig+0x176>
 8006bec:	231f      	movs	r3, #31
 8006bee:	18fb      	adds	r3, r7, r3
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	e027      	b.n	8006c46 <UART_SetConfig+0x176>
 8006bf6:	231f      	movs	r3, #31
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	e022      	b.n	8006c46 <UART_SetConfig+0x176>
 8006c00:	231f      	movs	r3, #31
 8006c02:	18fb      	adds	r3, r7, r3
 8006c04:	2208      	movs	r2, #8
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e01d      	b.n	8006c46 <UART_SetConfig+0x176>
 8006c0a:	231f      	movs	r3, #31
 8006c0c:	18fb      	adds	r3, r7, r3
 8006c0e:	2210      	movs	r2, #16
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	e017      	b.n	8006c46 <UART_SetConfig+0x176>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a85      	ldr	r2, [pc, #532]	; (8006e30 <UART_SetConfig+0x360>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d104      	bne.n	8006c2a <UART_SetConfig+0x15a>
 8006c20:	231f      	movs	r3, #31
 8006c22:	18fb      	adds	r3, r7, r3
 8006c24:	2200      	movs	r2, #0
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	e00d      	b.n	8006c46 <UART_SetConfig+0x176>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a81      	ldr	r2, [pc, #516]	; (8006e34 <UART_SetConfig+0x364>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d104      	bne.n	8006c3e <UART_SetConfig+0x16e>
 8006c34:	231f      	movs	r3, #31
 8006c36:	18fb      	adds	r3, r7, r3
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	e003      	b.n	8006c46 <UART_SetConfig+0x176>
 8006c3e:	231f      	movs	r3, #31
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	2210      	movs	r2, #16
 8006c44:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69da      	ldr	r2, [r3, #28]
 8006c4a:	2380      	movs	r3, #128	; 0x80
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d000      	beq.n	8006c54 <UART_SetConfig+0x184>
 8006c52:	e07d      	b.n	8006d50 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8006c54:	231f      	movs	r3, #31
 8006c56:	18fb      	adds	r3, r7, r3
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d01c      	beq.n	8006c98 <UART_SetConfig+0x1c8>
 8006c5e:	dc02      	bgt.n	8006c66 <UART_SetConfig+0x196>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <UART_SetConfig+0x1a0>
 8006c64:	e04b      	b.n	8006cfe <UART_SetConfig+0x22e>
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d025      	beq.n	8006cb6 <UART_SetConfig+0x1e6>
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d037      	beq.n	8006cde <UART_SetConfig+0x20e>
 8006c6e:	e046      	b.n	8006cfe <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c70:	f7ff fa32 	bl	80060d8 <HAL_RCC_GetPCLK1Freq>
 8006c74:	0003      	movs	r3, r0
 8006c76:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	005a      	lsls	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	18d2      	adds	r2, r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	0019      	movs	r1, r3
 8006c8a:	0010      	movs	r0, r2
 8006c8c:	f7f9 fa3c 	bl	8000108 <__udivsi3>
 8006c90:	0003      	movs	r3, r0
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	61bb      	str	r3, [r7, #24]
        break;
 8006c96:	e037      	b.n	8006d08 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	085b      	lsrs	r3, r3, #1
 8006c9e:	4a66      	ldr	r2, [pc, #408]	; (8006e38 <UART_SetConfig+0x368>)
 8006ca0:	189a      	adds	r2, r3, r2
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	0019      	movs	r1, r3
 8006ca8:	0010      	movs	r0, r2
 8006caa:	f7f9 fa2d 	bl	8000108 <__udivsi3>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	61bb      	str	r3, [r7, #24]
        break;
 8006cb4:	e028      	b.n	8006d08 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cb6:	f7ff f987 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
 8006cba:	0003      	movs	r3, r0
 8006cbc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	005a      	lsls	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	18d2      	adds	r2, r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	0019      	movs	r1, r3
 8006cd0:	0010      	movs	r0, r2
 8006cd2:	f7f9 fa19 	bl	8000108 <__udivsi3>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	61bb      	str	r3, [r7, #24]
        break;
 8006cdc:	e014      	b.n	8006d08 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	2280      	movs	r2, #128	; 0x80
 8006ce6:	0252      	lsls	r2, r2, #9
 8006ce8:	189a      	adds	r2, r3, r2
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	0019      	movs	r1, r3
 8006cf0:	0010      	movs	r0, r2
 8006cf2:	f7f9 fa09 	bl	8000108 <__udivsi3>
 8006cf6:	0003      	movs	r3, r0
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	61bb      	str	r3, [r7, #24]
        break;
 8006cfc:	e004      	b.n	8006d08 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8006cfe:	2317      	movs	r3, #23
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	2201      	movs	r2, #1
 8006d04:	701a      	strb	r2, [r3, #0]
        break;
 8006d06:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b0f      	cmp	r3, #15
 8006d0c:	d91b      	bls.n	8006d46 <UART_SetConfig+0x276>
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	4a4a      	ldr	r2, [pc, #296]	; (8006e3c <UART_SetConfig+0x36c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d817      	bhi.n	8006d46 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	200a      	movs	r0, #10
 8006d1c:	183b      	adds	r3, r7, r0
 8006d1e:	210f      	movs	r1, #15
 8006d20:	438a      	bics	r2, r1
 8006d22:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2207      	movs	r2, #7
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	b299      	uxth	r1, r3
 8006d30:	183b      	adds	r3, r7, r0
 8006d32:	183a      	adds	r2, r7, r0
 8006d34:	8812      	ldrh	r2, [r2, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	183a      	adds	r2, r7, r0
 8006d40:	8812      	ldrh	r2, [r2, #0]
 8006d42:	60da      	str	r2, [r3, #12]
 8006d44:	e082      	b.n	8006e4c <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8006d46:	2317      	movs	r3, #23
 8006d48:	18fb      	adds	r3, r7, r3
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e07d      	b.n	8006e4c <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8006d50:	231f      	movs	r3, #31
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d01b      	beq.n	8006d92 <UART_SetConfig+0x2c2>
 8006d5a:	dc02      	bgt.n	8006d62 <UART_SetConfig+0x292>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <UART_SetConfig+0x29c>
 8006d60:	e049      	b.n	8006df6 <UART_SetConfig+0x326>
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d024      	beq.n	8006db0 <UART_SetConfig+0x2e0>
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d035      	beq.n	8006dd6 <UART_SetConfig+0x306>
 8006d6a:	e044      	b.n	8006df6 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7ff f9b4 	bl	80060d8 <HAL_RCC_GetPCLK1Freq>
 8006d70:	0003      	movs	r3, r0
 8006d72:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	085a      	lsrs	r2, r3, #1
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	18d2      	adds	r2, r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	0019      	movs	r1, r3
 8006d84:	0010      	movs	r0, r2
 8006d86:	f7f9 f9bf 	bl	8000108 <__udivsi3>
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	61bb      	str	r3, [r7, #24]
        break;
 8006d90:	e036      	b.n	8006e00 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	085b      	lsrs	r3, r3, #1
 8006d98:	4a29      	ldr	r2, [pc, #164]	; (8006e40 <UART_SetConfig+0x370>)
 8006d9a:	189a      	adds	r2, r3, r2
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	0019      	movs	r1, r3
 8006da2:	0010      	movs	r0, r2
 8006da4:	f7f9 f9b0 	bl	8000108 <__udivsi3>
 8006da8:	0003      	movs	r3, r0
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	61bb      	str	r3, [r7, #24]
        break;
 8006dae:	e027      	b.n	8006e00 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db0:	f7ff f90a 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
 8006db4:	0003      	movs	r3, r0
 8006db6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	085a      	lsrs	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	18d2      	adds	r2, r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	0019      	movs	r1, r3
 8006dc8:	0010      	movs	r0, r2
 8006dca:	f7f9 f99d 	bl	8000108 <__udivsi3>
 8006dce:	0003      	movs	r3, r0
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	61bb      	str	r3, [r7, #24]
        break;
 8006dd4:	e014      	b.n	8006e00 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	2280      	movs	r2, #128	; 0x80
 8006dde:	0212      	lsls	r2, r2, #8
 8006de0:	189a      	adds	r2, r3, r2
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	0019      	movs	r1, r3
 8006de8:	0010      	movs	r0, r2
 8006dea:	f7f9 f98d 	bl	8000108 <__udivsi3>
 8006dee:	0003      	movs	r3, r0
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	61bb      	str	r3, [r7, #24]
        break;
 8006df4:	e004      	b.n	8006e00 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8006df6:	2317      	movs	r3, #23
 8006df8:	18fb      	adds	r3, r7, r3
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	701a      	strb	r2, [r3, #0]
        break;
 8006dfe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b0f      	cmp	r3, #15
 8006e04:	d91e      	bls.n	8006e44 <UART_SetConfig+0x374>
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	4a0c      	ldr	r2, [pc, #48]	; (8006e3c <UART_SetConfig+0x36c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d81a      	bhi.n	8006e44 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	60da      	str	r2, [r3, #12]
 8006e16:	e019      	b.n	8006e4c <UART_SetConfig+0x37c>
 8006e18:	efff69f3 	.word	0xefff69f3
 8006e1c:	ffffcfff 	.word	0xffffcfff
 8006e20:	fffff4ff 	.word	0xfffff4ff
 8006e24:	40013800 	.word	0x40013800
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	40004400 	.word	0x40004400
 8006e30:	40004800 	.word	0x40004800
 8006e34:	40004c00 	.word	0x40004c00
 8006e38:	00f42400 	.word	0x00f42400
 8006e3c:	0000ffff 	.word	0x0000ffff
 8006e40:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8006e44:	2317      	movs	r3, #23
 8006e46:	18fb      	adds	r3, r7, r3
 8006e48:	2201      	movs	r2, #1
 8006e4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006e58:	2317      	movs	r3, #23
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	781b      	ldrb	r3, [r3, #0]
}
 8006e5e:	0018      	movs	r0, r3
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b008      	add	sp, #32
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	46c0      	nop			; (mov r8, r8)

08006e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	2201      	movs	r2, #1
 8006e76:	4013      	ands	r3, r2
 8006e78:	d00b      	beq.n	8006e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	4a4a      	ldr	r2, [pc, #296]	; (8006fac <UART_AdvFeatureConfig+0x144>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	0019      	movs	r1, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2202      	movs	r2, #2
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d00b      	beq.n	8006eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	4a43      	ldr	r2, [pc, #268]	; (8006fb0 <UART_AdvFeatureConfig+0x148>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	0019      	movs	r1, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	2204      	movs	r2, #4
 8006eba:	4013      	ands	r3, r2
 8006ebc:	d00b      	beq.n	8006ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	4a3b      	ldr	r2, [pc, #236]	; (8006fb4 <UART_AdvFeatureConfig+0x14c>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	0019      	movs	r1, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2208      	movs	r2, #8
 8006edc:	4013      	ands	r3, r2
 8006ede:	d00b      	beq.n	8006ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	4a34      	ldr	r2, [pc, #208]	; (8006fb8 <UART_AdvFeatureConfig+0x150>)
 8006ee8:	4013      	ands	r3, r2
 8006eea:	0019      	movs	r1, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	2210      	movs	r2, #16
 8006efe:	4013      	ands	r3, r2
 8006f00:	d00b      	beq.n	8006f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <UART_AdvFeatureConfig+0x154>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	0019      	movs	r1, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2220      	movs	r2, #32
 8006f20:	4013      	ands	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	4a25      	ldr	r2, [pc, #148]	; (8006fc0 <UART_AdvFeatureConfig+0x158>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	0019      	movs	r1, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	2240      	movs	r2, #64	; 0x40
 8006f42:	4013      	ands	r3, r2
 8006f44:	d01d      	beq.n	8006f82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <UART_AdvFeatureConfig+0x15c>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	0019      	movs	r1, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f62:	2380      	movs	r3, #128	; 0x80
 8006f64:	035b      	lsls	r3, r3, #13
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d10b      	bne.n	8006f82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <UART_AdvFeatureConfig+0x160>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	0019      	movs	r1, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	2280      	movs	r2, #128	; 0x80
 8006f88:	4013      	ands	r3, r2
 8006f8a:	d00b      	beq.n	8006fa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4a0e      	ldr	r2, [pc, #56]	; (8006fcc <UART_AdvFeatureConfig+0x164>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	0019      	movs	r1, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
  }
}
 8006fa4:	46c0      	nop			; (mov r8, r8)
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b002      	add	sp, #8
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	fffdffff 	.word	0xfffdffff
 8006fb0:	fffeffff 	.word	0xfffeffff
 8006fb4:	fffbffff 	.word	0xfffbffff
 8006fb8:	ffff7fff 	.word	0xffff7fff
 8006fbc:	ffffefff 	.word	0xffffefff
 8006fc0:	ffffdfff 	.word	0xffffdfff
 8006fc4:	ffefffff 	.word	0xffefffff
 8006fc8:	ff9fffff 	.word	0xff9fffff
 8006fcc:	fff7ffff 	.word	0xfff7ffff

08006fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006fde:	f7fc fec1 	bl	8003d64 <HAL_GetTick>
 8006fe2:	0003      	movs	r3, r0
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2208      	movs	r2, #8
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d10d      	bne.n	8007010 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	2380      	movs	r3, #128	; 0x80
 8006ff8:	0399      	lsls	r1, r3, #14
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4b16      	ldr	r3, [pc, #88]	; (8007058 <UART_CheckIdleState+0x88>)
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	0013      	movs	r3, r2
 8007002:	2200      	movs	r2, #0
 8007004:	f000 f82a 	bl	800705c <UART_WaitOnFlagUntilTimeout>
 8007008:	1e03      	subs	r3, r0, #0
 800700a:	d001      	beq.n	8007010 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e01f      	b.n	8007050 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2204      	movs	r2, #4
 8007018:	4013      	ands	r3, r2
 800701a:	2b04      	cmp	r3, #4
 800701c:	d10d      	bne.n	800703a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	2380      	movs	r3, #128	; 0x80
 8007022:	03d9      	lsls	r1, r3, #15
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <UART_CheckIdleState+0x88>)
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	0013      	movs	r3, r2
 800702c:	2200      	movs	r2, #0
 800702e:	f000 f815 	bl	800705c <UART_WaitOnFlagUntilTimeout>
 8007032:	1e03      	subs	r3, r0, #0
 8007034:	d001      	beq.n	800703a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e00a      	b.n	8007050 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2270      	movs	r2, #112	; 0x70
 800704a:	2100      	movs	r1, #0
 800704c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	0018      	movs	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	b004      	add	sp, #16
 8007056:	bd80      	pop	{r7, pc}
 8007058:	01ffffff 	.word	0x01ffffff

0800705c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	1dfb      	adds	r3, r7, #7
 800706a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706c:	e05d      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	3301      	adds	r3, #1
 8007072:	d05a      	beq.n	800712a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007074:	f7fc fe76 	bl	8003d64 <HAL_GetTick>
 8007078:	0002      	movs	r2, r0
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	429a      	cmp	r2, r3
 8007082:	d302      	bcc.n	800708a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d11b      	bne.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	492f      	ldr	r1, [pc, #188]	; (8007154 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007096:	400a      	ands	r2, r1
 8007098:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2101      	movs	r1, #1
 80070a6:	438a      	bics	r2, r1
 80070a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2220      	movs	r2, #32
 80070ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2270      	movs	r2, #112	; 0x70
 80070ba:	2100      	movs	r1, #0
 80070bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e043      	b.n	800714a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2204      	movs	r2, #4
 80070ca:	4013      	ands	r3, r2
 80070cc:	d02d      	beq.n	800712a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	2380      	movs	r3, #128	; 0x80
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	401a      	ands	r2, r3
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	429a      	cmp	r2, r3
 80070e0:	d123      	bne.n	800712a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	0112      	lsls	r2, r2, #4
 80070ea:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4917      	ldr	r1, [pc, #92]	; (8007154 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80070f8:	400a      	ands	r2, r1
 80070fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2101      	movs	r1, #1
 8007108:	438a      	bics	r2, r1
 800710a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2220      	movs	r2, #32
 8007116:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2270      	movs	r2, #112	; 0x70
 8007122:	2100      	movs	r1, #0
 8007124:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e00f      	b.n	800714a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	4013      	ands	r3, r2
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	425a      	negs	r2, r3
 800713a:	4153      	adcs	r3, r2
 800713c:	b2db      	uxtb	r3, r3
 800713e:	001a      	movs	r2, r3
 8007140:	1dfb      	adds	r3, r7, #7
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d092      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	0018      	movs	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	b004      	add	sp, #16
 8007150:	bd80      	pop	{r7, pc}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	fffffe5f 	.word	0xfffffe5f

08007158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	490a      	ldr	r1, [pc, #40]	; (8007194 <UART_EndRxTransfer+0x3c>)
 800716c:	400a      	ands	r2, r1
 800716e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2101      	movs	r1, #1
 800717c:	438a      	bics	r2, r1
 800717e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800718c:	46c0      	nop			; (mov r8, r8)
 800718e:	46bd      	mov	sp, r7
 8007190:	b002      	add	sp, #8
 8007192:	bd80      	pop	{r7, pc}
 8007194:	fffffedf 	.word	0xfffffedf

08007198 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	225a      	movs	r2, #90	; 0x5a
 80071aa:	2100      	movs	r1, #0
 80071ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2252      	movs	r2, #82	; 0x52
 80071b2:	2100      	movs	r1, #0
 80071b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	0018      	movs	r0, r3
 80071ba:	f7ff fc81 	bl	8006ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b004      	add	sp, #16
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2140      	movs	r1, #64	; 0x40
 80071da:	438a      	bics	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	0018      	movs	r0, r3
 80071ee:	f7ff fc5f 	bl	8006ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b002      	add	sp, #8
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	46bd      	mov	sp, r7
 8007206:	b002      	add	sp, #8
 8007208:	bd80      	pop	{r7, pc}

0800720a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	0002      	movs	r2, r0
 8007212:	1dbb      	adds	r3, r7, #6
 8007214:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800721a:	1dbb      	adds	r3, r7, #6
 800721c:	2200      	movs	r2, #0
 800721e:	5e9b      	ldrsh	r3, [r3, r2]
 8007220:	2b84      	cmp	r3, #132	; 0x84
 8007222:	d006      	beq.n	8007232 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8007224:	1dbb      	adds	r3, r7, #6
 8007226:	2200      	movs	r2, #0
 8007228:	5e9a      	ldrsh	r2, [r3, r2]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	18d3      	adds	r3, r2, r3
 800722e:	3303      	adds	r3, #3
 8007230:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	0018      	movs	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	b004      	add	sp, #16
 800723a:	bd80      	pop	{r7, pc}

0800723c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007240:	f000 fdac 	bl	8007d9c <vTaskStartScheduler>
  
  return osOK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	0018      	movs	r0, r3
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800724c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724e:	b089      	sub	sp, #36	; 0x24
 8007250:	af04      	add	r7, sp, #16
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d020      	beq.n	80072a0 <osThreadCreate+0x54>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d01c      	beq.n	80072a0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685c      	ldr	r4, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681d      	ldr	r5, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691e      	ldr	r6, [r3, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2208      	movs	r2, #8
 8007276:	5e9b      	ldrsh	r3, [r3, r2]
 8007278:	0018      	movs	r0, r3
 800727a:	f7ff ffc6 	bl	800720a <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695a      	ldr	r2, [r3, #20]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	9302      	str	r3, [sp, #8]
 800728a:	9201      	str	r2, [sp, #4]
 800728c:	9000      	str	r0, [sp, #0]
 800728e:	000b      	movs	r3, r1
 8007290:	0032      	movs	r2, r6
 8007292:	0029      	movs	r1, r5
 8007294:	0020      	movs	r0, r4
 8007296:	f000 fbed 	bl	8007a74 <xTaskCreateStatic>
 800729a:	0003      	movs	r3, r0
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e01d      	b.n	80072dc <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685c      	ldr	r4, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072ac:	b29e      	uxth	r6, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2208      	movs	r2, #8
 80072b2:	5e9b      	ldrsh	r3, [r3, r2]
 80072b4:	0018      	movs	r0, r3
 80072b6:	f7ff ffa8 	bl	800720a <makeFreeRtosPriority>
 80072ba:	0001      	movs	r1, r0
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	230c      	movs	r3, #12
 80072c0:	18fb      	adds	r3, r7, r3
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	9100      	str	r1, [sp, #0]
 80072c6:	0013      	movs	r3, r2
 80072c8:	0032      	movs	r2, r6
 80072ca:	0029      	movs	r1, r5
 80072cc:	0020      	movs	r0, r4
 80072ce:	f000 fc14 	bl	8007afa <xTaskCreate>
 80072d2:	0003      	movs	r3, r0
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d001      	beq.n	80072dc <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	e000      	b.n	80072de <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80072dc:	68fb      	ldr	r3, [r7, #12]
}
 80072de:	0018      	movs	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b005      	add	sp, #20
 80072e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <osDelay+0x16>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	e000      	b.n	80072fe <osDelay+0x18>
 80072fc:	2301      	movs	r3, #1
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 fd26 	bl	8007d50 <vTaskDelay>
  
  return osOK;
 8007304:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007306:	0018      	movs	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	b004      	add	sp, #16
 800730c:	bd80      	pop	{r7, pc}

0800730e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d007      	beq.n	800732e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	0019      	movs	r1, r3
 8007324:	2001      	movs	r0, #1
 8007326:	f000 f9e0 	bl	80076ea <xQueueCreateMutexStatic>
 800732a:	0003      	movs	r3, r0
 800732c:	e003      	b.n	8007336 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800732e:	2001      	movs	r0, #1
 8007330:	f000 f9bf 	bl	80076b2 <xQueueCreateMutex>
 8007334:	0003      	movs	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007336:	0018      	movs	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	b002      	add	sp, #8
 800733c:	bd80      	pop	{r7, pc}

0800733e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3308      	adds	r3, #8
 800734a:	001a      	movs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	4252      	negs	r2, r2
 8007356:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3308      	adds	r3, #8
 800735c:	001a      	movs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3308      	adds	r3, #8
 8007366:	001a      	movs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	46bd      	mov	sp, r7
 8007376:	b002      	add	sp, #8
 8007378:	bd80      	pop	{r7, pc}

0800737a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007388:	46c0      	nop			; (mov r8, r8)
 800738a:	46bd      	mov	sp, r7
 800738c:	b002      	add	sp, #8
 800738e:	bd80      	pop	{r7, pc}

08007390 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	601a      	str	r2, [r3, #0]
}
 80073cc:	46c0      	nop			; (mov r8, r8)
 80073ce:	46bd      	mov	sp, r7
 80073d0:	b004      	add	sp, #16
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	3301      	adds	r3, #1
 80073e8:	d103      	bne.n	80073f2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e00c      	b.n	800740c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3308      	adds	r3, #8
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	e002      	b.n	8007400 <vListInsert+0x2c>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	429a      	cmp	r2, r3
 800740a:	d2f6      	bcs.n	80073fa <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	601a      	str	r2, [r3, #0]
}
 8007438:	46c0      	nop			; (mov r8, r8)
 800743a:	46bd      	mov	sp, r7
 800743c:	b004      	add	sp, #16
 800743e:	bd80      	pop	{r7, pc}

08007440 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6892      	ldr	r2, [r2, #8]
 8007456:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6852      	ldr	r2, [r2, #4]
 8007460:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d103      	bne.n	8007474 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	1e5a      	subs	r2, r3, #1
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b004      	add	sp, #16
 800748e:	bd80      	pop	{r7, pc}

08007490 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <xQueueGenericReset+0x18>
 80074a4:	b672      	cpsid	i
 80074a6:	e7fe      	b.n	80074a6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80074a8:	f001 f982 	bl	80087b0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	434b      	muls	r3, r1
 80074ba:	18d2      	adds	r2, r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	1e59      	subs	r1, r3, #1
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	434b      	muls	r3, r1
 80074de:	18d2      	adds	r2, r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2244      	movs	r2, #68	; 0x44
 80074e8:	21ff      	movs	r1, #255	; 0xff
 80074ea:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2245      	movs	r2, #69	; 0x45
 80074f0:	21ff      	movs	r1, #255	; 0xff
 80074f2:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10d      	bne.n	8007516 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d013      	beq.n	800752a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3310      	adds	r3, #16
 8007506:	0018      	movs	r0, r3
 8007508:	f000 fe52 	bl	80081b0 <xTaskRemoveFromEventList>
 800750c:	1e03      	subs	r3, r0, #0
 800750e:	d00c      	beq.n	800752a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007510:	f001 f93e 	bl	8008790 <vPortYield>
 8007514:	e009      	b.n	800752a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3310      	adds	r3, #16
 800751a:	0018      	movs	r0, r3
 800751c:	f7ff ff0f 	bl	800733e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	0018      	movs	r0, r3
 8007526:	f7ff ff0a 	bl	800733e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800752a:	f001 f953 	bl	80087d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800752e:	2301      	movs	r3, #1
}
 8007530:	0018      	movs	r0, r3
 8007532:	46bd      	mov	sp, r7
 8007534:	b004      	add	sp, #16
 8007536:	bd80      	pop	{r7, pc}

08007538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007538:	b590      	push	{r4, r7, lr}
 800753a:	b089      	sub	sp, #36	; 0x24
 800753c:	af02      	add	r7, sp, #8
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <xQueueGenericCreateStatic+0x18>
 800754c:	b672      	cpsid	i
 800754e:	e7fe      	b.n	800754e <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <xQueueGenericCreateStatic+0x22>
 8007556:	b672      	cpsid	i
 8007558:	e7fe      	b.n	8007558 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <xQueueGenericCreateStatic+0x2e>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <xQueueGenericCreateStatic+0x32>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <xQueueGenericCreateStatic+0x34>
 800756a:	2300      	movs	r3, #0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <xQueueGenericCreateStatic+0x3c>
 8007570:	b672      	cpsid	i
 8007572:	e7fe      	b.n	8007572 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <xQueueGenericCreateStatic+0x48>
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <xQueueGenericCreateStatic+0x4c>
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <xQueueGenericCreateStatic+0x4e>
 8007584:	2300      	movs	r3, #0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <xQueueGenericCreateStatic+0x56>
 800758a:	b672      	cpsid	i
 800758c:	e7fe      	b.n	800758c <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800758e:	2348      	movs	r3, #72	; 0x48
 8007590:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b48      	cmp	r3, #72	; 0x48
 8007596:	d001      	beq.n	800759c <xQueueGenericCreateStatic+0x64>
 8007598:	b672      	cpsid	i
 800759a:	e7fe      	b.n	800759a <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00e      	beq.n	80075c4 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2246      	movs	r2, #70	; 0x46
 80075aa:	2101      	movs	r1, #1
 80075ac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075ae:	2328      	movs	r3, #40	; 0x28
 80075b0:	18fb      	adds	r3, r7, r3
 80075b2:	781c      	ldrb	r4, [r3, #0]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	0023      	movs	r3, r4
 80075c0:	f000 f83b 	bl	800763a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80075c4:	697b      	ldr	r3, [r7, #20]
	}
 80075c6:	0018      	movs	r0, r3
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b007      	add	sp, #28
 80075cc:	bd90      	pop	{r4, r7, pc}

080075ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075ce:	b590      	push	{r4, r7, lr}
 80075d0:	b08b      	sub	sp, #44	; 0x2c
 80075d2:	af02      	add	r7, sp, #8
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	1dfb      	adds	r3, r7, #7
 80075da:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <xQueueGenericCreate+0x18>
 80075e2:	b672      	cpsid	i
 80075e4:	e7fe      	b.n	80075e4 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	61fb      	str	r3, [r7, #28]
 80075f0:	e003      	b.n	80075fa <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	4353      	muls	r3, r2
 80075f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	3348      	adds	r3, #72	; 0x48
 80075fe:	0018      	movs	r0, r3
 8007600:	f001 f96e 	bl	80088e0 <pvPortMalloc>
 8007604:	0003      	movs	r3, r0
 8007606:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d010      	beq.n	8007630 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	3348      	adds	r3, #72	; 0x48
 8007612:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2246      	movs	r2, #70	; 0x46
 8007618:	2100      	movs	r1, #0
 800761a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800761c:	1dfb      	adds	r3, r7, #7
 800761e:	781c      	ldrb	r4, [r3, #0]
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	0023      	movs	r3, r4
 800762c:	f000 f805 	bl	800763a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007630:	69bb      	ldr	r3, [r7, #24]
	}
 8007632:	0018      	movs	r0, r3
 8007634:	46bd      	mov	sp, r7
 8007636:	b009      	add	sp, #36	; 0x24
 8007638:	bd90      	pop	{r4, r7, pc}

0800763a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	001a      	movs	r2, r3
 8007648:	1cfb      	adds	r3, r7, #3
 800764a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	e002      	b.n	8007660 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	2101      	movs	r1, #1
 8007670:	0018      	movs	r0, r3
 8007672:	f7ff ff0d 	bl	8007490 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007676:	46c0      	nop			; (mov r8, r8)
 8007678:	46bd      	mov	sp, r7
 800767a:	b004      	add	sp, #16
 800767c:	bd80      	pop	{r7, pc}

0800767e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00e      	beq.n	80076aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	2300      	movs	r3, #0
 80076a2:	2200      	movs	r2, #0
 80076a4:	2100      	movs	r1, #0
 80076a6:	f000 f840 	bl	800772a <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	46bd      	mov	sp, r7
 80076ae:	b002      	add	sp, #8
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	0002      	movs	r2, r0
 80076ba:	1dfb      	adds	r3, r7, #7
 80076bc:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076be:	2301      	movs	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80076c6:	1dfb      	adds	r3, r7, #7
 80076c8:	781a      	ldrb	r2, [r3, #0]
 80076ca:	6939      	ldr	r1, [r7, #16]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	0018      	movs	r0, r3
 80076d0:	f7ff ff7d 	bl	80075ce <xQueueGenericCreate>
 80076d4:	0003      	movs	r3, r0
 80076d6:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	0018      	movs	r0, r3
 80076dc:	f7ff ffcf 	bl	800767e <prvInitialiseMutex>

		return pxNewQueue;
 80076e0:	68fb      	ldr	r3, [r7, #12]
	}
 80076e2:	0018      	movs	r0, r3
 80076e4:	46bd      	mov	sp, r7
 80076e6:	b006      	add	sp, #24
 80076e8:	bd80      	pop	{r7, pc}

080076ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b088      	sub	sp, #32
 80076ee:	af02      	add	r7, sp, #8
 80076f0:	0002      	movs	r2, r0
 80076f2:	6039      	str	r1, [r7, #0]
 80076f4:	1dfb      	adds	r3, r7, #7
 80076f6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076f8:	2301      	movs	r3, #1
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	2300      	movs	r3, #0
 80076fe:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	6939      	ldr	r1, [r7, #16]
 8007704:	6978      	ldr	r0, [r7, #20]
 8007706:	1dfb      	adds	r3, r7, #7
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	0013      	movs	r3, r2
 800770e:	2200      	movs	r2, #0
 8007710:	f7ff ff12 	bl	8007538 <xQueueGenericCreateStatic>
 8007714:	0003      	movs	r3, r0
 8007716:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	0018      	movs	r0, r3
 800771c:	f7ff ffaf 	bl	800767e <prvInitialiseMutex>

		return pxNewQueue;
 8007720:	68fb      	ldr	r3, [r7, #12]
	}
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	b006      	add	sp, #24
 8007728:	bd80      	pop	{r7, pc}

0800772a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b08a      	sub	sp, #40	; 0x28
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007738:	2300      	movs	r3, #0
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <xQueueGenericSend+0x20>
 8007746:	b672      	cpsid	i
 8007748:	e7fe      	b.n	8007748 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <xQueueGenericSend+0x2e>
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <xQueueGenericSend+0x32>
 8007758:	2301      	movs	r3, #1
 800775a:	e000      	b.n	800775e <xQueueGenericSend+0x34>
 800775c:	2300      	movs	r3, #0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <xQueueGenericSend+0x3c>
 8007762:	b672      	cpsid	i
 8007764:	e7fe      	b.n	8007764 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d103      	bne.n	8007774 <xQueueGenericSend+0x4a>
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <xQueueGenericSend+0x4e>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <xQueueGenericSend+0x50>
 8007778:	2300      	movs	r3, #0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <xQueueGenericSend+0x58>
 800777e:	b672      	cpsid	i
 8007780:	e7fe      	b.n	8007780 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007782:	f000 fead 	bl	80084e0 <xTaskGetSchedulerState>
 8007786:	1e03      	subs	r3, r0, #0
 8007788:	d102      	bne.n	8007790 <xQueueGenericSend+0x66>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <xQueueGenericSend+0x6a>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <xQueueGenericSend+0x6c>
 8007794:	2300      	movs	r3, #0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <xQueueGenericSend+0x74>
 800779a:	b672      	cpsid	i
 800779c:	e7fe      	b.n	800779c <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800779e:	f001 f807 	bl	80087b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d302      	bcc.n	80077b4 <xQueueGenericSend+0x8a>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d11e      	bne.n	80077f2 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	0018      	movs	r0, r3
 80077bc:	f000 f879 	bl	80078b2 <prvCopyDataToQueue>
 80077c0:	0003      	movs	r3, r0
 80077c2:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d009      	beq.n	80077e0 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	3324      	adds	r3, #36	; 0x24
 80077d0:	0018      	movs	r0, r3
 80077d2:	f000 fced 	bl	80081b0 <xTaskRemoveFromEventList>
 80077d6:	1e03      	subs	r3, r0, #0
 80077d8:	d007      	beq.n	80077ea <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077da:	f000 ffd9 	bl	8008790 <vPortYield>
 80077de:	e004      	b.n	80077ea <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077e6:	f000 ffd3 	bl	8008790 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077ea:	f000 fff3 	bl	80087d4 <vPortExitCritical>
				return pdPASS;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e05b      	b.n	80078aa <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d103      	bne.n	8007800 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077f8:	f000 ffec 	bl	80087d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e054      	b.n	80078aa <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007806:	2314      	movs	r3, #20
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	0018      	movs	r0, r3
 800780c:	f000 fd2c 	bl	8008268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007810:	2301      	movs	r3, #1
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007814:	f000 ffde 	bl	80087d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007818:	f000 fb0e 	bl	8007e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800781c:	f000 ffc8 	bl	80087b0 <vPortEnterCritical>
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	2244      	movs	r2, #68	; 0x44
 8007824:	5c9b      	ldrb	r3, [r3, r2]
 8007826:	b25b      	sxtb	r3, r3
 8007828:	3301      	adds	r3, #1
 800782a:	d103      	bne.n	8007834 <xQueueGenericSend+0x10a>
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	2244      	movs	r2, #68	; 0x44
 8007830:	2100      	movs	r1, #0
 8007832:	5499      	strb	r1, [r3, r2]
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	2245      	movs	r2, #69	; 0x45
 8007838:	5c9b      	ldrb	r3, [r3, r2]
 800783a:	b25b      	sxtb	r3, r3
 800783c:	3301      	adds	r3, #1
 800783e:	d103      	bne.n	8007848 <xQueueGenericSend+0x11e>
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	2245      	movs	r2, #69	; 0x45
 8007844:	2100      	movs	r1, #0
 8007846:	5499      	strb	r1, [r3, r2]
 8007848:	f000 ffc4 	bl	80087d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800784c:	1d3a      	adds	r2, r7, #4
 800784e:	2314      	movs	r3, #20
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	0011      	movs	r1, r2
 8007854:	0018      	movs	r0, r3
 8007856:	f000 fd1b 	bl	8008290 <xTaskCheckForTimeOut>
 800785a:	1e03      	subs	r3, r0, #0
 800785c:	d11e      	bne.n	800789c <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	0018      	movs	r0, r3
 8007862:	f000 f8ef 	bl	8007a44 <prvIsQueueFull>
 8007866:	1e03      	subs	r3, r0, #0
 8007868:	d011      	beq.n	800788e <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	3310      	adds	r3, #16
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	0011      	movs	r1, r2
 8007872:	0018      	movs	r0, r3
 8007874:	f000 fc7e 	bl	8008174 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	0018      	movs	r0, r3
 800787c:	f000 f884 	bl	8007988 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007880:	f000 fae6 	bl	8007e50 <xTaskResumeAll>
 8007884:	1e03      	subs	r3, r0, #0
 8007886:	d18a      	bne.n	800779e <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007888:	f000 ff82 	bl	8008790 <vPortYield>
 800788c:	e787      	b.n	800779e <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	0018      	movs	r0, r3
 8007892:	f000 f879 	bl	8007988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007896:	f000 fadb 	bl	8007e50 <xTaskResumeAll>
 800789a:	e780      	b.n	800779e <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	0018      	movs	r0, r3
 80078a0:	f000 f872 	bl	8007988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078a4:	f000 fad4 	bl	8007e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078a8:	2300      	movs	r3, #0
		}
	}
}
 80078aa:	0018      	movs	r0, r3
 80078ac:	46bd      	mov	sp, r7
 80078ae:	b00a      	add	sp, #40	; 0x28
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b086      	sub	sp, #24
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10e      	bne.n	80078ee <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d14e      	bne.n	8007976 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	0018      	movs	r0, r3
 80078de:	f000 fe1b 	bl	8008518 <xTaskPriorityDisinherit>
 80078e2:	0003      	movs	r3, r0
 80078e4:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	605a      	str	r2, [r3, #4]
 80078ec:	e043      	b.n	8007976 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d119      	bne.n	8007928 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6898      	ldr	r0, [r3, #8]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	0019      	movs	r1, r3
 8007900:	f001 f9d6 	bl	8008cb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790c:	18d2      	adds	r2, r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	429a      	cmp	r2, r3
 800791c:	d32b      	bcc.n	8007976 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	609a      	str	r2, [r3, #8]
 8007926:	e026      	b.n	8007976 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68d8      	ldr	r0, [r3, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	0019      	movs	r1, r3
 8007934:	f001 f9bc 	bl	8008cb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	425b      	negs	r3, r3
 8007942:	18d2      	adds	r2, r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	429a      	cmp	r2, r3
 8007952:	d207      	bcs.n	8007964 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	425b      	negs	r3, r3
 800795e:	18d2      	adds	r2, r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b02      	cmp	r3, #2
 8007968:	d105      	bne.n	8007976 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	3b01      	subs	r3, #1
 8007974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800797e:	697b      	ldr	r3, [r7, #20]
}
 8007980:	0018      	movs	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	b006      	add	sp, #24
 8007986:	bd80      	pop	{r7, pc}

08007988 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007990:	f000 ff0e 	bl	80087b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007994:	230f      	movs	r3, #15
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	2145      	movs	r1, #69	; 0x45
 800799c:	5c52      	ldrb	r2, [r2, r1]
 800799e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079a0:	e013      	b.n	80079ca <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d016      	beq.n	80079d8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3324      	adds	r3, #36	; 0x24
 80079ae:	0018      	movs	r0, r3
 80079b0:	f000 fbfe 	bl	80081b0 <xTaskRemoveFromEventList>
 80079b4:	1e03      	subs	r3, r0, #0
 80079b6:	d001      	beq.n	80079bc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079b8:	f000 fcba 	bl	8008330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079bc:	210f      	movs	r1, #15
 80079be:	187b      	adds	r3, r7, r1
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	187b      	adds	r3, r7, r1
 80079c8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079ca:	230f      	movs	r3, #15
 80079cc:	18fb      	adds	r3, r7, r3
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	b25b      	sxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dce5      	bgt.n	80079a2 <prvUnlockQueue+0x1a>
 80079d6:	e000      	b.n	80079da <prvUnlockQueue+0x52>
					break;
 80079d8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2245      	movs	r2, #69	; 0x45
 80079de:	21ff      	movs	r1, #255	; 0xff
 80079e0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80079e2:	f000 fef7 	bl	80087d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079e6:	f000 fee3 	bl	80087b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079ea:	230e      	movs	r3, #14
 80079ec:	18fb      	adds	r3, r7, r3
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	2144      	movs	r1, #68	; 0x44
 80079f2:	5c52      	ldrb	r2, [r2, r1]
 80079f4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079f6:	e013      	b.n	8007a20 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d016      	beq.n	8007a2e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3310      	adds	r3, #16
 8007a04:	0018      	movs	r0, r3
 8007a06:	f000 fbd3 	bl	80081b0 <xTaskRemoveFromEventList>
 8007a0a:	1e03      	subs	r3, r0, #0
 8007a0c:	d001      	beq.n	8007a12 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8007a0e:	f000 fc8f 	bl	8008330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a12:	210e      	movs	r1, #14
 8007a14:	187b      	adds	r3, r7, r1
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	187b      	adds	r3, r7, r1
 8007a1e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a20:	230e      	movs	r3, #14
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	b25b      	sxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dce5      	bgt.n	80079f8 <prvUnlockQueue+0x70>
 8007a2c:	e000      	b.n	8007a30 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8007a2e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2244      	movs	r2, #68	; 0x44
 8007a34:	21ff      	movs	r1, #255	; 0xff
 8007a36:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8007a38:	f000 fecc 	bl	80087d4 <vPortExitCritical>
}
 8007a3c:	46c0      	nop			; (mov r8, r8)
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b004      	add	sp, #16
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a4c:	f000 feb0 	bl	80087b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d102      	bne.n	8007a62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e001      	b.n	8007a66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a66:	f000 feb5 	bl	80087d4 <vPortExitCritical>

	return xReturn;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b004      	add	sp, #16
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a74:	b590      	push	{r4, r7, lr}
 8007a76:	b08d      	sub	sp, #52	; 0x34
 8007a78:	af04      	add	r7, sp, #16
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <xTaskCreateStatic+0x18>
 8007a88:	b672      	cpsid	i
 8007a8a:	e7fe      	b.n	8007a8a <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <xTaskCreateStatic+0x22>
 8007a92:	b672      	cpsid	i
 8007a94:	e7fe      	b.n	8007a94 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a96:	2354      	movs	r3, #84	; 0x54
 8007a98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b54      	cmp	r3, #84	; 0x54
 8007a9e:	d001      	beq.n	8007aa4 <xTaskCreateStatic+0x30>
 8007aa0:	b672      	cpsid	i
 8007aa2:	e7fe      	b.n	8007aa2 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d020      	beq.n	8007aec <xTaskCreateStatic+0x78>
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01d      	beq.n	8007aec <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	2251      	movs	r2, #81	; 0x51
 8007abe:	2102      	movs	r1, #2
 8007ac0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ac2:	683c      	ldr	r4, [r7, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	2300      	movs	r3, #0
 8007acc:	9303      	str	r3, [sp, #12]
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	9302      	str	r3, [sp, #8]
 8007ad2:	2318      	movs	r3, #24
 8007ad4:	18fb      	adds	r3, r7, r3
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	0023      	movs	r3, r4
 8007ade:	f000 f859 	bl	8007b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f000 f8cf 	bl	8007c88 <prvAddNewTaskToReadyList>
 8007aea:	e001      	b.n	8007af0 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007af0:	69bb      	ldr	r3, [r7, #24]
	}
 8007af2:	0018      	movs	r0, r3
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b009      	add	sp, #36	; 0x24
 8007af8:	bd90      	pop	{r4, r7, pc}

08007afa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007afa:	b590      	push	{r4, r7, lr}
 8007afc:	b08d      	sub	sp, #52	; 0x34
 8007afe:	af04      	add	r7, sp, #16
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	603b      	str	r3, [r7, #0]
 8007b06:	1dbb      	adds	r3, r7, #6
 8007b08:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b0a:	1dbb      	adds	r3, r7, #6
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	0018      	movs	r0, r3
 8007b12:	f000 fee5 	bl	80088e0 <pvPortMalloc>
 8007b16:	0003      	movs	r3, r0
 8007b18:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d010      	beq.n	8007b42 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007b20:	2054      	movs	r0, #84	; 0x54
 8007b22:	f000 fedd 	bl	80088e0 <pvPortMalloc>
 8007b26:	0003      	movs	r3, r0
 8007b28:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	631a      	str	r2, [r3, #48]	; 0x30
 8007b36:	e006      	b.n	8007b46 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f000 ff76 	bl	8008a2c <vPortFree>
 8007b40:	e001      	b.n	8007b46 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01a      	beq.n	8007b82 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	2251      	movs	r2, #81	; 0x51
 8007b50:	2100      	movs	r1, #0
 8007b52:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b54:	1dbb      	adds	r3, r7, #6
 8007b56:	881a      	ldrh	r2, [r3, #0]
 8007b58:	683c      	ldr	r4, [r7, #0]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	9302      	str	r3, [sp, #8]
 8007b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	0023      	movs	r3, r4
 8007b70:	f000 f810 	bl	8007b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	0018      	movs	r0, r3
 8007b78:	f000 f886 	bl	8007c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	61bb      	str	r3, [r7, #24]
 8007b80:	e002      	b.n	8007b88 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b82:	2301      	movs	r3, #1
 8007b84:	425b      	negs	r3, r3
 8007b86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b88:	69bb      	ldr	r3, [r7, #24]
	}
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	b009      	add	sp, #36	; 0x24
 8007b90:	bd90      	pop	{r4, r7, pc}
	...

08007b94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4936      	ldr	r1, [pc, #216]	; (8007c84 <prvInitialiseNewTask+0xf0>)
 8007baa:	468c      	mov	ip, r1
 8007bac:	4463      	add	r3, ip
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	18d3      	adds	r3, r2, r3
 8007bb2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2207      	movs	r2, #7
 8007bb8:	4393      	bics	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2207      	movs	r2, #7
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d001      	beq.n	8007bc8 <prvInitialiseNewTask+0x34>
 8007bc4:	b672      	cpsid	i
 8007bc6:	e7fe      	b.n	8007bc6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	e013      	b.n	8007bf6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	18d3      	adds	r3, r2, r3
 8007bd4:	7818      	ldrb	r0, [r3, #0]
 8007bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bd8:	2134      	movs	r1, #52	; 0x34
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	18d3      	adds	r3, r2, r3
 8007bde:	185b      	adds	r3, r3, r1
 8007be0:	1c02      	adds	r2, r0, #0
 8007be2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	18d3      	adds	r3, r2, r3
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d006      	beq.n	8007bfe <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b0f      	cmp	r3, #15
 8007bfa:	d9e8      	bls.n	8007bce <prvInitialiseNewTask+0x3a>
 8007bfc:	e000      	b.n	8007c00 <prvInitialiseNewTask+0x6c>
		{
			break;
 8007bfe:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	2243      	movs	r2, #67	; 0x43
 8007c04:	2100      	movs	r1, #0
 8007c06:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	2b06      	cmp	r3, #6
 8007c0c:	d901      	bls.n	8007c12 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c0e:	2306      	movs	r3, #6
 8007c10:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	6a3a      	ldr	r2, [r7, #32]
 8007c16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	2200      	movs	r2, #0
 8007c22:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	3304      	adds	r3, #4
 8007c28:	0018      	movs	r0, r3
 8007c2a:	f7ff fba6 	bl	800737a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	3318      	adds	r3, #24
 8007c32:	0018      	movs	r0, r3
 8007c34:	f7ff fba1 	bl	800737a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	2207      	movs	r2, #7
 8007c42:	1ad2      	subs	r2, r2, r3
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	2200      	movs	r2, #0
 8007c52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	2250      	movs	r2, #80	; 0x50
 8007c58:	2100      	movs	r1, #0
 8007c5a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	0018      	movs	r0, r3
 8007c64:	f000 fd08 	bl	8008678 <pxPortInitialiseStack>
 8007c68:	0002      	movs	r2, r0
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b006      	add	sp, #24
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	3fffffff 	.word	0x3fffffff

08007c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c90:	f000 fd8e 	bl	80087b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c94:	4b28      	ldr	r3, [pc, #160]	; (8007d38 <prvAddNewTaskToReadyList+0xb0>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	4b27      	ldr	r3, [pc, #156]	; (8007d38 <prvAddNewTaskToReadyList+0xb0>)
 8007c9c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007c9e:	4b27      	ldr	r3, [pc, #156]	; (8007d3c <prvAddNewTaskToReadyList+0xb4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ca6:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <prvAddNewTaskToReadyList+0xb4>)
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cac:	4b22      	ldr	r3, [pc, #136]	; (8007d38 <prvAddNewTaskToReadyList+0xb0>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d110      	bne.n	8007cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007cb4:	f000 fb56 	bl	8008364 <prvInitialiseTaskLists>
 8007cb8:	e00d      	b.n	8007cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cba:	4b21      	ldr	r3, [pc, #132]	; (8007d40 <prvAddNewTaskToReadyList+0xb8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cc2:	4b1e      	ldr	r3, [pc, #120]	; (8007d3c <prvAddNewTaskToReadyList+0xb4>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d802      	bhi.n	8007cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007cd0:	4b1a      	ldr	r3, [pc, #104]	; (8007d3c <prvAddNewTaskToReadyList+0xb4>)
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cd6:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <prvAddNewTaskToReadyList+0xbc>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <prvAddNewTaskToReadyList+0xbc>)
 8007cde:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	4b18      	ldr	r3, [pc, #96]	; (8007d48 <prvAddNewTaskToReadyList+0xc0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d903      	bls.n	8007cf4 <prvAddNewTaskToReadyList+0x6c>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf0:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <prvAddNewTaskToReadyList+0xc0>)
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf8:	0013      	movs	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	189b      	adds	r3, r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <prvAddNewTaskToReadyList+0xc4>)
 8007d02:	189a      	adds	r2, r3, r2
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3304      	adds	r3, #4
 8007d08:	0019      	movs	r1, r3
 8007d0a:	0010      	movs	r0, r2
 8007d0c:	f7ff fb40 	bl	8007390 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d10:	f000 fd60 	bl	80087d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <prvAddNewTaskToReadyList+0xb8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d1c:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <prvAddNewTaskToReadyList+0xb4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d201      	bcs.n	8007d2e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d2a:	f000 fd31 	bl	8008790 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	46bd      	mov	sp, r7
 8007d32:	b002      	add	sp, #8
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	46c0      	nop			; (mov r8, r8)
 8007d38:	2000096c 	.word	0x2000096c
 8007d3c:	2000086c 	.word	0x2000086c
 8007d40:	20000978 	.word	0x20000978
 8007d44:	20000988 	.word	0x20000988
 8007d48:	20000974 	.word	0x20000974
 8007d4c:	20000870 	.word	0x20000870

08007d50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d010      	beq.n	8007d84 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d62:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <vTaskDelay+0x48>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <vTaskDelay+0x1e>
 8007d6a:	b672      	cpsid	i
 8007d6c:	e7fe      	b.n	8007d6c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007d6e:	f000 f863 	bl	8007e38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2100      	movs	r1, #0
 8007d76:	0018      	movs	r0, r3
 8007d78:	f000 fc2a 	bl	80085d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d7c:	f000 f868 	bl	8007e50 <xTaskResumeAll>
 8007d80:	0003      	movs	r3, r0
 8007d82:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8007d8a:	f000 fd01 	bl	8008790 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	46bd      	mov	sp, r7
 8007d92:	b004      	add	sp, #16
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	20000994 	.word	0x20000994

08007d9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d9c:	b590      	push	{r4, r7, lr}
 8007d9e:	b089      	sub	sp, #36	; 0x24
 8007da0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007daa:	003a      	movs	r2, r7
 8007dac:	1d39      	adds	r1, r7, #4
 8007dae:	2308      	movs	r3, #8
 8007db0:	18fb      	adds	r3, r7, r3
 8007db2:	0018      	movs	r0, r3
 8007db4:	f7f9 f8bc 	bl	8000f30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007db8:	683c      	ldr	r4, [r7, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	4918      	ldr	r1, [pc, #96]	; (8007e20 <vTaskStartScheduler+0x84>)
 8007dc0:	4818      	ldr	r0, [pc, #96]	; (8007e24 <vTaskStartScheduler+0x88>)
 8007dc2:	9202      	str	r2, [sp, #8]
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	0022      	movs	r2, r4
 8007dce:	f7ff fe51 	bl	8007a74 <xTaskCreateStatic>
 8007dd2:	0002      	movs	r2, r0
 8007dd4:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <vTaskStartScheduler+0x8c>)
 8007dd6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007dd8:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <vTaskStartScheduler+0x8c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007de0:	2301      	movs	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e001      	b.n	8007dea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d10d      	bne.n	8007e0c <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007df0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007df2:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <vTaskStartScheduler+0x90>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	4252      	negs	r2, r2
 8007df8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dfa:	4b0d      	ldr	r3, [pc, #52]	; (8007e30 <vTaskStartScheduler+0x94>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007e00:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <vTaskStartScheduler+0x98>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e06:	f000 fc9f 	bl	8008748 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e0a:	e004      	b.n	8007e16 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	d101      	bne.n	8007e16 <vTaskStartScheduler+0x7a>
 8007e12:	b672      	cpsid	i
 8007e14:	e7fe      	b.n	8007e14 <vTaskStartScheduler+0x78>
}
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	b005      	add	sp, #20
 8007e1c:	bd90      	pop	{r4, r7, pc}
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	08008eac 	.word	0x08008eac
 8007e24:	08008345 	.word	0x08008345
 8007e28:	20000990 	.word	0x20000990
 8007e2c:	2000098c 	.word	0x2000098c
 8007e30:	20000978 	.word	0x20000978
 8007e34:	20000970 	.word	0x20000970

08007e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007e3c:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <vTaskSuspendAll+0x14>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	4b02      	ldr	r3, [pc, #8]	; (8007e4c <vTaskSuspendAll+0x14>)
 8007e44:	601a      	str	r2, [r3, #0]
}
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000994 	.word	0x20000994

08007e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e5e:	4b3a      	ldr	r3, [pc, #232]	; (8007f48 <xTaskResumeAll+0xf8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <xTaskResumeAll+0x1a>
 8007e66:	b672      	cpsid	i
 8007e68:	e7fe      	b.n	8007e68 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e6a:	f000 fca1 	bl	80087b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e6e:	4b36      	ldr	r3, [pc, #216]	; (8007f48 <xTaskResumeAll+0xf8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	1e5a      	subs	r2, r3, #1
 8007e74:	4b34      	ldr	r3, [pc, #208]	; (8007f48 <xTaskResumeAll+0xf8>)
 8007e76:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e78:	4b33      	ldr	r3, [pc, #204]	; (8007f48 <xTaskResumeAll+0xf8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d15b      	bne.n	8007f38 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e80:	4b32      	ldr	r3, [pc, #200]	; (8007f4c <xTaskResumeAll+0xfc>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d057      	beq.n	8007f38 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e88:	e02f      	b.n	8007eea <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007e8a:	4b31      	ldr	r3, [pc, #196]	; (8007f50 <xTaskResumeAll+0x100>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3318      	adds	r3, #24
 8007e96:	0018      	movs	r0, r3
 8007e98:	f7ff fad2 	bl	8007440 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	f7ff facd 	bl	8007440 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eaa:	4b2a      	ldr	r3, [pc, #168]	; (8007f54 <xTaskResumeAll+0x104>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d903      	bls.n	8007eba <xTaskResumeAll+0x6a>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	4b27      	ldr	r3, [pc, #156]	; (8007f54 <xTaskResumeAll+0x104>)
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebe:	0013      	movs	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	189b      	adds	r3, r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4a24      	ldr	r2, [pc, #144]	; (8007f58 <xTaskResumeAll+0x108>)
 8007ec8:	189a      	adds	r2, r3, r2
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	0019      	movs	r1, r3
 8007ed0:	0010      	movs	r0, r2
 8007ed2:	f7ff fa5d 	bl	8007390 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eda:	4b20      	ldr	r3, [pc, #128]	; (8007f5c <xTaskResumeAll+0x10c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d302      	bcc.n	8007eea <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007ee4:	4b1e      	ldr	r3, [pc, #120]	; (8007f60 <xTaskResumeAll+0x110>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eea:	4b19      	ldr	r3, [pc, #100]	; (8007f50 <xTaskResumeAll+0x100>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1cb      	bne.n	8007e8a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ef8:	f000 face 	bl	8008498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007efc:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <xTaskResumeAll+0x114>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00f      	beq.n	8007f28 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f08:	f000 f82e 	bl	8007f68 <xTaskIncrementTick>
 8007f0c:	1e03      	subs	r3, r0, #0
 8007f0e:	d002      	beq.n	8007f16 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007f10:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <xTaskResumeAll+0x110>)
 8007f12:	2201      	movs	r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f2      	bne.n	8007f08 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8007f22:	4b10      	ldr	r3, [pc, #64]	; (8007f64 <xTaskResumeAll+0x114>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f28:	4b0d      	ldr	r3, [pc, #52]	; (8007f60 <xTaskResumeAll+0x110>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f34:	f000 fc2c 	bl	8008790 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f38:	f000 fc4c 	bl	80087d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
}
 8007f3e:	0018      	movs	r0, r3
 8007f40:	46bd      	mov	sp, r7
 8007f42:	b004      	add	sp, #16
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	20000994 	.word	0x20000994
 8007f4c:	2000096c 	.word	0x2000096c
 8007f50:	2000092c 	.word	0x2000092c
 8007f54:	20000974 	.word	0x20000974
 8007f58:	20000870 	.word	0x20000870
 8007f5c:	2000086c 	.word	0x2000086c
 8007f60:	20000980 	.word	0x20000980
 8007f64:	2000097c 	.word	0x2000097c

08007f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f72:	4b4c      	ldr	r3, [pc, #304]	; (80080a4 <xTaskIncrementTick+0x13c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d000      	beq.n	8007f7c <xTaskIncrementTick+0x14>
 8007f7a:	e083      	b.n	8008084 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f7c:	4b4a      	ldr	r3, [pc, #296]	; (80080a8 <xTaskIncrementTick+0x140>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3301      	adds	r3, #1
 8007f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f84:	4b48      	ldr	r3, [pc, #288]	; (80080a8 <xTaskIncrementTick+0x140>)
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d117      	bne.n	8007fc0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f90:	4b46      	ldr	r3, [pc, #280]	; (80080ac <xTaskIncrementTick+0x144>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <xTaskIncrementTick+0x36>
 8007f9a:	b672      	cpsid	i
 8007f9c:	e7fe      	b.n	8007f9c <xTaskIncrementTick+0x34>
 8007f9e:	4b43      	ldr	r3, [pc, #268]	; (80080ac <xTaskIncrementTick+0x144>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	4b42      	ldr	r3, [pc, #264]	; (80080b0 <xTaskIncrementTick+0x148>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	4b40      	ldr	r3, [pc, #256]	; (80080ac <xTaskIncrementTick+0x144>)
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	4b40      	ldr	r3, [pc, #256]	; (80080b0 <xTaskIncrementTick+0x148>)
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	4b40      	ldr	r3, [pc, #256]	; (80080b4 <xTaskIncrementTick+0x14c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	4b3e      	ldr	r3, [pc, #248]	; (80080b4 <xTaskIncrementTick+0x14c>)
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	f000 fa6c 	bl	8008498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fc0:	4b3d      	ldr	r3, [pc, #244]	; (80080b8 <xTaskIncrementTick+0x150>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d34e      	bcc.n	8008068 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fca:	4b38      	ldr	r3, [pc, #224]	; (80080ac <xTaskIncrementTick+0x144>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <xTaskIncrementTick+0x70>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e000      	b.n	8007fda <xTaskIncrementTick+0x72>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fde:	4b36      	ldr	r3, [pc, #216]	; (80080b8 <xTaskIncrementTick+0x150>)
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	4252      	negs	r2, r2
 8007fe4:	601a      	str	r2, [r3, #0]
					break;
 8007fe6:	e03f      	b.n	8008068 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fe8:	4b30      	ldr	r3, [pc, #192]	; (80080ac <xTaskIncrementTick+0x144>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d203      	bcs.n	8008008 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008000:	4b2d      	ldr	r3, [pc, #180]	; (80080b8 <xTaskIncrementTick+0x150>)
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
						break;
 8008006:	e02f      	b.n	8008068 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	3304      	adds	r3, #4
 800800c:	0018      	movs	r0, r3
 800800e:	f7ff fa17 	bl	8007440 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	2b00      	cmp	r3, #0
 8008018:	d004      	beq.n	8008024 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	3318      	adds	r3, #24
 800801e:	0018      	movs	r0, r3
 8008020:	f7ff fa0e 	bl	8007440 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	4b24      	ldr	r3, [pc, #144]	; (80080bc <xTaskIncrementTick+0x154>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d903      	bls.n	8008038 <xTaskIncrementTick+0xd0>
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008034:	4b21      	ldr	r3, [pc, #132]	; (80080bc <xTaskIncrementTick+0x154>)
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803c:	0013      	movs	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	189b      	adds	r3, r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4a1e      	ldr	r2, [pc, #120]	; (80080c0 <xTaskIncrementTick+0x158>)
 8008046:	189a      	adds	r2, r3, r2
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3304      	adds	r3, #4
 800804c:	0019      	movs	r1, r3
 800804e:	0010      	movs	r0, r2
 8008050:	f7ff f99e 	bl	8007390 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <xTaskIncrementTick+0x15c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	429a      	cmp	r2, r3
 8008060:	d3b3      	bcc.n	8007fca <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8008062:	2301      	movs	r3, #1
 8008064:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008066:	e7b0      	b.n	8007fca <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008068:	4b16      	ldr	r3, [pc, #88]	; (80080c4 <xTaskIncrementTick+0x15c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806e:	4914      	ldr	r1, [pc, #80]	; (80080c0 <xTaskIncrementTick+0x158>)
 8008070:	0013      	movs	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	189b      	adds	r3, r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	585b      	ldr	r3, [r3, r1]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d907      	bls.n	800808e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800807e:	2301      	movs	r3, #1
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	e004      	b.n	800808e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008084:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <xTaskIncrementTick+0x160>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	4b0f      	ldr	r3, [pc, #60]	; (80080c8 <xTaskIncrementTick+0x160>)
 800808c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <xTaskIncrementTick+0x164>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8008096:	2301      	movs	r3, #1
 8008098:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800809a:	697b      	ldr	r3, [r7, #20]
}
 800809c:	0018      	movs	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	b006      	add	sp, #24
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20000994 	.word	0x20000994
 80080a8:	20000970 	.word	0x20000970
 80080ac:	20000924 	.word	0x20000924
 80080b0:	20000928 	.word	0x20000928
 80080b4:	20000984 	.word	0x20000984
 80080b8:	2000098c 	.word	0x2000098c
 80080bc:	20000974 	.word	0x20000974
 80080c0:	20000870 	.word	0x20000870
 80080c4:	2000086c 	.word	0x2000086c
 80080c8:	2000097c 	.word	0x2000097c
 80080cc:	20000980 	.word	0x20000980

080080d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080d6:	4b22      	ldr	r3, [pc, #136]	; (8008160 <vTaskSwitchContext+0x90>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080de:	4b21      	ldr	r3, [pc, #132]	; (8008164 <vTaskSwitchContext+0x94>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080e4:	e037      	b.n	8008156 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80080e6:	4b1f      	ldr	r3, [pc, #124]	; (8008164 <vTaskSwitchContext+0x94>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80080ec:	4b1e      	ldr	r3, [pc, #120]	; (8008168 <vTaskSwitchContext+0x98>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	e007      	b.n	8008104 <vTaskSwitchContext+0x34>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <vTaskSwitchContext+0x2e>
 80080fa:	b672      	cpsid	i
 80080fc:	e7fe      	b.n	80080fc <vTaskSwitchContext+0x2c>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3b01      	subs	r3, #1
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	4919      	ldr	r1, [pc, #100]	; (800816c <vTaskSwitchContext+0x9c>)
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	0013      	movs	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	189b      	adds	r3, r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	585b      	ldr	r3, [r3, r1]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0ee      	beq.n	80080f4 <vTaskSwitchContext+0x24>
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	0013      	movs	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	189b      	adds	r3, r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4a12      	ldr	r2, [pc, #72]	; (800816c <vTaskSwitchContext+0x9c>)
 8008122:	189b      	adds	r3, r3, r2
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	605a      	str	r2, [r3, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	3308      	adds	r3, #8
 8008138:	429a      	cmp	r2, r3
 800813a:	d104      	bne.n	8008146 <vTaskSwitchContext+0x76>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	4b08      	ldr	r3, [pc, #32]	; (8008170 <vTaskSwitchContext+0xa0>)
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <vTaskSwitchContext+0x98>)
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	46bd      	mov	sp, r7
 800815a:	b002      	add	sp, #8
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	20000994 	.word	0x20000994
 8008164:	20000980 	.word	0x20000980
 8008168:	20000974 	.word	0x20000974
 800816c:	20000870 	.word	0x20000870
 8008170:	2000086c 	.word	0x2000086c

08008174 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <vTaskPlaceOnEventList+0x14>
 8008184:	b672      	cpsid	i
 8008186:	e7fe      	b.n	8008186 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008188:	4b08      	ldr	r3, [pc, #32]	; (80081ac <vTaskPlaceOnEventList+0x38>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3318      	adds	r3, #24
 800818e:	001a      	movs	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	0011      	movs	r1, r2
 8008194:	0018      	movs	r0, r3
 8008196:	f7ff f91d 	bl	80073d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2101      	movs	r1, #1
 800819e:	0018      	movs	r0, r3
 80081a0:	f000 fa16 	bl	80085d0 <prvAddCurrentTaskToDelayedList>
}
 80081a4:	46c0      	nop			; (mov r8, r8)
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b002      	add	sp, #8
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	2000086c 	.word	0x2000086c

080081b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <xTaskRemoveFromEventList+0x1a>
 80081c6:	b672      	cpsid	i
 80081c8:	e7fe      	b.n	80081c8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	3318      	adds	r3, #24
 80081ce:	0018      	movs	r0, r3
 80081d0:	f7ff f936 	bl	8007440 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081d4:	4b1e      	ldr	r3, [pc, #120]	; (8008250 <xTaskRemoveFromEventList+0xa0>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d11d      	bne.n	8008218 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	3304      	adds	r3, #4
 80081e0:	0018      	movs	r0, r3
 80081e2:	f7ff f92d 	bl	8007440 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ea:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <xTaskRemoveFromEventList+0xa4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d903      	bls.n	80081fa <xTaskRemoveFromEventList+0x4a>
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f6:	4b17      	ldr	r3, [pc, #92]	; (8008254 <xTaskRemoveFromEventList+0xa4>)
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fe:	0013      	movs	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	189b      	adds	r3, r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4a14      	ldr	r2, [pc, #80]	; (8008258 <xTaskRemoveFromEventList+0xa8>)
 8008208:	189a      	adds	r2, r3, r2
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	3304      	adds	r3, #4
 800820e:	0019      	movs	r1, r3
 8008210:	0010      	movs	r0, r2
 8008212:	f7ff f8bd 	bl	8007390 <vListInsertEnd>
 8008216:	e007      	b.n	8008228 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	3318      	adds	r3, #24
 800821c:	001a      	movs	r2, r3
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <xTaskRemoveFromEventList+0xac>)
 8008220:	0011      	movs	r1, r2
 8008222:	0018      	movs	r0, r3
 8008224:	f7ff f8b4 	bl	8007390 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822c:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <xTaskRemoveFromEventList+0xb0>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	429a      	cmp	r2, r3
 8008234:	d905      	bls.n	8008242 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008236:	2301      	movs	r3, #1
 8008238:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800823a:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <xTaskRemoveFromEventList+0xb4>)
 800823c:	2201      	movs	r2, #1
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	e001      	b.n	8008246 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008246:	68fb      	ldr	r3, [r7, #12]
}
 8008248:	0018      	movs	r0, r3
 800824a:	46bd      	mov	sp, r7
 800824c:	b004      	add	sp, #16
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20000994 	.word	0x20000994
 8008254:	20000974 	.word	0x20000974
 8008258:	20000870 	.word	0x20000870
 800825c:	2000092c 	.word	0x2000092c
 8008260:	2000086c 	.word	0x2000086c
 8008264:	20000980 	.word	0x20000980

08008268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <vTaskInternalSetTimeOutState+0x20>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008278:	4b04      	ldr	r3, [pc, #16]	; (800828c <vTaskInternalSetTimeOutState+0x24>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	605a      	str	r2, [r3, #4]
}
 8008280:	46c0      	nop			; (mov r8, r8)
 8008282:	46bd      	mov	sp, r7
 8008284:	b002      	add	sp, #8
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000984 	.word	0x20000984
 800828c:	20000970 	.word	0x20000970

08008290 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <xTaskCheckForTimeOut+0x14>
 80082a0:	b672      	cpsid	i
 80082a2:	e7fe      	b.n	80082a2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <xTaskCheckForTimeOut+0x1e>
 80082aa:	b672      	cpsid	i
 80082ac:	e7fe      	b.n	80082ac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80082ae:	f000 fa7f 	bl	80087b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082b2:	4b1d      	ldr	r3, [pc, #116]	; (8008328 <xTaskCheckForTimeOut+0x98>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	d102      	bne.n	80082d0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]
 80082ce:	e024      	b.n	800831a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b15      	ldr	r3, [pc, #84]	; (800832c <xTaskCheckForTimeOut+0x9c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d007      	beq.n	80082ec <xTaskCheckForTimeOut+0x5c>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d302      	bcc.n	80082ec <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082e6:	2301      	movs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
 80082ea:	e016      	b.n	800831a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d20c      	bcs.n	8008310 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	1ad2      	subs	r2, r2, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	0018      	movs	r0, r3
 8008306:	f7ff ffaf 	bl	8008268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800830a:	2300      	movs	r3, #0
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	e004      	b.n	800831a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008316:	2301      	movs	r3, #1
 8008318:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800831a:	f000 fa5b 	bl	80087d4 <vPortExitCritical>

	return xReturn;
 800831e:	697b      	ldr	r3, [r7, #20]
}
 8008320:	0018      	movs	r0, r3
 8008322:	46bd      	mov	sp, r7
 8008324:	b006      	add	sp, #24
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20000970 	.word	0x20000970
 800832c:	20000984 	.word	0x20000984

08008330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <vTaskMissedYield+0x10>)
 8008336:	2201      	movs	r2, #1
 8008338:	601a      	str	r2, [r3, #0]
}
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000980 	.word	0x20000980

08008344 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800834c:	f000 f84e 	bl	80083ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <prvIdleTask+0x1c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d9f9      	bls.n	800834c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008358:	f000 fa1a 	bl	8008790 <vPortYield>
		prvCheckTasksWaitingTermination();
 800835c:	e7f6      	b.n	800834c <prvIdleTask+0x8>
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	20000870 	.word	0x20000870

08008364 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800836a:	2300      	movs	r3, #0
 800836c:	607b      	str	r3, [r7, #4]
 800836e:	e00c      	b.n	800838a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	0013      	movs	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	189b      	adds	r3, r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4a14      	ldr	r2, [pc, #80]	; (80083cc <prvInitialiseTaskLists+0x68>)
 800837c:	189b      	adds	r3, r3, r2
 800837e:	0018      	movs	r0, r3
 8008380:	f7fe ffdd 	bl	800733e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3301      	adds	r3, #1
 8008388:	607b      	str	r3, [r7, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b06      	cmp	r3, #6
 800838e:	d9ef      	bls.n	8008370 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008390:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <prvInitialiseTaskLists+0x6c>)
 8008392:	0018      	movs	r0, r3
 8008394:	f7fe ffd3 	bl	800733e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008398:	4b0e      	ldr	r3, [pc, #56]	; (80083d4 <prvInitialiseTaskLists+0x70>)
 800839a:	0018      	movs	r0, r3
 800839c:	f7fe ffcf 	bl	800733e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083a0:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <prvInitialiseTaskLists+0x74>)
 80083a2:	0018      	movs	r0, r3
 80083a4:	f7fe ffcb 	bl	800733e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083a8:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <prvInitialiseTaskLists+0x78>)
 80083aa:	0018      	movs	r0, r3
 80083ac:	f7fe ffc7 	bl	800733e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083b0:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <prvInitialiseTaskLists+0x7c>)
 80083b2:	0018      	movs	r0, r3
 80083b4:	f7fe ffc3 	bl	800733e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083b8:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <prvInitialiseTaskLists+0x80>)
 80083ba:	4a05      	ldr	r2, [pc, #20]	; (80083d0 <prvInitialiseTaskLists+0x6c>)
 80083bc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083be:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <prvInitialiseTaskLists+0x84>)
 80083c0:	4a04      	ldr	r2, [pc, #16]	; (80083d4 <prvInitialiseTaskLists+0x70>)
 80083c2:	601a      	str	r2, [r3, #0]
}
 80083c4:	46c0      	nop			; (mov r8, r8)
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b002      	add	sp, #8
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20000870 	.word	0x20000870
 80083d0:	200008fc 	.word	0x200008fc
 80083d4:	20000910 	.word	0x20000910
 80083d8:	2000092c 	.word	0x2000092c
 80083dc:	20000940 	.word	0x20000940
 80083e0:	20000958 	.word	0x20000958
 80083e4:	20000924 	.word	0x20000924
 80083e8:	20000928 	.word	0x20000928

080083ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083f2:	e01a      	b.n	800842a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80083f4:	f000 f9dc 	bl	80087b0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80083f8:	4b10      	ldr	r3, [pc, #64]	; (800843c <prvCheckTasksWaitingTermination+0x50>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3304      	adds	r3, #4
 8008404:	0018      	movs	r0, r3
 8008406:	f7ff f81b 	bl	8007440 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800840a:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <prvCheckTasksWaitingTermination+0x54>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	1e5a      	subs	r2, r3, #1
 8008410:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <prvCheckTasksWaitingTermination+0x54>)
 8008412:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008414:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <prvCheckTasksWaitingTermination+0x58>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	1e5a      	subs	r2, r3, #1
 800841a:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <prvCheckTasksWaitingTermination+0x58>)
 800841c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800841e:	f000 f9d9 	bl	80087d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	0018      	movs	r0, r3
 8008426:	f000 f80f 	bl	8008448 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800842a:	4b06      	ldr	r3, [pc, #24]	; (8008444 <prvCheckTasksWaitingTermination+0x58>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e0      	bne.n	80083f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	46bd      	mov	sp, r7
 8008436:	b002      	add	sp, #8
 8008438:	bd80      	pop	{r7, pc}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	20000940 	.word	0x20000940
 8008440:	2000096c 	.word	0x2000096c
 8008444:	20000954 	.word	0x20000954

08008448 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2251      	movs	r2, #81	; 0x51
 8008454:	5c9b      	ldrb	r3, [r3, r2]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845e:	0018      	movs	r0, r3
 8008460:	f000 fae4 	bl	8008a2c <vPortFree>
				vPortFree( pxTCB );
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	0018      	movs	r0, r3
 8008468:	f000 fae0 	bl	8008a2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800846c:	e010      	b.n	8008490 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2251      	movs	r2, #81	; 0x51
 8008472:	5c9b      	ldrb	r3, [r3, r2]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d104      	bne.n	8008482 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	0018      	movs	r0, r3
 800847c:	f000 fad6 	bl	8008a2c <vPortFree>
	}
 8008480:	e006      	b.n	8008490 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2251      	movs	r2, #81	; 0x51
 8008486:	5c9b      	ldrb	r3, [r3, r2]
 8008488:	2b02      	cmp	r3, #2
 800848a:	d001      	beq.n	8008490 <prvDeleteTCB+0x48>
 800848c:	b672      	cpsid	i
 800848e:	e7fe      	b.n	800848e <prvDeleteTCB+0x46>
	}
 8008490:	46c0      	nop			; (mov r8, r8)
 8008492:	46bd      	mov	sp, r7
 8008494:	b002      	add	sp, #8
 8008496:	bd80      	pop	{r7, pc}

08008498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800849e:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <prvResetNextTaskUnblockTime+0x40>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <prvResetNextTaskUnblockTime+0x14>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <prvResetNextTaskUnblockTime+0x16>
 80084ac:	2300      	movs	r3, #0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d004      	beq.n	80084bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <prvResetNextTaskUnblockTime+0x44>)
 80084b4:	2201      	movs	r2, #1
 80084b6:	4252      	negs	r2, r2
 80084b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084ba:	e008      	b.n	80084ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084bc:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <prvResetNextTaskUnblockTime+0x40>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	4b04      	ldr	r3, [pc, #16]	; (80084dc <prvResetNextTaskUnblockTime+0x44>)
 80084cc:	601a      	str	r2, [r3, #0]
}
 80084ce:	46c0      	nop			; (mov r8, r8)
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b002      	add	sp, #8
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	20000924 	.word	0x20000924
 80084dc:	2000098c 	.word	0x2000098c

080084e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084e6:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <xTaskGetSchedulerState+0x30>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084ee:	2301      	movs	r3, #1
 80084f0:	607b      	str	r3, [r7, #4]
 80084f2:	e008      	b.n	8008506 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084f4:	4b07      	ldr	r3, [pc, #28]	; (8008514 <xTaskGetSchedulerState+0x34>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d102      	bne.n	8008502 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084fc:	2302      	movs	r3, #2
 80084fe:	607b      	str	r3, [r7, #4]
 8008500:	e001      	b.n	8008506 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008506:	687b      	ldr	r3, [r7, #4]
	}
 8008508:	0018      	movs	r0, r3
 800850a:	46bd      	mov	sp, r7
 800850c:	b002      	add	sp, #8
 800850e:	bd80      	pop	{r7, pc}
 8008510:	20000978 	.word	0x20000978
 8008514:	20000994 	.word	0x20000994

08008518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d044      	beq.n	80085b8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800852e:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <xTaskPriorityDisinherit+0xac>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	429a      	cmp	r2, r3
 8008536:	d001      	beq.n	800853c <xTaskPriorityDisinherit+0x24>
 8008538:	b672      	cpsid	i
 800853a:	e7fe      	b.n	800853a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <xTaskPriorityDisinherit+0x30>
 8008544:	b672      	cpsid	i
 8008546:	e7fe      	b.n	8008546 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800854c:	1e5a      	subs	r2, r3, #1
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855a:	429a      	cmp	r2, r3
 800855c:	d02c      	beq.n	80085b8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008562:	2b00      	cmp	r3, #0
 8008564:	d128      	bne.n	80085b8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	3304      	adds	r3, #4
 800856a:	0018      	movs	r0, r3
 800856c:	f7fe ff68 	bl	8007440 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	2207      	movs	r2, #7
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008588:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <xTaskPriorityDisinherit+0xb0>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d903      	bls.n	8008598 <xTaskPriorityDisinherit+0x80>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008594:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <xTaskPriorityDisinherit+0xb0>)
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859c:	0013      	movs	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	189b      	adds	r3, r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4a09      	ldr	r2, [pc, #36]	; (80085cc <xTaskPriorityDisinherit+0xb4>)
 80085a6:	189a      	adds	r2, r3, r2
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	3304      	adds	r3, #4
 80085ac:	0019      	movs	r1, r3
 80085ae:	0010      	movs	r0, r2
 80085b0:	f7fe feee 	bl	8007390 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085b8:	68fb      	ldr	r3, [r7, #12]
	}
 80085ba:	0018      	movs	r0, r3
 80085bc:	46bd      	mov	sp, r7
 80085be:	b004      	add	sp, #16
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	2000086c 	.word	0x2000086c
 80085c8:	20000974 	.word	0x20000974
 80085cc:	20000870 	.word	0x20000870

080085d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085da:	4b21      	ldr	r3, [pc, #132]	; (8008660 <prvAddCurrentTaskToDelayedList+0x90>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e0:	4b20      	ldr	r3, [pc, #128]	; (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3304      	adds	r3, #4
 80085e6:	0018      	movs	r0, r3
 80085e8:	f7fe ff2a 	bl	8007440 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3301      	adds	r3, #1
 80085f0:	d10b      	bne.n	800860a <prvAddCurrentTaskToDelayedList+0x3a>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d008      	beq.n	800860a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085f8:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	1d1a      	adds	r2, r3, #4
 80085fe:	4b1a      	ldr	r3, [pc, #104]	; (8008668 <prvAddCurrentTaskToDelayedList+0x98>)
 8008600:	0011      	movs	r1, r2
 8008602:	0018      	movs	r0, r3
 8008604:	f7fe fec4 	bl	8007390 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008608:	e026      	b.n	8008658 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	18d3      	adds	r3, r2, r3
 8008610:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008612:	4b14      	ldr	r3, [pc, #80]	; (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	429a      	cmp	r2, r3
 8008620:	d209      	bcs.n	8008636 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008622:	4b12      	ldr	r3, [pc, #72]	; (800866c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3304      	adds	r3, #4
 800862c:	0019      	movs	r1, r3
 800862e:	0010      	movs	r0, r2
 8008630:	f7fe fed0 	bl	80073d4 <vListInsert>
}
 8008634:	e010      	b.n	8008658 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008636:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3304      	adds	r3, #4
 8008640:	0019      	movs	r1, r3
 8008642:	0010      	movs	r0, r2
 8008644:	f7fe fec6 	bl	80073d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <prvAddCurrentTaskToDelayedList+0xa4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	429a      	cmp	r2, r3
 8008650:	d202      	bcs.n	8008658 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008652:	4b08      	ldr	r3, [pc, #32]	; (8008674 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	601a      	str	r2, [r3, #0]
}
 8008658:	46c0      	nop			; (mov r8, r8)
 800865a:	46bd      	mov	sp, r7
 800865c:	b004      	add	sp, #16
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000970 	.word	0x20000970
 8008664:	2000086c 	.word	0x2000086c
 8008668:	20000958 	.word	0x20000958
 800866c:	20000928 	.word	0x20000928
 8008670:	20000924 	.word	0x20000924
 8008674:	2000098c 	.word	0x2000098c

08008678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3b04      	subs	r3, #4
 8008688:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2280      	movs	r2, #128	; 0x80
 800868e:	0452      	lsls	r2, r2, #17
 8008690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3b04      	subs	r3, #4
 8008696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3b04      	subs	r3, #4
 80086a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086a4:	4a08      	ldr	r2, [pc, #32]	; (80086c8 <pxPortInitialiseStack+0x50>)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3b14      	subs	r3, #20
 80086ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3b20      	subs	r3, #32
 80086ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086bc:	68fb      	ldr	r3, [r7, #12]
}
 80086be:	0018      	movs	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	b004      	add	sp, #16
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	080086cd 	.word	0x080086cd

080086cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086d6:	4b07      	ldr	r3, [pc, #28]	; (80086f4 <prvTaskExitError+0x28>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	d001      	beq.n	80086e2 <prvTaskExitError+0x16>
 80086de:	b672      	cpsid	i
 80086e0:	e7fe      	b.n	80086e0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80086e2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80086e4:	46c0      	nop			; (mov r8, r8)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0fc      	beq.n	80086e6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086ec:	46c0      	nop			; (mov r8, r8)
 80086ee:	46bd      	mov	sp, r7
 80086f0:	b002      	add	sp, #8
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000008 	.word	0x20000008

080086f8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80086fc:	46c0      	nop			; (mov r8, r8)
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008710 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008710:	4a0b      	ldr	r2, [pc, #44]	; (8008740 <pxCurrentTCBConst2>)
 8008712:	6813      	ldr	r3, [r2, #0]
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	3020      	adds	r0, #32
 8008718:	f380 8809 	msr	PSP, r0
 800871c:	2002      	movs	r0, #2
 800871e:	f380 8814 	msr	CONTROL, r0
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008728:	46ae      	mov	lr, r5
 800872a:	bc08      	pop	{r3}
 800872c:	bc04      	pop	{r2}
 800872e:	b662      	cpsie	i
 8008730:	4718      	bx	r3
 8008732:	46c0      	nop			; (mov r8, r8)
 8008734:	46c0      	nop			; (mov r8, r8)
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	46c0      	nop			; (mov r8, r8)
 800873a:	46c0      	nop			; (mov r8, r8)
 800873c:	46c0      	nop			; (mov r8, r8)
 800873e:	46c0      	nop			; (mov r8, r8)

08008740 <pxCurrentTCBConst2>:
 8008740:	2000086c 	.word	0x2000086c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008744:	46c0      	nop			; (mov r8, r8)
 8008746:	46c0      	nop			; (mov r8, r8)

08008748 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800874c:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <xPortStartScheduler+0x40>)
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <xPortStartScheduler+0x40>)
 8008752:	21ff      	movs	r1, #255	; 0xff
 8008754:	0409      	lsls	r1, r1, #16
 8008756:	430a      	orrs	r2, r1
 8008758:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800875a:	4b0b      	ldr	r3, [pc, #44]	; (8008788 <xPortStartScheduler+0x40>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <xPortStartScheduler+0x40>)
 8008760:	21ff      	movs	r1, #255	; 0xff
 8008762:	0609      	lsls	r1, r1, #24
 8008764:	430a      	orrs	r2, r1
 8008766:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8008768:	f000 f898 	bl	800889c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800876c:	4b07      	ldr	r3, [pc, #28]	; (800878c <xPortStartScheduler+0x44>)
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008772:	f7ff ffcd 	bl	8008710 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008776:	f7ff fcab 	bl	80080d0 <vTaskSwitchContext>
	prvTaskExitError();
 800877a:	f7ff ffa7 	bl	80086cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800877e:	2300      	movs	r3, #0
}
 8008780:	0018      	movs	r0, r3
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	e000ed20 	.word	0xe000ed20
 800878c:	20000008 	.word	0x20000008

08008790 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008794:	4b05      	ldr	r3, [pc, #20]	; (80087ac <vPortYield+0x1c>)
 8008796:	2280      	movs	r2, #128	; 0x80
 8008798:	0552      	lsls	r2, r2, #21
 800879a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800879c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80087a0:	f3bf 8f6f 	isb	sy
}
 80087a4:	46c0      	nop			; (mov r8, r8)
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	e000ed04 	.word	0xe000ed04

080087b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80087b4:	b672      	cpsid	i
    uxCriticalNesting++;
 80087b6:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <vPortEnterCritical+0x20>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <vPortEnterCritical+0x20>)
 80087be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80087c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80087c4:	f3bf 8f6f 	isb	sy
}
 80087c8:	46c0      	nop			; (mov r8, r8)
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	20000008 	.word	0x20000008

080087d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087d8:	4b09      	ldr	r3, [pc, #36]	; (8008800 <vPortExitCritical+0x2c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <vPortExitCritical+0x10>
 80087e0:	b672      	cpsid	i
 80087e2:	e7fe      	b.n	80087e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80087e4:	4b06      	ldr	r3, [pc, #24]	; (8008800 <vPortExitCritical+0x2c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	1e5a      	subs	r2, r3, #1
 80087ea:	4b05      	ldr	r3, [pc, #20]	; (8008800 <vPortExitCritical+0x2c>)
 80087ec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80087ee:	4b04      	ldr	r3, [pc, #16]	; (8008800 <vPortExitCritical+0x2c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d100      	bne.n	80087f8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80087f6:	b662      	cpsie	i
    }
}
 80087f8:	46c0      	nop			; (mov r8, r8)
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	20000008 	.word	0x20000008

08008804 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008804:	f3ef 8010 	mrs	r0, PRIMASK
 8008808:	b672      	cpsid	i
 800880a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800880c:	46c0      	nop			; (mov r8, r8)
 800880e:	0018      	movs	r0, r3

08008810 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008810:	f380 8810 	msr	PRIMASK, r0
 8008814:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008816:	46c0      	nop			; (mov r8, r8)
	...

08008820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008820:	f3ef 8009 	mrs	r0, PSP
 8008824:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <pxCurrentTCBConst>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	3820      	subs	r0, #32
 800882a:	6010      	str	r0, [r2, #0]
 800882c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800882e:	4644      	mov	r4, r8
 8008830:	464d      	mov	r5, r9
 8008832:	4656      	mov	r6, sl
 8008834:	465f      	mov	r7, fp
 8008836:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008838:	b508      	push	{r3, lr}
 800883a:	b672      	cpsid	i
 800883c:	f7ff fc48 	bl	80080d0 <vTaskSwitchContext>
 8008840:	b662      	cpsie	i
 8008842:	bc0c      	pop	{r2, r3}
 8008844:	6811      	ldr	r1, [r2, #0]
 8008846:	6808      	ldr	r0, [r1, #0]
 8008848:	3010      	adds	r0, #16
 800884a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800884c:	46a0      	mov	r8, r4
 800884e:	46a9      	mov	r9, r5
 8008850:	46b2      	mov	sl, r6
 8008852:	46bb      	mov	fp, r7
 8008854:	f380 8809 	msr	PSP, r0
 8008858:	3820      	subs	r0, #32
 800885a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800885c:	4718      	bx	r3
 800885e:	46c0      	nop			; (mov r8, r8)

08008860 <pxCurrentTCBConst>:
 8008860:	2000086c 	.word	0x2000086c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008864:	46c0      	nop			; (mov r8, r8)
 8008866:	46c0      	nop			; (mov r8, r8)

08008868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800886e:	f7ff ffc9 	bl	8008804 <ulSetInterruptMaskFromISR>
 8008872:	0003      	movs	r3, r0
 8008874:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008876:	f7ff fb77 	bl	8007f68 <xTaskIncrementTick>
 800887a:	1e03      	subs	r3, r0, #0
 800887c:	d003      	beq.n	8008886 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800887e:	4b06      	ldr	r3, [pc, #24]	; (8008898 <SysTick_Handler+0x30>)
 8008880:	2280      	movs	r2, #128	; 0x80
 8008882:	0552      	lsls	r2, r2, #21
 8008884:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	0018      	movs	r0, r3
 800888a:	f7ff ffc1 	bl	8008810 <vClearInterruptMaskFromISR>
}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b002      	add	sp, #8
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <prvSetupTimerInterrupt+0x34>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <prvSetupTimerInterrupt+0x38>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <prvSetupTimerInterrupt+0x3c>)
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	23fa      	movs	r3, #250	; 0xfa
 80088b2:	0099      	lsls	r1, r3, #2
 80088b4:	0010      	movs	r0, r2
 80088b6:	f7f7 fc27 	bl	8000108 <__udivsi3>
 80088ba:	0003      	movs	r3, r0
 80088bc:	001a      	movs	r2, r3
 80088be:	4b07      	ldr	r3, [pc, #28]	; (80088dc <prvSetupTimerInterrupt+0x40>)
 80088c0:	3a01      	subs	r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <prvSetupTimerInterrupt+0x34>)
 80088c6:	2207      	movs	r2, #7
 80088c8:	601a      	str	r2, [r3, #0]
}
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	e000e010 	.word	0xe000e010
 80088d4:	e000e018 	.word	0xe000e018
 80088d8:	20000000 	.word	0x20000000
 80088dc:	e000e014 	.word	0xe000e014

080088e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80088ec:	f7ff faa4 	bl	8007e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088f0:	4b49      	ldr	r3, [pc, #292]	; (8008a18 <pvPortMalloc+0x138>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088f8:	f000 f8e0 	bl	8008abc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088fc:	4b47      	ldr	r3, [pc, #284]	; (8008a1c <pvPortMalloc+0x13c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	4013      	ands	r3, r2
 8008904:	d000      	beq.n	8008908 <pvPortMalloc+0x28>
 8008906:	e079      	b.n	80089fc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d012      	beq.n	8008934 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800890e:	2208      	movs	r2, #8
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	189b      	adds	r3, r3, r2
 8008914:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2207      	movs	r2, #7
 800891a:	4013      	ands	r3, r2
 800891c:	d00a      	beq.n	8008934 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2207      	movs	r2, #7
 8008922:	4393      	bics	r3, r2
 8008924:	3308      	adds	r3, #8
 8008926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2207      	movs	r2, #7
 800892c:	4013      	ands	r3, r2
 800892e:	d001      	beq.n	8008934 <pvPortMalloc+0x54>
 8008930:	b672      	cpsid	i
 8008932:	e7fe      	b.n	8008932 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d060      	beq.n	80089fc <pvPortMalloc+0x11c>
 800893a:	4b39      	ldr	r3, [pc, #228]	; (8008a20 <pvPortMalloc+0x140>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d85b      	bhi.n	80089fc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008944:	4b37      	ldr	r3, [pc, #220]	; (8008a24 <pvPortMalloc+0x144>)
 8008946:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008948:	4b36      	ldr	r3, [pc, #216]	; (8008a24 <pvPortMalloc+0x144>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800894e:	e004      	b.n	800895a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d903      	bls.n	800896c <pvPortMalloc+0x8c>
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f1      	bne.n	8008950 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800896c:	4b2a      	ldr	r3, [pc, #168]	; (8008a18 <pvPortMalloc+0x138>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	429a      	cmp	r2, r3
 8008974:	d042      	beq.n	80089fc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2208      	movs	r2, #8
 800897c:	189b      	adds	r3, r3, r2
 800897e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	2308      	movs	r3, #8
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	429a      	cmp	r2, r3
 8008996:	d916      	bls.n	80089c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	18d3      	adds	r3, r2, r3
 800899e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2207      	movs	r2, #7
 80089a4:	4013      	ands	r3, r2
 80089a6:	d001      	beq.n	80089ac <pvPortMalloc+0xcc>
 80089a8:	b672      	cpsid	i
 80089aa:	e7fe      	b.n	80089aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	1ad2      	subs	r2, r2, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	0018      	movs	r0, r3
 80089c2:	f000 f8db 	bl	8008b7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089c6:	4b16      	ldr	r3, [pc, #88]	; (8008a20 <pvPortMalloc+0x140>)
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	4b13      	ldr	r3, [pc, #76]	; (8008a20 <pvPortMalloc+0x140>)
 80089d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089d4:	4b12      	ldr	r3, [pc, #72]	; (8008a20 <pvPortMalloc+0x140>)
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <pvPortMalloc+0x148>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d203      	bcs.n	80089e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089e0:	4b0f      	ldr	r3, [pc, #60]	; (8008a20 <pvPortMalloc+0x140>)
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	4b10      	ldr	r3, [pc, #64]	; (8008a28 <pvPortMalloc+0x148>)
 80089e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <pvPortMalloc+0x13c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	431a      	orrs	r2, r3
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089fc:	f7ff fa28 	bl	8007e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2207      	movs	r2, #7
 8008a04:	4013      	ands	r3, r2
 8008a06:	d001      	beq.n	8008a0c <pvPortMalloc+0x12c>
 8008a08:	b672      	cpsid	i
 8008a0a:	e7fe      	b.n	8008a0a <pvPortMalloc+0x12a>
	return pvReturn;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
}
 8008a0e:	0018      	movs	r0, r3
 8008a10:	46bd      	mov	sp, r7
 8008a12:	b006      	add	sp, #24
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	200019a0 	.word	0x200019a0
 8008a1c:	200019ac 	.word	0x200019ac
 8008a20:	200019a4 	.word	0x200019a4
 8008a24:	20001998 	.word	0x20001998
 8008a28:	200019a8 	.word	0x200019a8

08008a2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d035      	beq.n	8008aaa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a3e:	2308      	movs	r3, #8
 8008a40:	425b      	negs	r3, r3
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	18d3      	adds	r3, r2, r3
 8008a46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	685a      	ldr	r2, [r3, #4]
 8008a50:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <vPortFree+0x88>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4013      	ands	r3, r2
 8008a56:	d101      	bne.n	8008a5c <vPortFree+0x30>
 8008a58:	b672      	cpsid	i
 8008a5a:	e7fe      	b.n	8008a5a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <vPortFree+0x3c>
 8008a64:	b672      	cpsid	i
 8008a66:	e7fe      	b.n	8008a66 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <vPortFree+0x88>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4013      	ands	r3, r2
 8008a72:	d01a      	beq.n	8008aaa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d116      	bne.n	8008aaa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <vPortFree+0x88>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	43db      	mvns	r3, r3
 8008a86:	401a      	ands	r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a8c:	f7ff f9d4 	bl	8007e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	4b08      	ldr	r3, [pc, #32]	; (8008ab8 <vPortFree+0x8c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	18d2      	adds	r2, r2, r3
 8008a9a:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <vPortFree+0x8c>)
 8008a9c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f000 f86b 	bl	8008b7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008aa6:	f7ff f9d3 	bl	8007e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	46bd      	mov	sp, r7
 8008aae:	b004      	add	sp, #16
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	200019ac 	.word	0x200019ac
 8008ab8:	200019a4 	.word	0x200019a4

08008abc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ac2:	2380      	movs	r3, #128	; 0x80
 8008ac4:	015b      	lsls	r3, r3, #5
 8008ac6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ac8:	4b26      	ldr	r3, [pc, #152]	; (8008b64 <prvHeapInit+0xa8>)
 8008aca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2207      	movs	r2, #7
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	d00c      	beq.n	8008aee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3307      	adds	r3, #7
 8008ad8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2207      	movs	r2, #7
 8008ade:	4393      	bics	r3, r2
 8008ae0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	1ad2      	subs	r2, r2, r3
 8008ae8:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <prvHeapInit+0xa8>)
 8008aea:	18d3      	adds	r3, r2, r3
 8008aec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008af2:	4b1d      	ldr	r3, [pc, #116]	; (8008b68 <prvHeapInit+0xac>)
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008af8:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <prvHeapInit+0xac>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	18d3      	adds	r3, r2, r3
 8008b04:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b06:	2208      	movs	r2, #8
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	1a9b      	subs	r3, r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2207      	movs	r2, #7
 8008b12:	4393      	bics	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	4b14      	ldr	r3, [pc, #80]	; (8008b6c <prvHeapInit+0xb0>)
 8008b1a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008b1c:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <prvHeapInit+0xb0>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2200      	movs	r2, #0
 8008b22:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <prvHeapInit+0xb0>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	1ad2      	subs	r2, r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <prvHeapInit+0xb0>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	4b0a      	ldr	r3, [pc, #40]	; (8008b70 <prvHeapInit+0xb4>)
 8008b48:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <prvHeapInit+0xb8>)
 8008b50:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b52:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <prvHeapInit+0xbc>)
 8008b54:	2280      	movs	r2, #128	; 0x80
 8008b56:	0612      	lsls	r2, r2, #24
 8008b58:	601a      	str	r2, [r3, #0]
}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	b004      	add	sp, #16
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	46c0      	nop			; (mov r8, r8)
 8008b64:	20000998 	.word	0x20000998
 8008b68:	20001998 	.word	0x20001998
 8008b6c:	200019a0 	.word	0x200019a0
 8008b70:	200019a8 	.word	0x200019a8
 8008b74:	200019a4 	.word	0x200019a4
 8008b78:	200019ac 	.word	0x200019ac

08008b7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b84:	4b27      	ldr	r3, [pc, #156]	; (8008c24 <prvInsertBlockIntoFreeList+0xa8>)
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	e002      	b.n	8008b90 <prvInsertBlockIntoFreeList+0x14>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d8f7      	bhi.n	8008b8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	18d3      	adds	r3, r2, r3
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d108      	bne.n	8008bbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	18d2      	adds	r2, r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	18d2      	adds	r2, r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d118      	bne.n	8008c04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b14      	ldr	r3, [pc, #80]	; (8008c28 <prvInsertBlockIntoFreeList+0xac>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d00d      	beq.n	8008bfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	18d2      	adds	r2, r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	e008      	b.n	8008c0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <prvInsertBlockIntoFreeList+0xac>)
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	e003      	b.n	8008c0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d002      	beq.n	8008c1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	b004      	add	sp, #16
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	46c0      	nop			; (mov r8, r8)
 8008c24:	20001998 	.word	0x20001998
 8008c28:	200019a0 	.word	0x200019a0

08008c2c <__cxa_pure_virtual>:
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	f000 f805 	bl	8008c3c <_ZSt9terminatev>

08008c32 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008c32:	b510      	push	{r4, lr}
 8008c34:	4780      	blx	r0
 8008c36:	f000 f809 	bl	8008c4c <abort>
	...

08008c3c <_ZSt9terminatev>:
 8008c3c:	4b02      	ldr	r3, [pc, #8]	; (8008c48 <_ZSt9terminatev+0xc>)
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	f7ff fff6 	bl	8008c32 <_ZN10__cxxabiv111__terminateEPFvvE>
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	2000000c 	.word	0x2000000c

08008c4c <abort>:
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	2006      	movs	r0, #6
 8008c50:	f000 f86a 	bl	8008d28 <raise>
 8008c54:	2001      	movs	r0, #1
 8008c56:	f7f8 fef3 	bl	8001a40 <_exit>
	...

08008c5c <__errno>:
 8008c5c:	4b01      	ldr	r3, [pc, #4]	; (8008c64 <__errno+0x8>)
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	4770      	bx	lr
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	20000010 	.word	0x20000010

08008c68 <__libc_init_array>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	2600      	movs	r6, #0
 8008c6c:	4d0c      	ldr	r5, [pc, #48]	; (8008ca0 <__libc_init_array+0x38>)
 8008c6e:	4c0d      	ldr	r4, [pc, #52]	; (8008ca4 <__libc_init_array+0x3c>)
 8008c70:	1b64      	subs	r4, r4, r5
 8008c72:	10a4      	asrs	r4, r4, #2
 8008c74:	42a6      	cmp	r6, r4
 8008c76:	d109      	bne.n	8008c8c <__libc_init_array+0x24>
 8008c78:	2600      	movs	r6, #0
 8008c7a:	f000 f875 	bl	8008d68 <_init>
 8008c7e:	4d0a      	ldr	r5, [pc, #40]	; (8008ca8 <__libc_init_array+0x40>)
 8008c80:	4c0a      	ldr	r4, [pc, #40]	; (8008cac <__libc_init_array+0x44>)
 8008c82:	1b64      	subs	r4, r4, r5
 8008c84:	10a4      	asrs	r4, r4, #2
 8008c86:	42a6      	cmp	r6, r4
 8008c88:	d105      	bne.n	8008c96 <__libc_init_array+0x2e>
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	00b3      	lsls	r3, r6, #2
 8008c8e:	58eb      	ldr	r3, [r5, r3]
 8008c90:	4798      	blx	r3
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7ee      	b.n	8008c74 <__libc_init_array+0xc>
 8008c96:	00b3      	lsls	r3, r6, #2
 8008c98:	58eb      	ldr	r3, [r5, r3]
 8008c9a:	4798      	blx	r3
 8008c9c:	3601      	adds	r6, #1
 8008c9e:	e7f2      	b.n	8008c86 <__libc_init_array+0x1e>
 8008ca0:	0800902c 	.word	0x0800902c
 8008ca4:	0800902c 	.word	0x0800902c
 8008ca8:	0800902c 	.word	0x0800902c
 8008cac:	0800903c 	.word	0x0800903c

08008cb0 <memcpy>:
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d100      	bne.n	8008cba <memcpy+0xa>
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	5ccc      	ldrb	r4, [r1, r3]
 8008cbc:	54c4      	strb	r4, [r0, r3]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	e7f8      	b.n	8008cb4 <memcpy+0x4>

08008cc2 <memset>:
 8008cc2:	0003      	movs	r3, r0
 8008cc4:	1812      	adds	r2, r2, r0
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d100      	bne.n	8008ccc <memset+0xa>
 8008cca:	4770      	bx	lr
 8008ccc:	7019      	strb	r1, [r3, #0]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	e7f9      	b.n	8008cc6 <memset+0x4>

08008cd2 <_raise_r>:
 8008cd2:	b570      	push	{r4, r5, r6, lr}
 8008cd4:	0004      	movs	r4, r0
 8008cd6:	000d      	movs	r5, r1
 8008cd8:	291f      	cmp	r1, #31
 8008cda:	d904      	bls.n	8008ce6 <_raise_r+0x14>
 8008cdc:	2316      	movs	r3, #22
 8008cde:	6003      	str	r3, [r0, #0]
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	4240      	negs	r0, r0
 8008ce4:	bd70      	pop	{r4, r5, r6, pc}
 8008ce6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d004      	beq.n	8008cf6 <_raise_r+0x24>
 8008cec:	008a      	lsls	r2, r1, #2
 8008cee:	189b      	adds	r3, r3, r2
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	2a00      	cmp	r2, #0
 8008cf4:	d108      	bne.n	8008d08 <_raise_r+0x36>
 8008cf6:	0020      	movs	r0, r4
 8008cf8:	f000 f832 	bl	8008d60 <_getpid_r>
 8008cfc:	002a      	movs	r2, r5
 8008cfe:	0001      	movs	r1, r0
 8008d00:	0020      	movs	r0, r4
 8008d02:	f000 f81b 	bl	8008d3c <_kill_r>
 8008d06:	e7ed      	b.n	8008ce4 <_raise_r+0x12>
 8008d08:	2000      	movs	r0, #0
 8008d0a:	2a01      	cmp	r2, #1
 8008d0c:	d0ea      	beq.n	8008ce4 <_raise_r+0x12>
 8008d0e:	1c51      	adds	r1, r2, #1
 8008d10:	d103      	bne.n	8008d1a <_raise_r+0x48>
 8008d12:	2316      	movs	r3, #22
 8008d14:	3001      	adds	r0, #1
 8008d16:	6023      	str	r3, [r4, #0]
 8008d18:	e7e4      	b.n	8008ce4 <_raise_r+0x12>
 8008d1a:	2400      	movs	r4, #0
 8008d1c:	0028      	movs	r0, r5
 8008d1e:	601c      	str	r4, [r3, #0]
 8008d20:	4790      	blx	r2
 8008d22:	0020      	movs	r0, r4
 8008d24:	e7de      	b.n	8008ce4 <_raise_r+0x12>
	...

08008d28 <raise>:
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	4b03      	ldr	r3, [pc, #12]	; (8008d38 <raise+0x10>)
 8008d2c:	0001      	movs	r1, r0
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	f7ff ffcf 	bl	8008cd2 <_raise_r>
 8008d34:	bd10      	pop	{r4, pc}
 8008d36:	46c0      	nop			; (mov r8, r8)
 8008d38:	20000010 	.word	0x20000010

08008d3c <_kill_r>:
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	b570      	push	{r4, r5, r6, lr}
 8008d40:	4c06      	ldr	r4, [pc, #24]	; (8008d5c <_kill_r+0x20>)
 8008d42:	0005      	movs	r5, r0
 8008d44:	0008      	movs	r0, r1
 8008d46:	0011      	movs	r1, r2
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	f7f8 fe69 	bl	8001a20 <_kill>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	d103      	bne.n	8008d5a <_kill_r+0x1e>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d000      	beq.n	8008d5a <_kill_r+0x1e>
 8008d58:	602b      	str	r3, [r5, #0]
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}
 8008d5c:	200019f4 	.word	0x200019f4

08008d60 <_getpid_r>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	f7f8 fe57 	bl	8001a14 <_getpid>
 8008d66:	bd10      	pop	{r4, pc}

08008d68 <_init>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr

08008d74 <_fini>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	46c0      	nop			; (mov r8, r8)
 8008d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7a:	bc08      	pop	{r3}
 8008d7c:	469e      	mov	lr, r3
 8008d7e:	4770      	bx	lr
