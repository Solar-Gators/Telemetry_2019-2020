
TFT_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008800  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  080088c0  080088c0  000188c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d8  080091d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080091d8  080091d8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091d8  080091d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080091e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000074  08009254  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08009254  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181ba  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003826  00000000  00000000  00038256  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  0003ba80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  0003c790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b1fe  00000000  00000000  0003d368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea7f  00000000  00000000  00058566  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083b35  00000000  00000000  00066fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eab1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d0  00000000  00000000  000eab98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080088a8 	.word	0x080088a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080088a8 	.word	0x080088a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fb4f 	bl	8001aa8 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 faa7 	bl	8001968 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fb41 	bl	8001aa8 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fb37 	bl	8001aa8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fac9 	bl	80019e0 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fabf 	bl	80019e0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fb9d 	bl	8000bb8 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fb1f 	bl	8000acc <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb8f 	bl	8000bb8 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb85 	bl	8000bb8 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb2d 	bl	8000b1c <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb23 	bl	8000b1c <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4647      	mov	r7, r8
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	002e      	movs	r6, r5
 80004f0:	b580      	push	{r7, lr}
 80004f2:	0407      	lsls	r7, r0, #16
 80004f4:	0c14      	lsrs	r4, r2, #16
 80004f6:	0c3f      	lsrs	r7, r7, #16
 80004f8:	4699      	mov	r9, r3
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	437e      	muls	r6, r7
 80004fe:	435d      	muls	r5, r3
 8000500:	4367      	muls	r7, r4
 8000502:	4363      	muls	r3, r4
 8000504:	197f      	adds	r7, r7, r5
 8000506:	0c34      	lsrs	r4, r6, #16
 8000508:	19e4      	adds	r4, r4, r7
 800050a:	469c      	mov	ip, r3
 800050c:	42a5      	cmp	r5, r4
 800050e:	d903      	bls.n	8000518 <__aeabi_lmul+0x34>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	025b      	lsls	r3, r3, #9
 8000514:	4698      	mov	r8, r3
 8000516:	44c4      	add	ip, r8
 8000518:	464b      	mov	r3, r9
 800051a:	4343      	muls	r3, r0
 800051c:	4351      	muls	r1, r2
 800051e:	0c25      	lsrs	r5, r4, #16
 8000520:	0436      	lsls	r6, r6, #16
 8000522:	4465      	add	r5, ip
 8000524:	0c36      	lsrs	r6, r6, #16
 8000526:	0424      	lsls	r4, r4, #16
 8000528:	19a4      	adds	r4, r4, r6
 800052a:	195b      	adds	r3, r3, r5
 800052c:	1859      	adds	r1, r3, r1
 800052e:	0020      	movs	r0, r4
 8000530:	bc0c      	pop	{r2, r3}
 8000532:	4690      	mov	r8, r2
 8000534:	4699      	mov	r9, r3
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__aeabi_d2uiz>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	2200      	movs	r2, #0
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <__aeabi_d2uiz+0x38>)
 800053e:	0004      	movs	r4, r0
 8000540:	000d      	movs	r5, r1
 8000542:	f7ff ff8b 	bl	800045c <__aeabi_dcmpge>
 8000546:	2800      	cmp	r0, #0
 8000548:	d104      	bne.n	8000554 <__aeabi_d2uiz+0x1c>
 800054a:	0020      	movs	r0, r4
 800054c:	0029      	movs	r1, r5
 800054e:	f002 f8e9 	bl	8002724 <__aeabi_d2iz>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <__aeabi_d2uiz+0x38>)
 8000556:	2200      	movs	r2, #0
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 fd7e 	bl	800205c <__aeabi_dsub>
 8000560:	f002 f8e0 	bl	8002724 <__aeabi_d2iz>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	061b      	lsls	r3, r3, #24
 8000568:	469c      	mov	ip, r3
 800056a:	4460      	add	r0, ip
 800056c:	e7f1      	b.n	8000552 <__aeabi_d2uiz+0x1a>
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	41e00000 	.word	0x41e00000

08000574 <__aeabi_fadd>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	4647      	mov	r7, r8
 8000578:	46ce      	mov	lr, r9
 800057a:	0243      	lsls	r3, r0, #9
 800057c:	0a5b      	lsrs	r3, r3, #9
 800057e:	0044      	lsls	r4, r0, #1
 8000580:	0fc2      	lsrs	r2, r0, #31
 8000582:	469c      	mov	ip, r3
 8000584:	0048      	lsls	r0, r1, #1
 8000586:	00dd      	lsls	r5, r3, #3
 8000588:	024b      	lsls	r3, r1, #9
 800058a:	0e24      	lsrs	r4, r4, #24
 800058c:	0a5b      	lsrs	r3, r3, #9
 800058e:	0e00      	lsrs	r0, r0, #24
 8000590:	b580      	push	{r7, lr}
 8000592:	4698      	mov	r8, r3
 8000594:	0026      	movs	r6, r4
 8000596:	4691      	mov	r9, r2
 8000598:	0fc9      	lsrs	r1, r1, #31
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	1a27      	subs	r7, r4, r0
 800059e:	428a      	cmp	r2, r1
 80005a0:	d029      	beq.n	80005f6 <__aeabi_fadd+0x82>
 80005a2:	2f00      	cmp	r7, #0
 80005a4:	dd15      	ble.n	80005d2 <__aeabi_fadd+0x5e>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d14a      	bne.n	8000640 <__aeabi_fadd+0xcc>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0x3c>
 80005ae:	e095      	b.n	80006dc <__aeabi_fadd+0x168>
 80005b0:	08ed      	lsrs	r5, r5, #3
 80005b2:	2cff      	cmp	r4, #255	; 0xff
 80005b4:	d100      	bne.n	80005b8 <__aeabi_fadd+0x44>
 80005b6:	e088      	b.n	80006ca <__aeabi_fadd+0x156>
 80005b8:	026b      	lsls	r3, r5, #9
 80005ba:	0a5b      	lsrs	r3, r3, #9
 80005bc:	b2e6      	uxtb	r6, r4
 80005be:	025b      	lsls	r3, r3, #9
 80005c0:	05f6      	lsls	r6, r6, #23
 80005c2:	0a58      	lsrs	r0, r3, #9
 80005c4:	4330      	orrs	r0, r6
 80005c6:	07d2      	lsls	r2, r2, #31
 80005c8:	4310      	orrs	r0, r2
 80005ca:	bc0c      	pop	{r2, r3}
 80005cc:	4690      	mov	r8, r2
 80005ce:	4699      	mov	r9, r3
 80005d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005d2:	2f00      	cmp	r7, #0
 80005d4:	d000      	beq.n	80005d8 <__aeabi_fadd+0x64>
 80005d6:	e087      	b.n	80006e8 <__aeabi_fadd+0x174>
 80005d8:	1c60      	adds	r0, r4, #1
 80005da:	b2c0      	uxtb	r0, r0
 80005dc:	2801      	cmp	r0, #1
 80005de:	dc00      	bgt.n	80005e2 <__aeabi_fadd+0x6e>
 80005e0:	e0b6      	b.n	8000750 <__aeabi_fadd+0x1dc>
 80005e2:	1aee      	subs	r6, r5, r3
 80005e4:	0172      	lsls	r2, r6, #5
 80005e6:	d500      	bpl.n	80005ea <__aeabi_fadd+0x76>
 80005e8:	e0c5      	b.n	8000776 <__aeabi_fadd+0x202>
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d13d      	bne.n	800066a <__aeabi_fadd+0xf6>
 80005ee:	2200      	movs	r2, #0
 80005f0:	2600      	movs	r6, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	e7e3      	b.n	80005be <__aeabi_fadd+0x4a>
 80005f6:	2f00      	cmp	r7, #0
 80005f8:	dc00      	bgt.n	80005fc <__aeabi_fadd+0x88>
 80005fa:	e096      	b.n	800072a <__aeabi_fadd+0x1b6>
 80005fc:	2800      	cmp	r0, #0
 80005fe:	d05d      	beq.n	80006bc <__aeabi_fadd+0x148>
 8000600:	2cff      	cmp	r4, #255	; 0xff
 8000602:	d060      	beq.n	80006c6 <__aeabi_fadd+0x152>
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	04d2      	lsls	r2, r2, #19
 8000608:	4313      	orrs	r3, r2
 800060a:	2f1b      	cmp	r7, #27
 800060c:	dd00      	ble.n	8000610 <__aeabi_fadd+0x9c>
 800060e:	e0ec      	b.n	80007ea <__aeabi_fadd+0x276>
 8000610:	2220      	movs	r2, #32
 8000612:	1bd2      	subs	r2, r2, r7
 8000614:	0018      	movs	r0, r3
 8000616:	4093      	lsls	r3, r2
 8000618:	40f8      	lsrs	r0, r7
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	4193      	sbcs	r3, r2
 800061e:	4303      	orrs	r3, r0
 8000620:	18ed      	adds	r5, r5, r3
 8000622:	016b      	lsls	r3, r5, #5
 8000624:	d57b      	bpl.n	800071e <__aeabi_fadd+0x1aa>
 8000626:	3401      	adds	r4, #1
 8000628:	2cff      	cmp	r4, #255	; 0xff
 800062a:	d100      	bne.n	800062e <__aeabi_fadd+0xba>
 800062c:	e0b7      	b.n	800079e <__aeabi_fadd+0x22a>
 800062e:	2201      	movs	r2, #1
 8000630:	2607      	movs	r6, #7
 8000632:	402a      	ands	r2, r5
 8000634:	086b      	lsrs	r3, r5, #1
 8000636:	4d9a      	ldr	r5, [pc, #616]	; (80008a0 <__aeabi_fadd+0x32c>)
 8000638:	401d      	ands	r5, r3
 800063a:	4315      	orrs	r5, r2
 800063c:	402e      	ands	r6, r5
 800063e:	e029      	b.n	8000694 <__aeabi_fadd+0x120>
 8000640:	2cff      	cmp	r4, #255	; 0xff
 8000642:	d0b5      	beq.n	80005b0 <__aeabi_fadd+0x3c>
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	04d2      	lsls	r2, r2, #19
 8000648:	4313      	orrs	r3, r2
 800064a:	2f1b      	cmp	r7, #27
 800064c:	dd00      	ble.n	8000650 <__aeabi_fadd+0xdc>
 800064e:	e0b2      	b.n	80007b6 <__aeabi_fadd+0x242>
 8000650:	2220      	movs	r2, #32
 8000652:	1bd2      	subs	r2, r2, r7
 8000654:	0019      	movs	r1, r3
 8000656:	4093      	lsls	r3, r2
 8000658:	40f9      	lsrs	r1, r7
 800065a:	1e5a      	subs	r2, r3, #1
 800065c:	4193      	sbcs	r3, r2
 800065e:	430b      	orrs	r3, r1
 8000660:	1aed      	subs	r5, r5, r3
 8000662:	016b      	lsls	r3, r5, #5
 8000664:	d55b      	bpl.n	800071e <__aeabi_fadd+0x1aa>
 8000666:	01ad      	lsls	r5, r5, #6
 8000668:	09ae      	lsrs	r6, r5, #6
 800066a:	0030      	movs	r0, r6
 800066c:	f002 f91c 	bl	80028a8 <__clzsi2>
 8000670:	3805      	subs	r0, #5
 8000672:	4086      	lsls	r6, r0
 8000674:	4284      	cmp	r4, r0
 8000676:	dc65      	bgt.n	8000744 <__aeabi_fadd+0x1d0>
 8000678:	1b04      	subs	r4, r0, r4
 800067a:	0033      	movs	r3, r6
 800067c:	2020      	movs	r0, #32
 800067e:	3401      	adds	r4, #1
 8000680:	40e3      	lsrs	r3, r4
 8000682:	1b04      	subs	r4, r0, r4
 8000684:	40a6      	lsls	r6, r4
 8000686:	1e75      	subs	r5, r6, #1
 8000688:	41ae      	sbcs	r6, r5
 800068a:	4333      	orrs	r3, r6
 800068c:	2607      	movs	r6, #7
 800068e:	001d      	movs	r5, r3
 8000690:	2400      	movs	r4, #0
 8000692:	401e      	ands	r6, r3
 8000694:	2201      	movs	r2, #1
 8000696:	464b      	mov	r3, r9
 8000698:	401a      	ands	r2, r3
 800069a:	2e00      	cmp	r6, #0
 800069c:	d004      	beq.n	80006a8 <__aeabi_fadd+0x134>
 800069e:	230f      	movs	r3, #15
 80006a0:	402b      	ands	r3, r5
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d000      	beq.n	80006a8 <__aeabi_fadd+0x134>
 80006a6:	3504      	adds	r5, #4
 80006a8:	016b      	lsls	r3, r5, #5
 80006aa:	d400      	bmi.n	80006ae <__aeabi_fadd+0x13a>
 80006ac:	e780      	b.n	80005b0 <__aeabi_fadd+0x3c>
 80006ae:	3401      	adds	r4, #1
 80006b0:	b2e6      	uxtb	r6, r4
 80006b2:	2cff      	cmp	r4, #255	; 0xff
 80006b4:	d12f      	bne.n	8000716 <__aeabi_fadd+0x1a2>
 80006b6:	26ff      	movs	r6, #255	; 0xff
 80006b8:	2300      	movs	r3, #0
 80006ba:	e780      	b.n	80005be <__aeabi_fadd+0x4a>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d152      	bne.n	8000766 <__aeabi_fadd+0x1f2>
 80006c0:	2cff      	cmp	r4, #255	; 0xff
 80006c2:	d000      	beq.n	80006c6 <__aeabi_fadd+0x152>
 80006c4:	e774      	b.n	80005b0 <__aeabi_fadd+0x3c>
 80006c6:	000a      	movs	r2, r1
 80006c8:	08ed      	lsrs	r5, r5, #3
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d0f3      	beq.n	80006b6 <__aeabi_fadd+0x142>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	03db      	lsls	r3, r3, #15
 80006d2:	432b      	orrs	r3, r5
 80006d4:	025b      	lsls	r3, r3, #9
 80006d6:	0a5b      	lsrs	r3, r3, #9
 80006d8:	26ff      	movs	r6, #255	; 0xff
 80006da:	e770      	b.n	80005be <__aeabi_fadd+0x4a>
 80006dc:	3f01      	subs	r7, #1
 80006de:	2f00      	cmp	r7, #0
 80006e0:	d0be      	beq.n	8000660 <__aeabi_fadd+0xec>
 80006e2:	2cff      	cmp	r4, #255	; 0xff
 80006e4:	d1b1      	bne.n	800064a <__aeabi_fadd+0xd6>
 80006e6:	e763      	b.n	80005b0 <__aeabi_fadd+0x3c>
 80006e8:	2c00      	cmp	r4, #0
 80006ea:	d047      	beq.n	800077c <__aeabi_fadd+0x208>
 80006ec:	28ff      	cmp	r0, #255	; 0xff
 80006ee:	d069      	beq.n	80007c4 <__aeabi_fadd+0x250>
 80006f0:	2480      	movs	r4, #128	; 0x80
 80006f2:	04e4      	lsls	r4, r4, #19
 80006f4:	427a      	negs	r2, r7
 80006f6:	4325      	orrs	r5, r4
 80006f8:	2a1b      	cmp	r2, #27
 80006fa:	dd00      	ble.n	80006fe <__aeabi_fadd+0x18a>
 80006fc:	e0c5      	b.n	800088a <__aeabi_fadd+0x316>
 80006fe:	002c      	movs	r4, r5
 8000700:	2620      	movs	r6, #32
 8000702:	40d4      	lsrs	r4, r2
 8000704:	1ab2      	subs	r2, r6, r2
 8000706:	4095      	lsls	r5, r2
 8000708:	1e6a      	subs	r2, r5, #1
 800070a:	4195      	sbcs	r5, r2
 800070c:	4325      	orrs	r5, r4
 800070e:	1b5d      	subs	r5, r3, r5
 8000710:	0004      	movs	r4, r0
 8000712:	4689      	mov	r9, r1
 8000714:	e7a5      	b.n	8000662 <__aeabi_fadd+0xee>
 8000716:	01ab      	lsls	r3, r5, #6
 8000718:	0a5b      	lsrs	r3, r3, #9
 800071a:	e750      	b.n	80005be <__aeabi_fadd+0x4a>
 800071c:	2400      	movs	r4, #0
 800071e:	2201      	movs	r2, #1
 8000720:	464b      	mov	r3, r9
 8000722:	401a      	ands	r2, r3
 8000724:	076b      	lsls	r3, r5, #29
 8000726:	d1ba      	bne.n	800069e <__aeabi_fadd+0x12a>
 8000728:	e742      	b.n	80005b0 <__aeabi_fadd+0x3c>
 800072a:	2f00      	cmp	r7, #0
 800072c:	d13b      	bne.n	80007a6 <__aeabi_fadd+0x232>
 800072e:	3401      	adds	r4, #1
 8000730:	b2e0      	uxtb	r0, r4
 8000732:	2801      	cmp	r0, #1
 8000734:	dd4a      	ble.n	80007cc <__aeabi_fadd+0x258>
 8000736:	2cff      	cmp	r4, #255	; 0xff
 8000738:	d0bd      	beq.n	80006b6 <__aeabi_fadd+0x142>
 800073a:	2607      	movs	r6, #7
 800073c:	18ed      	adds	r5, r5, r3
 800073e:	086d      	lsrs	r5, r5, #1
 8000740:	402e      	ands	r6, r5
 8000742:	e7a7      	b.n	8000694 <__aeabi_fadd+0x120>
 8000744:	2307      	movs	r3, #7
 8000746:	4d57      	ldr	r5, [pc, #348]	; (80008a4 <__aeabi_fadd+0x330>)
 8000748:	1a24      	subs	r4, r4, r0
 800074a:	4035      	ands	r5, r6
 800074c:	401e      	ands	r6, r3
 800074e:	e7a1      	b.n	8000694 <__aeabi_fadd+0x120>
 8000750:	2c00      	cmp	r4, #0
 8000752:	d11b      	bne.n	800078c <__aeabi_fadd+0x218>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d16e      	bne.n	8000836 <__aeabi_fadd+0x2c2>
 8000758:	2b00      	cmp	r3, #0
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x1ea>
 800075c:	e09a      	b.n	8000894 <__aeabi_fadd+0x320>
 800075e:	000a      	movs	r2, r1
 8000760:	001d      	movs	r5, r3
 8000762:	003c      	movs	r4, r7
 8000764:	e724      	b.n	80005b0 <__aeabi_fadd+0x3c>
 8000766:	3f01      	subs	r7, #1
 8000768:	2f00      	cmp	r7, #0
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x1fa>
 800076c:	e758      	b.n	8000620 <__aeabi_fadd+0xac>
 800076e:	2cff      	cmp	r4, #255	; 0xff
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x200>
 8000772:	e74a      	b.n	800060a <__aeabi_fadd+0x96>
 8000774:	e7a7      	b.n	80006c6 <__aeabi_fadd+0x152>
 8000776:	1b5e      	subs	r6, r3, r5
 8000778:	4689      	mov	r9, r1
 800077a:	e776      	b.n	800066a <__aeabi_fadd+0xf6>
 800077c:	2d00      	cmp	r5, #0
 800077e:	d11c      	bne.n	80007ba <__aeabi_fadd+0x246>
 8000780:	000a      	movs	r2, r1
 8000782:	28ff      	cmp	r0, #255	; 0xff
 8000784:	d01f      	beq.n	80007c6 <__aeabi_fadd+0x252>
 8000786:	0004      	movs	r4, r0
 8000788:	001d      	movs	r5, r3
 800078a:	e711      	b.n	80005b0 <__aeabi_fadd+0x3c>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d15d      	bne.n	800084c <__aeabi_fadd+0x2d8>
 8000790:	2b00      	cmp	r3, #0
 8000792:	d117      	bne.n	80007c4 <__aeabi_fadd+0x250>
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	2200      	movs	r2, #0
 8000798:	03db      	lsls	r3, r3, #15
 800079a:	26ff      	movs	r6, #255	; 0xff
 800079c:	e70f      	b.n	80005be <__aeabi_fadd+0x4a>
 800079e:	000a      	movs	r2, r1
 80007a0:	26ff      	movs	r6, #255	; 0xff
 80007a2:	2300      	movs	r3, #0
 80007a4:	e70b      	b.n	80005be <__aeabi_fadd+0x4a>
 80007a6:	2c00      	cmp	r4, #0
 80007a8:	d121      	bne.n	80007ee <__aeabi_fadd+0x27a>
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d166      	bne.n	800087c <__aeabi_fadd+0x308>
 80007ae:	28ff      	cmp	r0, #255	; 0xff
 80007b0:	d1e9      	bne.n	8000786 <__aeabi_fadd+0x212>
 80007b2:	001d      	movs	r5, r3
 80007b4:	e787      	b.n	80006c6 <__aeabi_fadd+0x152>
 80007b6:	2301      	movs	r3, #1
 80007b8:	e752      	b.n	8000660 <__aeabi_fadd+0xec>
 80007ba:	1c7a      	adds	r2, r7, #1
 80007bc:	d0a7      	beq.n	800070e <__aeabi_fadd+0x19a>
 80007be:	43fa      	mvns	r2, r7
 80007c0:	28ff      	cmp	r0, #255	; 0xff
 80007c2:	d199      	bne.n	80006f8 <__aeabi_fadd+0x184>
 80007c4:	000a      	movs	r2, r1
 80007c6:	001d      	movs	r5, r3
 80007c8:	24ff      	movs	r4, #255	; 0xff
 80007ca:	e6f1      	b.n	80005b0 <__aeabi_fadd+0x3c>
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d121      	bne.n	8000814 <__aeabi_fadd+0x2a0>
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d04f      	beq.n	8000874 <__aeabi_fadd+0x300>
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d04c      	beq.n	8000872 <__aeabi_fadd+0x2fe>
 80007d8:	18ed      	adds	r5, r5, r3
 80007da:	016b      	lsls	r3, r5, #5
 80007dc:	d59e      	bpl.n	800071c <__aeabi_fadd+0x1a8>
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <__aeabi_fadd+0x330>)
 80007e0:	3607      	adds	r6, #7
 80007e2:	402e      	ands	r6, r5
 80007e4:	2401      	movs	r4, #1
 80007e6:	401d      	ands	r5, r3
 80007e8:	e754      	b.n	8000694 <__aeabi_fadd+0x120>
 80007ea:	2301      	movs	r3, #1
 80007ec:	e718      	b.n	8000620 <__aeabi_fadd+0xac>
 80007ee:	28ff      	cmp	r0, #255	; 0xff
 80007f0:	d0df      	beq.n	80007b2 <__aeabi_fadd+0x23e>
 80007f2:	2480      	movs	r4, #128	; 0x80
 80007f4:	04e4      	lsls	r4, r4, #19
 80007f6:	427f      	negs	r7, r7
 80007f8:	4325      	orrs	r5, r4
 80007fa:	2f1b      	cmp	r7, #27
 80007fc:	dc4d      	bgt.n	800089a <__aeabi_fadd+0x326>
 80007fe:	2620      	movs	r6, #32
 8000800:	1bf6      	subs	r6, r6, r7
 8000802:	002c      	movs	r4, r5
 8000804:	40b5      	lsls	r5, r6
 8000806:	40fc      	lsrs	r4, r7
 8000808:	1e6a      	subs	r2, r5, #1
 800080a:	4195      	sbcs	r5, r2
 800080c:	4325      	orrs	r5, r4
 800080e:	18ed      	adds	r5, r5, r3
 8000810:	0004      	movs	r4, r0
 8000812:	e706      	b.n	8000622 <__aeabi_fadd+0xae>
 8000814:	2d00      	cmp	r5, #0
 8000816:	d0cc      	beq.n	80007b2 <__aeabi_fadd+0x23e>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x2aa>
 800081c:	e753      	b.n	80006c6 <__aeabi_fadd+0x152>
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	4660      	mov	r0, ip
 8000822:	03c9      	lsls	r1, r1, #15
 8000824:	4208      	tst	r0, r1
 8000826:	d003      	beq.n	8000830 <__aeabi_fadd+0x2bc>
 8000828:	4640      	mov	r0, r8
 800082a:	4208      	tst	r0, r1
 800082c:	d100      	bne.n	8000830 <__aeabi_fadd+0x2bc>
 800082e:	001d      	movs	r5, r3
 8000830:	2101      	movs	r1, #1
 8000832:	4011      	ands	r1, r2
 8000834:	e747      	b.n	80006c6 <__aeabi_fadd+0x152>
 8000836:	2b00      	cmp	r3, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x2c8>
 800083a:	e6b9      	b.n	80005b0 <__aeabi_fadd+0x3c>
 800083c:	1aea      	subs	r2, r5, r3
 800083e:	0150      	lsls	r0, r2, #5
 8000840:	d525      	bpl.n	800088e <__aeabi_fadd+0x31a>
 8000842:	2607      	movs	r6, #7
 8000844:	1b5d      	subs	r5, r3, r5
 8000846:	402e      	ands	r6, r5
 8000848:	4689      	mov	r9, r1
 800084a:	e723      	b.n	8000694 <__aeabi_fadd+0x120>
 800084c:	24ff      	movs	r4, #255	; 0xff
 800084e:	2b00      	cmp	r3, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_fadd+0x2e0>
 8000852:	e6ad      	b.n	80005b0 <__aeabi_fadd+0x3c>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	4660      	mov	r0, ip
 8000858:	03d2      	lsls	r2, r2, #15
 800085a:	4210      	tst	r0, r2
 800085c:	d004      	beq.n	8000868 <__aeabi_fadd+0x2f4>
 800085e:	4640      	mov	r0, r8
 8000860:	4210      	tst	r0, r2
 8000862:	d101      	bne.n	8000868 <__aeabi_fadd+0x2f4>
 8000864:	001d      	movs	r5, r3
 8000866:	4689      	mov	r9, r1
 8000868:	2201      	movs	r2, #1
 800086a:	464b      	mov	r3, r9
 800086c:	24ff      	movs	r4, #255	; 0xff
 800086e:	401a      	ands	r2, r3
 8000870:	e69e      	b.n	80005b0 <__aeabi_fadd+0x3c>
 8000872:	002b      	movs	r3, r5
 8000874:	08dd      	lsrs	r5, r3, #3
 8000876:	000a      	movs	r2, r1
 8000878:	2400      	movs	r4, #0
 800087a:	e69d      	b.n	80005b8 <__aeabi_fadd+0x44>
 800087c:	1c7a      	adds	r2, r7, #1
 800087e:	d0c6      	beq.n	800080e <__aeabi_fadd+0x29a>
 8000880:	43ff      	mvns	r7, r7
 8000882:	28ff      	cmp	r0, #255	; 0xff
 8000884:	d1b9      	bne.n	80007fa <__aeabi_fadd+0x286>
 8000886:	001d      	movs	r5, r3
 8000888:	e71d      	b.n	80006c6 <__aeabi_fadd+0x152>
 800088a:	2501      	movs	r5, #1
 800088c:	e73f      	b.n	800070e <__aeabi_fadd+0x19a>
 800088e:	1e15      	subs	r5, r2, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x320>
 8000892:	e744      	b.n	800071e <__aeabi_fadd+0x1aa>
 8000894:	2200      	movs	r2, #0
 8000896:	2300      	movs	r3, #0
 8000898:	e691      	b.n	80005be <__aeabi_fadd+0x4a>
 800089a:	2501      	movs	r5, #1
 800089c:	e7b7      	b.n	800080e <__aeabi_fadd+0x29a>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	7dffffff 	.word	0x7dffffff
 80008a4:	fbffffff 	.word	0xfbffffff

080008a8 <__aeabi_fdiv>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	4657      	mov	r7, sl
 80008ac:	464e      	mov	r6, r9
 80008ae:	4645      	mov	r5, r8
 80008b0:	46de      	mov	lr, fp
 80008b2:	0244      	lsls	r4, r0, #9
 80008b4:	b5e0      	push	{r5, r6, r7, lr}
 80008b6:	0046      	lsls	r6, r0, #1
 80008b8:	4688      	mov	r8, r1
 80008ba:	0a64      	lsrs	r4, r4, #9
 80008bc:	0e36      	lsrs	r6, r6, #24
 80008be:	0fc7      	lsrs	r7, r0, #31
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d063      	beq.n	800098c <__aeabi_fdiv+0xe4>
 80008c4:	2eff      	cmp	r6, #255	; 0xff
 80008c6:	d024      	beq.n	8000912 <__aeabi_fdiv+0x6a>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	00e4      	lsls	r4, r4, #3
 80008cc:	04db      	lsls	r3, r3, #19
 80008ce:	431c      	orrs	r4, r3
 80008d0:	2300      	movs	r3, #0
 80008d2:	4699      	mov	r9, r3
 80008d4:	469b      	mov	fp, r3
 80008d6:	3e7f      	subs	r6, #127	; 0x7f
 80008d8:	4643      	mov	r3, r8
 80008da:	4642      	mov	r2, r8
 80008dc:	025d      	lsls	r5, r3, #9
 80008de:	0fd2      	lsrs	r2, r2, #31
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	0a6d      	lsrs	r5, r5, #9
 80008e4:	0e1b      	lsrs	r3, r3, #24
 80008e6:	4690      	mov	r8, r2
 80008e8:	4692      	mov	sl, r2
 80008ea:	d065      	beq.n	80009b8 <__aeabi_fdiv+0x110>
 80008ec:	2bff      	cmp	r3, #255	; 0xff
 80008ee:	d055      	beq.n	800099c <__aeabi_fdiv+0xf4>
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	2100      	movs	r1, #0
 80008f4:	00ed      	lsls	r5, r5, #3
 80008f6:	04d2      	lsls	r2, r2, #19
 80008f8:	3b7f      	subs	r3, #127	; 0x7f
 80008fa:	4315      	orrs	r5, r2
 80008fc:	1af6      	subs	r6, r6, r3
 80008fe:	4643      	mov	r3, r8
 8000900:	464a      	mov	r2, r9
 8000902:	407b      	eors	r3, r7
 8000904:	2a0f      	cmp	r2, #15
 8000906:	d900      	bls.n	800090a <__aeabi_fdiv+0x62>
 8000908:	e08d      	b.n	8000a26 <__aeabi_fdiv+0x17e>
 800090a:	486d      	ldr	r0, [pc, #436]	; (8000ac0 <__aeabi_fdiv+0x218>)
 800090c:	0092      	lsls	r2, r2, #2
 800090e:	5882      	ldr	r2, [r0, r2]
 8000910:	4697      	mov	pc, r2
 8000912:	2c00      	cmp	r4, #0
 8000914:	d154      	bne.n	80009c0 <__aeabi_fdiv+0x118>
 8000916:	2308      	movs	r3, #8
 8000918:	4699      	mov	r9, r3
 800091a:	3b06      	subs	r3, #6
 800091c:	26ff      	movs	r6, #255	; 0xff
 800091e:	469b      	mov	fp, r3
 8000920:	e7da      	b.n	80008d8 <__aeabi_fdiv+0x30>
 8000922:	2500      	movs	r5, #0
 8000924:	4653      	mov	r3, sl
 8000926:	2902      	cmp	r1, #2
 8000928:	d01b      	beq.n	8000962 <__aeabi_fdiv+0xba>
 800092a:	2903      	cmp	r1, #3
 800092c:	d100      	bne.n	8000930 <__aeabi_fdiv+0x88>
 800092e:	e0bf      	b.n	8000ab0 <__aeabi_fdiv+0x208>
 8000930:	2901      	cmp	r1, #1
 8000932:	d028      	beq.n	8000986 <__aeabi_fdiv+0xde>
 8000934:	0030      	movs	r0, r6
 8000936:	307f      	adds	r0, #127	; 0x7f
 8000938:	2800      	cmp	r0, #0
 800093a:	dd20      	ble.n	800097e <__aeabi_fdiv+0xd6>
 800093c:	076a      	lsls	r2, r5, #29
 800093e:	d004      	beq.n	800094a <__aeabi_fdiv+0xa2>
 8000940:	220f      	movs	r2, #15
 8000942:	402a      	ands	r2, r5
 8000944:	2a04      	cmp	r2, #4
 8000946:	d000      	beq.n	800094a <__aeabi_fdiv+0xa2>
 8000948:	3504      	adds	r5, #4
 800094a:	012a      	lsls	r2, r5, #4
 800094c:	d503      	bpl.n	8000956 <__aeabi_fdiv+0xae>
 800094e:	0030      	movs	r0, r6
 8000950:	4a5c      	ldr	r2, [pc, #368]	; (8000ac4 <__aeabi_fdiv+0x21c>)
 8000952:	3080      	adds	r0, #128	; 0x80
 8000954:	4015      	ands	r5, r2
 8000956:	28fe      	cmp	r0, #254	; 0xfe
 8000958:	dc03      	bgt.n	8000962 <__aeabi_fdiv+0xba>
 800095a:	01ac      	lsls	r4, r5, #6
 800095c:	0a64      	lsrs	r4, r4, #9
 800095e:	b2c2      	uxtb	r2, r0
 8000960:	e001      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000962:	22ff      	movs	r2, #255	; 0xff
 8000964:	2400      	movs	r4, #0
 8000966:	0264      	lsls	r4, r4, #9
 8000968:	05d2      	lsls	r2, r2, #23
 800096a:	0a60      	lsrs	r0, r4, #9
 800096c:	07db      	lsls	r3, r3, #31
 800096e:	4310      	orrs	r0, r2
 8000970:	4318      	orrs	r0, r3
 8000972:	bc3c      	pop	{r2, r3, r4, r5}
 8000974:	4690      	mov	r8, r2
 8000976:	4699      	mov	r9, r3
 8000978:	46a2      	mov	sl, r4
 800097a:	46ab      	mov	fp, r5
 800097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800097e:	2201      	movs	r2, #1
 8000980:	1a10      	subs	r0, r2, r0
 8000982:	281b      	cmp	r0, #27
 8000984:	dd7c      	ble.n	8000a80 <__aeabi_fdiv+0x1d8>
 8000986:	2200      	movs	r2, #0
 8000988:	2400      	movs	r4, #0
 800098a:	e7ec      	b.n	8000966 <__aeabi_fdiv+0xbe>
 800098c:	2c00      	cmp	r4, #0
 800098e:	d11d      	bne.n	80009cc <__aeabi_fdiv+0x124>
 8000990:	2304      	movs	r3, #4
 8000992:	4699      	mov	r9, r3
 8000994:	3b03      	subs	r3, #3
 8000996:	2600      	movs	r6, #0
 8000998:	469b      	mov	fp, r3
 800099a:	e79d      	b.n	80008d8 <__aeabi_fdiv+0x30>
 800099c:	3eff      	subs	r6, #255	; 0xff
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d120      	bne.n	80009e4 <__aeabi_fdiv+0x13c>
 80009a2:	2102      	movs	r1, #2
 80009a4:	4643      	mov	r3, r8
 80009a6:	464a      	mov	r2, r9
 80009a8:	407b      	eors	r3, r7
 80009aa:	430a      	orrs	r2, r1
 80009ac:	2a0f      	cmp	r2, #15
 80009ae:	d8d8      	bhi.n	8000962 <__aeabi_fdiv+0xba>
 80009b0:	4845      	ldr	r0, [pc, #276]	; (8000ac8 <__aeabi_fdiv+0x220>)
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	5882      	ldr	r2, [r0, r2]
 80009b6:	4697      	mov	pc, r2
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d119      	bne.n	80009f0 <__aeabi_fdiv+0x148>
 80009bc:	2101      	movs	r1, #1
 80009be:	e7f1      	b.n	80009a4 <__aeabi_fdiv+0xfc>
 80009c0:	230c      	movs	r3, #12
 80009c2:	4699      	mov	r9, r3
 80009c4:	3b09      	subs	r3, #9
 80009c6:	26ff      	movs	r6, #255	; 0xff
 80009c8:	469b      	mov	fp, r3
 80009ca:	e785      	b.n	80008d8 <__aeabi_fdiv+0x30>
 80009cc:	0020      	movs	r0, r4
 80009ce:	f001 ff6b 	bl	80028a8 <__clzsi2>
 80009d2:	2676      	movs	r6, #118	; 0x76
 80009d4:	1f43      	subs	r3, r0, #5
 80009d6:	409c      	lsls	r4, r3
 80009d8:	2300      	movs	r3, #0
 80009da:	4276      	negs	r6, r6
 80009dc:	1a36      	subs	r6, r6, r0
 80009de:	4699      	mov	r9, r3
 80009e0:	469b      	mov	fp, r3
 80009e2:	e779      	b.n	80008d8 <__aeabi_fdiv+0x30>
 80009e4:	464a      	mov	r2, r9
 80009e6:	2303      	movs	r3, #3
 80009e8:	431a      	orrs	r2, r3
 80009ea:	4691      	mov	r9, r2
 80009ec:	2103      	movs	r1, #3
 80009ee:	e786      	b.n	80008fe <__aeabi_fdiv+0x56>
 80009f0:	0028      	movs	r0, r5
 80009f2:	f001 ff59 	bl	80028a8 <__clzsi2>
 80009f6:	1f43      	subs	r3, r0, #5
 80009f8:	1836      	adds	r6, r6, r0
 80009fa:	409d      	lsls	r5, r3
 80009fc:	3676      	adds	r6, #118	; 0x76
 80009fe:	2100      	movs	r1, #0
 8000a00:	e77d      	b.n	80008fe <__aeabi_fdiv+0x56>
 8000a02:	2480      	movs	r4, #128	; 0x80
 8000a04:	2300      	movs	r3, #0
 8000a06:	03e4      	lsls	r4, r4, #15
 8000a08:	22ff      	movs	r2, #255	; 0xff
 8000a0a:	e7ac      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	03db      	lsls	r3, r3, #15
 8000a12:	421c      	tst	r4, r3
 8000a14:	d028      	beq.n	8000a68 <__aeabi_fdiv+0x1c0>
 8000a16:	421d      	tst	r5, r3
 8000a18:	d126      	bne.n	8000a68 <__aeabi_fdiv+0x1c0>
 8000a1a:	432b      	orrs	r3, r5
 8000a1c:	025c      	lsls	r4, r3, #9
 8000a1e:	0a64      	lsrs	r4, r4, #9
 8000a20:	4643      	mov	r3, r8
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	e79f      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000a26:	0162      	lsls	r2, r4, #5
 8000a28:	016c      	lsls	r4, r5, #5
 8000a2a:	42a2      	cmp	r2, r4
 8000a2c:	d224      	bcs.n	8000a78 <__aeabi_fdiv+0x1d0>
 8000a2e:	211b      	movs	r1, #27
 8000a30:	2500      	movs	r5, #0
 8000a32:	3e01      	subs	r6, #1
 8000a34:	2701      	movs	r7, #1
 8000a36:	0010      	movs	r0, r2
 8000a38:	006d      	lsls	r5, r5, #1
 8000a3a:	0052      	lsls	r2, r2, #1
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	db01      	blt.n	8000a44 <__aeabi_fdiv+0x19c>
 8000a40:	4294      	cmp	r4, r2
 8000a42:	d801      	bhi.n	8000a48 <__aeabi_fdiv+0x1a0>
 8000a44:	1b12      	subs	r2, r2, r4
 8000a46:	433d      	orrs	r5, r7
 8000a48:	3901      	subs	r1, #1
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d1f3      	bne.n	8000a36 <__aeabi_fdiv+0x18e>
 8000a4e:	0014      	movs	r4, r2
 8000a50:	1e62      	subs	r2, r4, #1
 8000a52:	4194      	sbcs	r4, r2
 8000a54:	4325      	orrs	r5, r4
 8000a56:	e76d      	b.n	8000934 <__aeabi_fdiv+0x8c>
 8000a58:	46ba      	mov	sl, r7
 8000a5a:	4659      	mov	r1, fp
 8000a5c:	0025      	movs	r5, r4
 8000a5e:	4653      	mov	r3, sl
 8000a60:	2902      	cmp	r1, #2
 8000a62:	d000      	beq.n	8000a66 <__aeabi_fdiv+0x1be>
 8000a64:	e761      	b.n	800092a <__aeabi_fdiv+0x82>
 8000a66:	e77c      	b.n	8000962 <__aeabi_fdiv+0xba>
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	03db      	lsls	r3, r3, #15
 8000a6c:	431c      	orrs	r4, r3
 8000a6e:	0264      	lsls	r4, r4, #9
 8000a70:	0a64      	lsrs	r4, r4, #9
 8000a72:	003b      	movs	r3, r7
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	e776      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000a78:	1b12      	subs	r2, r2, r4
 8000a7a:	211a      	movs	r1, #26
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	e7d9      	b.n	8000a34 <__aeabi_fdiv+0x18c>
 8000a80:	369e      	adds	r6, #158	; 0x9e
 8000a82:	002a      	movs	r2, r5
 8000a84:	40b5      	lsls	r5, r6
 8000a86:	002c      	movs	r4, r5
 8000a88:	40c2      	lsrs	r2, r0
 8000a8a:	1e65      	subs	r5, r4, #1
 8000a8c:	41ac      	sbcs	r4, r5
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	0762      	lsls	r2, r4, #29
 8000a92:	d004      	beq.n	8000a9e <__aeabi_fdiv+0x1f6>
 8000a94:	220f      	movs	r2, #15
 8000a96:	4022      	ands	r2, r4
 8000a98:	2a04      	cmp	r2, #4
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fdiv+0x1f6>
 8000a9c:	3404      	adds	r4, #4
 8000a9e:	0162      	lsls	r2, r4, #5
 8000aa0:	d403      	bmi.n	8000aaa <__aeabi_fdiv+0x202>
 8000aa2:	01a4      	lsls	r4, r4, #6
 8000aa4:	0a64      	lsrs	r4, r4, #9
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e75d      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2400      	movs	r4, #0
 8000aae:	e75a      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000ab0:	2480      	movs	r4, #128	; 0x80
 8000ab2:	03e4      	lsls	r4, r4, #15
 8000ab4:	432c      	orrs	r4, r5
 8000ab6:	0264      	lsls	r4, r4, #9
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	22ff      	movs	r2, #255	; 0xff
 8000abc:	e753      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	08008b5c 	.word	0x08008b5c
 8000ac4:	f7ffffff 	.word	0xf7ffffff
 8000ac8:	08008b9c 	.word	0x08008b9c

08000acc <__eqsf2>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	0042      	lsls	r2, r0, #1
 8000ad0:	024e      	lsls	r6, r1, #9
 8000ad2:	004c      	lsls	r4, r1, #1
 8000ad4:	0245      	lsls	r5, r0, #9
 8000ad6:	0a6d      	lsrs	r5, r5, #9
 8000ad8:	0e12      	lsrs	r2, r2, #24
 8000ada:	0fc3      	lsrs	r3, r0, #31
 8000adc:	0a76      	lsrs	r6, r6, #9
 8000ade:	0e24      	lsrs	r4, r4, #24
 8000ae0:	0fc9      	lsrs	r1, r1, #31
 8000ae2:	2aff      	cmp	r2, #255	; 0xff
 8000ae4:	d00f      	beq.n	8000b06 <__eqsf2+0x3a>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d011      	beq.n	8000b0e <__eqsf2+0x42>
 8000aea:	2001      	movs	r0, #1
 8000aec:	42a2      	cmp	r2, r4
 8000aee:	d000      	beq.n	8000af2 <__eqsf2+0x26>
 8000af0:	bd70      	pop	{r4, r5, r6, pc}
 8000af2:	42b5      	cmp	r5, r6
 8000af4:	d1fc      	bne.n	8000af0 <__eqsf2+0x24>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d00d      	beq.n	8000b16 <__eqsf2+0x4a>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d1f8      	bne.n	8000af0 <__eqsf2+0x24>
 8000afe:	0028      	movs	r0, r5
 8000b00:	1e45      	subs	r5, r0, #1
 8000b02:	41a8      	sbcs	r0, r5
 8000b04:	e7f4      	b.n	8000af0 <__eqsf2+0x24>
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d1f1      	bne.n	8000af0 <__eqsf2+0x24>
 8000b0c:	e7eb      	b.n	8000ae6 <__eqsf2+0x1a>
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d1ed      	bne.n	8000af0 <__eqsf2+0x24>
 8000b14:	e7e9      	b.n	8000aea <__eqsf2+0x1e>
 8000b16:	2000      	movs	r0, #0
 8000b18:	e7ea      	b.n	8000af0 <__eqsf2+0x24>
 8000b1a:	46c0      	nop			; (mov r8, r8)

08000b1c <__gesf2>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	004a      	lsls	r2, r1, #1
 8000b20:	024e      	lsls	r6, r1, #9
 8000b22:	0245      	lsls	r5, r0, #9
 8000b24:	0044      	lsls	r4, r0, #1
 8000b26:	0a6d      	lsrs	r5, r5, #9
 8000b28:	0e24      	lsrs	r4, r4, #24
 8000b2a:	0fc3      	lsrs	r3, r0, #31
 8000b2c:	0a76      	lsrs	r6, r6, #9
 8000b2e:	0e12      	lsrs	r2, r2, #24
 8000b30:	0fc9      	lsrs	r1, r1, #31
 8000b32:	2cff      	cmp	r4, #255	; 0xff
 8000b34:	d015      	beq.n	8000b62 <__gesf2+0x46>
 8000b36:	2aff      	cmp	r2, #255	; 0xff
 8000b38:	d00e      	beq.n	8000b58 <__gesf2+0x3c>
 8000b3a:	2c00      	cmp	r4, #0
 8000b3c:	d115      	bne.n	8000b6a <__gesf2+0x4e>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d101      	bne.n	8000b46 <__gesf2+0x2a>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d01c      	beq.n	8000b80 <__gesf2+0x64>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d014      	beq.n	8000b74 <__gesf2+0x58>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d027      	beq.n	8000b9e <__gesf2+0x82>
 8000b4e:	2002      	movs	r0, #2
 8000b50:	3b01      	subs	r3, #1
 8000b52:	4018      	ands	r0, r3
 8000b54:	3801      	subs	r0, #1
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
 8000b58:	2e00      	cmp	r6, #0
 8000b5a:	d0ee      	beq.n	8000b3a <__gesf2+0x1e>
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	4240      	negs	r0, r0
 8000b60:	e7f9      	b.n	8000b56 <__gesf2+0x3a>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d1fa      	bne.n	8000b5c <__gesf2+0x40>
 8000b66:	2aff      	cmp	r2, #255	; 0xff
 8000b68:	d00e      	beq.n	8000b88 <__gesf2+0x6c>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d10e      	bne.n	8000b8c <__gesf2+0x70>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d0ed      	beq.n	8000b4e <__gesf2+0x32>
 8000b72:	e00b      	b.n	8000b8c <__gesf2+0x70>
 8000b74:	2301      	movs	r3, #1
 8000b76:	3901      	subs	r1, #1
 8000b78:	4399      	bics	r1, r3
 8000b7a:	0008      	movs	r0, r1
 8000b7c:	3001      	adds	r0, #1
 8000b7e:	e7ea      	b.n	8000b56 <__gesf2+0x3a>
 8000b80:	2000      	movs	r0, #0
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d0e7      	beq.n	8000b56 <__gesf2+0x3a>
 8000b86:	e7e2      	b.n	8000b4e <__gesf2+0x32>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d1e7      	bne.n	8000b5c <__gesf2+0x40>
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d1de      	bne.n	8000b4e <__gesf2+0x32>
 8000b90:	4294      	cmp	r4, r2
 8000b92:	dd05      	ble.n	8000ba0 <__gesf2+0x84>
 8000b94:	2102      	movs	r1, #2
 8000b96:	1e58      	subs	r0, r3, #1
 8000b98:	4008      	ands	r0, r1
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	e7db      	b.n	8000b56 <__gesf2+0x3a>
 8000b9e:	2400      	movs	r4, #0
 8000ba0:	42a2      	cmp	r2, r4
 8000ba2:	dc04      	bgt.n	8000bae <__gesf2+0x92>
 8000ba4:	42b5      	cmp	r5, r6
 8000ba6:	d8d2      	bhi.n	8000b4e <__gesf2+0x32>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	42b5      	cmp	r5, r6
 8000bac:	d2d3      	bcs.n	8000b56 <__gesf2+0x3a>
 8000bae:	1e58      	subs	r0, r3, #1
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4398      	bics	r0, r3
 8000bb4:	3001      	adds	r0, #1
 8000bb6:	e7ce      	b.n	8000b56 <__gesf2+0x3a>

08000bb8 <__lesf2>:
 8000bb8:	b530      	push	{r4, r5, lr}
 8000bba:	0042      	lsls	r2, r0, #1
 8000bbc:	0244      	lsls	r4, r0, #9
 8000bbe:	024d      	lsls	r5, r1, #9
 8000bc0:	0fc3      	lsrs	r3, r0, #31
 8000bc2:	0048      	lsls	r0, r1, #1
 8000bc4:	0a64      	lsrs	r4, r4, #9
 8000bc6:	0e12      	lsrs	r2, r2, #24
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e00      	lsrs	r0, r0, #24
 8000bcc:	0fc9      	lsrs	r1, r1, #31
 8000bce:	2aff      	cmp	r2, #255	; 0xff
 8000bd0:	d012      	beq.n	8000bf8 <__lesf2+0x40>
 8000bd2:	28ff      	cmp	r0, #255	; 0xff
 8000bd4:	d00c      	beq.n	8000bf0 <__lesf2+0x38>
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d112      	bne.n	8000c00 <__lesf2+0x48>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d119      	bne.n	8000c12 <__lesf2+0x5a>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d117      	bne.n	8000c12 <__lesf2+0x5a>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d02b      	beq.n	8000c3e <__lesf2+0x86>
 8000be6:	2002      	movs	r0, #2
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4018      	ands	r0, r3
 8000bec:	3801      	subs	r0, #1
 8000bee:	e026      	b.n	8000c3e <__lesf2+0x86>
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0f0      	beq.n	8000bd6 <__lesf2+0x1e>
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	e022      	b.n	8000c3e <__lesf2+0x86>
 8000bf8:	2c00      	cmp	r4, #0
 8000bfa:	d1fb      	bne.n	8000bf4 <__lesf2+0x3c>
 8000bfc:	28ff      	cmp	r0, #255	; 0xff
 8000bfe:	d01f      	beq.n	8000c40 <__lesf2+0x88>
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d11f      	bne.n	8000c44 <__lesf2+0x8c>
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d11d      	bne.n	8000c44 <__lesf2+0x8c>
 8000c08:	2002      	movs	r0, #2
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	4018      	ands	r0, r3
 8000c0e:	3801      	subs	r0, #1
 8000c10:	e015      	b.n	8000c3e <__lesf2+0x86>
 8000c12:	2c00      	cmp	r4, #0
 8000c14:	d00e      	beq.n	8000c34 <__lesf2+0x7c>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d1e5      	bne.n	8000be6 <__lesf2+0x2e>
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	dc04      	bgt.n	8000c2a <__lesf2+0x72>
 8000c20:	42ac      	cmp	r4, r5
 8000c22:	d8e0      	bhi.n	8000be6 <__lesf2+0x2e>
 8000c24:	2000      	movs	r0, #0
 8000c26:	42ac      	cmp	r4, r5
 8000c28:	d209      	bcs.n	8000c3e <__lesf2+0x86>
 8000c2a:	1e58      	subs	r0, r3, #1
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	4398      	bics	r0, r3
 8000c30:	3001      	adds	r0, #1
 8000c32:	e004      	b.n	8000c3e <__lesf2+0x86>
 8000c34:	2301      	movs	r3, #1
 8000c36:	3901      	subs	r1, #1
 8000c38:	4399      	bics	r1, r3
 8000c3a:	0008      	movs	r0, r1
 8000c3c:	3001      	adds	r0, #1
 8000c3e:	bd30      	pop	{r4, r5, pc}
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d1d7      	bne.n	8000bf4 <__lesf2+0x3c>
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d1ce      	bne.n	8000be6 <__lesf2+0x2e>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	dde7      	ble.n	8000c1c <__lesf2+0x64>
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	1e58      	subs	r0, r3, #1
 8000c50:	4008      	ands	r0, r1
 8000c52:	3801      	subs	r0, #1
 8000c54:	e7f3      	b.n	8000c3e <__lesf2+0x86>
 8000c56:	46c0      	nop			; (mov r8, r8)

08000c58 <__aeabi_f2iz>:
 8000c58:	0241      	lsls	r1, r0, #9
 8000c5a:	0042      	lsls	r2, r0, #1
 8000c5c:	0fc3      	lsrs	r3, r0, #31
 8000c5e:	0a49      	lsrs	r1, r1, #9
 8000c60:	0e12      	lsrs	r2, r2, #24
 8000c62:	2000      	movs	r0, #0
 8000c64:	2a7e      	cmp	r2, #126	; 0x7e
 8000c66:	d90d      	bls.n	8000c84 <__aeabi_f2iz+0x2c>
 8000c68:	2a9d      	cmp	r2, #157	; 0x9d
 8000c6a:	d80c      	bhi.n	8000c86 <__aeabi_f2iz+0x2e>
 8000c6c:	2080      	movs	r0, #128	; 0x80
 8000c6e:	0400      	lsls	r0, r0, #16
 8000c70:	4301      	orrs	r1, r0
 8000c72:	2a95      	cmp	r2, #149	; 0x95
 8000c74:	dc0a      	bgt.n	8000c8c <__aeabi_f2iz+0x34>
 8000c76:	2096      	movs	r0, #150	; 0x96
 8000c78:	1a82      	subs	r2, r0, r2
 8000c7a:	40d1      	lsrs	r1, r2
 8000c7c:	4248      	negs	r0, r1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d100      	bne.n	8000c84 <__aeabi_f2iz+0x2c>
 8000c82:	0008      	movs	r0, r1
 8000c84:	4770      	bx	lr
 8000c86:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <__aeabi_f2iz+0x3c>)
 8000c88:	1898      	adds	r0, r3, r2
 8000c8a:	e7fb      	b.n	8000c84 <__aeabi_f2iz+0x2c>
 8000c8c:	3a96      	subs	r2, #150	; 0x96
 8000c8e:	4091      	lsls	r1, r2
 8000c90:	e7f4      	b.n	8000c7c <__aeabi_f2iz+0x24>
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	7fffffff 	.word	0x7fffffff

08000c98 <__aeabi_i2f>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d03d      	beq.n	8000d1a <__aeabi_i2f+0x82>
 8000c9e:	17c3      	asrs	r3, r0, #31
 8000ca0:	18c5      	adds	r5, r0, r3
 8000ca2:	405d      	eors	r5, r3
 8000ca4:	0fc4      	lsrs	r4, r0, #31
 8000ca6:	0028      	movs	r0, r5
 8000ca8:	f001 fdfe 	bl	80028a8 <__clzsi2>
 8000cac:	229e      	movs	r2, #158	; 0x9e
 8000cae:	1a12      	subs	r2, r2, r0
 8000cb0:	2a96      	cmp	r2, #150	; 0x96
 8000cb2:	dc07      	bgt.n	8000cc4 <__aeabi_i2f+0x2c>
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	2808      	cmp	r0, #8
 8000cb8:	dd33      	ble.n	8000d22 <__aeabi_i2f+0x8a>
 8000cba:	3808      	subs	r0, #8
 8000cbc:	4085      	lsls	r5, r0
 8000cbe:	0268      	lsls	r0, r5, #9
 8000cc0:	0a40      	lsrs	r0, r0, #9
 8000cc2:	e023      	b.n	8000d0c <__aeabi_i2f+0x74>
 8000cc4:	2a99      	cmp	r2, #153	; 0x99
 8000cc6:	dd0b      	ble.n	8000ce0 <__aeabi_i2f+0x48>
 8000cc8:	2305      	movs	r3, #5
 8000cca:	0029      	movs	r1, r5
 8000ccc:	1a1b      	subs	r3, r3, r0
 8000cce:	40d9      	lsrs	r1, r3
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	331b      	adds	r3, #27
 8000cd4:	409d      	lsls	r5, r3
 8000cd6:	002b      	movs	r3, r5
 8000cd8:	1e5d      	subs	r5, r3, #1
 8000cda:	41ab      	sbcs	r3, r5
 8000cdc:	4319      	orrs	r1, r3
 8000cde:	000d      	movs	r5, r1
 8000ce0:	2805      	cmp	r0, #5
 8000ce2:	dd01      	ble.n	8000ce8 <__aeabi_i2f+0x50>
 8000ce4:	1f43      	subs	r3, r0, #5
 8000ce6:	409d      	lsls	r5, r3
 8000ce8:	002b      	movs	r3, r5
 8000cea:	490f      	ldr	r1, [pc, #60]	; (8000d28 <__aeabi_i2f+0x90>)
 8000cec:	400b      	ands	r3, r1
 8000cee:	076e      	lsls	r6, r5, #29
 8000cf0:	d009      	beq.n	8000d06 <__aeabi_i2f+0x6e>
 8000cf2:	260f      	movs	r6, #15
 8000cf4:	4035      	ands	r5, r6
 8000cf6:	2d04      	cmp	r5, #4
 8000cf8:	d005      	beq.n	8000d06 <__aeabi_i2f+0x6e>
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	015d      	lsls	r5, r3, #5
 8000cfe:	d502      	bpl.n	8000d06 <__aeabi_i2f+0x6e>
 8000d00:	229f      	movs	r2, #159	; 0x9f
 8000d02:	400b      	ands	r3, r1
 8000d04:	1a12      	subs	r2, r2, r0
 8000d06:	019b      	lsls	r3, r3, #6
 8000d08:	0a58      	lsrs	r0, r3, #9
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	0240      	lsls	r0, r0, #9
 8000d0e:	05d2      	lsls	r2, r2, #23
 8000d10:	0a40      	lsrs	r0, r0, #9
 8000d12:	07e4      	lsls	r4, r4, #31
 8000d14:	4310      	orrs	r0, r2
 8000d16:	4320      	orrs	r0, r4
 8000d18:	bd70      	pop	{r4, r5, r6, pc}
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2000      	movs	r0, #0
 8000d20:	e7f4      	b.n	8000d0c <__aeabi_i2f+0x74>
 8000d22:	0268      	lsls	r0, r5, #9
 8000d24:	0a40      	lsrs	r0, r0, #9
 8000d26:	e7f1      	b.n	8000d0c <__aeabi_i2f+0x74>
 8000d28:	fbffffff 	.word	0xfbffffff

08000d2c <__aeabi_dadd>:
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	464f      	mov	r7, r9
 8000d30:	4646      	mov	r6, r8
 8000d32:	46d6      	mov	lr, sl
 8000d34:	000c      	movs	r4, r1
 8000d36:	0309      	lsls	r1, r1, #12
 8000d38:	b5c0      	push	{r6, r7, lr}
 8000d3a:	0a49      	lsrs	r1, r1, #9
 8000d3c:	0f47      	lsrs	r7, r0, #29
 8000d3e:	005e      	lsls	r6, r3, #1
 8000d40:	4339      	orrs	r1, r7
 8000d42:	031f      	lsls	r7, r3, #12
 8000d44:	0fdb      	lsrs	r3, r3, #31
 8000d46:	469c      	mov	ip, r3
 8000d48:	0065      	lsls	r5, r4, #1
 8000d4a:	0a7b      	lsrs	r3, r7, #9
 8000d4c:	0f57      	lsrs	r7, r2, #29
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	0d6d      	lsrs	r5, r5, #21
 8000d52:	0fe4      	lsrs	r4, r4, #31
 8000d54:	0d76      	lsrs	r6, r6, #21
 8000d56:	46a1      	mov	r9, r4
 8000d58:	00c0      	lsls	r0, r0, #3
 8000d5a:	46b8      	mov	r8, r7
 8000d5c:	00d2      	lsls	r2, r2, #3
 8000d5e:	1bab      	subs	r3, r5, r6
 8000d60:	4564      	cmp	r4, ip
 8000d62:	d07b      	beq.n	8000e5c <__aeabi_dadd+0x130>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	dd5f      	ble.n	8000e28 <__aeabi_dadd+0xfc>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_dadd+0x42>
 8000d6c:	e0a4      	b.n	8000eb8 <__aeabi_dadd+0x18c>
 8000d6e:	003e      	movs	r6, r7
 8000d70:	4316      	orrs	r6, r2
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dadd+0x4a>
 8000d74:	e112      	b.n	8000f9c <__aeabi_dadd+0x270>
 8000d76:	1e5e      	subs	r6, r3, #1
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d000      	beq.n	8000d7e <__aeabi_dadd+0x52>
 8000d7c:	e19e      	b.n	80010bc <__aeabi_dadd+0x390>
 8000d7e:	1a87      	subs	r7, r0, r2
 8000d80:	4643      	mov	r3, r8
 8000d82:	42b8      	cmp	r0, r7
 8000d84:	4180      	sbcs	r0, r0
 8000d86:	2501      	movs	r5, #1
 8000d88:	1ac9      	subs	r1, r1, r3
 8000d8a:	4240      	negs	r0, r0
 8000d8c:	1a09      	subs	r1, r1, r0
 8000d8e:	020b      	lsls	r3, r1, #8
 8000d90:	d400      	bmi.n	8000d94 <__aeabi_dadd+0x68>
 8000d92:	e131      	b.n	8000ff8 <__aeabi_dadd+0x2cc>
 8000d94:	0249      	lsls	r1, r1, #9
 8000d96:	0a4e      	lsrs	r6, r1, #9
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dadd+0x72>
 8000d9c:	e16e      	b.n	800107c <__aeabi_dadd+0x350>
 8000d9e:	0030      	movs	r0, r6
 8000da0:	f001 fd82 	bl	80028a8 <__clzsi2>
 8000da4:	0003      	movs	r3, r0
 8000da6:	3b08      	subs	r3, #8
 8000da8:	2b1f      	cmp	r3, #31
 8000daa:	dd00      	ble.n	8000dae <__aeabi_dadd+0x82>
 8000dac:	e161      	b.n	8001072 <__aeabi_dadd+0x346>
 8000dae:	2220      	movs	r2, #32
 8000db0:	0039      	movs	r1, r7
 8000db2:	1ad2      	subs	r2, r2, r3
 8000db4:	409e      	lsls	r6, r3
 8000db6:	40d1      	lsrs	r1, r2
 8000db8:	409f      	lsls	r7, r3
 8000dba:	430e      	orrs	r6, r1
 8000dbc:	429d      	cmp	r5, r3
 8000dbe:	dd00      	ble.n	8000dc2 <__aeabi_dadd+0x96>
 8000dc0:	e151      	b.n	8001066 <__aeabi_dadd+0x33a>
 8000dc2:	1b5d      	subs	r5, r3, r5
 8000dc4:	1c6b      	adds	r3, r5, #1
 8000dc6:	2b1f      	cmp	r3, #31
 8000dc8:	dd00      	ble.n	8000dcc <__aeabi_dadd+0xa0>
 8000dca:	e17c      	b.n	80010c6 <__aeabi_dadd+0x39a>
 8000dcc:	2120      	movs	r1, #32
 8000dce:	1ac9      	subs	r1, r1, r3
 8000dd0:	003d      	movs	r5, r7
 8000dd2:	0030      	movs	r0, r6
 8000dd4:	408f      	lsls	r7, r1
 8000dd6:	4088      	lsls	r0, r1
 8000dd8:	40dd      	lsrs	r5, r3
 8000dda:	1e79      	subs	r1, r7, #1
 8000ddc:	418f      	sbcs	r7, r1
 8000dde:	0031      	movs	r1, r6
 8000de0:	2207      	movs	r2, #7
 8000de2:	4328      	orrs	r0, r5
 8000de4:	40d9      	lsrs	r1, r3
 8000de6:	2500      	movs	r5, #0
 8000de8:	4307      	orrs	r7, r0
 8000dea:	403a      	ands	r2, r7
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d009      	beq.n	8000e04 <__aeabi_dadd+0xd8>
 8000df0:	230f      	movs	r3, #15
 8000df2:	403b      	ands	r3, r7
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d005      	beq.n	8000e04 <__aeabi_dadd+0xd8>
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	42bb      	cmp	r3, r7
 8000dfc:	41bf      	sbcs	r7, r7
 8000dfe:	427f      	negs	r7, r7
 8000e00:	19c9      	adds	r1, r1, r7
 8000e02:	001f      	movs	r7, r3
 8000e04:	020b      	lsls	r3, r1, #8
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_dadd+0xde>
 8000e08:	e226      	b.n	8001258 <__aeabi_dadd+0x52c>
 8000e0a:	1c6a      	adds	r2, r5, #1
 8000e0c:	4bc6      	ldr	r3, [pc, #792]	; (8001128 <__aeabi_dadd+0x3fc>)
 8000e0e:	0555      	lsls	r5, r2, #21
 8000e10:	0d6d      	lsrs	r5, r5, #21
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dadd+0xec>
 8000e16:	e106      	b.n	8001026 <__aeabi_dadd+0x2fa>
 8000e18:	4ac4      	ldr	r2, [pc, #784]	; (800112c <__aeabi_dadd+0x400>)
 8000e1a:	08ff      	lsrs	r7, r7, #3
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	0753      	lsls	r3, r2, #29
 8000e20:	0252      	lsls	r2, r2, #9
 8000e22:	433b      	orrs	r3, r7
 8000e24:	0b12      	lsrs	r2, r2, #12
 8000e26:	e08e      	b.n	8000f46 <__aeabi_dadd+0x21a>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d000      	beq.n	8000e2e <__aeabi_dadd+0x102>
 8000e2c:	e0b8      	b.n	8000fa0 <__aeabi_dadd+0x274>
 8000e2e:	1c6b      	adds	r3, r5, #1
 8000e30:	055b      	lsls	r3, r3, #21
 8000e32:	0d5b      	lsrs	r3, r3, #21
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	dc00      	bgt.n	8000e3a <__aeabi_dadd+0x10e>
 8000e38:	e130      	b.n	800109c <__aeabi_dadd+0x370>
 8000e3a:	1a87      	subs	r7, r0, r2
 8000e3c:	4643      	mov	r3, r8
 8000e3e:	42b8      	cmp	r0, r7
 8000e40:	41b6      	sbcs	r6, r6
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	4276      	negs	r6, r6
 8000e46:	1b9e      	subs	r6, r3, r6
 8000e48:	0233      	lsls	r3, r6, #8
 8000e4a:	d500      	bpl.n	8000e4e <__aeabi_dadd+0x122>
 8000e4c:	e14c      	b.n	80010e8 <__aeabi_dadd+0x3bc>
 8000e4e:	003b      	movs	r3, r7
 8000e50:	4333      	orrs	r3, r6
 8000e52:	d1a1      	bne.n	8000d98 <__aeabi_dadd+0x6c>
 8000e54:	2200      	movs	r2, #0
 8000e56:	2400      	movs	r4, #0
 8000e58:	2500      	movs	r5, #0
 8000e5a:	e070      	b.n	8000f3e <__aeabi_dadd+0x212>
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	dc00      	bgt.n	8000e62 <__aeabi_dadd+0x136>
 8000e60:	e0e5      	b.n	800102e <__aeabi_dadd+0x302>
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dadd+0x13c>
 8000e66:	e083      	b.n	8000f70 <__aeabi_dadd+0x244>
 8000e68:	4eaf      	ldr	r6, [pc, #700]	; (8001128 <__aeabi_dadd+0x3fc>)
 8000e6a:	42b5      	cmp	r5, r6
 8000e6c:	d060      	beq.n	8000f30 <__aeabi_dadd+0x204>
 8000e6e:	2680      	movs	r6, #128	; 0x80
 8000e70:	0436      	lsls	r6, r6, #16
 8000e72:	4337      	orrs	r7, r6
 8000e74:	46b8      	mov	r8, r7
 8000e76:	2b38      	cmp	r3, #56	; 0x38
 8000e78:	dc00      	bgt.n	8000e7c <__aeabi_dadd+0x150>
 8000e7a:	e13e      	b.n	80010fa <__aeabi_dadd+0x3ce>
 8000e7c:	4643      	mov	r3, r8
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	001f      	movs	r7, r3
 8000e82:	1e7a      	subs	r2, r7, #1
 8000e84:	4197      	sbcs	r7, r2
 8000e86:	183f      	adds	r7, r7, r0
 8000e88:	4287      	cmp	r7, r0
 8000e8a:	4180      	sbcs	r0, r0
 8000e8c:	4240      	negs	r0, r0
 8000e8e:	1809      	adds	r1, r1, r0
 8000e90:	020b      	lsls	r3, r1, #8
 8000e92:	d400      	bmi.n	8000e96 <__aeabi_dadd+0x16a>
 8000e94:	e0b0      	b.n	8000ff8 <__aeabi_dadd+0x2cc>
 8000e96:	4ba4      	ldr	r3, [pc, #656]	; (8001128 <__aeabi_dadd+0x3fc>)
 8000e98:	3501      	adds	r5, #1
 8000e9a:	429d      	cmp	r5, r3
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dadd+0x174>
 8000e9e:	e0c3      	b.n	8001028 <__aeabi_dadd+0x2fc>
 8000ea0:	4aa2      	ldr	r2, [pc, #648]	; (800112c <__aeabi_dadd+0x400>)
 8000ea2:	087b      	lsrs	r3, r7, #1
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	400f      	ands	r7, r1
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	0851      	lsrs	r1, r2, #1
 8000eae:	07d3      	lsls	r3, r2, #31
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	403a      	ands	r2, r7
 8000eb6:	e799      	b.n	8000dec <__aeabi_dadd+0xc0>
 8000eb8:	4e9b      	ldr	r6, [pc, #620]	; (8001128 <__aeabi_dadd+0x3fc>)
 8000eba:	42b5      	cmp	r5, r6
 8000ebc:	d038      	beq.n	8000f30 <__aeabi_dadd+0x204>
 8000ebe:	2680      	movs	r6, #128	; 0x80
 8000ec0:	0436      	lsls	r6, r6, #16
 8000ec2:	4337      	orrs	r7, r6
 8000ec4:	46b8      	mov	r8, r7
 8000ec6:	2b38      	cmp	r3, #56	; 0x38
 8000ec8:	dd00      	ble.n	8000ecc <__aeabi_dadd+0x1a0>
 8000eca:	e0dc      	b.n	8001086 <__aeabi_dadd+0x35a>
 8000ecc:	2b1f      	cmp	r3, #31
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_dadd+0x1a6>
 8000ed0:	e130      	b.n	8001134 <__aeabi_dadd+0x408>
 8000ed2:	001e      	movs	r6, r3
 8000ed4:	4647      	mov	r7, r8
 8000ed6:	3e20      	subs	r6, #32
 8000ed8:	40f7      	lsrs	r7, r6
 8000eda:	46bc      	mov	ip, r7
 8000edc:	2b20      	cmp	r3, #32
 8000ede:	d004      	beq.n	8000eea <__aeabi_dadd+0x1be>
 8000ee0:	2640      	movs	r6, #64	; 0x40
 8000ee2:	1af3      	subs	r3, r6, r3
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	409e      	lsls	r6, r3
 8000ee8:	4332      	orrs	r2, r6
 8000eea:	0017      	movs	r7, r2
 8000eec:	4663      	mov	r3, ip
 8000eee:	1e7a      	subs	r2, r7, #1
 8000ef0:	4197      	sbcs	r7, r2
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	e0cc      	b.n	8001090 <__aeabi_dadd+0x364>
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dadd+0x1d0>
 8000efa:	e204      	b.n	8001306 <__aeabi_dadd+0x5da>
 8000efc:	4643      	mov	r3, r8
 8000efe:	4313      	orrs	r3, r2
 8000f00:	d100      	bne.n	8000f04 <__aeabi_dadd+0x1d8>
 8000f02:	e159      	b.n	80011b8 <__aeabi_dadd+0x48c>
 8000f04:	074b      	lsls	r3, r1, #29
 8000f06:	08c0      	lsrs	r0, r0, #3
 8000f08:	4318      	orrs	r0, r3
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	08c9      	lsrs	r1, r1, #3
 8000f0e:	031b      	lsls	r3, r3, #12
 8000f10:	4219      	tst	r1, r3
 8000f12:	d008      	beq.n	8000f26 <__aeabi_dadd+0x1fa>
 8000f14:	4645      	mov	r5, r8
 8000f16:	08ed      	lsrs	r5, r5, #3
 8000f18:	421d      	tst	r5, r3
 8000f1a:	d104      	bne.n	8000f26 <__aeabi_dadd+0x1fa>
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	08d0      	lsrs	r0, r2, #3
 8000f20:	0759      	lsls	r1, r3, #29
 8000f22:	4308      	orrs	r0, r1
 8000f24:	0029      	movs	r1, r5
 8000f26:	0f42      	lsrs	r2, r0, #29
 8000f28:	00c9      	lsls	r1, r1, #3
 8000f2a:	4d7f      	ldr	r5, [pc, #508]	; (8001128 <__aeabi_dadd+0x3fc>)
 8000f2c:	4311      	orrs	r1, r2
 8000f2e:	00c0      	lsls	r0, r0, #3
 8000f30:	074b      	lsls	r3, r1, #29
 8000f32:	08ca      	lsrs	r2, r1, #3
 8000f34:	497c      	ldr	r1, [pc, #496]	; (8001128 <__aeabi_dadd+0x3fc>)
 8000f36:	08c0      	lsrs	r0, r0, #3
 8000f38:	4303      	orrs	r3, r0
 8000f3a:	428d      	cmp	r5, r1
 8000f3c:	d068      	beq.n	8001010 <__aeabi_dadd+0x2e4>
 8000f3e:	0312      	lsls	r2, r2, #12
 8000f40:	056d      	lsls	r5, r5, #21
 8000f42:	0b12      	lsrs	r2, r2, #12
 8000f44:	0d6d      	lsrs	r5, r5, #21
 8000f46:	2100      	movs	r1, #0
 8000f48:	0312      	lsls	r2, r2, #12
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	0b13      	lsrs	r3, r2, #12
 8000f4e:	0d0a      	lsrs	r2, r1, #20
 8000f50:	0512      	lsls	r2, r2, #20
 8000f52:	431a      	orrs	r2, r3
 8000f54:	4b76      	ldr	r3, [pc, #472]	; (8001130 <__aeabi_dadd+0x404>)
 8000f56:	052d      	lsls	r5, r5, #20
 8000f58:	4013      	ands	r3, r2
 8000f5a:	432b      	orrs	r3, r5
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	07e4      	lsls	r4, r4, #31
 8000f60:	085b      	lsrs	r3, r3, #1
 8000f62:	4323      	orrs	r3, r4
 8000f64:	0019      	movs	r1, r3
 8000f66:	bc1c      	pop	{r2, r3, r4}
 8000f68:	4690      	mov	r8, r2
 8000f6a:	4699      	mov	r9, r3
 8000f6c:	46a2      	mov	sl, r4
 8000f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f70:	003e      	movs	r6, r7
 8000f72:	4316      	orrs	r6, r2
 8000f74:	d012      	beq.n	8000f9c <__aeabi_dadd+0x270>
 8000f76:	1e5e      	subs	r6, r3, #1
 8000f78:	2e00      	cmp	r6, #0
 8000f7a:	d000      	beq.n	8000f7e <__aeabi_dadd+0x252>
 8000f7c:	e100      	b.n	8001180 <__aeabi_dadd+0x454>
 8000f7e:	1887      	adds	r7, r0, r2
 8000f80:	4287      	cmp	r7, r0
 8000f82:	4180      	sbcs	r0, r0
 8000f84:	4441      	add	r1, r8
 8000f86:	4240      	negs	r0, r0
 8000f88:	1809      	adds	r1, r1, r0
 8000f8a:	2501      	movs	r5, #1
 8000f8c:	020b      	lsls	r3, r1, #8
 8000f8e:	d533      	bpl.n	8000ff8 <__aeabi_dadd+0x2cc>
 8000f90:	2502      	movs	r5, #2
 8000f92:	e785      	b.n	8000ea0 <__aeabi_dadd+0x174>
 8000f94:	4664      	mov	r4, ip
 8000f96:	0033      	movs	r3, r6
 8000f98:	4641      	mov	r1, r8
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	001d      	movs	r5, r3
 8000f9e:	e7c7      	b.n	8000f30 <__aeabi_dadd+0x204>
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_dadd+0x27a>
 8000fa4:	e0da      	b.n	800115c <__aeabi_dadd+0x430>
 8000fa6:	000c      	movs	r4, r1
 8000fa8:	4304      	orrs	r4, r0
 8000faa:	d0f3      	beq.n	8000f94 <__aeabi_dadd+0x268>
 8000fac:	1c5c      	adds	r4, r3, #1
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dadd+0x286>
 8000fb0:	e19f      	b.n	80012f2 <__aeabi_dadd+0x5c6>
 8000fb2:	4c5d      	ldr	r4, [pc, #372]	; (8001128 <__aeabi_dadd+0x3fc>)
 8000fb4:	42a6      	cmp	r6, r4
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dadd+0x28e>
 8000fb8:	e12f      	b.n	800121a <__aeabi_dadd+0x4ee>
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	2b38      	cmp	r3, #56	; 0x38
 8000fbe:	dd00      	ble.n	8000fc2 <__aeabi_dadd+0x296>
 8000fc0:	e166      	b.n	8001290 <__aeabi_dadd+0x564>
 8000fc2:	2b1f      	cmp	r3, #31
 8000fc4:	dd00      	ble.n	8000fc8 <__aeabi_dadd+0x29c>
 8000fc6:	e183      	b.n	80012d0 <__aeabi_dadd+0x5a4>
 8000fc8:	2420      	movs	r4, #32
 8000fca:	0005      	movs	r5, r0
 8000fcc:	1ae4      	subs	r4, r4, r3
 8000fce:	000f      	movs	r7, r1
 8000fd0:	40dd      	lsrs	r5, r3
 8000fd2:	40d9      	lsrs	r1, r3
 8000fd4:	40a0      	lsls	r0, r4
 8000fd6:	4643      	mov	r3, r8
 8000fd8:	40a7      	lsls	r7, r4
 8000fda:	1a5b      	subs	r3, r3, r1
 8000fdc:	1e44      	subs	r4, r0, #1
 8000fde:	41a0      	sbcs	r0, r4
 8000fe0:	4698      	mov	r8, r3
 8000fe2:	432f      	orrs	r7, r5
 8000fe4:	4338      	orrs	r0, r7
 8000fe6:	1a17      	subs	r7, r2, r0
 8000fe8:	42ba      	cmp	r2, r7
 8000fea:	4192      	sbcs	r2, r2
 8000fec:	4643      	mov	r3, r8
 8000fee:	4252      	negs	r2, r2
 8000ff0:	1a99      	subs	r1, r3, r2
 8000ff2:	4664      	mov	r4, ip
 8000ff4:	0035      	movs	r5, r6
 8000ff6:	e6ca      	b.n	8000d8e <__aeabi_dadd+0x62>
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	403a      	ands	r2, r7
 8000ffc:	2a00      	cmp	r2, #0
 8000ffe:	d000      	beq.n	8001002 <__aeabi_dadd+0x2d6>
 8001000:	e6f6      	b.n	8000df0 <__aeabi_dadd+0xc4>
 8001002:	074b      	lsls	r3, r1, #29
 8001004:	08ca      	lsrs	r2, r1, #3
 8001006:	4948      	ldr	r1, [pc, #288]	; (8001128 <__aeabi_dadd+0x3fc>)
 8001008:	08ff      	lsrs	r7, r7, #3
 800100a:	433b      	orrs	r3, r7
 800100c:	428d      	cmp	r5, r1
 800100e:	d196      	bne.n	8000f3e <__aeabi_dadd+0x212>
 8001010:	0019      	movs	r1, r3
 8001012:	4311      	orrs	r1, r2
 8001014:	d100      	bne.n	8001018 <__aeabi_dadd+0x2ec>
 8001016:	e19e      	b.n	8001356 <__aeabi_dadd+0x62a>
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0309      	lsls	r1, r1, #12
 800101c:	430a      	orrs	r2, r1
 800101e:	0312      	lsls	r2, r2, #12
 8001020:	0b12      	lsrs	r2, r2, #12
 8001022:	4d41      	ldr	r5, [pc, #260]	; (8001128 <__aeabi_dadd+0x3fc>)
 8001024:	e78f      	b.n	8000f46 <__aeabi_dadd+0x21a>
 8001026:	0015      	movs	r5, r2
 8001028:	2200      	movs	r2, #0
 800102a:	2300      	movs	r3, #0
 800102c:	e78b      	b.n	8000f46 <__aeabi_dadd+0x21a>
 800102e:	2b00      	cmp	r3, #0
 8001030:	d000      	beq.n	8001034 <__aeabi_dadd+0x308>
 8001032:	e0c7      	b.n	80011c4 <__aeabi_dadd+0x498>
 8001034:	1c6b      	adds	r3, r5, #1
 8001036:	055f      	lsls	r7, r3, #21
 8001038:	0d7f      	lsrs	r7, r7, #21
 800103a:	2f01      	cmp	r7, #1
 800103c:	dc00      	bgt.n	8001040 <__aeabi_dadd+0x314>
 800103e:	e0f1      	b.n	8001224 <__aeabi_dadd+0x4f8>
 8001040:	4d39      	ldr	r5, [pc, #228]	; (8001128 <__aeabi_dadd+0x3fc>)
 8001042:	42ab      	cmp	r3, r5
 8001044:	d100      	bne.n	8001048 <__aeabi_dadd+0x31c>
 8001046:	e0b9      	b.n	80011bc <__aeabi_dadd+0x490>
 8001048:	1885      	adds	r5, r0, r2
 800104a:	000a      	movs	r2, r1
 800104c:	4285      	cmp	r5, r0
 800104e:	4189      	sbcs	r1, r1
 8001050:	4442      	add	r2, r8
 8001052:	4249      	negs	r1, r1
 8001054:	1851      	adds	r1, r2, r1
 8001056:	2207      	movs	r2, #7
 8001058:	07cf      	lsls	r7, r1, #31
 800105a:	086d      	lsrs	r5, r5, #1
 800105c:	432f      	orrs	r7, r5
 800105e:	0849      	lsrs	r1, r1, #1
 8001060:	403a      	ands	r2, r7
 8001062:	001d      	movs	r5, r3
 8001064:	e6c2      	b.n	8000dec <__aeabi_dadd+0xc0>
 8001066:	2207      	movs	r2, #7
 8001068:	4930      	ldr	r1, [pc, #192]	; (800112c <__aeabi_dadd+0x400>)
 800106a:	1aed      	subs	r5, r5, r3
 800106c:	4031      	ands	r1, r6
 800106e:	403a      	ands	r2, r7
 8001070:	e6bc      	b.n	8000dec <__aeabi_dadd+0xc0>
 8001072:	003e      	movs	r6, r7
 8001074:	3828      	subs	r0, #40	; 0x28
 8001076:	4086      	lsls	r6, r0
 8001078:	2700      	movs	r7, #0
 800107a:	e69f      	b.n	8000dbc <__aeabi_dadd+0x90>
 800107c:	0038      	movs	r0, r7
 800107e:	f001 fc13 	bl	80028a8 <__clzsi2>
 8001082:	3020      	adds	r0, #32
 8001084:	e68e      	b.n	8000da4 <__aeabi_dadd+0x78>
 8001086:	4643      	mov	r3, r8
 8001088:	4313      	orrs	r3, r2
 800108a:	001f      	movs	r7, r3
 800108c:	1e7a      	subs	r2, r7, #1
 800108e:	4197      	sbcs	r7, r2
 8001090:	1bc7      	subs	r7, r0, r7
 8001092:	42b8      	cmp	r0, r7
 8001094:	4180      	sbcs	r0, r0
 8001096:	4240      	negs	r0, r0
 8001098:	1a09      	subs	r1, r1, r0
 800109a:	e678      	b.n	8000d8e <__aeabi_dadd+0x62>
 800109c:	000e      	movs	r6, r1
 800109e:	003b      	movs	r3, r7
 80010a0:	4306      	orrs	r6, r0
 80010a2:	4313      	orrs	r3, r2
 80010a4:	2d00      	cmp	r5, #0
 80010a6:	d161      	bne.n	800116c <__aeabi_dadd+0x440>
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d000      	beq.n	80010ae <__aeabi_dadd+0x382>
 80010ac:	e0f4      	b.n	8001298 <__aeabi_dadd+0x56c>
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d100      	bne.n	80010b4 <__aeabi_dadd+0x388>
 80010b2:	e11b      	b.n	80012ec <__aeabi_dadd+0x5c0>
 80010b4:	4664      	mov	r4, ip
 80010b6:	0039      	movs	r1, r7
 80010b8:	0010      	movs	r0, r2
 80010ba:	e739      	b.n	8000f30 <__aeabi_dadd+0x204>
 80010bc:	4f1a      	ldr	r7, [pc, #104]	; (8001128 <__aeabi_dadd+0x3fc>)
 80010be:	42bb      	cmp	r3, r7
 80010c0:	d07a      	beq.n	80011b8 <__aeabi_dadd+0x48c>
 80010c2:	0033      	movs	r3, r6
 80010c4:	e6ff      	b.n	8000ec6 <__aeabi_dadd+0x19a>
 80010c6:	0030      	movs	r0, r6
 80010c8:	3d1f      	subs	r5, #31
 80010ca:	40e8      	lsrs	r0, r5
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d003      	beq.n	80010d8 <__aeabi_dadd+0x3ac>
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	1acb      	subs	r3, r1, r3
 80010d4:	409e      	lsls	r6, r3
 80010d6:	4337      	orrs	r7, r6
 80010d8:	1e7b      	subs	r3, r7, #1
 80010da:	419f      	sbcs	r7, r3
 80010dc:	2207      	movs	r2, #7
 80010de:	4307      	orrs	r7, r0
 80010e0:	403a      	ands	r2, r7
 80010e2:	2100      	movs	r1, #0
 80010e4:	2500      	movs	r5, #0
 80010e6:	e789      	b.n	8000ffc <__aeabi_dadd+0x2d0>
 80010e8:	1a17      	subs	r7, r2, r0
 80010ea:	4643      	mov	r3, r8
 80010ec:	42ba      	cmp	r2, r7
 80010ee:	41b6      	sbcs	r6, r6
 80010f0:	1a59      	subs	r1, r3, r1
 80010f2:	4276      	negs	r6, r6
 80010f4:	1b8e      	subs	r6, r1, r6
 80010f6:	4664      	mov	r4, ip
 80010f8:	e64e      	b.n	8000d98 <__aeabi_dadd+0x6c>
 80010fa:	2b1f      	cmp	r3, #31
 80010fc:	dd00      	ble.n	8001100 <__aeabi_dadd+0x3d4>
 80010fe:	e0ad      	b.n	800125c <__aeabi_dadd+0x530>
 8001100:	2620      	movs	r6, #32
 8001102:	4647      	mov	r7, r8
 8001104:	1af6      	subs	r6, r6, r3
 8001106:	40b7      	lsls	r7, r6
 8001108:	46b9      	mov	r9, r7
 800110a:	0017      	movs	r7, r2
 800110c:	46b2      	mov	sl, r6
 800110e:	40df      	lsrs	r7, r3
 8001110:	464e      	mov	r6, r9
 8001112:	433e      	orrs	r6, r7
 8001114:	0037      	movs	r7, r6
 8001116:	4656      	mov	r6, sl
 8001118:	40b2      	lsls	r2, r6
 800111a:	1e56      	subs	r6, r2, #1
 800111c:	41b2      	sbcs	r2, r6
 800111e:	4317      	orrs	r7, r2
 8001120:	4642      	mov	r2, r8
 8001122:	40da      	lsrs	r2, r3
 8001124:	1889      	adds	r1, r1, r2
 8001126:	e6ae      	b.n	8000e86 <__aeabi_dadd+0x15a>
 8001128:	000007ff 	.word	0x000007ff
 800112c:	ff7fffff 	.word	0xff7fffff
 8001130:	800fffff 	.word	0x800fffff
 8001134:	2620      	movs	r6, #32
 8001136:	4647      	mov	r7, r8
 8001138:	1af6      	subs	r6, r6, r3
 800113a:	40b7      	lsls	r7, r6
 800113c:	46b9      	mov	r9, r7
 800113e:	0017      	movs	r7, r2
 8001140:	46b2      	mov	sl, r6
 8001142:	40df      	lsrs	r7, r3
 8001144:	464e      	mov	r6, r9
 8001146:	433e      	orrs	r6, r7
 8001148:	0037      	movs	r7, r6
 800114a:	4656      	mov	r6, sl
 800114c:	40b2      	lsls	r2, r6
 800114e:	1e56      	subs	r6, r2, #1
 8001150:	41b2      	sbcs	r2, r6
 8001152:	4317      	orrs	r7, r2
 8001154:	4642      	mov	r2, r8
 8001156:	40da      	lsrs	r2, r3
 8001158:	1a89      	subs	r1, r1, r2
 800115a:	e799      	b.n	8001090 <__aeabi_dadd+0x364>
 800115c:	4c7f      	ldr	r4, [pc, #508]	; (800135c <__aeabi_dadd+0x630>)
 800115e:	42a6      	cmp	r6, r4
 8001160:	d05b      	beq.n	800121a <__aeabi_dadd+0x4ee>
 8001162:	2480      	movs	r4, #128	; 0x80
 8001164:	0424      	lsls	r4, r4, #16
 8001166:	425b      	negs	r3, r3
 8001168:	4321      	orrs	r1, r4
 800116a:	e727      	b.n	8000fbc <__aeabi_dadd+0x290>
 800116c:	2e00      	cmp	r6, #0
 800116e:	d10c      	bne.n	800118a <__aeabi_dadd+0x45e>
 8001170:	2b00      	cmp	r3, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_dadd+0x44a>
 8001174:	e0cb      	b.n	800130e <__aeabi_dadd+0x5e2>
 8001176:	4664      	mov	r4, ip
 8001178:	0039      	movs	r1, r7
 800117a:	0010      	movs	r0, r2
 800117c:	4d77      	ldr	r5, [pc, #476]	; (800135c <__aeabi_dadd+0x630>)
 800117e:	e6d7      	b.n	8000f30 <__aeabi_dadd+0x204>
 8001180:	4f76      	ldr	r7, [pc, #472]	; (800135c <__aeabi_dadd+0x630>)
 8001182:	42bb      	cmp	r3, r7
 8001184:	d018      	beq.n	80011b8 <__aeabi_dadd+0x48c>
 8001186:	0033      	movs	r3, r6
 8001188:	e675      	b.n	8000e76 <__aeabi_dadd+0x14a>
 800118a:	2b00      	cmp	r3, #0
 800118c:	d014      	beq.n	80011b8 <__aeabi_dadd+0x48c>
 800118e:	074b      	lsls	r3, r1, #29
 8001190:	08c0      	lsrs	r0, r0, #3
 8001192:	4318      	orrs	r0, r3
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	08c9      	lsrs	r1, r1, #3
 8001198:	031b      	lsls	r3, r3, #12
 800119a:	4219      	tst	r1, r3
 800119c:	d007      	beq.n	80011ae <__aeabi_dadd+0x482>
 800119e:	08fc      	lsrs	r4, r7, #3
 80011a0:	421c      	tst	r4, r3
 80011a2:	d104      	bne.n	80011ae <__aeabi_dadd+0x482>
 80011a4:	0779      	lsls	r1, r7, #29
 80011a6:	08d0      	lsrs	r0, r2, #3
 80011a8:	4308      	orrs	r0, r1
 80011aa:	46e1      	mov	r9, ip
 80011ac:	0021      	movs	r1, r4
 80011ae:	464c      	mov	r4, r9
 80011b0:	0f42      	lsrs	r2, r0, #29
 80011b2:	00c9      	lsls	r1, r1, #3
 80011b4:	4311      	orrs	r1, r2
 80011b6:	00c0      	lsls	r0, r0, #3
 80011b8:	4d68      	ldr	r5, [pc, #416]	; (800135c <__aeabi_dadd+0x630>)
 80011ba:	e6b9      	b.n	8000f30 <__aeabi_dadd+0x204>
 80011bc:	001d      	movs	r5, r3
 80011be:	2200      	movs	r2, #0
 80011c0:	2300      	movs	r3, #0
 80011c2:	e6c0      	b.n	8000f46 <__aeabi_dadd+0x21a>
 80011c4:	2d00      	cmp	r5, #0
 80011c6:	d15b      	bne.n	8001280 <__aeabi_dadd+0x554>
 80011c8:	000d      	movs	r5, r1
 80011ca:	4305      	orrs	r5, r0
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x4a4>
 80011ce:	e6e2      	b.n	8000f96 <__aeabi_dadd+0x26a>
 80011d0:	1c5d      	adds	r5, r3, #1
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dadd+0x4aa>
 80011d4:	e0b0      	b.n	8001338 <__aeabi_dadd+0x60c>
 80011d6:	4d61      	ldr	r5, [pc, #388]	; (800135c <__aeabi_dadd+0x630>)
 80011d8:	42ae      	cmp	r6, r5
 80011da:	d01f      	beq.n	800121c <__aeabi_dadd+0x4f0>
 80011dc:	43db      	mvns	r3, r3
 80011de:	2b38      	cmp	r3, #56	; 0x38
 80011e0:	dc71      	bgt.n	80012c6 <__aeabi_dadd+0x59a>
 80011e2:	2b1f      	cmp	r3, #31
 80011e4:	dd00      	ble.n	80011e8 <__aeabi_dadd+0x4bc>
 80011e6:	e096      	b.n	8001316 <__aeabi_dadd+0x5ea>
 80011e8:	2520      	movs	r5, #32
 80011ea:	000f      	movs	r7, r1
 80011ec:	1aed      	subs	r5, r5, r3
 80011ee:	40af      	lsls	r7, r5
 80011f0:	46b9      	mov	r9, r7
 80011f2:	0007      	movs	r7, r0
 80011f4:	46aa      	mov	sl, r5
 80011f6:	40df      	lsrs	r7, r3
 80011f8:	464d      	mov	r5, r9
 80011fa:	433d      	orrs	r5, r7
 80011fc:	002f      	movs	r7, r5
 80011fe:	4655      	mov	r5, sl
 8001200:	40a8      	lsls	r0, r5
 8001202:	40d9      	lsrs	r1, r3
 8001204:	1e45      	subs	r5, r0, #1
 8001206:	41a8      	sbcs	r0, r5
 8001208:	4488      	add	r8, r1
 800120a:	4307      	orrs	r7, r0
 800120c:	18bf      	adds	r7, r7, r2
 800120e:	4297      	cmp	r7, r2
 8001210:	4192      	sbcs	r2, r2
 8001212:	4251      	negs	r1, r2
 8001214:	4441      	add	r1, r8
 8001216:	0035      	movs	r5, r6
 8001218:	e63a      	b.n	8000e90 <__aeabi_dadd+0x164>
 800121a:	4664      	mov	r4, ip
 800121c:	0035      	movs	r5, r6
 800121e:	4641      	mov	r1, r8
 8001220:	0010      	movs	r0, r2
 8001222:	e685      	b.n	8000f30 <__aeabi_dadd+0x204>
 8001224:	000b      	movs	r3, r1
 8001226:	4303      	orrs	r3, r0
 8001228:	2d00      	cmp	r5, #0
 800122a:	d000      	beq.n	800122e <__aeabi_dadd+0x502>
 800122c:	e663      	b.n	8000ef6 <__aeabi_dadd+0x1ca>
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f5      	beq.n	800121e <__aeabi_dadd+0x4f2>
 8001232:	4643      	mov	r3, r8
 8001234:	4313      	orrs	r3, r2
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x50e>
 8001238:	e67a      	b.n	8000f30 <__aeabi_dadd+0x204>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	2207      	movs	r2, #7
 8001242:	4441      	add	r1, r8
 8001244:	4240      	negs	r0, r0
 8001246:	1809      	adds	r1, r1, r0
 8001248:	403a      	ands	r2, r7
 800124a:	020b      	lsls	r3, r1, #8
 800124c:	d400      	bmi.n	8001250 <__aeabi_dadd+0x524>
 800124e:	e6d5      	b.n	8000ffc <__aeabi_dadd+0x2d0>
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <__aeabi_dadd+0x634>)
 8001252:	3501      	adds	r5, #1
 8001254:	4019      	ands	r1, r3
 8001256:	e5c9      	b.n	8000dec <__aeabi_dadd+0xc0>
 8001258:	0038      	movs	r0, r7
 800125a:	e669      	b.n	8000f30 <__aeabi_dadd+0x204>
 800125c:	001e      	movs	r6, r3
 800125e:	4647      	mov	r7, r8
 8001260:	3e20      	subs	r6, #32
 8001262:	40f7      	lsrs	r7, r6
 8001264:	46bc      	mov	ip, r7
 8001266:	2b20      	cmp	r3, #32
 8001268:	d004      	beq.n	8001274 <__aeabi_dadd+0x548>
 800126a:	2640      	movs	r6, #64	; 0x40
 800126c:	1af3      	subs	r3, r6, r3
 800126e:	4646      	mov	r6, r8
 8001270:	409e      	lsls	r6, r3
 8001272:	4332      	orrs	r2, r6
 8001274:	0017      	movs	r7, r2
 8001276:	4663      	mov	r3, ip
 8001278:	1e7a      	subs	r2, r7, #1
 800127a:	4197      	sbcs	r7, r2
 800127c:	431f      	orrs	r7, r3
 800127e:	e602      	b.n	8000e86 <__aeabi_dadd+0x15a>
 8001280:	4d36      	ldr	r5, [pc, #216]	; (800135c <__aeabi_dadd+0x630>)
 8001282:	42ae      	cmp	r6, r5
 8001284:	d0ca      	beq.n	800121c <__aeabi_dadd+0x4f0>
 8001286:	2580      	movs	r5, #128	; 0x80
 8001288:	042d      	lsls	r5, r5, #16
 800128a:	425b      	negs	r3, r3
 800128c:	4329      	orrs	r1, r5
 800128e:	e7a6      	b.n	80011de <__aeabi_dadd+0x4b2>
 8001290:	4308      	orrs	r0, r1
 8001292:	1e41      	subs	r1, r0, #1
 8001294:	4188      	sbcs	r0, r1
 8001296:	e6a6      	b.n	8000fe6 <__aeabi_dadd+0x2ba>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x572>
 800129c:	e648      	b.n	8000f30 <__aeabi_dadd+0x204>
 800129e:	1a87      	subs	r7, r0, r2
 80012a0:	4643      	mov	r3, r8
 80012a2:	42b8      	cmp	r0, r7
 80012a4:	41b6      	sbcs	r6, r6
 80012a6:	1acb      	subs	r3, r1, r3
 80012a8:	4276      	negs	r6, r6
 80012aa:	1b9e      	subs	r6, r3, r6
 80012ac:	0233      	lsls	r3, r6, #8
 80012ae:	d54b      	bpl.n	8001348 <__aeabi_dadd+0x61c>
 80012b0:	1a17      	subs	r7, r2, r0
 80012b2:	4643      	mov	r3, r8
 80012b4:	42ba      	cmp	r2, r7
 80012b6:	4192      	sbcs	r2, r2
 80012b8:	1a59      	subs	r1, r3, r1
 80012ba:	4252      	negs	r2, r2
 80012bc:	1a89      	subs	r1, r1, r2
 80012be:	2207      	movs	r2, #7
 80012c0:	4664      	mov	r4, ip
 80012c2:	403a      	ands	r2, r7
 80012c4:	e592      	b.n	8000dec <__aeabi_dadd+0xc0>
 80012c6:	4301      	orrs	r1, r0
 80012c8:	000f      	movs	r7, r1
 80012ca:	1e79      	subs	r1, r7, #1
 80012cc:	418f      	sbcs	r7, r1
 80012ce:	e79d      	b.n	800120c <__aeabi_dadd+0x4e0>
 80012d0:	001c      	movs	r4, r3
 80012d2:	000f      	movs	r7, r1
 80012d4:	3c20      	subs	r4, #32
 80012d6:	40e7      	lsrs	r7, r4
 80012d8:	2b20      	cmp	r3, #32
 80012da:	d003      	beq.n	80012e4 <__aeabi_dadd+0x5b8>
 80012dc:	2440      	movs	r4, #64	; 0x40
 80012de:	1ae3      	subs	r3, r4, r3
 80012e0:	4099      	lsls	r1, r3
 80012e2:	4308      	orrs	r0, r1
 80012e4:	1e41      	subs	r1, r0, #1
 80012e6:	4188      	sbcs	r0, r1
 80012e8:	4338      	orrs	r0, r7
 80012ea:	e67c      	b.n	8000fe6 <__aeabi_dadd+0x2ba>
 80012ec:	2200      	movs	r2, #0
 80012ee:	2400      	movs	r4, #0
 80012f0:	e625      	b.n	8000f3e <__aeabi_dadd+0x212>
 80012f2:	1a17      	subs	r7, r2, r0
 80012f4:	4643      	mov	r3, r8
 80012f6:	42ba      	cmp	r2, r7
 80012f8:	4192      	sbcs	r2, r2
 80012fa:	1a59      	subs	r1, r3, r1
 80012fc:	4252      	negs	r2, r2
 80012fe:	1a89      	subs	r1, r1, r2
 8001300:	4664      	mov	r4, ip
 8001302:	0035      	movs	r5, r6
 8001304:	e543      	b.n	8000d8e <__aeabi_dadd+0x62>
 8001306:	4641      	mov	r1, r8
 8001308:	0010      	movs	r0, r2
 800130a:	4d14      	ldr	r5, [pc, #80]	; (800135c <__aeabi_dadd+0x630>)
 800130c:	e610      	b.n	8000f30 <__aeabi_dadd+0x204>
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	2400      	movs	r4, #0
 8001312:	0312      	lsls	r2, r2, #12
 8001314:	e680      	b.n	8001018 <__aeabi_dadd+0x2ec>
 8001316:	001d      	movs	r5, r3
 8001318:	000f      	movs	r7, r1
 800131a:	3d20      	subs	r5, #32
 800131c:	40ef      	lsrs	r7, r5
 800131e:	46bc      	mov	ip, r7
 8001320:	2b20      	cmp	r3, #32
 8001322:	d003      	beq.n	800132c <__aeabi_dadd+0x600>
 8001324:	2540      	movs	r5, #64	; 0x40
 8001326:	1aeb      	subs	r3, r5, r3
 8001328:	4099      	lsls	r1, r3
 800132a:	4308      	orrs	r0, r1
 800132c:	0007      	movs	r7, r0
 800132e:	4663      	mov	r3, ip
 8001330:	1e78      	subs	r0, r7, #1
 8001332:	4187      	sbcs	r7, r0
 8001334:	431f      	orrs	r7, r3
 8001336:	e769      	b.n	800120c <__aeabi_dadd+0x4e0>
 8001338:	1887      	adds	r7, r0, r2
 800133a:	4297      	cmp	r7, r2
 800133c:	419b      	sbcs	r3, r3
 800133e:	4441      	add	r1, r8
 8001340:	425b      	negs	r3, r3
 8001342:	18c9      	adds	r1, r1, r3
 8001344:	0035      	movs	r5, r6
 8001346:	e5a3      	b.n	8000e90 <__aeabi_dadd+0x164>
 8001348:	003b      	movs	r3, r7
 800134a:	4333      	orrs	r3, r6
 800134c:	d0ce      	beq.n	80012ec <__aeabi_dadd+0x5c0>
 800134e:	2207      	movs	r2, #7
 8001350:	0031      	movs	r1, r6
 8001352:	403a      	ands	r2, r7
 8001354:	e652      	b.n	8000ffc <__aeabi_dadd+0x2d0>
 8001356:	2300      	movs	r3, #0
 8001358:	001a      	movs	r2, r3
 800135a:	e5f4      	b.n	8000f46 <__aeabi_dadd+0x21a>
 800135c:	000007ff 	.word	0x000007ff
 8001360:	ff7fffff 	.word	0xff7fffff

08001364 <__aeabi_ddiv>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4657      	mov	r7, sl
 8001368:	46de      	mov	lr, fp
 800136a:	464e      	mov	r6, r9
 800136c:	4645      	mov	r5, r8
 800136e:	b5e0      	push	{r5, r6, r7, lr}
 8001370:	4683      	mov	fp, r0
 8001372:	0007      	movs	r7, r0
 8001374:	030e      	lsls	r6, r1, #12
 8001376:	0048      	lsls	r0, r1, #1
 8001378:	b085      	sub	sp, #20
 800137a:	4692      	mov	sl, r2
 800137c:	001c      	movs	r4, r3
 800137e:	0b36      	lsrs	r6, r6, #12
 8001380:	0d40      	lsrs	r0, r0, #21
 8001382:	0fcd      	lsrs	r5, r1, #31
 8001384:	2800      	cmp	r0, #0
 8001386:	d100      	bne.n	800138a <__aeabi_ddiv+0x26>
 8001388:	e09d      	b.n	80014c6 <__aeabi_ddiv+0x162>
 800138a:	4b95      	ldr	r3, [pc, #596]	; (80015e0 <__aeabi_ddiv+0x27c>)
 800138c:	4298      	cmp	r0, r3
 800138e:	d039      	beq.n	8001404 <__aeabi_ddiv+0xa0>
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	00f6      	lsls	r6, r6, #3
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	431e      	orrs	r6, r3
 8001398:	4a92      	ldr	r2, [pc, #584]	; (80015e4 <__aeabi_ddiv+0x280>)
 800139a:	0f7b      	lsrs	r3, r7, #29
 800139c:	4333      	orrs	r3, r6
 800139e:	4699      	mov	r9, r3
 80013a0:	4694      	mov	ip, r2
 80013a2:	0003      	movs	r3, r0
 80013a4:	4463      	add	r3, ip
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2300      	movs	r3, #0
 80013aa:	2600      	movs	r6, #0
 80013ac:	00ff      	lsls	r7, r7, #3
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	0323      	lsls	r3, r4, #12
 80013b2:	0b1b      	lsrs	r3, r3, #12
 80013b4:	4698      	mov	r8, r3
 80013b6:	0063      	lsls	r3, r4, #1
 80013b8:	0fe4      	lsrs	r4, r4, #31
 80013ba:	4652      	mov	r2, sl
 80013bc:	0d5b      	lsrs	r3, r3, #21
 80013be:	9401      	str	r4, [sp, #4]
 80013c0:	d100      	bne.n	80013c4 <__aeabi_ddiv+0x60>
 80013c2:	e0b3      	b.n	800152c <__aeabi_ddiv+0x1c8>
 80013c4:	4986      	ldr	r1, [pc, #536]	; (80015e0 <__aeabi_ddiv+0x27c>)
 80013c6:	428b      	cmp	r3, r1
 80013c8:	d100      	bne.n	80013cc <__aeabi_ddiv+0x68>
 80013ca:	e09e      	b.n	800150a <__aeabi_ddiv+0x1a6>
 80013cc:	4642      	mov	r2, r8
 80013ce:	00d1      	lsls	r1, r2, #3
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	0412      	lsls	r2, r2, #16
 80013d4:	430a      	orrs	r2, r1
 80013d6:	4651      	mov	r1, sl
 80013d8:	0f49      	lsrs	r1, r1, #29
 80013da:	4311      	orrs	r1, r2
 80013dc:	468b      	mov	fp, r1
 80013de:	4981      	ldr	r1, [pc, #516]	; (80015e4 <__aeabi_ddiv+0x280>)
 80013e0:	4652      	mov	r2, sl
 80013e2:	468c      	mov	ip, r1
 80013e4:	9900      	ldr	r1, [sp, #0]
 80013e6:	4463      	add	r3, ip
 80013e8:	1acb      	subs	r3, r1, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	00d2      	lsls	r2, r2, #3
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	002b      	movs	r3, r5
 80013f2:	4063      	eors	r3, r4
 80013f4:	469a      	mov	sl, r3
 80013f6:	2e0f      	cmp	r6, #15
 80013f8:	d900      	bls.n	80013fc <__aeabi_ddiv+0x98>
 80013fa:	e105      	b.n	8001608 <__aeabi_ddiv+0x2a4>
 80013fc:	4b7a      	ldr	r3, [pc, #488]	; (80015e8 <__aeabi_ddiv+0x284>)
 80013fe:	00b6      	lsls	r6, r6, #2
 8001400:	599b      	ldr	r3, [r3, r6]
 8001402:	469f      	mov	pc, r3
 8001404:	465b      	mov	r3, fp
 8001406:	4333      	orrs	r3, r6
 8001408:	4699      	mov	r9, r3
 800140a:	d000      	beq.n	800140e <__aeabi_ddiv+0xaa>
 800140c:	e0b8      	b.n	8001580 <__aeabi_ddiv+0x21c>
 800140e:	2302      	movs	r3, #2
 8001410:	2608      	movs	r6, #8
 8001412:	2700      	movs	r7, #0
 8001414:	9000      	str	r0, [sp, #0]
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	e7ca      	b.n	80013b0 <__aeabi_ddiv+0x4c>
 800141a:	46cb      	mov	fp, r9
 800141c:	003a      	movs	r2, r7
 800141e:	9902      	ldr	r1, [sp, #8]
 8001420:	9501      	str	r5, [sp, #4]
 8001422:	9b01      	ldr	r3, [sp, #4]
 8001424:	469a      	mov	sl, r3
 8001426:	2902      	cmp	r1, #2
 8001428:	d027      	beq.n	800147a <__aeabi_ddiv+0x116>
 800142a:	2903      	cmp	r1, #3
 800142c:	d100      	bne.n	8001430 <__aeabi_ddiv+0xcc>
 800142e:	e280      	b.n	8001932 <__aeabi_ddiv+0x5ce>
 8001430:	2901      	cmp	r1, #1
 8001432:	d044      	beq.n	80014be <__aeabi_ddiv+0x15a>
 8001434:	496d      	ldr	r1, [pc, #436]	; (80015ec <__aeabi_ddiv+0x288>)
 8001436:	9b00      	ldr	r3, [sp, #0]
 8001438:	468c      	mov	ip, r1
 800143a:	4463      	add	r3, ip
 800143c:	001c      	movs	r4, r3
 800143e:	2c00      	cmp	r4, #0
 8001440:	dd38      	ble.n	80014b4 <__aeabi_ddiv+0x150>
 8001442:	0753      	lsls	r3, r2, #29
 8001444:	d000      	beq.n	8001448 <__aeabi_ddiv+0xe4>
 8001446:	e213      	b.n	8001870 <__aeabi_ddiv+0x50c>
 8001448:	08d2      	lsrs	r2, r2, #3
 800144a:	465b      	mov	r3, fp
 800144c:	01db      	lsls	r3, r3, #7
 800144e:	d509      	bpl.n	8001464 <__aeabi_ddiv+0x100>
 8001450:	4659      	mov	r1, fp
 8001452:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <__aeabi_ddiv+0x28c>)
 8001454:	4019      	ands	r1, r3
 8001456:	468b      	mov	fp, r1
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	00c9      	lsls	r1, r1, #3
 800145c:	468c      	mov	ip, r1
 800145e:	9b00      	ldr	r3, [sp, #0]
 8001460:	4463      	add	r3, ip
 8001462:	001c      	movs	r4, r3
 8001464:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <__aeabi_ddiv+0x290>)
 8001466:	429c      	cmp	r4, r3
 8001468:	dc07      	bgt.n	800147a <__aeabi_ddiv+0x116>
 800146a:	465b      	mov	r3, fp
 800146c:	0564      	lsls	r4, r4, #21
 800146e:	075f      	lsls	r7, r3, #29
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	4317      	orrs	r7, r2
 8001474:	0b1b      	lsrs	r3, r3, #12
 8001476:	0d62      	lsrs	r2, r4, #21
 8001478:	e002      	b.n	8001480 <__aeabi_ddiv+0x11c>
 800147a:	2300      	movs	r3, #0
 800147c:	2700      	movs	r7, #0
 800147e:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <__aeabi_ddiv+0x27c>)
 8001480:	2100      	movs	r1, #0
 8001482:	031b      	lsls	r3, r3, #12
 8001484:	0b1c      	lsrs	r4, r3, #12
 8001486:	0d0b      	lsrs	r3, r1, #20
 8001488:	051b      	lsls	r3, r3, #20
 800148a:	4323      	orrs	r3, r4
 800148c:	0514      	lsls	r4, r2, #20
 800148e:	4a5a      	ldr	r2, [pc, #360]	; (80015f8 <__aeabi_ddiv+0x294>)
 8001490:	0038      	movs	r0, r7
 8001492:	4013      	ands	r3, r2
 8001494:	431c      	orrs	r4, r3
 8001496:	4653      	mov	r3, sl
 8001498:	0064      	lsls	r4, r4, #1
 800149a:	07db      	lsls	r3, r3, #31
 800149c:	0864      	lsrs	r4, r4, #1
 800149e:	431c      	orrs	r4, r3
 80014a0:	0021      	movs	r1, r4
 80014a2:	b005      	add	sp, #20
 80014a4:	bc3c      	pop	{r2, r3, r4, r5}
 80014a6:	4690      	mov	r8, r2
 80014a8:	4699      	mov	r9, r3
 80014aa:	46a2      	mov	sl, r4
 80014ac:	46ab      	mov	fp, r5
 80014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b0:	2201      	movs	r2, #1
 80014b2:	4252      	negs	r2, r2
 80014b4:	2301      	movs	r3, #1
 80014b6:	1b1b      	subs	r3, r3, r4
 80014b8:	2b38      	cmp	r3, #56	; 0x38
 80014ba:	dc00      	bgt.n	80014be <__aeabi_ddiv+0x15a>
 80014bc:	e1ad      	b.n	800181a <__aeabi_ddiv+0x4b6>
 80014be:	2200      	movs	r2, #0
 80014c0:	2300      	movs	r3, #0
 80014c2:	2700      	movs	r7, #0
 80014c4:	e7dc      	b.n	8001480 <__aeabi_ddiv+0x11c>
 80014c6:	465b      	mov	r3, fp
 80014c8:	4333      	orrs	r3, r6
 80014ca:	4699      	mov	r9, r3
 80014cc:	d05e      	beq.n	800158c <__aeabi_ddiv+0x228>
 80014ce:	2e00      	cmp	r6, #0
 80014d0:	d100      	bne.n	80014d4 <__aeabi_ddiv+0x170>
 80014d2:	e18a      	b.n	80017ea <__aeabi_ddiv+0x486>
 80014d4:	0030      	movs	r0, r6
 80014d6:	f001 f9e7 	bl	80028a8 <__clzsi2>
 80014da:	0003      	movs	r3, r0
 80014dc:	3b0b      	subs	r3, #11
 80014de:	2b1c      	cmp	r3, #28
 80014e0:	dd00      	ble.n	80014e4 <__aeabi_ddiv+0x180>
 80014e2:	e17b      	b.n	80017dc <__aeabi_ddiv+0x478>
 80014e4:	221d      	movs	r2, #29
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	465a      	mov	r2, fp
 80014ea:	0001      	movs	r1, r0
 80014ec:	40da      	lsrs	r2, r3
 80014ee:	3908      	subs	r1, #8
 80014f0:	408e      	lsls	r6, r1
 80014f2:	0013      	movs	r3, r2
 80014f4:	465f      	mov	r7, fp
 80014f6:	4333      	orrs	r3, r6
 80014f8:	4699      	mov	r9, r3
 80014fa:	408f      	lsls	r7, r1
 80014fc:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <__aeabi_ddiv+0x298>)
 80014fe:	2600      	movs	r6, #0
 8001500:	1a1b      	subs	r3, r3, r0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	e752      	b.n	80013b0 <__aeabi_ddiv+0x4c>
 800150a:	4641      	mov	r1, r8
 800150c:	4653      	mov	r3, sl
 800150e:	430b      	orrs	r3, r1
 8001510:	493b      	ldr	r1, [pc, #236]	; (8001600 <__aeabi_ddiv+0x29c>)
 8001512:	469b      	mov	fp, r3
 8001514:	468c      	mov	ip, r1
 8001516:	9b00      	ldr	r3, [sp, #0]
 8001518:	4463      	add	r3, ip
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	465b      	mov	r3, fp
 800151e:	2b00      	cmp	r3, #0
 8001520:	d13b      	bne.n	800159a <__aeabi_ddiv+0x236>
 8001522:	2302      	movs	r3, #2
 8001524:	2200      	movs	r2, #0
 8001526:	431e      	orrs	r6, r3
 8001528:	2102      	movs	r1, #2
 800152a:	e761      	b.n	80013f0 <__aeabi_ddiv+0x8c>
 800152c:	4643      	mov	r3, r8
 800152e:	4313      	orrs	r3, r2
 8001530:	469b      	mov	fp, r3
 8001532:	d037      	beq.n	80015a4 <__aeabi_ddiv+0x240>
 8001534:	4643      	mov	r3, r8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d100      	bne.n	800153c <__aeabi_ddiv+0x1d8>
 800153a:	e162      	b.n	8001802 <__aeabi_ddiv+0x49e>
 800153c:	4640      	mov	r0, r8
 800153e:	f001 f9b3 	bl	80028a8 <__clzsi2>
 8001542:	0003      	movs	r3, r0
 8001544:	3b0b      	subs	r3, #11
 8001546:	2b1c      	cmp	r3, #28
 8001548:	dd00      	ble.n	800154c <__aeabi_ddiv+0x1e8>
 800154a:	e153      	b.n	80017f4 <__aeabi_ddiv+0x490>
 800154c:	0002      	movs	r2, r0
 800154e:	4641      	mov	r1, r8
 8001550:	3a08      	subs	r2, #8
 8001552:	4091      	lsls	r1, r2
 8001554:	4688      	mov	r8, r1
 8001556:	211d      	movs	r1, #29
 8001558:	1acb      	subs	r3, r1, r3
 800155a:	4651      	mov	r1, sl
 800155c:	40d9      	lsrs	r1, r3
 800155e:	000b      	movs	r3, r1
 8001560:	4641      	mov	r1, r8
 8001562:	430b      	orrs	r3, r1
 8001564:	469b      	mov	fp, r3
 8001566:	4653      	mov	r3, sl
 8001568:	4093      	lsls	r3, r2
 800156a:	001a      	movs	r2, r3
 800156c:	9b00      	ldr	r3, [sp, #0]
 800156e:	4925      	ldr	r1, [pc, #148]	; (8001604 <__aeabi_ddiv+0x2a0>)
 8001570:	469c      	mov	ip, r3
 8001572:	4460      	add	r0, ip
 8001574:	0003      	movs	r3, r0
 8001576:	468c      	mov	ip, r1
 8001578:	4463      	add	r3, ip
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2100      	movs	r1, #0
 800157e:	e737      	b.n	80013f0 <__aeabi_ddiv+0x8c>
 8001580:	2303      	movs	r3, #3
 8001582:	46b1      	mov	r9, r6
 8001584:	9000      	str	r0, [sp, #0]
 8001586:	260c      	movs	r6, #12
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	e711      	b.n	80013b0 <__aeabi_ddiv+0x4c>
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	2604      	movs	r6, #4
 8001594:	2700      	movs	r7, #0
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	e70a      	b.n	80013b0 <__aeabi_ddiv+0x4c>
 800159a:	2303      	movs	r3, #3
 800159c:	46c3      	mov	fp, r8
 800159e:	431e      	orrs	r6, r3
 80015a0:	2103      	movs	r1, #3
 80015a2:	e725      	b.n	80013f0 <__aeabi_ddiv+0x8c>
 80015a4:	3301      	adds	r3, #1
 80015a6:	431e      	orrs	r6, r3
 80015a8:	2200      	movs	r2, #0
 80015aa:	2101      	movs	r1, #1
 80015ac:	e720      	b.n	80013f0 <__aeabi_ddiv+0x8c>
 80015ae:	2300      	movs	r3, #0
 80015b0:	469a      	mov	sl, r3
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	2700      	movs	r7, #0
 80015b6:	031b      	lsls	r3, r3, #12
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <__aeabi_ddiv+0x27c>)
 80015ba:	e761      	b.n	8001480 <__aeabi_ddiv+0x11c>
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	4649      	mov	r1, r9
 80015c0:	031b      	lsls	r3, r3, #12
 80015c2:	4219      	tst	r1, r3
 80015c4:	d100      	bne.n	80015c8 <__aeabi_ddiv+0x264>
 80015c6:	e0e2      	b.n	800178e <__aeabi_ddiv+0x42a>
 80015c8:	4659      	mov	r1, fp
 80015ca:	4219      	tst	r1, r3
 80015cc:	d000      	beq.n	80015d0 <__aeabi_ddiv+0x26c>
 80015ce:	e0de      	b.n	800178e <__aeabi_ddiv+0x42a>
 80015d0:	430b      	orrs	r3, r1
 80015d2:	031b      	lsls	r3, r3, #12
 80015d4:	0017      	movs	r7, r2
 80015d6:	0b1b      	lsrs	r3, r3, #12
 80015d8:	46a2      	mov	sl, r4
 80015da:	4a01      	ldr	r2, [pc, #4]	; (80015e0 <__aeabi_ddiv+0x27c>)
 80015dc:	e750      	b.n	8001480 <__aeabi_ddiv+0x11c>
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	000007ff 	.word	0x000007ff
 80015e4:	fffffc01 	.word	0xfffffc01
 80015e8:	08008bdc 	.word	0x08008bdc
 80015ec:	000003ff 	.word	0x000003ff
 80015f0:	feffffff 	.word	0xfeffffff
 80015f4:	000007fe 	.word	0x000007fe
 80015f8:	800fffff 	.word	0x800fffff
 80015fc:	fffffc0d 	.word	0xfffffc0d
 8001600:	fffff801 	.word	0xfffff801
 8001604:	000003f3 	.word	0x000003f3
 8001608:	45d9      	cmp	r9, fp
 800160a:	d900      	bls.n	800160e <__aeabi_ddiv+0x2aa>
 800160c:	e0cb      	b.n	80017a6 <__aeabi_ddiv+0x442>
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x2ae>
 8001610:	e0c6      	b.n	80017a0 <__aeabi_ddiv+0x43c>
 8001612:	003c      	movs	r4, r7
 8001614:	4648      	mov	r0, r9
 8001616:	2700      	movs	r7, #0
 8001618:	9b00      	ldr	r3, [sp, #0]
 800161a:	3b01      	subs	r3, #1
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	465b      	mov	r3, fp
 8001620:	0e16      	lsrs	r6, r2, #24
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	431e      	orrs	r6, r3
 8001626:	0213      	lsls	r3, r2, #8
 8001628:	4698      	mov	r8, r3
 800162a:	0433      	lsls	r3, r6, #16
 800162c:	0c1b      	lsrs	r3, r3, #16
 800162e:	4699      	mov	r9, r3
 8001630:	0c31      	lsrs	r1, r6, #16
 8001632:	9101      	str	r1, [sp, #4]
 8001634:	f7fe fdee 	bl	8000214 <__aeabi_uidivmod>
 8001638:	464a      	mov	r2, r9
 800163a:	4342      	muls	r2, r0
 800163c:	040b      	lsls	r3, r1, #16
 800163e:	0c21      	lsrs	r1, r4, #16
 8001640:	0005      	movs	r5, r0
 8001642:	4319      	orrs	r1, r3
 8001644:	428a      	cmp	r2, r1
 8001646:	d907      	bls.n	8001658 <__aeabi_ddiv+0x2f4>
 8001648:	1989      	adds	r1, r1, r6
 800164a:	3d01      	subs	r5, #1
 800164c:	428e      	cmp	r6, r1
 800164e:	d803      	bhi.n	8001658 <__aeabi_ddiv+0x2f4>
 8001650:	428a      	cmp	r2, r1
 8001652:	d901      	bls.n	8001658 <__aeabi_ddiv+0x2f4>
 8001654:	1e85      	subs	r5, r0, #2
 8001656:	1989      	adds	r1, r1, r6
 8001658:	1a88      	subs	r0, r1, r2
 800165a:	9901      	ldr	r1, [sp, #4]
 800165c:	f7fe fdda 	bl	8000214 <__aeabi_uidivmod>
 8001660:	0409      	lsls	r1, r1, #16
 8001662:	468c      	mov	ip, r1
 8001664:	464a      	mov	r2, r9
 8001666:	0421      	lsls	r1, r4, #16
 8001668:	4664      	mov	r4, ip
 800166a:	4342      	muls	r2, r0
 800166c:	0c09      	lsrs	r1, r1, #16
 800166e:	0003      	movs	r3, r0
 8001670:	4321      	orrs	r1, r4
 8001672:	428a      	cmp	r2, r1
 8001674:	d904      	bls.n	8001680 <__aeabi_ddiv+0x31c>
 8001676:	1989      	adds	r1, r1, r6
 8001678:	3b01      	subs	r3, #1
 800167a:	428e      	cmp	r6, r1
 800167c:	d800      	bhi.n	8001680 <__aeabi_ddiv+0x31c>
 800167e:	e0f1      	b.n	8001864 <__aeabi_ddiv+0x500>
 8001680:	042d      	lsls	r5, r5, #16
 8001682:	431d      	orrs	r5, r3
 8001684:	46ab      	mov	fp, r5
 8001686:	4643      	mov	r3, r8
 8001688:	1a89      	subs	r1, r1, r2
 800168a:	4642      	mov	r2, r8
 800168c:	0c28      	lsrs	r0, r5, #16
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	0c1d      	lsrs	r5, r3, #16
 8001692:	465b      	mov	r3, fp
 8001694:	0c14      	lsrs	r4, r2, #16
 8001696:	0022      	movs	r2, r4
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	435a      	muls	r2, r3
 800169e:	9403      	str	r4, [sp, #12]
 80016a0:	436b      	muls	r3, r5
 80016a2:	4344      	muls	r4, r0
 80016a4:	9502      	str	r5, [sp, #8]
 80016a6:	4368      	muls	r0, r5
 80016a8:	191b      	adds	r3, r3, r4
 80016aa:	0c15      	lsrs	r5, r2, #16
 80016ac:	18eb      	adds	r3, r5, r3
 80016ae:	429c      	cmp	r4, r3
 80016b0:	d903      	bls.n	80016ba <__aeabi_ddiv+0x356>
 80016b2:	2480      	movs	r4, #128	; 0x80
 80016b4:	0264      	lsls	r4, r4, #9
 80016b6:	46a4      	mov	ip, r4
 80016b8:	4460      	add	r0, ip
 80016ba:	0c1c      	lsrs	r4, r3, #16
 80016bc:	0415      	lsls	r5, r2, #16
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	0c2d      	lsrs	r5, r5, #16
 80016c2:	1820      	adds	r0, r4, r0
 80016c4:	195d      	adds	r5, r3, r5
 80016c6:	4281      	cmp	r1, r0
 80016c8:	d377      	bcc.n	80017ba <__aeabi_ddiv+0x456>
 80016ca:	d073      	beq.n	80017b4 <__aeabi_ddiv+0x450>
 80016cc:	1a0c      	subs	r4, r1, r0
 80016ce:	4aa2      	ldr	r2, [pc, #648]	; (8001958 <__aeabi_ddiv+0x5f4>)
 80016d0:	1b7d      	subs	r5, r7, r5
 80016d2:	42af      	cmp	r7, r5
 80016d4:	41bf      	sbcs	r7, r7
 80016d6:	4694      	mov	ip, r2
 80016d8:	9b00      	ldr	r3, [sp, #0]
 80016da:	427f      	negs	r7, r7
 80016dc:	4463      	add	r3, ip
 80016de:	1be0      	subs	r0, r4, r7
 80016e0:	001c      	movs	r4, r3
 80016e2:	4286      	cmp	r6, r0
 80016e4:	d100      	bne.n	80016e8 <__aeabi_ddiv+0x384>
 80016e6:	e0db      	b.n	80018a0 <__aeabi_ddiv+0x53c>
 80016e8:	9901      	ldr	r1, [sp, #4]
 80016ea:	f7fe fd93 	bl	8000214 <__aeabi_uidivmod>
 80016ee:	464a      	mov	r2, r9
 80016f0:	4342      	muls	r2, r0
 80016f2:	040b      	lsls	r3, r1, #16
 80016f4:	0c29      	lsrs	r1, r5, #16
 80016f6:	0007      	movs	r7, r0
 80016f8:	4319      	orrs	r1, r3
 80016fa:	428a      	cmp	r2, r1
 80016fc:	d907      	bls.n	800170e <__aeabi_ddiv+0x3aa>
 80016fe:	1989      	adds	r1, r1, r6
 8001700:	3f01      	subs	r7, #1
 8001702:	428e      	cmp	r6, r1
 8001704:	d803      	bhi.n	800170e <__aeabi_ddiv+0x3aa>
 8001706:	428a      	cmp	r2, r1
 8001708:	d901      	bls.n	800170e <__aeabi_ddiv+0x3aa>
 800170a:	1e87      	subs	r7, r0, #2
 800170c:	1989      	adds	r1, r1, r6
 800170e:	1a88      	subs	r0, r1, r2
 8001710:	9901      	ldr	r1, [sp, #4]
 8001712:	f7fe fd7f 	bl	8000214 <__aeabi_uidivmod>
 8001716:	0409      	lsls	r1, r1, #16
 8001718:	464a      	mov	r2, r9
 800171a:	4689      	mov	r9, r1
 800171c:	0429      	lsls	r1, r5, #16
 800171e:	464d      	mov	r5, r9
 8001720:	4342      	muls	r2, r0
 8001722:	0c09      	lsrs	r1, r1, #16
 8001724:	0003      	movs	r3, r0
 8001726:	4329      	orrs	r1, r5
 8001728:	428a      	cmp	r2, r1
 800172a:	d907      	bls.n	800173c <__aeabi_ddiv+0x3d8>
 800172c:	1989      	adds	r1, r1, r6
 800172e:	3b01      	subs	r3, #1
 8001730:	428e      	cmp	r6, r1
 8001732:	d803      	bhi.n	800173c <__aeabi_ddiv+0x3d8>
 8001734:	428a      	cmp	r2, r1
 8001736:	d901      	bls.n	800173c <__aeabi_ddiv+0x3d8>
 8001738:	1e83      	subs	r3, r0, #2
 800173a:	1989      	adds	r1, r1, r6
 800173c:	043f      	lsls	r7, r7, #16
 800173e:	1a89      	subs	r1, r1, r2
 8001740:	003a      	movs	r2, r7
 8001742:	9f03      	ldr	r7, [sp, #12]
 8001744:	431a      	orrs	r2, r3
 8001746:	0038      	movs	r0, r7
 8001748:	0413      	lsls	r3, r2, #16
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	4358      	muls	r0, r3
 800174e:	4681      	mov	r9, r0
 8001750:	9802      	ldr	r0, [sp, #8]
 8001752:	0c15      	lsrs	r5, r2, #16
 8001754:	436f      	muls	r7, r5
 8001756:	4343      	muls	r3, r0
 8001758:	4345      	muls	r5, r0
 800175a:	4648      	mov	r0, r9
 800175c:	0c00      	lsrs	r0, r0, #16
 800175e:	4684      	mov	ip, r0
 8001760:	19db      	adds	r3, r3, r7
 8001762:	4463      	add	r3, ip
 8001764:	429f      	cmp	r7, r3
 8001766:	d903      	bls.n	8001770 <__aeabi_ddiv+0x40c>
 8001768:	2080      	movs	r0, #128	; 0x80
 800176a:	0240      	lsls	r0, r0, #9
 800176c:	4684      	mov	ip, r0
 800176e:	4465      	add	r5, ip
 8001770:	4648      	mov	r0, r9
 8001772:	0c1f      	lsrs	r7, r3, #16
 8001774:	0400      	lsls	r0, r0, #16
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	0c00      	lsrs	r0, r0, #16
 800177a:	197d      	adds	r5, r7, r5
 800177c:	1818      	adds	r0, r3, r0
 800177e:	42a9      	cmp	r1, r5
 8001780:	d200      	bcs.n	8001784 <__aeabi_ddiv+0x420>
 8001782:	e084      	b.n	800188e <__aeabi_ddiv+0x52a>
 8001784:	d100      	bne.n	8001788 <__aeabi_ddiv+0x424>
 8001786:	e07f      	b.n	8001888 <__aeabi_ddiv+0x524>
 8001788:	2301      	movs	r3, #1
 800178a:	431a      	orrs	r2, r3
 800178c:	e657      	b.n	800143e <__aeabi_ddiv+0xda>
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	464a      	mov	r2, r9
 8001792:	031b      	lsls	r3, r3, #12
 8001794:	4313      	orrs	r3, r2
 8001796:	031b      	lsls	r3, r3, #12
 8001798:	0b1b      	lsrs	r3, r3, #12
 800179a:	46aa      	mov	sl, r5
 800179c:	4a6f      	ldr	r2, [pc, #444]	; (800195c <__aeabi_ddiv+0x5f8>)
 800179e:	e66f      	b.n	8001480 <__aeabi_ddiv+0x11c>
 80017a0:	42ba      	cmp	r2, r7
 80017a2:	d900      	bls.n	80017a6 <__aeabi_ddiv+0x442>
 80017a4:	e735      	b.n	8001612 <__aeabi_ddiv+0x2ae>
 80017a6:	464b      	mov	r3, r9
 80017a8:	07dc      	lsls	r4, r3, #31
 80017aa:	0858      	lsrs	r0, r3, #1
 80017ac:	087b      	lsrs	r3, r7, #1
 80017ae:	431c      	orrs	r4, r3
 80017b0:	07ff      	lsls	r7, r7, #31
 80017b2:	e734      	b.n	800161e <__aeabi_ddiv+0x2ba>
 80017b4:	2400      	movs	r4, #0
 80017b6:	42af      	cmp	r7, r5
 80017b8:	d289      	bcs.n	80016ce <__aeabi_ddiv+0x36a>
 80017ba:	4447      	add	r7, r8
 80017bc:	4547      	cmp	r7, r8
 80017be:	41a4      	sbcs	r4, r4
 80017c0:	465b      	mov	r3, fp
 80017c2:	4264      	negs	r4, r4
 80017c4:	19a4      	adds	r4, r4, r6
 80017c6:	1864      	adds	r4, r4, r1
 80017c8:	3b01      	subs	r3, #1
 80017ca:	42a6      	cmp	r6, r4
 80017cc:	d21e      	bcs.n	800180c <__aeabi_ddiv+0x4a8>
 80017ce:	42a0      	cmp	r0, r4
 80017d0:	d86d      	bhi.n	80018ae <__aeabi_ddiv+0x54a>
 80017d2:	d100      	bne.n	80017d6 <__aeabi_ddiv+0x472>
 80017d4:	e0b6      	b.n	8001944 <__aeabi_ddiv+0x5e0>
 80017d6:	1a24      	subs	r4, r4, r0
 80017d8:	469b      	mov	fp, r3
 80017da:	e778      	b.n	80016ce <__aeabi_ddiv+0x36a>
 80017dc:	0003      	movs	r3, r0
 80017de:	465a      	mov	r2, fp
 80017e0:	3b28      	subs	r3, #40	; 0x28
 80017e2:	409a      	lsls	r2, r3
 80017e4:	2700      	movs	r7, #0
 80017e6:	4691      	mov	r9, r2
 80017e8:	e688      	b.n	80014fc <__aeabi_ddiv+0x198>
 80017ea:	4658      	mov	r0, fp
 80017ec:	f001 f85c 	bl	80028a8 <__clzsi2>
 80017f0:	3020      	adds	r0, #32
 80017f2:	e672      	b.n	80014da <__aeabi_ddiv+0x176>
 80017f4:	0003      	movs	r3, r0
 80017f6:	4652      	mov	r2, sl
 80017f8:	3b28      	subs	r3, #40	; 0x28
 80017fa:	409a      	lsls	r2, r3
 80017fc:	4693      	mov	fp, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	e6b4      	b.n	800156c <__aeabi_ddiv+0x208>
 8001802:	4650      	mov	r0, sl
 8001804:	f001 f850 	bl	80028a8 <__clzsi2>
 8001808:	3020      	adds	r0, #32
 800180a:	e69a      	b.n	8001542 <__aeabi_ddiv+0x1de>
 800180c:	42a6      	cmp	r6, r4
 800180e:	d1e2      	bne.n	80017d6 <__aeabi_ddiv+0x472>
 8001810:	45b8      	cmp	r8, r7
 8001812:	d9dc      	bls.n	80017ce <__aeabi_ddiv+0x46a>
 8001814:	1a34      	subs	r4, r6, r0
 8001816:	469b      	mov	fp, r3
 8001818:	e759      	b.n	80016ce <__aeabi_ddiv+0x36a>
 800181a:	2b1f      	cmp	r3, #31
 800181c:	dc65      	bgt.n	80018ea <__aeabi_ddiv+0x586>
 800181e:	4c50      	ldr	r4, [pc, #320]	; (8001960 <__aeabi_ddiv+0x5fc>)
 8001820:	9900      	ldr	r1, [sp, #0]
 8001822:	46a4      	mov	ip, r4
 8001824:	465c      	mov	r4, fp
 8001826:	4461      	add	r1, ip
 8001828:	0008      	movs	r0, r1
 800182a:	408c      	lsls	r4, r1
 800182c:	0011      	movs	r1, r2
 800182e:	4082      	lsls	r2, r0
 8001830:	40d9      	lsrs	r1, r3
 8001832:	1e50      	subs	r0, r2, #1
 8001834:	4182      	sbcs	r2, r0
 8001836:	430c      	orrs	r4, r1
 8001838:	4314      	orrs	r4, r2
 800183a:	465a      	mov	r2, fp
 800183c:	40da      	lsrs	r2, r3
 800183e:	0013      	movs	r3, r2
 8001840:	0762      	lsls	r2, r4, #29
 8001842:	d009      	beq.n	8001858 <__aeabi_ddiv+0x4f4>
 8001844:	220f      	movs	r2, #15
 8001846:	4022      	ands	r2, r4
 8001848:	2a04      	cmp	r2, #4
 800184a:	d005      	beq.n	8001858 <__aeabi_ddiv+0x4f4>
 800184c:	0022      	movs	r2, r4
 800184e:	1d14      	adds	r4, r2, #4
 8001850:	4294      	cmp	r4, r2
 8001852:	4189      	sbcs	r1, r1
 8001854:	4249      	negs	r1, r1
 8001856:	185b      	adds	r3, r3, r1
 8001858:	021a      	lsls	r2, r3, #8
 800185a:	d562      	bpl.n	8001922 <__aeabi_ddiv+0x5be>
 800185c:	2201      	movs	r2, #1
 800185e:	2300      	movs	r3, #0
 8001860:	2700      	movs	r7, #0
 8001862:	e60d      	b.n	8001480 <__aeabi_ddiv+0x11c>
 8001864:	428a      	cmp	r2, r1
 8001866:	d800      	bhi.n	800186a <__aeabi_ddiv+0x506>
 8001868:	e70a      	b.n	8001680 <__aeabi_ddiv+0x31c>
 800186a:	1e83      	subs	r3, r0, #2
 800186c:	1989      	adds	r1, r1, r6
 800186e:	e707      	b.n	8001680 <__aeabi_ddiv+0x31c>
 8001870:	230f      	movs	r3, #15
 8001872:	4013      	ands	r3, r2
 8001874:	2b04      	cmp	r3, #4
 8001876:	d100      	bne.n	800187a <__aeabi_ddiv+0x516>
 8001878:	e5e6      	b.n	8001448 <__aeabi_ddiv+0xe4>
 800187a:	1d17      	adds	r7, r2, #4
 800187c:	4297      	cmp	r7, r2
 800187e:	4192      	sbcs	r2, r2
 8001880:	4253      	negs	r3, r2
 8001882:	449b      	add	fp, r3
 8001884:	08fa      	lsrs	r2, r7, #3
 8001886:	e5e0      	b.n	800144a <__aeabi_ddiv+0xe6>
 8001888:	2800      	cmp	r0, #0
 800188a:	d100      	bne.n	800188e <__aeabi_ddiv+0x52a>
 800188c:	e5d7      	b.n	800143e <__aeabi_ddiv+0xda>
 800188e:	1871      	adds	r1, r6, r1
 8001890:	1e53      	subs	r3, r2, #1
 8001892:	42b1      	cmp	r1, r6
 8001894:	d327      	bcc.n	80018e6 <__aeabi_ddiv+0x582>
 8001896:	42a9      	cmp	r1, r5
 8001898:	d315      	bcc.n	80018c6 <__aeabi_ddiv+0x562>
 800189a:	d058      	beq.n	800194e <__aeabi_ddiv+0x5ea>
 800189c:	001a      	movs	r2, r3
 800189e:	e773      	b.n	8001788 <__aeabi_ddiv+0x424>
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_ddiv+0x542>
 80018a4:	e604      	b.n	80014b0 <__aeabi_ddiv+0x14c>
 80018a6:	2301      	movs	r3, #1
 80018a8:	2200      	movs	r2, #0
 80018aa:	449b      	add	fp, r3
 80018ac:	e5cd      	b.n	800144a <__aeabi_ddiv+0xe6>
 80018ae:	2302      	movs	r3, #2
 80018b0:	4447      	add	r7, r8
 80018b2:	4547      	cmp	r7, r8
 80018b4:	4189      	sbcs	r1, r1
 80018b6:	425b      	negs	r3, r3
 80018b8:	469c      	mov	ip, r3
 80018ba:	4249      	negs	r1, r1
 80018bc:	1989      	adds	r1, r1, r6
 80018be:	190c      	adds	r4, r1, r4
 80018c0:	44e3      	add	fp, ip
 80018c2:	1a24      	subs	r4, r4, r0
 80018c4:	e703      	b.n	80016ce <__aeabi_ddiv+0x36a>
 80018c6:	4643      	mov	r3, r8
 80018c8:	005f      	lsls	r7, r3, #1
 80018ca:	4547      	cmp	r7, r8
 80018cc:	419b      	sbcs	r3, r3
 80018ce:	46b8      	mov	r8, r7
 80018d0:	425b      	negs	r3, r3
 80018d2:	199e      	adds	r6, r3, r6
 80018d4:	3a02      	subs	r2, #2
 80018d6:	1989      	adds	r1, r1, r6
 80018d8:	42a9      	cmp	r1, r5
 80018da:	d000      	beq.n	80018de <__aeabi_ddiv+0x57a>
 80018dc:	e754      	b.n	8001788 <__aeabi_ddiv+0x424>
 80018de:	4540      	cmp	r0, r8
 80018e0:	d000      	beq.n	80018e4 <__aeabi_ddiv+0x580>
 80018e2:	e751      	b.n	8001788 <__aeabi_ddiv+0x424>
 80018e4:	e5ab      	b.n	800143e <__aeabi_ddiv+0xda>
 80018e6:	001a      	movs	r2, r3
 80018e8:	e7f6      	b.n	80018d8 <__aeabi_ddiv+0x574>
 80018ea:	211f      	movs	r1, #31
 80018ec:	465f      	mov	r7, fp
 80018ee:	4249      	negs	r1, r1
 80018f0:	1b0c      	subs	r4, r1, r4
 80018f2:	40e7      	lsrs	r7, r4
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	d007      	beq.n	8001908 <__aeabi_ddiv+0x5a4>
 80018f8:	491a      	ldr	r1, [pc, #104]	; (8001964 <__aeabi_ddiv+0x600>)
 80018fa:	9b00      	ldr	r3, [sp, #0]
 80018fc:	468c      	mov	ip, r1
 80018fe:	4463      	add	r3, ip
 8001900:	0018      	movs	r0, r3
 8001902:	465b      	mov	r3, fp
 8001904:	4083      	lsls	r3, r0
 8001906:	431a      	orrs	r2, r3
 8001908:	1e50      	subs	r0, r2, #1
 800190a:	4182      	sbcs	r2, r0
 800190c:	433a      	orrs	r2, r7
 800190e:	2707      	movs	r7, #7
 8001910:	2300      	movs	r3, #0
 8001912:	4017      	ands	r7, r2
 8001914:	d009      	beq.n	800192a <__aeabi_ddiv+0x5c6>
 8001916:	210f      	movs	r1, #15
 8001918:	2300      	movs	r3, #0
 800191a:	4011      	ands	r1, r2
 800191c:	0014      	movs	r4, r2
 800191e:	2904      	cmp	r1, #4
 8001920:	d195      	bne.n	800184e <__aeabi_ddiv+0x4ea>
 8001922:	0022      	movs	r2, r4
 8001924:	075f      	lsls	r7, r3, #29
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	0b1b      	lsrs	r3, r3, #12
 800192a:	08d2      	lsrs	r2, r2, #3
 800192c:	4317      	orrs	r7, r2
 800192e:	2200      	movs	r2, #0
 8001930:	e5a6      	b.n	8001480 <__aeabi_ddiv+0x11c>
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	4659      	mov	r1, fp
 8001936:	031b      	lsls	r3, r3, #12
 8001938:	430b      	orrs	r3, r1
 800193a:	031b      	lsls	r3, r3, #12
 800193c:	0017      	movs	r7, r2
 800193e:	0b1b      	lsrs	r3, r3, #12
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <__aeabi_ddiv+0x5f8>)
 8001942:	e59d      	b.n	8001480 <__aeabi_ddiv+0x11c>
 8001944:	42bd      	cmp	r5, r7
 8001946:	d8b2      	bhi.n	80018ae <__aeabi_ddiv+0x54a>
 8001948:	469b      	mov	fp, r3
 800194a:	2400      	movs	r4, #0
 800194c:	e6bf      	b.n	80016ce <__aeabi_ddiv+0x36a>
 800194e:	4580      	cmp	r8, r0
 8001950:	d3b9      	bcc.n	80018c6 <__aeabi_ddiv+0x562>
 8001952:	001a      	movs	r2, r3
 8001954:	e7c3      	b.n	80018de <__aeabi_ddiv+0x57a>
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	000003ff 	.word	0x000003ff
 800195c:	000007ff 	.word	0x000007ff
 8001960:	0000041e 	.word	0x0000041e
 8001964:	0000043e 	.word	0x0000043e

08001968 <__eqdf2>:
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	464f      	mov	r7, r9
 800196c:	4646      	mov	r6, r8
 800196e:	46d6      	mov	lr, sl
 8001970:	4684      	mov	ip, r0
 8001972:	b5c0      	push	{r6, r7, lr}
 8001974:	4680      	mov	r8, r0
 8001976:	4e19      	ldr	r6, [pc, #100]	; (80019dc <__eqdf2+0x74>)
 8001978:	0318      	lsls	r0, r3, #12
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	004d      	lsls	r5, r1, #1
 800197e:	0b00      	lsrs	r0, r0, #12
 8001980:	005c      	lsls	r4, r3, #1
 8001982:	4682      	mov	sl, r0
 8001984:	0b3f      	lsrs	r7, r7, #12
 8001986:	0d6d      	lsrs	r5, r5, #21
 8001988:	0fc9      	lsrs	r1, r1, #31
 800198a:	4691      	mov	r9, r2
 800198c:	0d64      	lsrs	r4, r4, #21
 800198e:	0fdb      	lsrs	r3, r3, #31
 8001990:	2001      	movs	r0, #1
 8001992:	42b5      	cmp	r5, r6
 8001994:	d00a      	beq.n	80019ac <__eqdf2+0x44>
 8001996:	42b4      	cmp	r4, r6
 8001998:	d003      	beq.n	80019a2 <__eqdf2+0x3a>
 800199a:	42a5      	cmp	r5, r4
 800199c:	d101      	bne.n	80019a2 <__eqdf2+0x3a>
 800199e:	4557      	cmp	r7, sl
 80019a0:	d00c      	beq.n	80019bc <__eqdf2+0x54>
 80019a2:	bc1c      	pop	{r2, r3, r4}
 80019a4:	4690      	mov	r8, r2
 80019a6:	4699      	mov	r9, r3
 80019a8:	46a2      	mov	sl, r4
 80019aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ac:	4666      	mov	r6, ip
 80019ae:	433e      	orrs	r6, r7
 80019b0:	d1f7      	bne.n	80019a2 <__eqdf2+0x3a>
 80019b2:	42ac      	cmp	r4, r5
 80019b4:	d1f5      	bne.n	80019a2 <__eqdf2+0x3a>
 80019b6:	4654      	mov	r4, sl
 80019b8:	4314      	orrs	r4, r2
 80019ba:	d1f2      	bne.n	80019a2 <__eqdf2+0x3a>
 80019bc:	2001      	movs	r0, #1
 80019be:	45c8      	cmp	r8, r9
 80019c0:	d1ef      	bne.n	80019a2 <__eqdf2+0x3a>
 80019c2:	4299      	cmp	r1, r3
 80019c4:	d007      	beq.n	80019d6 <__eqdf2+0x6e>
 80019c6:	2d00      	cmp	r5, #0
 80019c8:	d1eb      	bne.n	80019a2 <__eqdf2+0x3a>
 80019ca:	4663      	mov	r3, ip
 80019cc:	431f      	orrs	r7, r3
 80019ce:	0038      	movs	r0, r7
 80019d0:	1e47      	subs	r7, r0, #1
 80019d2:	41b8      	sbcs	r0, r7
 80019d4:	e7e5      	b.n	80019a2 <__eqdf2+0x3a>
 80019d6:	2000      	movs	r0, #0
 80019d8:	e7e3      	b.n	80019a2 <__eqdf2+0x3a>
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	000007ff 	.word	0x000007ff

080019e0 <__gedf2>:
 80019e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e2:	464f      	mov	r7, r9
 80019e4:	4646      	mov	r6, r8
 80019e6:	46d6      	mov	lr, sl
 80019e8:	004d      	lsls	r5, r1, #1
 80019ea:	b5c0      	push	{r6, r7, lr}
 80019ec:	030e      	lsls	r6, r1, #12
 80019ee:	0fc9      	lsrs	r1, r1, #31
 80019f0:	468a      	mov	sl, r1
 80019f2:	492c      	ldr	r1, [pc, #176]	; (8001aa4 <__gedf2+0xc4>)
 80019f4:	031f      	lsls	r7, r3, #12
 80019f6:	005c      	lsls	r4, r3, #1
 80019f8:	4680      	mov	r8, r0
 80019fa:	0b36      	lsrs	r6, r6, #12
 80019fc:	0d6d      	lsrs	r5, r5, #21
 80019fe:	4691      	mov	r9, r2
 8001a00:	0b3f      	lsrs	r7, r7, #12
 8001a02:	0d64      	lsrs	r4, r4, #21
 8001a04:	0fdb      	lsrs	r3, r3, #31
 8001a06:	428d      	cmp	r5, r1
 8001a08:	d01e      	beq.n	8001a48 <__gedf2+0x68>
 8001a0a:	428c      	cmp	r4, r1
 8001a0c:	d016      	beq.n	8001a3c <__gedf2+0x5c>
 8001a0e:	2d00      	cmp	r5, #0
 8001a10:	d11e      	bne.n	8001a50 <__gedf2+0x70>
 8001a12:	4330      	orrs	r0, r6
 8001a14:	4684      	mov	ip, r0
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	d101      	bne.n	8001a1e <__gedf2+0x3e>
 8001a1a:	433a      	orrs	r2, r7
 8001a1c:	d023      	beq.n	8001a66 <__gedf2+0x86>
 8001a1e:	4662      	mov	r2, ip
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	d01a      	beq.n	8001a5a <__gedf2+0x7a>
 8001a24:	459a      	cmp	sl, r3
 8001a26:	d029      	beq.n	8001a7c <__gedf2+0x9c>
 8001a28:	4651      	mov	r1, sl
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	3901      	subs	r1, #1
 8001a2e:	4008      	ands	r0, r1
 8001a30:	3801      	subs	r0, #1
 8001a32:	bc1c      	pop	{r2, r3, r4}
 8001a34:	4690      	mov	r8, r2
 8001a36:	4699      	mov	r9, r3
 8001a38:	46a2      	mov	sl, r4
 8001a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3c:	0039      	movs	r1, r7
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	d0e5      	beq.n	8001a0e <__gedf2+0x2e>
 8001a42:	2002      	movs	r0, #2
 8001a44:	4240      	negs	r0, r0
 8001a46:	e7f4      	b.n	8001a32 <__gedf2+0x52>
 8001a48:	4330      	orrs	r0, r6
 8001a4a:	d1fa      	bne.n	8001a42 <__gedf2+0x62>
 8001a4c:	42ac      	cmp	r4, r5
 8001a4e:	d00f      	beq.n	8001a70 <__gedf2+0x90>
 8001a50:	2c00      	cmp	r4, #0
 8001a52:	d10f      	bne.n	8001a74 <__gedf2+0x94>
 8001a54:	433a      	orrs	r2, r7
 8001a56:	d0e7      	beq.n	8001a28 <__gedf2+0x48>
 8001a58:	e00c      	b.n	8001a74 <__gedf2+0x94>
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	4393      	bics	r3, r2
 8001a60:	0018      	movs	r0, r3
 8001a62:	3001      	adds	r0, #1
 8001a64:	e7e5      	b.n	8001a32 <__gedf2+0x52>
 8001a66:	4663      	mov	r3, ip
 8001a68:	2000      	movs	r0, #0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0e1      	beq.n	8001a32 <__gedf2+0x52>
 8001a6e:	e7db      	b.n	8001a28 <__gedf2+0x48>
 8001a70:	433a      	orrs	r2, r7
 8001a72:	d1e6      	bne.n	8001a42 <__gedf2+0x62>
 8001a74:	459a      	cmp	sl, r3
 8001a76:	d1d7      	bne.n	8001a28 <__gedf2+0x48>
 8001a78:	42a5      	cmp	r5, r4
 8001a7a:	dcd5      	bgt.n	8001a28 <__gedf2+0x48>
 8001a7c:	42a5      	cmp	r5, r4
 8001a7e:	db05      	blt.n	8001a8c <__gedf2+0xac>
 8001a80:	42be      	cmp	r6, r7
 8001a82:	d8d1      	bhi.n	8001a28 <__gedf2+0x48>
 8001a84:	d008      	beq.n	8001a98 <__gedf2+0xb8>
 8001a86:	2000      	movs	r0, #0
 8001a88:	42be      	cmp	r6, r7
 8001a8a:	d2d2      	bcs.n	8001a32 <__gedf2+0x52>
 8001a8c:	4650      	mov	r0, sl
 8001a8e:	2301      	movs	r3, #1
 8001a90:	3801      	subs	r0, #1
 8001a92:	4398      	bics	r0, r3
 8001a94:	3001      	adds	r0, #1
 8001a96:	e7cc      	b.n	8001a32 <__gedf2+0x52>
 8001a98:	45c8      	cmp	r8, r9
 8001a9a:	d8c5      	bhi.n	8001a28 <__gedf2+0x48>
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	45c8      	cmp	r8, r9
 8001aa0:	d3f4      	bcc.n	8001a8c <__gedf2+0xac>
 8001aa2:	e7c6      	b.n	8001a32 <__gedf2+0x52>
 8001aa4:	000007ff 	.word	0x000007ff

08001aa8 <__ledf2>:
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	464f      	mov	r7, r9
 8001aac:	4646      	mov	r6, r8
 8001aae:	46d6      	mov	lr, sl
 8001ab0:	004d      	lsls	r5, r1, #1
 8001ab2:	b5c0      	push	{r6, r7, lr}
 8001ab4:	030e      	lsls	r6, r1, #12
 8001ab6:	0fc9      	lsrs	r1, r1, #31
 8001ab8:	468a      	mov	sl, r1
 8001aba:	492e      	ldr	r1, [pc, #184]	; (8001b74 <__ledf2+0xcc>)
 8001abc:	031f      	lsls	r7, r3, #12
 8001abe:	005c      	lsls	r4, r3, #1
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	0b36      	lsrs	r6, r6, #12
 8001ac4:	0d6d      	lsrs	r5, r5, #21
 8001ac6:	4691      	mov	r9, r2
 8001ac8:	0b3f      	lsrs	r7, r7, #12
 8001aca:	0d64      	lsrs	r4, r4, #21
 8001acc:	0fdb      	lsrs	r3, r3, #31
 8001ace:	428d      	cmp	r5, r1
 8001ad0:	d018      	beq.n	8001b04 <__ledf2+0x5c>
 8001ad2:	428c      	cmp	r4, r1
 8001ad4:	d011      	beq.n	8001afa <__ledf2+0x52>
 8001ad6:	2d00      	cmp	r5, #0
 8001ad8:	d118      	bne.n	8001b0c <__ledf2+0x64>
 8001ada:	4330      	orrs	r0, r6
 8001adc:	4684      	mov	ip, r0
 8001ade:	2c00      	cmp	r4, #0
 8001ae0:	d11e      	bne.n	8001b20 <__ledf2+0x78>
 8001ae2:	433a      	orrs	r2, r7
 8001ae4:	d11c      	bne.n	8001b20 <__ledf2+0x78>
 8001ae6:	4663      	mov	r3, ip
 8001ae8:	2000      	movs	r0, #0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d030      	beq.n	8001b50 <__ledf2+0xa8>
 8001aee:	4651      	mov	r1, sl
 8001af0:	2002      	movs	r0, #2
 8001af2:	3901      	subs	r1, #1
 8001af4:	4008      	ands	r0, r1
 8001af6:	3801      	subs	r0, #1
 8001af8:	e02a      	b.n	8001b50 <__ledf2+0xa8>
 8001afa:	0039      	movs	r1, r7
 8001afc:	4311      	orrs	r1, r2
 8001afe:	d0ea      	beq.n	8001ad6 <__ledf2+0x2e>
 8001b00:	2002      	movs	r0, #2
 8001b02:	e025      	b.n	8001b50 <__ledf2+0xa8>
 8001b04:	4330      	orrs	r0, r6
 8001b06:	d1fb      	bne.n	8001b00 <__ledf2+0x58>
 8001b08:	42ac      	cmp	r4, r5
 8001b0a:	d026      	beq.n	8001b5a <__ledf2+0xb2>
 8001b0c:	2c00      	cmp	r4, #0
 8001b0e:	d126      	bne.n	8001b5e <__ledf2+0xb6>
 8001b10:	433a      	orrs	r2, r7
 8001b12:	d124      	bne.n	8001b5e <__ledf2+0xb6>
 8001b14:	4651      	mov	r1, sl
 8001b16:	2002      	movs	r0, #2
 8001b18:	3901      	subs	r1, #1
 8001b1a:	4008      	ands	r0, r1
 8001b1c:	3801      	subs	r0, #1
 8001b1e:	e017      	b.n	8001b50 <__ledf2+0xa8>
 8001b20:	4662      	mov	r2, ip
 8001b22:	2a00      	cmp	r2, #0
 8001b24:	d00f      	beq.n	8001b46 <__ledf2+0x9e>
 8001b26:	459a      	cmp	sl, r3
 8001b28:	d1e1      	bne.n	8001aee <__ledf2+0x46>
 8001b2a:	42a5      	cmp	r5, r4
 8001b2c:	db05      	blt.n	8001b3a <__ledf2+0x92>
 8001b2e:	42be      	cmp	r6, r7
 8001b30:	d8dd      	bhi.n	8001aee <__ledf2+0x46>
 8001b32:	d019      	beq.n	8001b68 <__ledf2+0xc0>
 8001b34:	2000      	movs	r0, #0
 8001b36:	42be      	cmp	r6, r7
 8001b38:	d20a      	bcs.n	8001b50 <__ledf2+0xa8>
 8001b3a:	4650      	mov	r0, sl
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	3801      	subs	r0, #1
 8001b40:	4398      	bics	r0, r3
 8001b42:	3001      	adds	r0, #1
 8001b44:	e004      	b.n	8001b50 <__ledf2+0xa8>
 8001b46:	2201      	movs	r2, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	4393      	bics	r3, r2
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	3001      	adds	r0, #1
 8001b50:	bc1c      	pop	{r2, r3, r4}
 8001b52:	4690      	mov	r8, r2
 8001b54:	4699      	mov	r9, r3
 8001b56:	46a2      	mov	sl, r4
 8001b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5a:	433a      	orrs	r2, r7
 8001b5c:	d1d0      	bne.n	8001b00 <__ledf2+0x58>
 8001b5e:	459a      	cmp	sl, r3
 8001b60:	d1c5      	bne.n	8001aee <__ledf2+0x46>
 8001b62:	42a5      	cmp	r5, r4
 8001b64:	dcc3      	bgt.n	8001aee <__ledf2+0x46>
 8001b66:	e7e0      	b.n	8001b2a <__ledf2+0x82>
 8001b68:	45c8      	cmp	r8, r9
 8001b6a:	d8c0      	bhi.n	8001aee <__ledf2+0x46>
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	45c8      	cmp	r8, r9
 8001b70:	d3e3      	bcc.n	8001b3a <__ledf2+0x92>
 8001b72:	e7ed      	b.n	8001b50 <__ledf2+0xa8>
 8001b74:	000007ff 	.word	0x000007ff

08001b78 <__aeabi_dmul>:
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	4657      	mov	r7, sl
 8001b7c:	46de      	mov	lr, fp
 8001b7e:	464e      	mov	r6, r9
 8001b80:	4645      	mov	r5, r8
 8001b82:	b5e0      	push	{r5, r6, r7, lr}
 8001b84:	4683      	mov	fp, r0
 8001b86:	0006      	movs	r6, r0
 8001b88:	030f      	lsls	r7, r1, #12
 8001b8a:	0048      	lsls	r0, r1, #1
 8001b8c:	b087      	sub	sp, #28
 8001b8e:	4692      	mov	sl, r2
 8001b90:	001d      	movs	r5, r3
 8001b92:	0b3f      	lsrs	r7, r7, #12
 8001b94:	0d40      	lsrs	r0, r0, #21
 8001b96:	0fcc      	lsrs	r4, r1, #31
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_dmul+0x26>
 8001b9c:	e06f      	b.n	8001c7e <__aeabi_dmul+0x106>
 8001b9e:	4bde      	ldr	r3, [pc, #888]	; (8001f18 <__aeabi_dmul+0x3a0>)
 8001ba0:	4298      	cmp	r0, r3
 8001ba2:	d038      	beq.n	8001c16 <__aeabi_dmul+0x9e>
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	00ff      	lsls	r7, r7, #3
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	431f      	orrs	r7, r3
 8001bac:	0f73      	lsrs	r3, r6, #29
 8001bae:	433b      	orrs	r3, r7
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	4bda      	ldr	r3, [pc, #872]	; (8001f1c <__aeabi_dmul+0x3a4>)
 8001bb4:	2700      	movs	r7, #0
 8001bb6:	4699      	mov	r9, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	469b      	mov	fp, r3
 8001bbc:	00f6      	lsls	r6, r6, #3
 8001bbe:	4481      	add	r9, r0
 8001bc0:	032b      	lsls	r3, r5, #12
 8001bc2:	0069      	lsls	r1, r5, #1
 8001bc4:	0b1b      	lsrs	r3, r3, #12
 8001bc6:	4652      	mov	r2, sl
 8001bc8:	4698      	mov	r8, r3
 8001bca:	0d49      	lsrs	r1, r1, #21
 8001bcc:	0fed      	lsrs	r5, r5, #31
 8001bce:	2900      	cmp	r1, #0
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dmul+0x5c>
 8001bd2:	e085      	b.n	8001ce0 <__aeabi_dmul+0x168>
 8001bd4:	4bd0      	ldr	r3, [pc, #832]	; (8001f18 <__aeabi_dmul+0x3a0>)
 8001bd6:	4299      	cmp	r1, r3
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dmul+0x64>
 8001bda:	e073      	b.n	8001cc4 <__aeabi_dmul+0x14c>
 8001bdc:	4643      	mov	r3, r8
 8001bde:	00da      	lsls	r2, r3, #3
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	041b      	lsls	r3, r3, #16
 8001be4:	4313      	orrs	r3, r2
 8001be6:	4652      	mov	r2, sl
 8001be8:	48cc      	ldr	r0, [pc, #816]	; (8001f1c <__aeabi_dmul+0x3a4>)
 8001bea:	0f52      	lsrs	r2, r2, #29
 8001bec:	4684      	mov	ip, r0
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	4652      	mov	r2, sl
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	4461      	add	r1, ip
 8001bf6:	00d2      	lsls	r2, r2, #3
 8001bf8:	4489      	add	r9, r1
 8001bfa:	0021      	movs	r1, r4
 8001bfc:	4069      	eors	r1, r5
 8001bfe:	9100      	str	r1, [sp, #0]
 8001c00:	468c      	mov	ip, r1
 8001c02:	2101      	movs	r1, #1
 8001c04:	4449      	add	r1, r9
 8001c06:	468a      	mov	sl, r1
 8001c08:	2f0f      	cmp	r7, #15
 8001c0a:	d900      	bls.n	8001c0e <__aeabi_dmul+0x96>
 8001c0c:	e090      	b.n	8001d30 <__aeabi_dmul+0x1b8>
 8001c0e:	49c4      	ldr	r1, [pc, #784]	; (8001f20 <__aeabi_dmul+0x3a8>)
 8001c10:	00bf      	lsls	r7, r7, #2
 8001c12:	59cf      	ldr	r7, [r1, r7]
 8001c14:	46bf      	mov	pc, r7
 8001c16:	465b      	mov	r3, fp
 8001c18:	433b      	orrs	r3, r7
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_dmul+0xa8>
 8001c1e:	e16a      	b.n	8001ef6 <__aeabi_dmul+0x37e>
 8001c20:	2302      	movs	r3, #2
 8001c22:	2708      	movs	r7, #8
 8001c24:	2600      	movs	r6, #0
 8001c26:	4681      	mov	r9, r0
 8001c28:	469b      	mov	fp, r3
 8001c2a:	e7c9      	b.n	8001bc0 <__aeabi_dmul+0x48>
 8001c2c:	0032      	movs	r2, r6
 8001c2e:	4658      	mov	r0, fp
 8001c30:	9b01      	ldr	r3, [sp, #4]
 8001c32:	4661      	mov	r1, ip
 8001c34:	9100      	str	r1, [sp, #0]
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dmul+0xc4>
 8001c3a:	e075      	b.n	8001d28 <__aeabi_dmul+0x1b0>
 8001c3c:	2803      	cmp	r0, #3
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dmul+0xca>
 8001c40:	e1fe      	b.n	8002040 <__aeabi_dmul+0x4c8>
 8001c42:	2801      	cmp	r0, #1
 8001c44:	d000      	beq.n	8001c48 <__aeabi_dmul+0xd0>
 8001c46:	e12c      	b.n	8001ea2 <__aeabi_dmul+0x32a>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2700      	movs	r7, #0
 8001c4c:	2600      	movs	r6, #0
 8001c4e:	2500      	movs	r5, #0
 8001c50:	033f      	lsls	r7, r7, #12
 8001c52:	0d2a      	lsrs	r2, r5, #20
 8001c54:	0b3f      	lsrs	r7, r7, #12
 8001c56:	48b3      	ldr	r0, [pc, #716]	; (8001f24 <__aeabi_dmul+0x3ac>)
 8001c58:	0512      	lsls	r2, r2, #20
 8001c5a:	433a      	orrs	r2, r7
 8001c5c:	4002      	ands	r2, r0
 8001c5e:	051b      	lsls	r3, r3, #20
 8001c60:	4313      	orrs	r3, r2
 8001c62:	9a00      	ldr	r2, [sp, #0]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	07d1      	lsls	r1, r2, #31
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	0030      	movs	r0, r6
 8001c6e:	0019      	movs	r1, r3
 8001c70:	b007      	add	sp, #28
 8001c72:	bc3c      	pop	{r2, r3, r4, r5}
 8001c74:	4690      	mov	r8, r2
 8001c76:	4699      	mov	r9, r3
 8001c78:	46a2      	mov	sl, r4
 8001c7a:	46ab      	mov	fp, r5
 8001c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7e:	465b      	mov	r3, fp
 8001c80:	433b      	orrs	r3, r7
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dmul+0x110>
 8001c86:	e12f      	b.n	8001ee8 <__aeabi_dmul+0x370>
 8001c88:	2f00      	cmp	r7, #0
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dmul+0x116>
 8001c8c:	e1a5      	b.n	8001fda <__aeabi_dmul+0x462>
 8001c8e:	0038      	movs	r0, r7
 8001c90:	f000 fe0a 	bl	80028a8 <__clzsi2>
 8001c94:	0003      	movs	r3, r0
 8001c96:	3b0b      	subs	r3, #11
 8001c98:	2b1c      	cmp	r3, #28
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dmul+0x126>
 8001c9c:	e196      	b.n	8001fcc <__aeabi_dmul+0x454>
 8001c9e:	221d      	movs	r2, #29
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	465a      	mov	r2, fp
 8001ca4:	0001      	movs	r1, r0
 8001ca6:	40da      	lsrs	r2, r3
 8001ca8:	465e      	mov	r6, fp
 8001caa:	3908      	subs	r1, #8
 8001cac:	408f      	lsls	r7, r1
 8001cae:	0013      	movs	r3, r2
 8001cb0:	408e      	lsls	r6, r1
 8001cb2:	433b      	orrs	r3, r7
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	4b9c      	ldr	r3, [pc, #624]	; (8001f28 <__aeabi_dmul+0x3b0>)
 8001cb8:	2700      	movs	r7, #0
 8001cba:	1a1b      	subs	r3, r3, r0
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	469b      	mov	fp, r3
 8001cc2:	e77d      	b.n	8001bc0 <__aeabi_dmul+0x48>
 8001cc4:	4641      	mov	r1, r8
 8001cc6:	4653      	mov	r3, sl
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	4993      	ldr	r1, [pc, #588]	; (8001f18 <__aeabi_dmul+0x3a0>)
 8001ccc:	468c      	mov	ip, r1
 8001cce:	44e1      	add	r9, ip
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d000      	beq.n	8001cd6 <__aeabi_dmul+0x15e>
 8001cd4:	e11a      	b.n	8001f0c <__aeabi_dmul+0x394>
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	2002      	movs	r0, #2
 8001cda:	4317      	orrs	r7, r2
 8001cdc:	2200      	movs	r2, #0
 8001cde:	e78c      	b.n	8001bfa <__aeabi_dmul+0x82>
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dmul+0x16e>
 8001ce4:	e10d      	b.n	8001f02 <__aeabi_dmul+0x38a>
 8001ce6:	4643      	mov	r3, r8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d100      	bne.n	8001cee <__aeabi_dmul+0x176>
 8001cec:	e181      	b.n	8001ff2 <__aeabi_dmul+0x47a>
 8001cee:	4640      	mov	r0, r8
 8001cf0:	f000 fdda 	bl	80028a8 <__clzsi2>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	3a0b      	subs	r2, #11
 8001cf8:	2a1c      	cmp	r2, #28
 8001cfa:	dd00      	ble.n	8001cfe <__aeabi_dmul+0x186>
 8001cfc:	e172      	b.n	8001fe4 <__aeabi_dmul+0x46c>
 8001cfe:	0001      	movs	r1, r0
 8001d00:	4643      	mov	r3, r8
 8001d02:	3908      	subs	r1, #8
 8001d04:	408b      	lsls	r3, r1
 8001d06:	4698      	mov	r8, r3
 8001d08:	231d      	movs	r3, #29
 8001d0a:	1a9a      	subs	r2, r3, r2
 8001d0c:	4653      	mov	r3, sl
 8001d0e:	40d3      	lsrs	r3, r2
 8001d10:	001a      	movs	r2, r3
 8001d12:	4643      	mov	r3, r8
 8001d14:	4313      	orrs	r3, r2
 8001d16:	4652      	mov	r2, sl
 8001d18:	408a      	lsls	r2, r1
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	1a08      	subs	r0, r1, r0
 8001d1e:	4982      	ldr	r1, [pc, #520]	; (8001f28 <__aeabi_dmul+0x3b0>)
 8001d20:	4689      	mov	r9, r1
 8001d22:	4481      	add	r9, r0
 8001d24:	2000      	movs	r0, #0
 8001d26:	e768      	b.n	8001bfa <__aeabi_dmul+0x82>
 8001d28:	4b7b      	ldr	r3, [pc, #492]	; (8001f18 <__aeabi_dmul+0x3a0>)
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	e78e      	b.n	8001c4e <__aeabi_dmul+0xd6>
 8001d30:	0c14      	lsrs	r4, r2, #16
 8001d32:	0412      	lsls	r2, r2, #16
 8001d34:	0c12      	lsrs	r2, r2, #16
 8001d36:	0011      	movs	r1, r2
 8001d38:	0c37      	lsrs	r7, r6, #16
 8001d3a:	0436      	lsls	r6, r6, #16
 8001d3c:	0c35      	lsrs	r5, r6, #16
 8001d3e:	4379      	muls	r1, r7
 8001d40:	0028      	movs	r0, r5
 8001d42:	468c      	mov	ip, r1
 8001d44:	002e      	movs	r6, r5
 8001d46:	4360      	muls	r0, r4
 8001d48:	4460      	add	r0, ip
 8001d4a:	4683      	mov	fp, r0
 8001d4c:	4356      	muls	r6, r2
 8001d4e:	0021      	movs	r1, r4
 8001d50:	0c30      	lsrs	r0, r6, #16
 8001d52:	4680      	mov	r8, r0
 8001d54:	4658      	mov	r0, fp
 8001d56:	4379      	muls	r1, r7
 8001d58:	4440      	add	r0, r8
 8001d5a:	9102      	str	r1, [sp, #8]
 8001d5c:	4584      	cmp	ip, r0
 8001d5e:	d906      	bls.n	8001d6e <__aeabi_dmul+0x1f6>
 8001d60:	4688      	mov	r8, r1
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	0249      	lsls	r1, r1, #9
 8001d66:	468c      	mov	ip, r1
 8001d68:	44e0      	add	r8, ip
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	9102      	str	r1, [sp, #8]
 8001d6e:	0436      	lsls	r6, r6, #16
 8001d70:	0c01      	lsrs	r1, r0, #16
 8001d72:	0c36      	lsrs	r6, r6, #16
 8001d74:	0400      	lsls	r0, r0, #16
 8001d76:	468b      	mov	fp, r1
 8001d78:	1981      	adds	r1, r0, r6
 8001d7a:	0c1e      	lsrs	r6, r3, #16
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	9103      	str	r1, [sp, #12]
 8001d82:	0019      	movs	r1, r3
 8001d84:	4379      	muls	r1, r7
 8001d86:	468c      	mov	ip, r1
 8001d88:	0028      	movs	r0, r5
 8001d8a:	4375      	muls	r5, r6
 8001d8c:	4465      	add	r5, ip
 8001d8e:	46a8      	mov	r8, r5
 8001d90:	4358      	muls	r0, r3
 8001d92:	0c05      	lsrs	r5, r0, #16
 8001d94:	4445      	add	r5, r8
 8001d96:	4377      	muls	r7, r6
 8001d98:	42a9      	cmp	r1, r5
 8001d9a:	d903      	bls.n	8001da4 <__aeabi_dmul+0x22c>
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	0249      	lsls	r1, r1, #9
 8001da0:	468c      	mov	ip, r1
 8001da2:	4467      	add	r7, ip
 8001da4:	0c29      	lsrs	r1, r5, #16
 8001da6:	468c      	mov	ip, r1
 8001da8:	0039      	movs	r1, r7
 8001daa:	0400      	lsls	r0, r0, #16
 8001dac:	0c00      	lsrs	r0, r0, #16
 8001dae:	042d      	lsls	r5, r5, #16
 8001db0:	182d      	adds	r5, r5, r0
 8001db2:	4461      	add	r1, ip
 8001db4:	44ab      	add	fp, r5
 8001db6:	9105      	str	r1, [sp, #20]
 8001db8:	4659      	mov	r1, fp
 8001dba:	9104      	str	r1, [sp, #16]
 8001dbc:	9901      	ldr	r1, [sp, #4]
 8001dbe:	040f      	lsls	r7, r1, #16
 8001dc0:	0c3f      	lsrs	r7, r7, #16
 8001dc2:	0c08      	lsrs	r0, r1, #16
 8001dc4:	0039      	movs	r1, r7
 8001dc6:	4351      	muls	r1, r2
 8001dc8:	4342      	muls	r2, r0
 8001dca:	4690      	mov	r8, r2
 8001dcc:	0002      	movs	r2, r0
 8001dce:	468c      	mov	ip, r1
 8001dd0:	0c09      	lsrs	r1, r1, #16
 8001dd2:	468b      	mov	fp, r1
 8001dd4:	4362      	muls	r2, r4
 8001dd6:	437c      	muls	r4, r7
 8001dd8:	4444      	add	r4, r8
 8001dda:	445c      	add	r4, fp
 8001ddc:	45a0      	cmp	r8, r4
 8001dde:	d903      	bls.n	8001de8 <__aeabi_dmul+0x270>
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	0249      	lsls	r1, r1, #9
 8001de4:	4688      	mov	r8, r1
 8001de6:	4442      	add	r2, r8
 8001de8:	0c21      	lsrs	r1, r4, #16
 8001dea:	4688      	mov	r8, r1
 8001dec:	4661      	mov	r1, ip
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	0c09      	lsrs	r1, r1, #16
 8001df2:	468c      	mov	ip, r1
 8001df4:	0039      	movs	r1, r7
 8001df6:	4359      	muls	r1, r3
 8001df8:	4343      	muls	r3, r0
 8001dfa:	4370      	muls	r0, r6
 8001dfc:	437e      	muls	r6, r7
 8001dfe:	0c0f      	lsrs	r7, r1, #16
 8001e00:	18f6      	adds	r6, r6, r3
 8001e02:	0424      	lsls	r4, r4, #16
 8001e04:	19be      	adds	r6, r7, r6
 8001e06:	4464      	add	r4, ip
 8001e08:	4442      	add	r2, r8
 8001e0a:	468c      	mov	ip, r1
 8001e0c:	42b3      	cmp	r3, r6
 8001e0e:	d903      	bls.n	8001e18 <__aeabi_dmul+0x2a0>
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	4698      	mov	r8, r3
 8001e16:	4440      	add	r0, r8
 8001e18:	9b02      	ldr	r3, [sp, #8]
 8001e1a:	4661      	mov	r1, ip
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	9b04      	ldr	r3, [sp, #16]
 8001e20:	0437      	lsls	r7, r6, #16
 8001e22:	4443      	add	r3, r8
 8001e24:	469b      	mov	fp, r3
 8001e26:	45ab      	cmp	fp, r5
 8001e28:	41ad      	sbcs	r5, r5
 8001e2a:	426b      	negs	r3, r5
 8001e2c:	040d      	lsls	r5, r1, #16
 8001e2e:	9905      	ldr	r1, [sp, #20]
 8001e30:	0c2d      	lsrs	r5, r5, #16
 8001e32:	468c      	mov	ip, r1
 8001e34:	197f      	adds	r7, r7, r5
 8001e36:	4467      	add	r7, ip
 8001e38:	18fd      	adds	r5, r7, r3
 8001e3a:	46a8      	mov	r8, r5
 8001e3c:	465d      	mov	r5, fp
 8001e3e:	192d      	adds	r5, r5, r4
 8001e40:	42a5      	cmp	r5, r4
 8001e42:	41a4      	sbcs	r4, r4
 8001e44:	4693      	mov	fp, r2
 8001e46:	4264      	negs	r4, r4
 8001e48:	46a4      	mov	ip, r4
 8001e4a:	44c3      	add	fp, r8
 8001e4c:	44dc      	add	ip, fp
 8001e4e:	428f      	cmp	r7, r1
 8001e50:	41bf      	sbcs	r7, r7
 8001e52:	4598      	cmp	r8, r3
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	4593      	cmp	fp, r2
 8001e58:	4192      	sbcs	r2, r2
 8001e5a:	45a4      	cmp	ip, r4
 8001e5c:	41a4      	sbcs	r4, r4
 8001e5e:	425b      	negs	r3, r3
 8001e60:	427f      	negs	r7, r7
 8001e62:	431f      	orrs	r7, r3
 8001e64:	0c36      	lsrs	r6, r6, #16
 8001e66:	4252      	negs	r2, r2
 8001e68:	4264      	negs	r4, r4
 8001e6a:	19bf      	adds	r7, r7, r6
 8001e6c:	4322      	orrs	r2, r4
 8001e6e:	18bf      	adds	r7, r7, r2
 8001e70:	4662      	mov	r2, ip
 8001e72:	1838      	adds	r0, r7, r0
 8001e74:	0243      	lsls	r3, r0, #9
 8001e76:	0dd2      	lsrs	r2, r2, #23
 8001e78:	9903      	ldr	r1, [sp, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	026a      	lsls	r2, r5, #9
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	1e50      	subs	r0, r2, #1
 8001e82:	4182      	sbcs	r2, r0
 8001e84:	4661      	mov	r1, ip
 8001e86:	0ded      	lsrs	r5, r5, #23
 8001e88:	432a      	orrs	r2, r5
 8001e8a:	024e      	lsls	r6, r1, #9
 8001e8c:	4332      	orrs	r2, r6
 8001e8e:	01d9      	lsls	r1, r3, #7
 8001e90:	d400      	bmi.n	8001e94 <__aeabi_dmul+0x31c>
 8001e92:	e0b3      	b.n	8001ffc <__aeabi_dmul+0x484>
 8001e94:	2601      	movs	r6, #1
 8001e96:	0850      	lsrs	r0, r2, #1
 8001e98:	4032      	ands	r2, r6
 8001e9a:	4302      	orrs	r2, r0
 8001e9c:	07de      	lsls	r6, r3, #31
 8001e9e:	4332      	orrs	r2, r6
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	4c22      	ldr	r4, [pc, #136]	; (8001f2c <__aeabi_dmul+0x3b4>)
 8001ea4:	4454      	add	r4, sl
 8001ea6:	2c00      	cmp	r4, #0
 8001ea8:	dd62      	ble.n	8001f70 <__aeabi_dmul+0x3f8>
 8001eaa:	0751      	lsls	r1, r2, #29
 8001eac:	d009      	beq.n	8001ec2 <__aeabi_dmul+0x34a>
 8001eae:	200f      	movs	r0, #15
 8001eb0:	4010      	ands	r0, r2
 8001eb2:	2804      	cmp	r0, #4
 8001eb4:	d005      	beq.n	8001ec2 <__aeabi_dmul+0x34a>
 8001eb6:	1d10      	adds	r0, r2, #4
 8001eb8:	4290      	cmp	r0, r2
 8001eba:	4192      	sbcs	r2, r2
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	189b      	adds	r3, r3, r2
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	01d9      	lsls	r1, r3, #7
 8001ec4:	d504      	bpl.n	8001ed0 <__aeabi_dmul+0x358>
 8001ec6:	2480      	movs	r4, #128	; 0x80
 8001ec8:	4819      	ldr	r0, [pc, #100]	; (8001f30 <__aeabi_dmul+0x3b8>)
 8001eca:	00e4      	lsls	r4, r4, #3
 8001ecc:	4003      	ands	r3, r0
 8001ece:	4454      	add	r4, sl
 8001ed0:	4818      	ldr	r0, [pc, #96]	; (8001f34 <__aeabi_dmul+0x3bc>)
 8001ed2:	4284      	cmp	r4, r0
 8001ed4:	dd00      	ble.n	8001ed8 <__aeabi_dmul+0x360>
 8001ed6:	e727      	b.n	8001d28 <__aeabi_dmul+0x1b0>
 8001ed8:	075e      	lsls	r6, r3, #29
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	08d2      	lsrs	r2, r2, #3
 8001ede:	0b1f      	lsrs	r7, r3, #12
 8001ee0:	0563      	lsls	r3, r4, #21
 8001ee2:	4316      	orrs	r6, r2
 8001ee4:	0d5b      	lsrs	r3, r3, #21
 8001ee6:	e6b2      	b.n	8001c4e <__aeabi_dmul+0xd6>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4699      	mov	r9, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	2704      	movs	r7, #4
 8001ef0:	2600      	movs	r6, #0
 8001ef2:	469b      	mov	fp, r3
 8001ef4:	e664      	b.n	8001bc0 <__aeabi_dmul+0x48>
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	9701      	str	r7, [sp, #4]
 8001efa:	4681      	mov	r9, r0
 8001efc:	270c      	movs	r7, #12
 8001efe:	469b      	mov	fp, r3
 8001f00:	e65e      	b.n	8001bc0 <__aeabi_dmul+0x48>
 8001f02:	2201      	movs	r2, #1
 8001f04:	2001      	movs	r0, #1
 8001f06:	4317      	orrs	r7, r2
 8001f08:	2200      	movs	r2, #0
 8001f0a:	e676      	b.n	8001bfa <__aeabi_dmul+0x82>
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	2003      	movs	r0, #3
 8001f10:	431f      	orrs	r7, r3
 8001f12:	4643      	mov	r3, r8
 8001f14:	e671      	b.n	8001bfa <__aeabi_dmul+0x82>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	000007ff 	.word	0x000007ff
 8001f1c:	fffffc01 	.word	0xfffffc01
 8001f20:	08008c1c 	.word	0x08008c1c
 8001f24:	800fffff 	.word	0x800fffff
 8001f28:	fffffc0d 	.word	0xfffffc0d
 8001f2c:	000003ff 	.word	0x000003ff
 8001f30:	feffffff 	.word	0xfeffffff
 8001f34:	000007fe 	.word	0x000007fe
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2780      	movs	r7, #128	; 0x80
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	033f      	lsls	r7, r7, #12
 8001f40:	2600      	movs	r6, #0
 8001f42:	4b43      	ldr	r3, [pc, #268]	; (8002050 <__aeabi_dmul+0x4d8>)
 8001f44:	e683      	b.n	8001c4e <__aeabi_dmul+0xd6>
 8001f46:	9b01      	ldr	r3, [sp, #4]
 8001f48:	0032      	movs	r2, r6
 8001f4a:	46a4      	mov	ip, r4
 8001f4c:	4658      	mov	r0, fp
 8001f4e:	e670      	b.n	8001c32 <__aeabi_dmul+0xba>
 8001f50:	46ac      	mov	ip, r5
 8001f52:	e66e      	b.n	8001c32 <__aeabi_dmul+0xba>
 8001f54:	2780      	movs	r7, #128	; 0x80
 8001f56:	9901      	ldr	r1, [sp, #4]
 8001f58:	033f      	lsls	r7, r7, #12
 8001f5a:	4239      	tst	r1, r7
 8001f5c:	d02d      	beq.n	8001fba <__aeabi_dmul+0x442>
 8001f5e:	423b      	tst	r3, r7
 8001f60:	d12b      	bne.n	8001fba <__aeabi_dmul+0x442>
 8001f62:	431f      	orrs	r7, r3
 8001f64:	033f      	lsls	r7, r7, #12
 8001f66:	0b3f      	lsrs	r7, r7, #12
 8001f68:	9500      	str	r5, [sp, #0]
 8001f6a:	0016      	movs	r6, r2
 8001f6c:	4b38      	ldr	r3, [pc, #224]	; (8002050 <__aeabi_dmul+0x4d8>)
 8001f6e:	e66e      	b.n	8001c4e <__aeabi_dmul+0xd6>
 8001f70:	2501      	movs	r5, #1
 8001f72:	1b2d      	subs	r5, r5, r4
 8001f74:	2d38      	cmp	r5, #56	; 0x38
 8001f76:	dd00      	ble.n	8001f7a <__aeabi_dmul+0x402>
 8001f78:	e666      	b.n	8001c48 <__aeabi_dmul+0xd0>
 8001f7a:	2d1f      	cmp	r5, #31
 8001f7c:	dc40      	bgt.n	8002000 <__aeabi_dmul+0x488>
 8001f7e:	4835      	ldr	r0, [pc, #212]	; (8002054 <__aeabi_dmul+0x4dc>)
 8001f80:	001c      	movs	r4, r3
 8001f82:	4450      	add	r0, sl
 8001f84:	0016      	movs	r6, r2
 8001f86:	4082      	lsls	r2, r0
 8001f88:	4084      	lsls	r4, r0
 8001f8a:	40ee      	lsrs	r6, r5
 8001f8c:	1e50      	subs	r0, r2, #1
 8001f8e:	4182      	sbcs	r2, r0
 8001f90:	4334      	orrs	r4, r6
 8001f92:	4314      	orrs	r4, r2
 8001f94:	40eb      	lsrs	r3, r5
 8001f96:	0762      	lsls	r2, r4, #29
 8001f98:	d009      	beq.n	8001fae <__aeabi_dmul+0x436>
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	4022      	ands	r2, r4
 8001f9e:	2a04      	cmp	r2, #4
 8001fa0:	d005      	beq.n	8001fae <__aeabi_dmul+0x436>
 8001fa2:	0022      	movs	r2, r4
 8001fa4:	1d14      	adds	r4, r2, #4
 8001fa6:	4294      	cmp	r4, r2
 8001fa8:	4180      	sbcs	r0, r0
 8001faa:	4240      	negs	r0, r0
 8001fac:	181b      	adds	r3, r3, r0
 8001fae:	021a      	lsls	r2, r3, #8
 8001fb0:	d53e      	bpl.n	8002030 <__aeabi_dmul+0x4b8>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	2700      	movs	r7, #0
 8001fb6:	2600      	movs	r6, #0
 8001fb8:	e649      	b.n	8001c4e <__aeabi_dmul+0xd6>
 8001fba:	2780      	movs	r7, #128	; 0x80
 8001fbc:	9b01      	ldr	r3, [sp, #4]
 8001fbe:	033f      	lsls	r7, r7, #12
 8001fc0:	431f      	orrs	r7, r3
 8001fc2:	033f      	lsls	r7, r7, #12
 8001fc4:	0b3f      	lsrs	r7, r7, #12
 8001fc6:	9400      	str	r4, [sp, #0]
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <__aeabi_dmul+0x4d8>)
 8001fca:	e640      	b.n	8001c4e <__aeabi_dmul+0xd6>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	465a      	mov	r2, fp
 8001fd0:	3b28      	subs	r3, #40	; 0x28
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	9201      	str	r2, [sp, #4]
 8001fd8:	e66d      	b.n	8001cb6 <__aeabi_dmul+0x13e>
 8001fda:	4658      	mov	r0, fp
 8001fdc:	f000 fc64 	bl	80028a8 <__clzsi2>
 8001fe0:	3020      	adds	r0, #32
 8001fe2:	e657      	b.n	8001c94 <__aeabi_dmul+0x11c>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	4652      	mov	r2, sl
 8001fe8:	3b28      	subs	r3, #40	; 0x28
 8001fea:	409a      	lsls	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	e693      	b.n	8001d1a <__aeabi_dmul+0x1a2>
 8001ff2:	4650      	mov	r0, sl
 8001ff4:	f000 fc58 	bl	80028a8 <__clzsi2>
 8001ff8:	3020      	adds	r0, #32
 8001ffa:	e67b      	b.n	8001cf4 <__aeabi_dmul+0x17c>
 8001ffc:	46ca      	mov	sl, r9
 8001ffe:	e750      	b.n	8001ea2 <__aeabi_dmul+0x32a>
 8002000:	201f      	movs	r0, #31
 8002002:	001e      	movs	r6, r3
 8002004:	4240      	negs	r0, r0
 8002006:	1b04      	subs	r4, r0, r4
 8002008:	40e6      	lsrs	r6, r4
 800200a:	2d20      	cmp	r5, #32
 800200c:	d003      	beq.n	8002016 <__aeabi_dmul+0x49e>
 800200e:	4c12      	ldr	r4, [pc, #72]	; (8002058 <__aeabi_dmul+0x4e0>)
 8002010:	4454      	add	r4, sl
 8002012:	40a3      	lsls	r3, r4
 8002014:	431a      	orrs	r2, r3
 8002016:	1e50      	subs	r0, r2, #1
 8002018:	4182      	sbcs	r2, r0
 800201a:	4332      	orrs	r2, r6
 800201c:	2607      	movs	r6, #7
 800201e:	2700      	movs	r7, #0
 8002020:	4016      	ands	r6, r2
 8002022:	d009      	beq.n	8002038 <__aeabi_dmul+0x4c0>
 8002024:	200f      	movs	r0, #15
 8002026:	2300      	movs	r3, #0
 8002028:	4010      	ands	r0, r2
 800202a:	0014      	movs	r4, r2
 800202c:	2804      	cmp	r0, #4
 800202e:	d1b9      	bne.n	8001fa4 <__aeabi_dmul+0x42c>
 8002030:	0022      	movs	r2, r4
 8002032:	075e      	lsls	r6, r3, #29
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	0b1f      	lsrs	r7, r3, #12
 8002038:	08d2      	lsrs	r2, r2, #3
 800203a:	4316      	orrs	r6, r2
 800203c:	2300      	movs	r3, #0
 800203e:	e606      	b.n	8001c4e <__aeabi_dmul+0xd6>
 8002040:	2780      	movs	r7, #128	; 0x80
 8002042:	033f      	lsls	r7, r7, #12
 8002044:	431f      	orrs	r7, r3
 8002046:	033f      	lsls	r7, r7, #12
 8002048:	0b3f      	lsrs	r7, r7, #12
 800204a:	0016      	movs	r6, r2
 800204c:	4b00      	ldr	r3, [pc, #0]	; (8002050 <__aeabi_dmul+0x4d8>)
 800204e:	e5fe      	b.n	8001c4e <__aeabi_dmul+0xd6>
 8002050:	000007ff 	.word	0x000007ff
 8002054:	0000041e 	.word	0x0000041e
 8002058:	0000043e 	.word	0x0000043e

0800205c <__aeabi_dsub>:
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205e:	4657      	mov	r7, sl
 8002060:	464e      	mov	r6, r9
 8002062:	4645      	mov	r5, r8
 8002064:	46de      	mov	lr, fp
 8002066:	000c      	movs	r4, r1
 8002068:	0309      	lsls	r1, r1, #12
 800206a:	b5e0      	push	{r5, r6, r7, lr}
 800206c:	0a49      	lsrs	r1, r1, #9
 800206e:	0f46      	lsrs	r6, r0, #29
 8002070:	005f      	lsls	r7, r3, #1
 8002072:	4331      	orrs	r1, r6
 8002074:	031e      	lsls	r6, r3, #12
 8002076:	0fdb      	lsrs	r3, r3, #31
 8002078:	0a76      	lsrs	r6, r6, #9
 800207a:	469b      	mov	fp, r3
 800207c:	0f53      	lsrs	r3, r2, #29
 800207e:	4333      	orrs	r3, r6
 8002080:	4ec8      	ldr	r6, [pc, #800]	; (80023a4 <__aeabi_dsub+0x348>)
 8002082:	0065      	lsls	r5, r4, #1
 8002084:	00c0      	lsls	r0, r0, #3
 8002086:	0fe4      	lsrs	r4, r4, #31
 8002088:	00d2      	lsls	r2, r2, #3
 800208a:	0d6d      	lsrs	r5, r5, #21
 800208c:	46a2      	mov	sl, r4
 800208e:	4681      	mov	r9, r0
 8002090:	0d7f      	lsrs	r7, r7, #21
 8002092:	469c      	mov	ip, r3
 8002094:	4690      	mov	r8, r2
 8002096:	42b7      	cmp	r7, r6
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x40>
 800209a:	e0b9      	b.n	8002210 <__aeabi_dsub+0x1b4>
 800209c:	465b      	mov	r3, fp
 800209e:	2601      	movs	r6, #1
 80020a0:	4073      	eors	r3, r6
 80020a2:	469b      	mov	fp, r3
 80020a4:	1bee      	subs	r6, r5, r7
 80020a6:	45a3      	cmp	fp, r4
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x50>
 80020aa:	e083      	b.n	80021b4 <__aeabi_dsub+0x158>
 80020ac:	2e00      	cmp	r6, #0
 80020ae:	dd63      	ble.n	8002178 <__aeabi_dsub+0x11c>
 80020b0:	2f00      	cmp	r7, #0
 80020b2:	d000      	beq.n	80020b6 <__aeabi_dsub+0x5a>
 80020b4:	e0b1      	b.n	800221a <__aeabi_dsub+0x1be>
 80020b6:	4663      	mov	r3, ip
 80020b8:	4313      	orrs	r3, r2
 80020ba:	d100      	bne.n	80020be <__aeabi_dsub+0x62>
 80020bc:	e123      	b.n	8002306 <__aeabi_dsub+0x2aa>
 80020be:	1e73      	subs	r3, r6, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d000      	beq.n	80020c6 <__aeabi_dsub+0x6a>
 80020c4:	e1ba      	b.n	800243c <__aeabi_dsub+0x3e0>
 80020c6:	1a86      	subs	r6, r0, r2
 80020c8:	4663      	mov	r3, ip
 80020ca:	42b0      	cmp	r0, r6
 80020cc:	4180      	sbcs	r0, r0
 80020ce:	2501      	movs	r5, #1
 80020d0:	1ac9      	subs	r1, r1, r3
 80020d2:	4240      	negs	r0, r0
 80020d4:	1a09      	subs	r1, r1, r0
 80020d6:	020b      	lsls	r3, r1, #8
 80020d8:	d400      	bmi.n	80020dc <__aeabi_dsub+0x80>
 80020da:	e147      	b.n	800236c <__aeabi_dsub+0x310>
 80020dc:	0249      	lsls	r1, r1, #9
 80020de:	0a4b      	lsrs	r3, r1, #9
 80020e0:	4698      	mov	r8, r3
 80020e2:	4643      	mov	r3, r8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d100      	bne.n	80020ea <__aeabi_dsub+0x8e>
 80020e8:	e189      	b.n	80023fe <__aeabi_dsub+0x3a2>
 80020ea:	4640      	mov	r0, r8
 80020ec:	f000 fbdc 	bl	80028a8 <__clzsi2>
 80020f0:	0003      	movs	r3, r0
 80020f2:	3b08      	subs	r3, #8
 80020f4:	2b1f      	cmp	r3, #31
 80020f6:	dd00      	ble.n	80020fa <__aeabi_dsub+0x9e>
 80020f8:	e17c      	b.n	80023f4 <__aeabi_dsub+0x398>
 80020fa:	2220      	movs	r2, #32
 80020fc:	0030      	movs	r0, r6
 80020fe:	1ad2      	subs	r2, r2, r3
 8002100:	4641      	mov	r1, r8
 8002102:	40d0      	lsrs	r0, r2
 8002104:	4099      	lsls	r1, r3
 8002106:	0002      	movs	r2, r0
 8002108:	409e      	lsls	r6, r3
 800210a:	430a      	orrs	r2, r1
 800210c:	429d      	cmp	r5, r3
 800210e:	dd00      	ble.n	8002112 <__aeabi_dsub+0xb6>
 8002110:	e16a      	b.n	80023e8 <__aeabi_dsub+0x38c>
 8002112:	1b5d      	subs	r5, r3, r5
 8002114:	1c6b      	adds	r3, r5, #1
 8002116:	2b1f      	cmp	r3, #31
 8002118:	dd00      	ble.n	800211c <__aeabi_dsub+0xc0>
 800211a:	e194      	b.n	8002446 <__aeabi_dsub+0x3ea>
 800211c:	2120      	movs	r1, #32
 800211e:	0010      	movs	r0, r2
 8002120:	0035      	movs	r5, r6
 8002122:	1ac9      	subs	r1, r1, r3
 8002124:	408e      	lsls	r6, r1
 8002126:	40da      	lsrs	r2, r3
 8002128:	4088      	lsls	r0, r1
 800212a:	40dd      	lsrs	r5, r3
 800212c:	1e71      	subs	r1, r6, #1
 800212e:	418e      	sbcs	r6, r1
 8002130:	0011      	movs	r1, r2
 8002132:	2207      	movs	r2, #7
 8002134:	4328      	orrs	r0, r5
 8002136:	2500      	movs	r5, #0
 8002138:	4306      	orrs	r6, r0
 800213a:	4032      	ands	r2, r6
 800213c:	2a00      	cmp	r2, #0
 800213e:	d009      	beq.n	8002154 <__aeabi_dsub+0xf8>
 8002140:	230f      	movs	r3, #15
 8002142:	4033      	ands	r3, r6
 8002144:	2b04      	cmp	r3, #4
 8002146:	d005      	beq.n	8002154 <__aeabi_dsub+0xf8>
 8002148:	1d33      	adds	r3, r6, #4
 800214a:	42b3      	cmp	r3, r6
 800214c:	41b6      	sbcs	r6, r6
 800214e:	4276      	negs	r6, r6
 8002150:	1989      	adds	r1, r1, r6
 8002152:	001e      	movs	r6, r3
 8002154:	020b      	lsls	r3, r1, #8
 8002156:	d400      	bmi.n	800215a <__aeabi_dsub+0xfe>
 8002158:	e23d      	b.n	80025d6 <__aeabi_dsub+0x57a>
 800215a:	1c6a      	adds	r2, r5, #1
 800215c:	4b91      	ldr	r3, [pc, #580]	; (80023a4 <__aeabi_dsub+0x348>)
 800215e:	0555      	lsls	r5, r2, #21
 8002160:	0d6d      	lsrs	r5, r5, #21
 8002162:	429a      	cmp	r2, r3
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x10c>
 8002166:	e119      	b.n	800239c <__aeabi_dsub+0x340>
 8002168:	4a8f      	ldr	r2, [pc, #572]	; (80023a8 <__aeabi_dsub+0x34c>)
 800216a:	08f6      	lsrs	r6, r6, #3
 800216c:	400a      	ands	r2, r1
 800216e:	0757      	lsls	r7, r2, #29
 8002170:	0252      	lsls	r2, r2, #9
 8002172:	4337      	orrs	r7, r6
 8002174:	0b12      	lsrs	r2, r2, #12
 8002176:	e09b      	b.n	80022b0 <__aeabi_dsub+0x254>
 8002178:	2e00      	cmp	r6, #0
 800217a:	d000      	beq.n	800217e <__aeabi_dsub+0x122>
 800217c:	e0c5      	b.n	800230a <__aeabi_dsub+0x2ae>
 800217e:	1c6e      	adds	r6, r5, #1
 8002180:	0576      	lsls	r6, r6, #21
 8002182:	0d76      	lsrs	r6, r6, #21
 8002184:	2e01      	cmp	r6, #1
 8002186:	dc00      	bgt.n	800218a <__aeabi_dsub+0x12e>
 8002188:	e148      	b.n	800241c <__aeabi_dsub+0x3c0>
 800218a:	4667      	mov	r7, ip
 800218c:	1a86      	subs	r6, r0, r2
 800218e:	1bcb      	subs	r3, r1, r7
 8002190:	42b0      	cmp	r0, r6
 8002192:	41bf      	sbcs	r7, r7
 8002194:	427f      	negs	r7, r7
 8002196:	46b8      	mov	r8, r7
 8002198:	001f      	movs	r7, r3
 800219a:	4643      	mov	r3, r8
 800219c:	1aff      	subs	r7, r7, r3
 800219e:	003b      	movs	r3, r7
 80021a0:	46b8      	mov	r8, r7
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	d500      	bpl.n	80021a8 <__aeabi_dsub+0x14c>
 80021a6:	e15f      	b.n	8002468 <__aeabi_dsub+0x40c>
 80021a8:	4337      	orrs	r7, r6
 80021aa:	d19a      	bne.n	80020e2 <__aeabi_dsub+0x86>
 80021ac:	2200      	movs	r2, #0
 80021ae:	2400      	movs	r4, #0
 80021b0:	2500      	movs	r5, #0
 80021b2:	e079      	b.n	80022a8 <__aeabi_dsub+0x24c>
 80021b4:	2e00      	cmp	r6, #0
 80021b6:	dc00      	bgt.n	80021ba <__aeabi_dsub+0x15e>
 80021b8:	e0fa      	b.n	80023b0 <__aeabi_dsub+0x354>
 80021ba:	2f00      	cmp	r7, #0
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x164>
 80021be:	e08d      	b.n	80022dc <__aeabi_dsub+0x280>
 80021c0:	4b78      	ldr	r3, [pc, #480]	; (80023a4 <__aeabi_dsub+0x348>)
 80021c2:	429d      	cmp	r5, r3
 80021c4:	d067      	beq.n	8002296 <__aeabi_dsub+0x23a>
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	4667      	mov	r7, ip
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	431f      	orrs	r7, r3
 80021ce:	46bc      	mov	ip, r7
 80021d0:	2e38      	cmp	r6, #56	; 0x38
 80021d2:	dc00      	bgt.n	80021d6 <__aeabi_dsub+0x17a>
 80021d4:	e152      	b.n	800247c <__aeabi_dsub+0x420>
 80021d6:	4663      	mov	r3, ip
 80021d8:	4313      	orrs	r3, r2
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	4193      	sbcs	r3, r2
 80021de:	181e      	adds	r6, r3, r0
 80021e0:	4286      	cmp	r6, r0
 80021e2:	4180      	sbcs	r0, r0
 80021e4:	4240      	negs	r0, r0
 80021e6:	1809      	adds	r1, r1, r0
 80021e8:	020b      	lsls	r3, r1, #8
 80021ea:	d400      	bmi.n	80021ee <__aeabi_dsub+0x192>
 80021ec:	e0be      	b.n	800236c <__aeabi_dsub+0x310>
 80021ee:	4b6d      	ldr	r3, [pc, #436]	; (80023a4 <__aeabi_dsub+0x348>)
 80021f0:	3501      	adds	r5, #1
 80021f2:	429d      	cmp	r5, r3
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x19c>
 80021f6:	e0d2      	b.n	800239e <__aeabi_dsub+0x342>
 80021f8:	4a6b      	ldr	r2, [pc, #428]	; (80023a8 <__aeabi_dsub+0x34c>)
 80021fa:	0873      	lsrs	r3, r6, #1
 80021fc:	400a      	ands	r2, r1
 80021fe:	2101      	movs	r1, #1
 8002200:	400e      	ands	r6, r1
 8002202:	431e      	orrs	r6, r3
 8002204:	0851      	lsrs	r1, r2, #1
 8002206:	07d3      	lsls	r3, r2, #31
 8002208:	2207      	movs	r2, #7
 800220a:	431e      	orrs	r6, r3
 800220c:	4032      	ands	r2, r6
 800220e:	e795      	b.n	800213c <__aeabi_dsub+0xe0>
 8002210:	001e      	movs	r6, r3
 8002212:	4316      	orrs	r6, r2
 8002214:	d000      	beq.n	8002218 <__aeabi_dsub+0x1bc>
 8002216:	e745      	b.n	80020a4 <__aeabi_dsub+0x48>
 8002218:	e740      	b.n	800209c <__aeabi_dsub+0x40>
 800221a:	4b62      	ldr	r3, [pc, #392]	; (80023a4 <__aeabi_dsub+0x348>)
 800221c:	429d      	cmp	r5, r3
 800221e:	d03a      	beq.n	8002296 <__aeabi_dsub+0x23a>
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	4667      	mov	r7, ip
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	431f      	orrs	r7, r3
 8002228:	46bc      	mov	ip, r7
 800222a:	2e38      	cmp	r6, #56	; 0x38
 800222c:	dd00      	ble.n	8002230 <__aeabi_dsub+0x1d4>
 800222e:	e0eb      	b.n	8002408 <__aeabi_dsub+0x3ac>
 8002230:	2e1f      	cmp	r6, #31
 8002232:	dc00      	bgt.n	8002236 <__aeabi_dsub+0x1da>
 8002234:	e13a      	b.n	80024ac <__aeabi_dsub+0x450>
 8002236:	0033      	movs	r3, r6
 8002238:	4667      	mov	r7, ip
 800223a:	3b20      	subs	r3, #32
 800223c:	40df      	lsrs	r7, r3
 800223e:	003b      	movs	r3, r7
 8002240:	2e20      	cmp	r6, #32
 8002242:	d005      	beq.n	8002250 <__aeabi_dsub+0x1f4>
 8002244:	2740      	movs	r7, #64	; 0x40
 8002246:	1bbf      	subs	r7, r7, r6
 8002248:	4666      	mov	r6, ip
 800224a:	40be      	lsls	r6, r7
 800224c:	4332      	orrs	r2, r6
 800224e:	4690      	mov	r8, r2
 8002250:	4646      	mov	r6, r8
 8002252:	1e72      	subs	r2, r6, #1
 8002254:	4196      	sbcs	r6, r2
 8002256:	4333      	orrs	r3, r6
 8002258:	e0da      	b.n	8002410 <__aeabi_dsub+0x3b4>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x204>
 800225e:	e214      	b.n	800268a <__aeabi_dsub+0x62e>
 8002260:	4663      	mov	r3, ip
 8002262:	4313      	orrs	r3, r2
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x20c>
 8002266:	e168      	b.n	800253a <__aeabi_dsub+0x4de>
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	074e      	lsls	r6, r1, #29
 800226c:	08c0      	lsrs	r0, r0, #3
 800226e:	08c9      	lsrs	r1, r1, #3
 8002270:	031b      	lsls	r3, r3, #12
 8002272:	4306      	orrs	r6, r0
 8002274:	4219      	tst	r1, r3
 8002276:	d008      	beq.n	800228a <__aeabi_dsub+0x22e>
 8002278:	4660      	mov	r0, ip
 800227a:	08c0      	lsrs	r0, r0, #3
 800227c:	4218      	tst	r0, r3
 800227e:	d104      	bne.n	800228a <__aeabi_dsub+0x22e>
 8002280:	4663      	mov	r3, ip
 8002282:	0001      	movs	r1, r0
 8002284:	08d2      	lsrs	r2, r2, #3
 8002286:	075e      	lsls	r6, r3, #29
 8002288:	4316      	orrs	r6, r2
 800228a:	00f3      	lsls	r3, r6, #3
 800228c:	4699      	mov	r9, r3
 800228e:	00c9      	lsls	r1, r1, #3
 8002290:	0f72      	lsrs	r2, r6, #29
 8002292:	4d44      	ldr	r5, [pc, #272]	; (80023a4 <__aeabi_dsub+0x348>)
 8002294:	4311      	orrs	r1, r2
 8002296:	464b      	mov	r3, r9
 8002298:	08de      	lsrs	r6, r3, #3
 800229a:	4b42      	ldr	r3, [pc, #264]	; (80023a4 <__aeabi_dsub+0x348>)
 800229c:	074f      	lsls	r7, r1, #29
 800229e:	4337      	orrs	r7, r6
 80022a0:	08ca      	lsrs	r2, r1, #3
 80022a2:	429d      	cmp	r5, r3
 80022a4:	d100      	bne.n	80022a8 <__aeabi_dsub+0x24c>
 80022a6:	e06e      	b.n	8002386 <__aeabi_dsub+0x32a>
 80022a8:	0312      	lsls	r2, r2, #12
 80022aa:	056d      	lsls	r5, r5, #21
 80022ac:	0b12      	lsrs	r2, r2, #12
 80022ae:	0d6d      	lsrs	r5, r5, #21
 80022b0:	2100      	movs	r1, #0
 80022b2:	0312      	lsls	r2, r2, #12
 80022b4:	0b13      	lsrs	r3, r2, #12
 80022b6:	0d0a      	lsrs	r2, r1, #20
 80022b8:	0512      	lsls	r2, r2, #20
 80022ba:	431a      	orrs	r2, r3
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <__aeabi_dsub+0x350>)
 80022be:	052d      	lsls	r5, r5, #20
 80022c0:	4013      	ands	r3, r2
 80022c2:	432b      	orrs	r3, r5
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	07e4      	lsls	r4, r4, #31
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	4323      	orrs	r3, r4
 80022cc:	0038      	movs	r0, r7
 80022ce:	0019      	movs	r1, r3
 80022d0:	bc3c      	pop	{r2, r3, r4, r5}
 80022d2:	4690      	mov	r8, r2
 80022d4:	4699      	mov	r9, r3
 80022d6:	46a2      	mov	sl, r4
 80022d8:	46ab      	mov	fp, r5
 80022da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022dc:	4663      	mov	r3, ip
 80022de:	4313      	orrs	r3, r2
 80022e0:	d011      	beq.n	8002306 <__aeabi_dsub+0x2aa>
 80022e2:	1e73      	subs	r3, r6, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d000      	beq.n	80022ea <__aeabi_dsub+0x28e>
 80022e8:	e107      	b.n	80024fa <__aeabi_dsub+0x49e>
 80022ea:	1886      	adds	r6, r0, r2
 80022ec:	4286      	cmp	r6, r0
 80022ee:	4180      	sbcs	r0, r0
 80022f0:	4461      	add	r1, ip
 80022f2:	4240      	negs	r0, r0
 80022f4:	1809      	adds	r1, r1, r0
 80022f6:	2501      	movs	r5, #1
 80022f8:	020b      	lsls	r3, r1, #8
 80022fa:	d537      	bpl.n	800236c <__aeabi_dsub+0x310>
 80022fc:	2502      	movs	r5, #2
 80022fe:	e77b      	b.n	80021f8 <__aeabi_dsub+0x19c>
 8002300:	003e      	movs	r6, r7
 8002302:	4661      	mov	r1, ip
 8002304:	4691      	mov	r9, r2
 8002306:	0035      	movs	r5, r6
 8002308:	e7c5      	b.n	8002296 <__aeabi_dsub+0x23a>
 800230a:	465c      	mov	r4, fp
 800230c:	2d00      	cmp	r5, #0
 800230e:	d000      	beq.n	8002312 <__aeabi_dsub+0x2b6>
 8002310:	e0e1      	b.n	80024d6 <__aeabi_dsub+0x47a>
 8002312:	000b      	movs	r3, r1
 8002314:	4303      	orrs	r3, r0
 8002316:	d0f3      	beq.n	8002300 <__aeabi_dsub+0x2a4>
 8002318:	1c73      	adds	r3, r6, #1
 800231a:	d100      	bne.n	800231e <__aeabi_dsub+0x2c2>
 800231c:	e1ac      	b.n	8002678 <__aeabi_dsub+0x61c>
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <__aeabi_dsub+0x348>)
 8002320:	429f      	cmp	r7, r3
 8002322:	d100      	bne.n	8002326 <__aeabi_dsub+0x2ca>
 8002324:	e13a      	b.n	800259c <__aeabi_dsub+0x540>
 8002326:	43f3      	mvns	r3, r6
 8002328:	2b38      	cmp	r3, #56	; 0x38
 800232a:	dd00      	ble.n	800232e <__aeabi_dsub+0x2d2>
 800232c:	e16f      	b.n	800260e <__aeabi_dsub+0x5b2>
 800232e:	2b1f      	cmp	r3, #31
 8002330:	dd00      	ble.n	8002334 <__aeabi_dsub+0x2d8>
 8002332:	e18c      	b.n	800264e <__aeabi_dsub+0x5f2>
 8002334:	2520      	movs	r5, #32
 8002336:	000e      	movs	r6, r1
 8002338:	1aed      	subs	r5, r5, r3
 800233a:	40ae      	lsls	r6, r5
 800233c:	46b0      	mov	r8, r6
 800233e:	0006      	movs	r6, r0
 8002340:	46aa      	mov	sl, r5
 8002342:	40de      	lsrs	r6, r3
 8002344:	4645      	mov	r5, r8
 8002346:	4335      	orrs	r5, r6
 8002348:	002e      	movs	r6, r5
 800234a:	4655      	mov	r5, sl
 800234c:	40d9      	lsrs	r1, r3
 800234e:	40a8      	lsls	r0, r5
 8002350:	4663      	mov	r3, ip
 8002352:	1e45      	subs	r5, r0, #1
 8002354:	41a8      	sbcs	r0, r5
 8002356:	1a5b      	subs	r3, r3, r1
 8002358:	469c      	mov	ip, r3
 800235a:	4330      	orrs	r0, r6
 800235c:	1a16      	subs	r6, r2, r0
 800235e:	42b2      	cmp	r2, r6
 8002360:	4192      	sbcs	r2, r2
 8002362:	4663      	mov	r3, ip
 8002364:	4252      	negs	r2, r2
 8002366:	1a99      	subs	r1, r3, r2
 8002368:	003d      	movs	r5, r7
 800236a:	e6b4      	b.n	80020d6 <__aeabi_dsub+0x7a>
 800236c:	2207      	movs	r2, #7
 800236e:	4032      	ands	r2, r6
 8002370:	2a00      	cmp	r2, #0
 8002372:	d000      	beq.n	8002376 <__aeabi_dsub+0x31a>
 8002374:	e6e4      	b.n	8002140 <__aeabi_dsub+0xe4>
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <__aeabi_dsub+0x348>)
 8002378:	08f6      	lsrs	r6, r6, #3
 800237a:	074f      	lsls	r7, r1, #29
 800237c:	4337      	orrs	r7, r6
 800237e:	08ca      	lsrs	r2, r1, #3
 8002380:	429d      	cmp	r5, r3
 8002382:	d000      	beq.n	8002386 <__aeabi_dsub+0x32a>
 8002384:	e790      	b.n	80022a8 <__aeabi_dsub+0x24c>
 8002386:	003b      	movs	r3, r7
 8002388:	4313      	orrs	r3, r2
 800238a:	d100      	bne.n	800238e <__aeabi_dsub+0x332>
 800238c:	e1a6      	b.n	80026dc <__aeabi_dsub+0x680>
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	031b      	lsls	r3, r3, #12
 8002392:	431a      	orrs	r2, r3
 8002394:	0312      	lsls	r2, r2, #12
 8002396:	0b12      	lsrs	r2, r2, #12
 8002398:	4d02      	ldr	r5, [pc, #8]	; (80023a4 <__aeabi_dsub+0x348>)
 800239a:	e789      	b.n	80022b0 <__aeabi_dsub+0x254>
 800239c:	0015      	movs	r5, r2
 800239e:	2200      	movs	r2, #0
 80023a0:	2700      	movs	r7, #0
 80023a2:	e785      	b.n	80022b0 <__aeabi_dsub+0x254>
 80023a4:	000007ff 	.word	0x000007ff
 80023a8:	ff7fffff 	.word	0xff7fffff
 80023ac:	800fffff 	.word	0x800fffff
 80023b0:	2e00      	cmp	r6, #0
 80023b2:	d000      	beq.n	80023b6 <__aeabi_dsub+0x35a>
 80023b4:	e0c7      	b.n	8002546 <__aeabi_dsub+0x4ea>
 80023b6:	1c6b      	adds	r3, r5, #1
 80023b8:	055e      	lsls	r6, r3, #21
 80023ba:	0d76      	lsrs	r6, r6, #21
 80023bc:	2e01      	cmp	r6, #1
 80023be:	dc00      	bgt.n	80023c2 <__aeabi_dsub+0x366>
 80023c0:	e0f0      	b.n	80025a4 <__aeabi_dsub+0x548>
 80023c2:	4dc8      	ldr	r5, [pc, #800]	; (80026e4 <__aeabi_dsub+0x688>)
 80023c4:	42ab      	cmp	r3, r5
 80023c6:	d100      	bne.n	80023ca <__aeabi_dsub+0x36e>
 80023c8:	e0b9      	b.n	800253e <__aeabi_dsub+0x4e2>
 80023ca:	1885      	adds	r5, r0, r2
 80023cc:	000a      	movs	r2, r1
 80023ce:	4285      	cmp	r5, r0
 80023d0:	4189      	sbcs	r1, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	4249      	negs	r1, r1
 80023d6:	1851      	adds	r1, r2, r1
 80023d8:	2207      	movs	r2, #7
 80023da:	07ce      	lsls	r6, r1, #31
 80023dc:	086d      	lsrs	r5, r5, #1
 80023de:	432e      	orrs	r6, r5
 80023e0:	0849      	lsrs	r1, r1, #1
 80023e2:	4032      	ands	r2, r6
 80023e4:	001d      	movs	r5, r3
 80023e6:	e6a9      	b.n	800213c <__aeabi_dsub+0xe0>
 80023e8:	49bf      	ldr	r1, [pc, #764]	; (80026e8 <__aeabi_dsub+0x68c>)
 80023ea:	1aed      	subs	r5, r5, r3
 80023ec:	4011      	ands	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4032      	ands	r2, r6
 80023f2:	e6a3      	b.n	800213c <__aeabi_dsub+0xe0>
 80023f4:	0032      	movs	r2, r6
 80023f6:	3828      	subs	r0, #40	; 0x28
 80023f8:	4082      	lsls	r2, r0
 80023fa:	2600      	movs	r6, #0
 80023fc:	e686      	b.n	800210c <__aeabi_dsub+0xb0>
 80023fe:	0030      	movs	r0, r6
 8002400:	f000 fa52 	bl	80028a8 <__clzsi2>
 8002404:	3020      	adds	r0, #32
 8002406:	e673      	b.n	80020f0 <__aeabi_dsub+0x94>
 8002408:	4663      	mov	r3, ip
 800240a:	4313      	orrs	r3, r2
 800240c:	1e5a      	subs	r2, r3, #1
 800240e:	4193      	sbcs	r3, r2
 8002410:	1ac6      	subs	r6, r0, r3
 8002412:	42b0      	cmp	r0, r6
 8002414:	4180      	sbcs	r0, r0
 8002416:	4240      	negs	r0, r0
 8002418:	1a09      	subs	r1, r1, r0
 800241a:	e65c      	b.n	80020d6 <__aeabi_dsub+0x7a>
 800241c:	000e      	movs	r6, r1
 800241e:	4667      	mov	r7, ip
 8002420:	4306      	orrs	r6, r0
 8002422:	4317      	orrs	r7, r2
 8002424:	2d00      	cmp	r5, #0
 8002426:	d15e      	bne.n	80024e6 <__aeabi_dsub+0x48a>
 8002428:	2e00      	cmp	r6, #0
 800242a:	d000      	beq.n	800242e <__aeabi_dsub+0x3d2>
 800242c:	e0f3      	b.n	8002616 <__aeabi_dsub+0x5ba>
 800242e:	2f00      	cmp	r7, #0
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x3d8>
 8002432:	e11e      	b.n	8002672 <__aeabi_dsub+0x616>
 8002434:	465c      	mov	r4, fp
 8002436:	4661      	mov	r1, ip
 8002438:	4691      	mov	r9, r2
 800243a:	e72c      	b.n	8002296 <__aeabi_dsub+0x23a>
 800243c:	4fa9      	ldr	r7, [pc, #676]	; (80026e4 <__aeabi_dsub+0x688>)
 800243e:	42be      	cmp	r6, r7
 8002440:	d07b      	beq.n	800253a <__aeabi_dsub+0x4de>
 8002442:	001e      	movs	r6, r3
 8002444:	e6f1      	b.n	800222a <__aeabi_dsub+0x1ce>
 8002446:	0010      	movs	r0, r2
 8002448:	3d1f      	subs	r5, #31
 800244a:	40e8      	lsrs	r0, r5
 800244c:	2b20      	cmp	r3, #32
 800244e:	d003      	beq.n	8002458 <__aeabi_dsub+0x3fc>
 8002450:	2140      	movs	r1, #64	; 0x40
 8002452:	1acb      	subs	r3, r1, r3
 8002454:	409a      	lsls	r2, r3
 8002456:	4316      	orrs	r6, r2
 8002458:	1e73      	subs	r3, r6, #1
 800245a:	419e      	sbcs	r6, r3
 800245c:	2207      	movs	r2, #7
 800245e:	4306      	orrs	r6, r0
 8002460:	4032      	ands	r2, r6
 8002462:	2100      	movs	r1, #0
 8002464:	2500      	movs	r5, #0
 8002466:	e783      	b.n	8002370 <__aeabi_dsub+0x314>
 8002468:	1a16      	subs	r6, r2, r0
 800246a:	4663      	mov	r3, ip
 800246c:	42b2      	cmp	r2, r6
 800246e:	4180      	sbcs	r0, r0
 8002470:	1a59      	subs	r1, r3, r1
 8002472:	4240      	negs	r0, r0
 8002474:	1a0b      	subs	r3, r1, r0
 8002476:	4698      	mov	r8, r3
 8002478:	465c      	mov	r4, fp
 800247a:	e632      	b.n	80020e2 <__aeabi_dsub+0x86>
 800247c:	2e1f      	cmp	r6, #31
 800247e:	dd00      	ble.n	8002482 <__aeabi_dsub+0x426>
 8002480:	e0ab      	b.n	80025da <__aeabi_dsub+0x57e>
 8002482:	2720      	movs	r7, #32
 8002484:	1bbb      	subs	r3, r7, r6
 8002486:	469a      	mov	sl, r3
 8002488:	4663      	mov	r3, ip
 800248a:	4657      	mov	r7, sl
 800248c:	40bb      	lsls	r3, r7
 800248e:	4699      	mov	r9, r3
 8002490:	0013      	movs	r3, r2
 8002492:	464f      	mov	r7, r9
 8002494:	40f3      	lsrs	r3, r6
 8002496:	431f      	orrs	r7, r3
 8002498:	003b      	movs	r3, r7
 800249a:	4657      	mov	r7, sl
 800249c:	40ba      	lsls	r2, r7
 800249e:	1e57      	subs	r7, r2, #1
 80024a0:	41ba      	sbcs	r2, r7
 80024a2:	4313      	orrs	r3, r2
 80024a4:	4662      	mov	r2, ip
 80024a6:	40f2      	lsrs	r2, r6
 80024a8:	1889      	adds	r1, r1, r2
 80024aa:	e698      	b.n	80021de <__aeabi_dsub+0x182>
 80024ac:	2720      	movs	r7, #32
 80024ae:	1bbb      	subs	r3, r7, r6
 80024b0:	469a      	mov	sl, r3
 80024b2:	4663      	mov	r3, ip
 80024b4:	4657      	mov	r7, sl
 80024b6:	40bb      	lsls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	0013      	movs	r3, r2
 80024bc:	464f      	mov	r7, r9
 80024be:	40f3      	lsrs	r3, r6
 80024c0:	431f      	orrs	r7, r3
 80024c2:	003b      	movs	r3, r7
 80024c4:	4657      	mov	r7, sl
 80024c6:	40ba      	lsls	r2, r7
 80024c8:	1e57      	subs	r7, r2, #1
 80024ca:	41ba      	sbcs	r2, r7
 80024cc:	4313      	orrs	r3, r2
 80024ce:	4662      	mov	r2, ip
 80024d0:	40f2      	lsrs	r2, r6
 80024d2:	1a89      	subs	r1, r1, r2
 80024d4:	e79c      	b.n	8002410 <__aeabi_dsub+0x3b4>
 80024d6:	4b83      	ldr	r3, [pc, #524]	; (80026e4 <__aeabi_dsub+0x688>)
 80024d8:	429f      	cmp	r7, r3
 80024da:	d05f      	beq.n	800259c <__aeabi_dsub+0x540>
 80024dc:	2580      	movs	r5, #128	; 0x80
 80024de:	042d      	lsls	r5, r5, #16
 80024e0:	4273      	negs	r3, r6
 80024e2:	4329      	orrs	r1, r5
 80024e4:	e720      	b.n	8002328 <__aeabi_dsub+0x2cc>
 80024e6:	2e00      	cmp	r6, #0
 80024e8:	d10c      	bne.n	8002504 <__aeabi_dsub+0x4a8>
 80024ea:	2f00      	cmp	r7, #0
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dsub+0x494>
 80024ee:	e0d0      	b.n	8002692 <__aeabi_dsub+0x636>
 80024f0:	465c      	mov	r4, fp
 80024f2:	4661      	mov	r1, ip
 80024f4:	4691      	mov	r9, r2
 80024f6:	4d7b      	ldr	r5, [pc, #492]	; (80026e4 <__aeabi_dsub+0x688>)
 80024f8:	e6cd      	b.n	8002296 <__aeabi_dsub+0x23a>
 80024fa:	4f7a      	ldr	r7, [pc, #488]	; (80026e4 <__aeabi_dsub+0x688>)
 80024fc:	42be      	cmp	r6, r7
 80024fe:	d01c      	beq.n	800253a <__aeabi_dsub+0x4de>
 8002500:	001e      	movs	r6, r3
 8002502:	e665      	b.n	80021d0 <__aeabi_dsub+0x174>
 8002504:	2f00      	cmp	r7, #0
 8002506:	d018      	beq.n	800253a <__aeabi_dsub+0x4de>
 8002508:	08c0      	lsrs	r0, r0, #3
 800250a:	074e      	lsls	r6, r1, #29
 800250c:	4306      	orrs	r6, r0
 800250e:	2080      	movs	r0, #128	; 0x80
 8002510:	08c9      	lsrs	r1, r1, #3
 8002512:	0300      	lsls	r0, r0, #12
 8002514:	4201      	tst	r1, r0
 8002516:	d008      	beq.n	800252a <__aeabi_dsub+0x4ce>
 8002518:	4663      	mov	r3, ip
 800251a:	08dc      	lsrs	r4, r3, #3
 800251c:	4204      	tst	r4, r0
 800251e:	d104      	bne.n	800252a <__aeabi_dsub+0x4ce>
 8002520:	0021      	movs	r1, r4
 8002522:	46da      	mov	sl, fp
 8002524:	08d2      	lsrs	r2, r2, #3
 8002526:	075e      	lsls	r6, r3, #29
 8002528:	4316      	orrs	r6, r2
 800252a:	00f3      	lsls	r3, r6, #3
 800252c:	4699      	mov	r9, r3
 800252e:	2401      	movs	r4, #1
 8002530:	4653      	mov	r3, sl
 8002532:	00c9      	lsls	r1, r1, #3
 8002534:	0f72      	lsrs	r2, r6, #29
 8002536:	4311      	orrs	r1, r2
 8002538:	401c      	ands	r4, r3
 800253a:	4d6a      	ldr	r5, [pc, #424]	; (80026e4 <__aeabi_dsub+0x688>)
 800253c:	e6ab      	b.n	8002296 <__aeabi_dsub+0x23a>
 800253e:	001d      	movs	r5, r3
 8002540:	2200      	movs	r2, #0
 8002542:	2700      	movs	r7, #0
 8002544:	e6b4      	b.n	80022b0 <__aeabi_dsub+0x254>
 8002546:	2d00      	cmp	r5, #0
 8002548:	d159      	bne.n	80025fe <__aeabi_dsub+0x5a2>
 800254a:	000b      	movs	r3, r1
 800254c:	4303      	orrs	r3, r0
 800254e:	d100      	bne.n	8002552 <__aeabi_dsub+0x4f6>
 8002550:	e6d6      	b.n	8002300 <__aeabi_dsub+0x2a4>
 8002552:	1c73      	adds	r3, r6, #1
 8002554:	d100      	bne.n	8002558 <__aeabi_dsub+0x4fc>
 8002556:	e0b2      	b.n	80026be <__aeabi_dsub+0x662>
 8002558:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <__aeabi_dsub+0x688>)
 800255a:	429f      	cmp	r7, r3
 800255c:	d01e      	beq.n	800259c <__aeabi_dsub+0x540>
 800255e:	43f3      	mvns	r3, r6
 8002560:	2b38      	cmp	r3, #56	; 0x38
 8002562:	dc6f      	bgt.n	8002644 <__aeabi_dsub+0x5e8>
 8002564:	2b1f      	cmp	r3, #31
 8002566:	dd00      	ble.n	800256a <__aeabi_dsub+0x50e>
 8002568:	e097      	b.n	800269a <__aeabi_dsub+0x63e>
 800256a:	2520      	movs	r5, #32
 800256c:	000e      	movs	r6, r1
 800256e:	1aed      	subs	r5, r5, r3
 8002570:	40ae      	lsls	r6, r5
 8002572:	46b0      	mov	r8, r6
 8002574:	0006      	movs	r6, r0
 8002576:	46aa      	mov	sl, r5
 8002578:	40de      	lsrs	r6, r3
 800257a:	4645      	mov	r5, r8
 800257c:	4335      	orrs	r5, r6
 800257e:	002e      	movs	r6, r5
 8002580:	4655      	mov	r5, sl
 8002582:	40a8      	lsls	r0, r5
 8002584:	40d9      	lsrs	r1, r3
 8002586:	1e45      	subs	r5, r0, #1
 8002588:	41a8      	sbcs	r0, r5
 800258a:	448c      	add	ip, r1
 800258c:	4306      	orrs	r6, r0
 800258e:	18b6      	adds	r6, r6, r2
 8002590:	4296      	cmp	r6, r2
 8002592:	4192      	sbcs	r2, r2
 8002594:	4251      	negs	r1, r2
 8002596:	4461      	add	r1, ip
 8002598:	003d      	movs	r5, r7
 800259a:	e625      	b.n	80021e8 <__aeabi_dsub+0x18c>
 800259c:	003d      	movs	r5, r7
 800259e:	4661      	mov	r1, ip
 80025a0:	4691      	mov	r9, r2
 80025a2:	e678      	b.n	8002296 <__aeabi_dsub+0x23a>
 80025a4:	000b      	movs	r3, r1
 80025a6:	4303      	orrs	r3, r0
 80025a8:	2d00      	cmp	r5, #0
 80025aa:	d000      	beq.n	80025ae <__aeabi_dsub+0x552>
 80025ac:	e655      	b.n	800225a <__aeabi_dsub+0x1fe>
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f5      	beq.n	800259e <__aeabi_dsub+0x542>
 80025b2:	4663      	mov	r3, ip
 80025b4:	4313      	orrs	r3, r2
 80025b6:	d100      	bne.n	80025ba <__aeabi_dsub+0x55e>
 80025b8:	e66d      	b.n	8002296 <__aeabi_dsub+0x23a>
 80025ba:	1886      	adds	r6, r0, r2
 80025bc:	4286      	cmp	r6, r0
 80025be:	4180      	sbcs	r0, r0
 80025c0:	4461      	add	r1, ip
 80025c2:	4240      	negs	r0, r0
 80025c4:	1809      	adds	r1, r1, r0
 80025c6:	2200      	movs	r2, #0
 80025c8:	020b      	lsls	r3, r1, #8
 80025ca:	d400      	bmi.n	80025ce <__aeabi_dsub+0x572>
 80025cc:	e6d0      	b.n	8002370 <__aeabi_dsub+0x314>
 80025ce:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <__aeabi_dsub+0x68c>)
 80025d0:	3501      	adds	r5, #1
 80025d2:	4019      	ands	r1, r3
 80025d4:	e5b2      	b.n	800213c <__aeabi_dsub+0xe0>
 80025d6:	46b1      	mov	r9, r6
 80025d8:	e65d      	b.n	8002296 <__aeabi_dsub+0x23a>
 80025da:	0033      	movs	r3, r6
 80025dc:	4667      	mov	r7, ip
 80025de:	3b20      	subs	r3, #32
 80025e0:	40df      	lsrs	r7, r3
 80025e2:	003b      	movs	r3, r7
 80025e4:	2e20      	cmp	r6, #32
 80025e6:	d005      	beq.n	80025f4 <__aeabi_dsub+0x598>
 80025e8:	2740      	movs	r7, #64	; 0x40
 80025ea:	1bbf      	subs	r7, r7, r6
 80025ec:	4666      	mov	r6, ip
 80025ee:	40be      	lsls	r6, r7
 80025f0:	4332      	orrs	r2, r6
 80025f2:	4690      	mov	r8, r2
 80025f4:	4646      	mov	r6, r8
 80025f6:	1e72      	subs	r2, r6, #1
 80025f8:	4196      	sbcs	r6, r2
 80025fa:	4333      	orrs	r3, r6
 80025fc:	e5ef      	b.n	80021de <__aeabi_dsub+0x182>
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <__aeabi_dsub+0x688>)
 8002600:	429f      	cmp	r7, r3
 8002602:	d0cb      	beq.n	800259c <__aeabi_dsub+0x540>
 8002604:	2580      	movs	r5, #128	; 0x80
 8002606:	042d      	lsls	r5, r5, #16
 8002608:	4273      	negs	r3, r6
 800260a:	4329      	orrs	r1, r5
 800260c:	e7a8      	b.n	8002560 <__aeabi_dsub+0x504>
 800260e:	4308      	orrs	r0, r1
 8002610:	1e41      	subs	r1, r0, #1
 8002612:	4188      	sbcs	r0, r1
 8002614:	e6a2      	b.n	800235c <__aeabi_dsub+0x300>
 8002616:	2f00      	cmp	r7, #0
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x5c0>
 800261a:	e63c      	b.n	8002296 <__aeabi_dsub+0x23a>
 800261c:	4663      	mov	r3, ip
 800261e:	1a86      	subs	r6, r0, r2
 8002620:	1acf      	subs	r7, r1, r3
 8002622:	42b0      	cmp	r0, r6
 8002624:	419b      	sbcs	r3, r3
 8002626:	425b      	negs	r3, r3
 8002628:	1afb      	subs	r3, r7, r3
 800262a:	4698      	mov	r8, r3
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	d54e      	bpl.n	80026ce <__aeabi_dsub+0x672>
 8002630:	1a16      	subs	r6, r2, r0
 8002632:	4663      	mov	r3, ip
 8002634:	42b2      	cmp	r2, r6
 8002636:	4192      	sbcs	r2, r2
 8002638:	1a59      	subs	r1, r3, r1
 800263a:	4252      	negs	r2, r2
 800263c:	1a89      	subs	r1, r1, r2
 800263e:	465c      	mov	r4, fp
 8002640:	2200      	movs	r2, #0
 8002642:	e57b      	b.n	800213c <__aeabi_dsub+0xe0>
 8002644:	4301      	orrs	r1, r0
 8002646:	000e      	movs	r6, r1
 8002648:	1e71      	subs	r1, r6, #1
 800264a:	418e      	sbcs	r6, r1
 800264c:	e79f      	b.n	800258e <__aeabi_dsub+0x532>
 800264e:	001d      	movs	r5, r3
 8002650:	000e      	movs	r6, r1
 8002652:	3d20      	subs	r5, #32
 8002654:	40ee      	lsrs	r6, r5
 8002656:	46b0      	mov	r8, r6
 8002658:	2b20      	cmp	r3, #32
 800265a:	d004      	beq.n	8002666 <__aeabi_dsub+0x60a>
 800265c:	2540      	movs	r5, #64	; 0x40
 800265e:	1aeb      	subs	r3, r5, r3
 8002660:	4099      	lsls	r1, r3
 8002662:	4308      	orrs	r0, r1
 8002664:	4681      	mov	r9, r0
 8002666:	4648      	mov	r0, r9
 8002668:	4643      	mov	r3, r8
 800266a:	1e41      	subs	r1, r0, #1
 800266c:	4188      	sbcs	r0, r1
 800266e:	4318      	orrs	r0, r3
 8002670:	e674      	b.n	800235c <__aeabi_dsub+0x300>
 8002672:	2200      	movs	r2, #0
 8002674:	2400      	movs	r4, #0
 8002676:	e617      	b.n	80022a8 <__aeabi_dsub+0x24c>
 8002678:	1a16      	subs	r6, r2, r0
 800267a:	4663      	mov	r3, ip
 800267c:	42b2      	cmp	r2, r6
 800267e:	4192      	sbcs	r2, r2
 8002680:	1a59      	subs	r1, r3, r1
 8002682:	4252      	negs	r2, r2
 8002684:	1a89      	subs	r1, r1, r2
 8002686:	003d      	movs	r5, r7
 8002688:	e525      	b.n	80020d6 <__aeabi_dsub+0x7a>
 800268a:	4661      	mov	r1, ip
 800268c:	4691      	mov	r9, r2
 800268e:	4d15      	ldr	r5, [pc, #84]	; (80026e4 <__aeabi_dsub+0x688>)
 8002690:	e601      	b.n	8002296 <__aeabi_dsub+0x23a>
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	2400      	movs	r4, #0
 8002696:	0312      	lsls	r2, r2, #12
 8002698:	e679      	b.n	800238e <__aeabi_dsub+0x332>
 800269a:	001d      	movs	r5, r3
 800269c:	000e      	movs	r6, r1
 800269e:	3d20      	subs	r5, #32
 80026a0:	40ee      	lsrs	r6, r5
 80026a2:	46b0      	mov	r8, r6
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d004      	beq.n	80026b2 <__aeabi_dsub+0x656>
 80026a8:	2540      	movs	r5, #64	; 0x40
 80026aa:	1aeb      	subs	r3, r5, r3
 80026ac:	4099      	lsls	r1, r3
 80026ae:	4308      	orrs	r0, r1
 80026b0:	4681      	mov	r9, r0
 80026b2:	464e      	mov	r6, r9
 80026b4:	4643      	mov	r3, r8
 80026b6:	1e71      	subs	r1, r6, #1
 80026b8:	418e      	sbcs	r6, r1
 80026ba:	431e      	orrs	r6, r3
 80026bc:	e767      	b.n	800258e <__aeabi_dsub+0x532>
 80026be:	1886      	adds	r6, r0, r2
 80026c0:	4296      	cmp	r6, r2
 80026c2:	419b      	sbcs	r3, r3
 80026c4:	4461      	add	r1, ip
 80026c6:	425b      	negs	r3, r3
 80026c8:	18c9      	adds	r1, r1, r3
 80026ca:	003d      	movs	r5, r7
 80026cc:	e58c      	b.n	80021e8 <__aeabi_dsub+0x18c>
 80026ce:	4647      	mov	r7, r8
 80026d0:	4337      	orrs	r7, r6
 80026d2:	d0ce      	beq.n	8002672 <__aeabi_dsub+0x616>
 80026d4:	2207      	movs	r2, #7
 80026d6:	4641      	mov	r1, r8
 80026d8:	4032      	ands	r2, r6
 80026da:	e649      	b.n	8002370 <__aeabi_dsub+0x314>
 80026dc:	2700      	movs	r7, #0
 80026de:	003a      	movs	r2, r7
 80026e0:	e5e6      	b.n	80022b0 <__aeabi_dsub+0x254>
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	000007ff 	.word	0x000007ff
 80026e8:	ff7fffff 	.word	0xff7fffff

080026ec <__aeabi_dcmpun>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	4e0c      	ldr	r6, [pc, #48]	; (8002720 <__aeabi_dcmpun+0x34>)
 80026f0:	030d      	lsls	r5, r1, #12
 80026f2:	031c      	lsls	r4, r3, #12
 80026f4:	0049      	lsls	r1, r1, #1
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	0b2d      	lsrs	r5, r5, #12
 80026fa:	0d49      	lsrs	r1, r1, #21
 80026fc:	0b24      	lsrs	r4, r4, #12
 80026fe:	0d5b      	lsrs	r3, r3, #21
 8002700:	42b1      	cmp	r1, r6
 8002702:	d008      	beq.n	8002716 <__aeabi_dcmpun+0x2a>
 8002704:	4906      	ldr	r1, [pc, #24]	; (8002720 <__aeabi_dcmpun+0x34>)
 8002706:	2000      	movs	r0, #0
 8002708:	428b      	cmp	r3, r1
 800270a:	d103      	bne.n	8002714 <__aeabi_dcmpun+0x28>
 800270c:	4314      	orrs	r4, r2
 800270e:	0020      	movs	r0, r4
 8002710:	1e44      	subs	r4, r0, #1
 8002712:	41a0      	sbcs	r0, r4
 8002714:	bd70      	pop	{r4, r5, r6, pc}
 8002716:	4305      	orrs	r5, r0
 8002718:	2001      	movs	r0, #1
 800271a:	2d00      	cmp	r5, #0
 800271c:	d1fa      	bne.n	8002714 <__aeabi_dcmpun+0x28>
 800271e:	e7f1      	b.n	8002704 <__aeabi_dcmpun+0x18>
 8002720:	000007ff 	.word	0x000007ff

08002724 <__aeabi_d2iz>:
 8002724:	b530      	push	{r4, r5, lr}
 8002726:	4d14      	ldr	r5, [pc, #80]	; (8002778 <__aeabi_d2iz+0x54>)
 8002728:	030a      	lsls	r2, r1, #12
 800272a:	004b      	lsls	r3, r1, #1
 800272c:	0b12      	lsrs	r2, r2, #12
 800272e:	0d5b      	lsrs	r3, r3, #21
 8002730:	0fc9      	lsrs	r1, r1, #31
 8002732:	2400      	movs	r4, #0
 8002734:	42ab      	cmp	r3, r5
 8002736:	dd11      	ble.n	800275c <__aeabi_d2iz+0x38>
 8002738:	4c10      	ldr	r4, [pc, #64]	; (800277c <__aeabi_d2iz+0x58>)
 800273a:	42a3      	cmp	r3, r4
 800273c:	dc10      	bgt.n	8002760 <__aeabi_d2iz+0x3c>
 800273e:	2480      	movs	r4, #128	; 0x80
 8002740:	0364      	lsls	r4, r4, #13
 8002742:	4322      	orrs	r2, r4
 8002744:	4c0e      	ldr	r4, [pc, #56]	; (8002780 <__aeabi_d2iz+0x5c>)
 8002746:	1ae4      	subs	r4, r4, r3
 8002748:	2c1f      	cmp	r4, #31
 800274a:	dd0c      	ble.n	8002766 <__aeabi_d2iz+0x42>
 800274c:	480d      	ldr	r0, [pc, #52]	; (8002784 <__aeabi_d2iz+0x60>)
 800274e:	1ac3      	subs	r3, r0, r3
 8002750:	40da      	lsrs	r2, r3
 8002752:	0013      	movs	r3, r2
 8002754:	425c      	negs	r4, r3
 8002756:	2900      	cmp	r1, #0
 8002758:	d100      	bne.n	800275c <__aeabi_d2iz+0x38>
 800275a:	001c      	movs	r4, r3
 800275c:	0020      	movs	r0, r4
 800275e:	bd30      	pop	{r4, r5, pc}
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <__aeabi_d2iz+0x64>)
 8002762:	18cc      	adds	r4, r1, r3
 8002764:	e7fa      	b.n	800275c <__aeabi_d2iz+0x38>
 8002766:	4d09      	ldr	r5, [pc, #36]	; (800278c <__aeabi_d2iz+0x68>)
 8002768:	40e0      	lsrs	r0, r4
 800276a:	46ac      	mov	ip, r5
 800276c:	4463      	add	r3, ip
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	4303      	orrs	r3, r0
 8002774:	e7ee      	b.n	8002754 <__aeabi_d2iz+0x30>
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	000003fe 	.word	0x000003fe
 800277c:	0000041d 	.word	0x0000041d
 8002780:	00000433 	.word	0x00000433
 8002784:	00000413 	.word	0x00000413
 8002788:	7fffffff 	.word	0x7fffffff
 800278c:	fffffbed 	.word	0xfffffbed

08002790 <__aeabi_i2d>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	2800      	cmp	r0, #0
 8002794:	d02d      	beq.n	80027f2 <__aeabi_i2d+0x62>
 8002796:	17c3      	asrs	r3, r0, #31
 8002798:	18c5      	adds	r5, r0, r3
 800279a:	405d      	eors	r5, r3
 800279c:	0fc4      	lsrs	r4, r0, #31
 800279e:	0028      	movs	r0, r5
 80027a0:	f000 f882 	bl	80028a8 <__clzsi2>
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <__aeabi_i2d+0x6c>)
 80027a6:	1a1b      	subs	r3, r3, r0
 80027a8:	055b      	lsls	r3, r3, #21
 80027aa:	0d5b      	lsrs	r3, r3, #21
 80027ac:	280a      	cmp	r0, #10
 80027ae:	dd15      	ble.n	80027dc <__aeabi_i2d+0x4c>
 80027b0:	380b      	subs	r0, #11
 80027b2:	4085      	lsls	r5, r0
 80027b4:	2200      	movs	r2, #0
 80027b6:	032d      	lsls	r5, r5, #12
 80027b8:	0b2d      	lsrs	r5, r5, #12
 80027ba:	2100      	movs	r1, #0
 80027bc:	0010      	movs	r0, r2
 80027be:	032d      	lsls	r5, r5, #12
 80027c0:	0d0a      	lsrs	r2, r1, #20
 80027c2:	0b2d      	lsrs	r5, r5, #12
 80027c4:	0512      	lsls	r2, r2, #20
 80027c6:	432a      	orrs	r2, r5
 80027c8:	4d0d      	ldr	r5, [pc, #52]	; (8002800 <__aeabi_i2d+0x70>)
 80027ca:	051b      	lsls	r3, r3, #20
 80027cc:	402a      	ands	r2, r5
 80027ce:	4313      	orrs	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	07e4      	lsls	r4, r4, #31
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	4323      	orrs	r3, r4
 80027d8:	0019      	movs	r1, r3
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	0002      	movs	r2, r0
 80027de:	0029      	movs	r1, r5
 80027e0:	3215      	adds	r2, #21
 80027e2:	4091      	lsls	r1, r2
 80027e4:	000a      	movs	r2, r1
 80027e6:	210b      	movs	r1, #11
 80027e8:	1a08      	subs	r0, r1, r0
 80027ea:	40c5      	lsrs	r5, r0
 80027ec:	032d      	lsls	r5, r5, #12
 80027ee:	0b2d      	lsrs	r5, r5, #12
 80027f0:	e7e3      	b.n	80027ba <__aeabi_i2d+0x2a>
 80027f2:	2400      	movs	r4, #0
 80027f4:	2300      	movs	r3, #0
 80027f6:	2500      	movs	r5, #0
 80027f8:	2200      	movs	r2, #0
 80027fa:	e7de      	b.n	80027ba <__aeabi_i2d+0x2a>
 80027fc:	0000041e 	.word	0x0000041e
 8002800:	800fffff 	.word	0x800fffff

08002804 <__aeabi_f2d>:
 8002804:	0041      	lsls	r1, r0, #1
 8002806:	0e09      	lsrs	r1, r1, #24
 8002808:	1c4b      	adds	r3, r1, #1
 800280a:	b570      	push	{r4, r5, r6, lr}
 800280c:	b2db      	uxtb	r3, r3
 800280e:	0246      	lsls	r6, r0, #9
 8002810:	0a75      	lsrs	r5, r6, #9
 8002812:	0fc4      	lsrs	r4, r0, #31
 8002814:	2b01      	cmp	r3, #1
 8002816:	dd14      	ble.n	8002842 <__aeabi_f2d+0x3e>
 8002818:	23e0      	movs	r3, #224	; 0xe0
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	076d      	lsls	r5, r5, #29
 800281e:	0b36      	lsrs	r6, r6, #12
 8002820:	18cb      	adds	r3, r1, r3
 8002822:	2100      	movs	r1, #0
 8002824:	0d0a      	lsrs	r2, r1, #20
 8002826:	0028      	movs	r0, r5
 8002828:	0512      	lsls	r2, r2, #20
 800282a:	4d1c      	ldr	r5, [pc, #112]	; (800289c <__aeabi_f2d+0x98>)
 800282c:	4332      	orrs	r2, r6
 800282e:	055b      	lsls	r3, r3, #21
 8002830:	402a      	ands	r2, r5
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	4313      	orrs	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	07e4      	lsls	r4, r4, #31
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	4323      	orrs	r3, r4
 800283e:	0019      	movs	r1, r3
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	2900      	cmp	r1, #0
 8002844:	d114      	bne.n	8002870 <__aeabi_f2d+0x6c>
 8002846:	2d00      	cmp	r5, #0
 8002848:	d01e      	beq.n	8002888 <__aeabi_f2d+0x84>
 800284a:	0028      	movs	r0, r5
 800284c:	f000 f82c 	bl	80028a8 <__clzsi2>
 8002850:	280a      	cmp	r0, #10
 8002852:	dc1c      	bgt.n	800288e <__aeabi_f2d+0x8a>
 8002854:	230b      	movs	r3, #11
 8002856:	002a      	movs	r2, r5
 8002858:	1a1b      	subs	r3, r3, r0
 800285a:	40da      	lsrs	r2, r3
 800285c:	0003      	movs	r3, r0
 800285e:	3315      	adds	r3, #21
 8002860:	409d      	lsls	r5, r3
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <__aeabi_f2d+0x9c>)
 8002864:	0312      	lsls	r2, r2, #12
 8002866:	1a1b      	subs	r3, r3, r0
 8002868:	055b      	lsls	r3, r3, #21
 800286a:	0b16      	lsrs	r6, r2, #12
 800286c:	0d5b      	lsrs	r3, r3, #21
 800286e:	e7d8      	b.n	8002822 <__aeabi_f2d+0x1e>
 8002870:	2d00      	cmp	r5, #0
 8002872:	d006      	beq.n	8002882 <__aeabi_f2d+0x7e>
 8002874:	0b32      	lsrs	r2, r6, #12
 8002876:	2680      	movs	r6, #128	; 0x80
 8002878:	0336      	lsls	r6, r6, #12
 800287a:	076d      	lsls	r5, r5, #29
 800287c:	4316      	orrs	r6, r2
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <__aeabi_f2d+0xa0>)
 8002880:	e7cf      	b.n	8002822 <__aeabi_f2d+0x1e>
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <__aeabi_f2d+0xa0>)
 8002884:	2600      	movs	r6, #0
 8002886:	e7cc      	b.n	8002822 <__aeabi_f2d+0x1e>
 8002888:	2300      	movs	r3, #0
 800288a:	2600      	movs	r6, #0
 800288c:	e7c9      	b.n	8002822 <__aeabi_f2d+0x1e>
 800288e:	0003      	movs	r3, r0
 8002890:	002a      	movs	r2, r5
 8002892:	3b0b      	subs	r3, #11
 8002894:	409a      	lsls	r2, r3
 8002896:	2500      	movs	r5, #0
 8002898:	e7e3      	b.n	8002862 <__aeabi_f2d+0x5e>
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	800fffff 	.word	0x800fffff
 80028a0:	00000389 	.word	0x00000389
 80028a4:	000007ff 	.word	0x000007ff

080028a8 <__clzsi2>:
 80028a8:	211c      	movs	r1, #28
 80028aa:	2301      	movs	r3, #1
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	4298      	cmp	r0, r3
 80028b0:	d301      	bcc.n	80028b6 <__clzsi2+0xe>
 80028b2:	0c00      	lsrs	r0, r0, #16
 80028b4:	3910      	subs	r1, #16
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	4298      	cmp	r0, r3
 80028ba:	d301      	bcc.n	80028c0 <__clzsi2+0x18>
 80028bc:	0a00      	lsrs	r0, r0, #8
 80028be:	3908      	subs	r1, #8
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	4298      	cmp	r0, r3
 80028c4:	d301      	bcc.n	80028ca <__clzsi2+0x22>
 80028c6:	0900      	lsrs	r0, r0, #4
 80028c8:	3904      	subs	r1, #4
 80028ca:	a202      	add	r2, pc, #8	; (adr r2, 80028d4 <__clzsi2+0x2c>)
 80028cc:	5c10      	ldrb	r0, [r2, r0]
 80028ce:	1840      	adds	r0, r0, r1
 80028d0:	4770      	bx	lr
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	02020304 	.word	0x02020304
 80028d8:	01010101 	.word	0x01010101
	...

080028e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_Init+0x24>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_Init+0x24>)
 80028ee:	2110      	movs	r1, #16
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f000 f809 	bl	800290c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028fa:	f002 fd37 	bl	800536c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	40022000 	.word	0x40022000

0800290c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002914:	f000 ff9c 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8002918:	0002      	movs	r2, r0
 800291a:	23fa      	movs	r3, #250	; 0xfa
 800291c:	0099      	lsls	r1, r3, #2
 800291e:	0010      	movs	r0, r2
 8002920:	f7fd fbf2 	bl	8000108 <__udivsi3>
 8002924:	0003      	movs	r3, r0
 8002926:	0018      	movs	r0, r3
 8002928:	f000 f8e7 	bl	8002afa <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	2301      	movs	r3, #1
 8002930:	425b      	negs	r3, r3
 8002932:	2200      	movs	r2, #0
 8002934:	0018      	movs	r0, r3
 8002936:	f000 f8cb 	bl	8002ad0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  uwTick++;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_IncTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	4b02      	ldr	r3, [pc, #8]	; (8002958 <HAL_IncTick+0x14>)
 8002950:	601a      	str	r2, [r3, #0]
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	2000014c 	.word	0x2000014c

0800295c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  return uwTick;
 8002960:	4b02      	ldr	r3, [pc, #8]	; (800296c <HAL_GetTick+0x10>)
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	2000014c 	.word	0x2000014c

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff fff0 	bl	800295c <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	d002      	beq.n	8002990 <HAL_Delay+0x20>
  {
     wait++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	f7ff ffe3 	bl	800295c <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d8f7      	bhi.n	8002992 <HAL_Delay+0x22>
  {
  }
}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b004      	add	sp, #16
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	0002      	movs	r2, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b7f      	cmp	r3, #127	; 0x7f
 80029c0:	d932      	bls.n	8002a28 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c2:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <NVIC_SetPriority+0xd4>)
 80029c4:	1dfb      	adds	r3, r7, #7
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	0019      	movs	r1, r3
 80029ca:	230f      	movs	r3, #15
 80029cc:	400b      	ands	r3, r1
 80029ce:	3b08      	subs	r3, #8
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3306      	adds	r3, #6
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	18d3      	adds	r3, r2, r3
 80029d8:	3304      	adds	r3, #4
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1dfa      	adds	r2, r7, #7
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	0011      	movs	r1, r2
 80029e2:	2203      	movs	r2, #3
 80029e4:	400a      	ands	r2, r1
 80029e6:	00d2      	lsls	r2, r2, #3
 80029e8:	21ff      	movs	r1, #255	; 0xff
 80029ea:	4091      	lsls	r1, r2
 80029ec:	000a      	movs	r2, r1
 80029ee:	43d2      	mvns	r2, r2
 80029f0:	401a      	ands	r2, r3
 80029f2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	019b      	lsls	r3, r3, #6
 80029f8:	22ff      	movs	r2, #255	; 0xff
 80029fa:	401a      	ands	r2, r3
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	0018      	movs	r0, r3
 8002a02:	2303      	movs	r3, #3
 8002a04:	4003      	ands	r3, r0
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a0a:	481d      	ldr	r0, [pc, #116]	; (8002a80 <NVIC_SetPriority+0xd4>)
 8002a0c:	1dfb      	adds	r3, r7, #7
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	001c      	movs	r4, r3
 8002a12:	230f      	movs	r3, #15
 8002a14:	4023      	ands	r3, r4
 8002a16:	3b08      	subs	r3, #8
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	3306      	adds	r3, #6
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	18c3      	adds	r3, r0, r3
 8002a22:	3304      	adds	r3, #4
 8002a24:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a26:	e027      	b.n	8002a78 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a28:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <NVIC_SetPriority+0xd8>)
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	33c0      	adds	r3, #192	; 0xc0
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	589b      	ldr	r3, [r3, r2]
 8002a38:	1dfa      	adds	r2, r7, #7
 8002a3a:	7812      	ldrb	r2, [r2, #0]
 8002a3c:	0011      	movs	r1, r2
 8002a3e:	2203      	movs	r2, #3
 8002a40:	400a      	ands	r2, r1
 8002a42:	00d2      	lsls	r2, r2, #3
 8002a44:	21ff      	movs	r1, #255	; 0xff
 8002a46:	4091      	lsls	r1, r2
 8002a48:	000a      	movs	r2, r1
 8002a4a:	43d2      	mvns	r2, r2
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	019b      	lsls	r3, r3, #6
 8002a54:	22ff      	movs	r2, #255	; 0xff
 8002a56:	401a      	ands	r2, r3
 8002a58:	1dfb      	adds	r3, r7, #7
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	2303      	movs	r3, #3
 8002a60:	4003      	ands	r3, r0
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a66:	4807      	ldr	r0, [pc, #28]	; (8002a84 <NVIC_SetPriority+0xd8>)
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	430a      	orrs	r2, r1
 8002a72:	33c0      	adds	r3, #192	; 0xc0
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	501a      	str	r2, [r3, r0]
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b003      	add	sp, #12
 8002a7e:	bd90      	pop	{r4, r7, pc}
 8002a80:	e000ed00 	.word	0xe000ed00
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SysTick_Config+0x40>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e010      	b.n	8002ac0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <SysTick_Config+0x44>)
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	425b      	negs	r3, r3
 8002aaa:	2103      	movs	r1, #3
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff ff7d 	bl	80029ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <SysTick_Config+0x44>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <SysTick_Config+0x44>)
 8002aba:	2207      	movs	r2, #7
 8002abc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	00ffffff 	.word	0x00ffffff
 8002acc:	e000e010 	.word	0xe000e010

08002ad0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	210f      	movs	r1, #15
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	1c02      	adds	r2, r0, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b25b      	sxtb	r3, r3
 8002aea:	0011      	movs	r1, r2
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff ff5d 	bl	80029ac <NVIC_SetPriority>
}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b004      	add	sp, #16
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7ff ffbf 	bl	8002a88 <SysTick_Config>
 8002b0a:	0003      	movs	r3, r0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002b2a:	e155      	b.n	8002dd8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4091      	lsls	r1, r2
 8002b36:	000a      	movs	r2, r1
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d100      	bne.n	8002b44 <HAL_GPIO_Init+0x30>
 8002b42:	e146      	b.n	8002dd2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x40>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b12      	cmp	r3, #18
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	58d3      	ldr	r3, [r2, r3]
 8002b60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2207      	movs	r2, #7
 8002b66:	4013      	ands	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	0013      	movs	r3, r2
 8002b70:	43da      	mvns	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2107      	movs	r1, #7
 8002b80:	400b      	ands	r3, r1
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	409a      	lsls	r2, r3
 8002b86:	0013      	movs	r3, r2
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	6939      	ldr	r1, [r7, #16]
 8002b9a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	0013      	movs	r3, r2
 8002bac:	43da      	mvns	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	0013      	movs	r3, r2
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_GPIO_Init+0xdc>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d007      	beq.n	8002bf0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002be4:	2b11      	cmp	r3, #17
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b12      	cmp	r3, #18
 8002bee:	d130      	bne.n	8002c52 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	0013      	movs	r3, r2
 8002c00:	43da      	mvns	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	409a      	lsls	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002c26:	2201      	movs	r2, #1
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	0013      	movs	r3, r2
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	401a      	ands	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	409a      	lsls	r2, r3
 8002c44:	0013      	movs	r3, r2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	0013      	movs	r3, r2
 8002c62:	43da      	mvns	r2, r3
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	409a      	lsls	r2, r3
 8002c74:	0013      	movs	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	055b      	lsls	r3, r3, #21
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d100      	bne.n	8002c90 <HAL_GPIO_Init+0x17c>
 8002c8e:	e0a0      	b.n	8002dd2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c90:	4b57      	ldr	r3, [pc, #348]	; (8002df0 <HAL_GPIO_Init+0x2dc>)
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <HAL_GPIO_Init+0x2dc>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	619a      	str	r2, [r3, #24]
 8002c9c:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <HAL_GPIO_Init+0x2dc>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8002ca8:	4a52      	ldr	r2, [pc, #328]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	589b      	ldr	r3, [r3, r2]
 8002cb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	4013      	ands	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	0013      	movs	r3, r2
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	2390      	movs	r3, #144	; 0x90
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d019      	beq.n	8002d0a <HAL_GPIO_Init+0x1f6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a47      	ldr	r2, [pc, #284]	; (8002df8 <HAL_GPIO_Init+0x2e4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_GPIO_Init+0x1f2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00d      	beq.n	8002d02 <HAL_GPIO_Init+0x1ee>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a45      	ldr	r2, [pc, #276]	; (8002e00 <HAL_GPIO_Init+0x2ec>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <HAL_GPIO_Init+0x1ea>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a44      	ldr	r2, [pc, #272]	; (8002e04 <HAL_GPIO_Init+0x2f0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_GPIO_Init+0x1e6>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e008      	b.n	8002d0c <HAL_GPIO_Init+0x1f8>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x1f8>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e004      	b.n	8002d0c <HAL_GPIO_Init+0x1f8>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_Init+0x1f8>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_Init+0x1f8>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	2103      	movs	r1, #3
 8002d10:	400a      	ands	r2, r1
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	4093      	lsls	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d1c:	4935      	ldr	r1, [pc, #212]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d2a:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43da      	mvns	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	025b      	lsls	r3, r3, #9
 8002d42:	4013      	ands	r3, r2
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002d54:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	029b      	lsls	r3, r3, #10
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d78:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43da      	mvns	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	035b      	lsls	r3, r3, #13
 8002d96:	4013      	ands	r3, r2
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	039b      	lsls	r3, r3, #14
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	40da      	lsrs	r2, r3
 8002de0:	1e13      	subs	r3, r2, #0
 8002de2:	d000      	beq.n	8002de6 <HAL_GPIO_Init+0x2d2>
 8002de4:	e6a2      	b.n	8002b2c <HAL_GPIO_Init+0x18>
  } 
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b006      	add	sp, #24
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	48000400 	.word	0x48000400
 8002dfc:	48000800 	.word	0x48000800
 8002e00:	48000c00 	.word	0x48000c00
 8002e04:	48001000 	.word	0x48001000
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	0008      	movs	r0, r1
 8002e16:	0011      	movs	r1, r2
 8002e18:	1cbb      	adds	r3, r7, #2
 8002e1a:	1c02      	adds	r2, r0, #0
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	1c7b      	adds	r3, r7, #1
 8002e20:	1c0a      	adds	r2, r1, #0
 8002e22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e24:	1c7b      	adds	r3, r7, #1
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e2c:	1cbb      	adds	r3, r7, #2
 8002e2e:	881a      	ldrh	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e34:	e003      	b.n	8002e3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e36:	1cbb      	adds	r3, r7, #2
 8002e38:	881a      	ldrh	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b002      	add	sp, #8
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	0002      	movs	r2, r0
 8002e50:	1dbb      	adds	r3, r7, #6
 8002e52:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	1dba      	adds	r2, r7, #6
 8002e5a:	8812      	ldrh	r2, [r2, #0]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d008      	beq.n	8002e72 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e62:	1dba      	adds	r2, r7, #6
 8002e64:	8812      	ldrh	r2, [r2, #0]
 8002e66:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e68:	1dbb      	adds	r3, r7, #6
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f002 fb7b 	bl	8005568 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40010400 	.word	0x40010400

08002e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4013      	ands	r3, r2
 8002e94:	d100      	bne.n	8002e98 <HAL_RCC_OscConfig+0x18>
 8002e96:	e08d      	b.n	8002fb4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e98:	4bc5      	ldr	r3, [pc, #788]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	220c      	movs	r2, #12
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ea4:	4bc2      	ldr	r3, [pc, #776]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	220c      	movs	r2, #12
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d116      	bne.n	8002ede <HAL_RCC_OscConfig+0x5e>
 8002eb0:	4bbf      	ldr	r3, [pc, #764]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	23c0      	movs	r3, #192	; 0xc0
 8002eb6:	025b      	lsls	r3, r3, #9
 8002eb8:	401a      	ands	r2, r3
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	025b      	lsls	r3, r3, #9
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d10d      	bne.n	8002ede <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec2:	4bbb      	ldr	r3, [pc, #748]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	029b      	lsls	r3, r3, #10
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d100      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x50>
 8002ece:	e070      	b.n	8002fb2 <HAL_RCC_OscConfig+0x132>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d000      	beq.n	8002eda <HAL_RCC_OscConfig+0x5a>
 8002ed8:	e06b      	b.n	8002fb2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e329      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x76>
 8002ee6:	4bb2      	ldr	r3, [pc, #712]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4bb1      	ldr	r3, [pc, #708]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	0249      	lsls	r1, r1, #9
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e02f      	b.n	8002f56 <HAL_RCC_OscConfig+0xd6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x98>
 8002efe:	4bac      	ldr	r3, [pc, #688]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4bab      	ldr	r3, [pc, #684]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f04:	49ab      	ldr	r1, [pc, #684]	; (80031b4 <HAL_RCC_OscConfig+0x334>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	4ba9      	ldr	r3, [pc, #676]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4ba8      	ldr	r3, [pc, #672]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f10:	49a9      	ldr	r1, [pc, #676]	; (80031b8 <HAL_RCC_OscConfig+0x338>)
 8002f12:	400a      	ands	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e01e      	b.n	8002f56 <HAL_RCC_OscConfig+0xd6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d10e      	bne.n	8002f3e <HAL_RCC_OscConfig+0xbe>
 8002f20:	4ba3      	ldr	r3, [pc, #652]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4ba2      	ldr	r3, [pc, #648]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	02c9      	lsls	r1, r1, #11
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	4ba0      	ldr	r3, [pc, #640]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	4b9f      	ldr	r3, [pc, #636]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	0249      	lsls	r1, r1, #9
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e00b      	b.n	8002f56 <HAL_RCC_OscConfig+0xd6>
 8002f3e:	4b9c      	ldr	r3, [pc, #624]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b9b      	ldr	r3, [pc, #620]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f44:	499b      	ldr	r1, [pc, #620]	; (80031b4 <HAL_RCC_OscConfig+0x334>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	4b99      	ldr	r3, [pc, #612]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b98      	ldr	r3, [pc, #608]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f50:	4999      	ldr	r1, [pc, #612]	; (80031b8 <HAL_RCC_OscConfig+0x338>)
 8002f52:	400a      	ands	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7ff fcfd 	bl	800295c <HAL_GetTick>
 8002f62:	0003      	movs	r3, r0
 8002f64:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7ff fcf8 	bl	800295c <HAL_GetTick>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e2db      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b8d      	ldr	r3, [pc, #564]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	029b      	lsls	r3, r3, #10
 8002f82:	4013      	ands	r3, r2
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xe8>
 8002f86:	e015      	b.n	8002fb4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff fce8 	bl	800295c <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f92:	f7ff fce3 	bl	800295c <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b64      	cmp	r3, #100	; 0x64
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e2c6      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa4:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	029b      	lsls	r3, r3, #10
 8002fac:	4013      	ands	r3, r2
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x112>
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d100      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x140>
 8002fbe:	e06c      	b.n	800309a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fc0:	4b7b      	ldr	r3, [pc, #492]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	220c      	movs	r2, #12
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d00e      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fca:	4b79      	ldr	r3, [pc, #484]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	220c      	movs	r2, #12
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d11f      	bne.n	8003016 <HAL_RCC_OscConfig+0x196>
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	23c0      	movs	r3, #192	; 0xc0
 8002fdc:	025b      	lsls	r3, r3, #9
 8002fde:	401a      	ands	r2, r3
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d116      	bne.n	8003016 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe8:	4b71      	ldr	r3, [pc, #452]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2202      	movs	r2, #2
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x17e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e299      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	22f8      	movs	r2, #248	; 0xf8
 8003004:	4393      	bics	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	00da      	lsls	r2, r3, #3
 800300e:	4b68      	ldr	r3, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003014:	e041      	b.n	800309a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d024      	beq.n	8003068 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301e:	4b64      	ldr	r3, [pc, #400]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003024:	2101      	movs	r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7ff fc97 	bl	800295c <HAL_GetTick>
 800302e:	0003      	movs	r3, r0
 8003030:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003034:	f7ff fc92 	bl	800295c <HAL_GetTick>
 8003038:	0002      	movs	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e275      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	4b5a      	ldr	r3, [pc, #360]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2202      	movs	r2, #2
 800304c:	4013      	ands	r3, r2
 800304e:	d0f1      	beq.n	8003034 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b57      	ldr	r3, [pc, #348]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	22f8      	movs	r2, #248	; 0xf8
 8003056:	4393      	bics	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00da      	lsls	r2, r3, #3
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003062:	430a      	orrs	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e018      	b.n	800309a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003068:	4b51      	ldr	r3, [pc, #324]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 800306e:	2101      	movs	r1, #1
 8003070:	438a      	bics	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7ff fc72 	bl	800295c <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307e:	f7ff fc6d 	bl	800295c <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e250      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003090:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2202      	movs	r2, #2
 8003096:	4013      	ands	r3, r2
 8003098:	d1f1      	bne.n	800307e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2208      	movs	r2, #8
 80030a0:	4013      	ands	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d019      	beq.n	80030e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ac:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 80030ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b0:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	430a      	orrs	r2, r1
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7ff fc50 	bl	800295c <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c2:	f7ff fc4b 	bl	800295c <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e22e      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d0f1      	beq.n	80030c2 <HAL_RCC_OscConfig+0x242>
 80030de:	e018      	b.n	8003112 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e0:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 80030e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e4:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 80030e6:	2101      	movs	r1, #1
 80030e8:	438a      	bics	r2, r1
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7ff fc36 	bl	800295c <HAL_GetTick>
 80030f0:	0003      	movs	r3, r0
 80030f2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f6:	f7ff fc31 	bl	800295c <HAL_GetTick>
 80030fa:	0002      	movs	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e214      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2202      	movs	r2, #2
 800310e:	4013      	ands	r3, r2
 8003110:	d1f1      	bne.n	80030f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2204      	movs	r2, #4
 8003118:	4013      	ands	r3, r2
 800311a:	d100      	bne.n	800311e <HAL_RCC_OscConfig+0x29e>
 800311c:	e0b6      	b.n	800328c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2317      	movs	r3, #23
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	055b      	lsls	r3, r3, #21
 800312e:	4013      	ands	r3, r2
 8003130:	d111      	bne.n	8003156 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	0549      	lsls	r1, r1, #21
 800313c:	430a      	orrs	r2, r1
 800313e:	61da      	str	r2, [r3, #28]
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	055b      	lsls	r3, r3, #21
 8003148:	4013      	ands	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800314e:	2317      	movs	r3, #23
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_OscConfig+0x33c>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4013      	ands	r3, r2
 8003160:	d11a      	bne.n	8003198 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_RCC_OscConfig+0x33c>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <HAL_RCC_OscConfig+0x33c>)
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	0049      	lsls	r1, r1, #1
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003170:	f7ff fbf4 	bl	800295c <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7ff fbef 	bl	800295c <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e1d2      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_OscConfig+0x33c>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4013      	ands	r3, r2
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d10f      	bne.n	80031c0 <HAL_RCC_OscConfig+0x340>
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	4b02      	ldr	r3, [pc, #8]	; (80031b0 <HAL_RCC_OscConfig+0x330>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	430a      	orrs	r2, r1
 80031aa:	621a      	str	r2, [r3, #32]
 80031ac:	e036      	b.n	800321c <HAL_RCC_OscConfig+0x39c>
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	40021000 	.word	0x40021000
 80031b4:	fffeffff 	.word	0xfffeffff
 80031b8:	fffbffff 	.word	0xfffbffff
 80031bc:	40007000 	.word	0x40007000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10c      	bne.n	80031e2 <HAL_RCC_OscConfig+0x362>
 80031c8:	4bca      	ldr	r3, [pc, #808]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	4bc9      	ldr	r3, [pc, #804]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	438a      	bics	r2, r1
 80031d2:	621a      	str	r2, [r3, #32]
 80031d4:	4bc7      	ldr	r3, [pc, #796]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	4bc6      	ldr	r3, [pc, #792]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80031da:	2104      	movs	r1, #4
 80031dc:	438a      	bics	r2, r1
 80031de:	621a      	str	r2, [r3, #32]
 80031e0:	e01c      	b.n	800321c <HAL_RCC_OscConfig+0x39c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x384>
 80031ea:	4bc2      	ldr	r3, [pc, #776]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	4bc1      	ldr	r3, [pc, #772]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80031f0:	2104      	movs	r1, #4
 80031f2:	430a      	orrs	r2, r1
 80031f4:	621a      	str	r2, [r3, #32]
 80031f6:	4bbf      	ldr	r3, [pc, #764]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	4bbe      	ldr	r3, [pc, #760]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	430a      	orrs	r2, r1
 8003200:	621a      	str	r2, [r3, #32]
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0x39c>
 8003204:	4bbb      	ldr	r3, [pc, #748]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003206:	6a1a      	ldr	r2, [r3, #32]
 8003208:	4bba      	ldr	r3, [pc, #744]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 800320a:	2101      	movs	r1, #1
 800320c:	438a      	bics	r2, r1
 800320e:	621a      	str	r2, [r3, #32]
 8003210:	4bb8      	ldr	r3, [pc, #736]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	4bb7      	ldr	r3, [pc, #732]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003216:	2104      	movs	r1, #4
 8003218:	438a      	bics	r2, r1
 800321a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d014      	beq.n	800324e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003224:	f7ff fb9a 	bl	800295c <HAL_GetTick>
 8003228:	0003      	movs	r3, r0
 800322a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e009      	b.n	8003242 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7ff fb95 	bl	800295c <HAL_GetTick>
 8003232:	0002      	movs	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	4aaf      	ldr	r2, [pc, #700]	; (80034f8 <HAL_RCC_OscConfig+0x678>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e177      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	4bac      	ldr	r3, [pc, #688]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x3ae>
 800324c:	e013      	b.n	8003276 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7ff fb85 	bl	800295c <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003256:	e009      	b.n	800326c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7ff fb80 	bl	800295c <HAL_GetTick>
 800325c:	0002      	movs	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	4aa5      	ldr	r2, [pc, #660]	; (80034f8 <HAL_RCC_OscConfig+0x678>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e162      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	4ba1      	ldr	r3, [pc, #644]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	2202      	movs	r2, #2
 8003272:	4013      	ands	r3, r2
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003276:	2317      	movs	r3, #23
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003280:	4b9c      	ldr	r3, [pc, #624]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	4b9b      	ldr	r3, [pc, #620]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003286:	499d      	ldr	r1, [pc, #628]	; (80034fc <HAL_RCC_OscConfig+0x67c>)
 8003288:	400a      	ands	r2, r1
 800328a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2210      	movs	r2, #16
 8003292:	4013      	ands	r3, r2
 8003294:	d063      	beq.n	800335e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d12a      	bne.n	80032f4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800329e:	4b95      	ldr	r3, [pc, #596]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80032a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a2:	4b94      	ldr	r3, [pc, #592]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80032a4:	2104      	movs	r1, #4
 80032a6:	430a      	orrs	r2, r1
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80032aa:	4b92      	ldr	r3, [pc, #584]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80032ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ae:	4b91      	ldr	r3, [pc, #580]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80032b0:	2101      	movs	r1, #1
 80032b2:	430a      	orrs	r2, r1
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7ff fb51 	bl	800295c <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032c0:	f7ff fb4c 	bl	800295c <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e12f      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032d2:	4b88      	ldr	r3, [pc, #544]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	2202      	movs	r2, #2
 80032d8:	4013      	ands	r3, r2
 80032da:	d0f1      	beq.n	80032c0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032dc:	4b85      	ldr	r3, [pc, #532]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	22f8      	movs	r2, #248	; 0xf8
 80032e2:	4393      	bics	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	00da      	lsls	r2, r3, #3
 80032ec:	4b81      	ldr	r3, [pc, #516]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	635a      	str	r2, [r3, #52]	; 0x34
 80032f2:	e034      	b.n	800335e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	3305      	adds	r3, #5
 80032fa:	d111      	bne.n	8003320 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032fc:	4b7d      	ldr	r3, [pc, #500]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80032fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003300:	4b7c      	ldr	r3, [pc, #496]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003302:	2104      	movs	r1, #4
 8003304:	438a      	bics	r2, r1
 8003306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003308:	4b7a      	ldr	r3, [pc, #488]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 800330a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330c:	22f8      	movs	r2, #248	; 0xf8
 800330e:	4393      	bics	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	00da      	lsls	r2, r3, #3
 8003318:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 800331a:	430a      	orrs	r2, r1
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
 800331e:	e01e      	b.n	800335e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003320:	4b74      	ldr	r3, [pc, #464]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003324:	4b73      	ldr	r3, [pc, #460]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003326:	2104      	movs	r1, #4
 8003328:	430a      	orrs	r2, r1
 800332a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800332c:	4b71      	ldr	r3, [pc, #452]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 800332e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003330:	4b70      	ldr	r3, [pc, #448]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003332:	2101      	movs	r1, #1
 8003334:	438a      	bics	r2, r1
 8003336:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7ff fb10 	bl	800295c <HAL_GetTick>
 800333c:	0003      	movs	r3, r0
 800333e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003342:	f7ff fb0b 	bl	800295c <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0ee      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003354:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	2202      	movs	r2, #2
 800335a:	4013      	ands	r3, r2
 800335c:	d1f1      	bne.n	8003342 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2220      	movs	r2, #32
 8003364:	4013      	ands	r3, r2
 8003366:	d05c      	beq.n	8003422 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003368:	4b62      	ldr	r3, [pc, #392]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	220c      	movs	r2, #12
 800336e:	4013      	ands	r3, r2
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d00e      	beq.n	8003392 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003374:	4b5f      	ldr	r3, [pc, #380]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	220c      	movs	r2, #12
 800337a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800337c:	2b08      	cmp	r3, #8
 800337e:	d114      	bne.n	80033aa <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003380:	4b5c      	ldr	r3, [pc, #368]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	23c0      	movs	r3, #192	; 0xc0
 8003386:	025b      	lsls	r3, r3, #9
 8003388:	401a      	ands	r2, r3
 800338a:	23c0      	movs	r3, #192	; 0xc0
 800338c:	025b      	lsls	r3, r3, #9
 800338e:	429a      	cmp	r2, r3
 8003390:	d10b      	bne.n	80033aa <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003392:	4b58      	ldr	r3, [pc, #352]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	025b      	lsls	r3, r3, #9
 800339a:	4013      	ands	r3, r2
 800339c:	d040      	beq.n	8003420 <HAL_RCC_OscConfig+0x5a0>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d03c      	beq.n	8003420 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0c3      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01b      	beq.n	80033ea <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80033b2:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80033b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b6:	4b4f      	ldr	r3, [pc, #316]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	0249      	lsls	r1, r1, #9
 80033bc:	430a      	orrs	r2, r1
 80033be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff facc 	bl	800295c <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ca:	f7ff fac7 	bl	800295c <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0aa      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033dc:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80033de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	025b      	lsls	r3, r3, #9
 80033e4:	4013      	ands	r3, r2
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x54a>
 80033e8:	e01b      	b.n	8003422 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033ea:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80033ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80033f0:	4943      	ldr	r1, [pc, #268]	; (8003500 <HAL_RCC_OscConfig+0x680>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7ff fab1 	bl	800295c <HAL_GetTick>
 80033fa:	0003      	movs	r3, r0
 80033fc:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003400:	f7ff faac 	bl	800295c <HAL_GetTick>
 8003404:	0002      	movs	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e08f      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003412:	4b38      	ldr	r3, [pc, #224]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	025b      	lsls	r3, r3, #9
 800341a:	4013      	ands	r3, r2
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x580>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003420:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d100      	bne.n	800342c <HAL_RCC_OscConfig+0x5ac>
 800342a:	e081      	b.n	8003530 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342c:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	220c      	movs	r2, #12
 8003432:	4013      	ands	r3, r2
 8003434:	2b08      	cmp	r3, #8
 8003436:	d100      	bne.n	800343a <HAL_RCC_OscConfig+0x5ba>
 8003438:	e078      	b.n	800352c <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	2b02      	cmp	r3, #2
 8003440:	d14c      	bne.n	80034dc <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003448:	492e      	ldr	r1, [pc, #184]	; (8003504 <HAL_RCC_OscConfig+0x684>)
 800344a:	400a      	ands	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7ff fa85 	bl	800295c <HAL_GetTick>
 8003452:	0003      	movs	r3, r0
 8003454:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7ff fa80 	bl	800295c <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e063      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346a:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	049b      	lsls	r3, r3, #18
 8003472:	4013      	ands	r3, r2
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003476:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	220f      	movs	r2, #15
 800347c:	4393      	bics	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 8003486:	430a      	orrs	r2, r1
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <HAL_RCC_OscConfig+0x688>)
 8003490:	4013      	ands	r3, r2
 8003492:	0019      	movs	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	431a      	orrs	r2, r3
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	0449      	lsls	r1, r1, #17
 80034ae:	430a      	orrs	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7ff fa53 	bl	800295c <HAL_GetTick>
 80034b6:	0003      	movs	r3, r0
 80034b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034bc:	f7ff fa4e 	bl	800295c <HAL_GetTick>
 80034c0:	0002      	movs	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e031      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	049b      	lsls	r3, r3, #18
 80034d6:	4013      	ands	r3, r2
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x63c>
 80034da:	e029      	b.n	8003530 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <HAL_RCC_OscConfig+0x674>)
 80034e2:	4908      	ldr	r1, [pc, #32]	; (8003504 <HAL_RCC_OscConfig+0x684>)
 80034e4:	400a      	ands	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7ff fa38 	bl	800295c <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x69e>
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	40021000 	.word	0x40021000
 80034f8:	00001388 	.word	0x00001388
 80034fc:	efffffff 	.word	0xefffffff
 8003500:	fffeffff 	.word	0xfffeffff
 8003504:	feffffff 	.word	0xfeffffff
 8003508:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350c:	f7ff fa26 	bl	800295c <HAL_GetTick>
 8003510:	0002      	movs	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e009      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_RCC_OscConfig+0x6bc>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	049b      	lsls	r3, r3, #18
 8003526:	4013      	ands	r3, r2
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x68c>
 800352a:	e001      	b.n	8003530 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b006      	add	sp, #24
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	40021000 	.word	0x40021000

08003540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800354e:	4b7b      	ldr	r3, [pc, #492]	; (800373c <HAL_RCC_ClockConfig+0x1fc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	4013      	ands	r3, r2
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d911      	bls.n	8003580 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355c:	4b77      	ldr	r3, [pc, #476]	; (800373c <HAL_RCC_ClockConfig+0x1fc>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	4393      	bics	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	4b75      	ldr	r3, [pc, #468]	; (800373c <HAL_RCC_ClockConfig+0x1fc>)
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800356e:	4b73      	ldr	r3, [pc, #460]	; (800373c <HAL_RCC_ClockConfig+0x1fc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2201      	movs	r2, #1
 8003574:	4013      	ands	r3, r2
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0d8      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2202      	movs	r2, #2
 8003586:	4013      	ands	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358a:	4b6d      	ldr	r3, [pc, #436]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	22f0      	movs	r2, #240	; 0xf0
 8003590:	4393      	bics	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	4b69      	ldr	r3, [pc, #420]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2201      	movs	r2, #1
 80035a4:	4013      	ands	r3, r2
 80035a6:	d100      	bne.n	80035aa <HAL_RCC_ClockConfig+0x6a>
 80035a8:	e089      	b.n	80036be <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d107      	bne.n	80035c2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	029b      	lsls	r3, r3, #10
 80035ba:	4013      	ands	r3, r2
 80035bc:	d120      	bne.n	8003600 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0b7      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ca:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	049b      	lsls	r3, r3, #18
 80035d2:	4013      	ands	r3, r2
 80035d4:	d114      	bne.n	8003600 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0ab      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80035e2:	4b57      	ldr	r3, [pc, #348]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 80035e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	025b      	lsls	r3, r3, #9
 80035ea:	4013      	ands	r3, r2
 80035ec:	d108      	bne.n	8003600 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e09f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f2:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2202      	movs	r2, #2
 80035f8:	4013      	ands	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e098      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003600:	4b4f      	ldr	r3, [pc, #316]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2203      	movs	r2, #3
 8003606:	4393      	bics	r3, r2
 8003608:	0019      	movs	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003614:	f7ff f9a2 	bl	800295c <HAL_GetTick>
 8003618:	0003      	movs	r3, r0
 800361a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d111      	bne.n	8003648 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003624:	e009      	b.n	800363a <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003626:	f7ff f999 	bl	800295c <HAL_GetTick>
 800362a:	0002      	movs	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	4a44      	ldr	r2, [pc, #272]	; (8003744 <HAL_RCC_ClockConfig+0x204>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e07b      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	220c      	movs	r2, #12
 8003640:	4013      	ands	r3, r2
 8003642:	2b04      	cmp	r3, #4
 8003644:	d1ef      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe6>
 8003646:	e03a      	b.n	80036be <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d111      	bne.n	8003674 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003650:	e009      	b.n	8003666 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003652:	f7ff f983 	bl	800295c <HAL_GetTick>
 8003656:	0002      	movs	r2, r0
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	4a39      	ldr	r2, [pc, #228]	; (8003744 <HAL_RCC_ClockConfig+0x204>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e065      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003666:	4b36      	ldr	r3, [pc, #216]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	220c      	movs	r2, #12
 800366c:	4013      	ands	r3, r2
 800366e:	2b08      	cmp	r3, #8
 8003670:	d1ef      	bne.n	8003652 <HAL_RCC_ClockConfig+0x112>
 8003672:	e024      	b.n	80036be <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d11b      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800367c:	e009      	b.n	8003692 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367e:	f7ff f96d 	bl	800295c <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	4a2e      	ldr	r2, [pc, #184]	; (8003744 <HAL_RCC_ClockConfig+0x204>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e04f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	220c      	movs	r2, #12
 8003698:	4013      	ands	r3, r2
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d1ef      	bne.n	800367e <HAL_RCC_ClockConfig+0x13e>
 800369e:	e00e      	b.n	80036be <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7ff f95c 	bl	800295c <HAL_GetTick>
 80036a4:	0002      	movs	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	4a26      	ldr	r2, [pc, #152]	; (8003744 <HAL_RCC_ClockConfig+0x204>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e03e      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	220c      	movs	r2, #12
 80036ba:	4013      	ands	r3, r2
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80036be:	4b1f      	ldr	r3, [pc, #124]	; (800373c <HAL_RCC_ClockConfig+0x1fc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d211      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCC_ClockConfig+0x1fc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	4393      	bics	r3, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_ClockConfig+0x1fc>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <HAL_RCC_ClockConfig+0x1fc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2201      	movs	r2, #1
 80036e4:	4013      	ands	r3, r2
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e020      	b.n	8003732 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2204      	movs	r2, #4
 80036f6:	4013      	ands	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4a12      	ldr	r2, [pc, #72]	; (8003748 <HAL_RCC_ClockConfig+0x208>)
 8003700:	4013      	ands	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800370e:	f000 f821 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8003712:	0001      	movs	r1, r0
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x200>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	220f      	movs	r2, #15
 800371c:	4013      	ands	r3, r2
 800371e:	4a0b      	ldr	r2, [pc, #44]	; (800374c <HAL_RCC_ClockConfig+0x20c>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	000a      	movs	r2, r1
 8003724:	40da      	lsrs	r2, r3
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_RCC_ClockConfig+0x210>)
 8003728:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800372a:	2000      	movs	r0, #0
 800372c:	f7ff f8ee 	bl	800290c <HAL_InitTick>
  
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b004      	add	sp, #16
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	40022000 	.word	0x40022000
 8003740:	40021000 	.word	0x40021000
 8003744:	00001388 	.word	0x00001388
 8003748:	fffff8ff 	.word	0xfffff8ff
 800374c:	08008c5c 	.word	0x08008c5c
 8003750:	20000008 	.word	0x20000008

08003754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b08f      	sub	sp, #60	; 0x3c
 8003758:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800375a:	2314      	movs	r3, #20
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	4a37      	ldr	r2, [pc, #220]	; (800383c <HAL_RCC_GetSysClockFreq+0xe8>)
 8003760:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003762:	c313      	stmia	r3!, {r0, r1, r4}
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	4a35      	ldr	r2, [pc, #212]	; (8003840 <HAL_RCC_GetSysClockFreq+0xec>)
 800376c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800376e:	c313      	stmia	r3!, {r0, r1, r4}
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003778:	2300      	movs	r3, #0
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
 800377c:	2300      	movs	r3, #0
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
 8003780:	2300      	movs	r3, #0
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003788:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_RCC_GetSysClockFreq+0xf0>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	220c      	movs	r2, #12
 8003792:	4013      	ands	r3, r2
 8003794:	2b08      	cmp	r3, #8
 8003796:	d006      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x52>
 8003798:	2b0c      	cmp	r3, #12
 800379a:	d043      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0xd0>
 800379c:	2b04      	cmp	r3, #4
 800379e:	d144      	bne.n	800382a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_RCC_GetSysClockFreq+0xf4>)
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037a4:	e044      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	0c9b      	lsrs	r3, r3, #18
 80037aa:	220f      	movs	r2, #15
 80037ac:	4013      	ands	r3, r2
 80037ae:	2214      	movs	r2, #20
 80037b0:	18ba      	adds	r2, r7, r2
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80037b6:	4b23      	ldr	r3, [pc, #140]	; (8003844 <HAL_RCC_GetSysClockFreq+0xf0>)
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	220f      	movs	r2, #15
 80037bc:	4013      	ands	r3, r2
 80037be:	1d3a      	adds	r2, r7, #4
 80037c0:	5cd3      	ldrb	r3, [r2, r3]
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c6:	23c0      	movs	r3, #192	; 0xc0
 80037c8:	025b      	lsls	r3, r3, #9
 80037ca:	401a      	ands	r2, r3
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	025b      	lsls	r3, r3, #9
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d109      	bne.n	80037e8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80037d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d6:	481c      	ldr	r0, [pc, #112]	; (8003848 <HAL_RCC_GetSysClockFreq+0xf4>)
 80037d8:	f7fc fc96 	bl	8000108 <__udivsi3>
 80037dc:	0003      	movs	r3, r0
 80037de:	001a      	movs	r2, r3
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	4353      	muls	r3, r2
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
 80037e6:	e01a      	b.n	800381e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80037e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ea:	23c0      	movs	r3, #192	; 0xc0
 80037ec:	025b      	lsls	r3, r3, #9
 80037ee:	401a      	ands	r2, r3
 80037f0:	23c0      	movs	r3, #192	; 0xc0
 80037f2:	025b      	lsls	r3, r3, #9
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d109      	bne.n	800380c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80037f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fa:	4814      	ldr	r0, [pc, #80]	; (800384c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037fc:	f7fc fc84 	bl	8000108 <__udivsi3>
 8003800:	0003      	movs	r3, r0
 8003802:	001a      	movs	r2, r3
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	4353      	muls	r3, r2
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
 800380a:	e008      	b.n	800381e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800380c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380e:	480e      	ldr	r0, [pc, #56]	; (8003848 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003810:	f7fc fc7a 	bl	8000108 <__udivsi3>
 8003814:	0003      	movs	r3, r0
 8003816:	001a      	movs	r2, r3
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	4353      	muls	r3, r2
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 800381e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003822:	e005      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003826:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003828:	e002      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_RCC_GetSysClockFreq+0xf4>)
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800382e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b00f      	add	sp, #60	; 0x3c
 8003838:	bd90      	pop	{r4, r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	080088c0 	.word	0x080088c0
 8003840:	080088d0 	.word	0x080088d0
 8003844:	40021000 	.word	0x40021000
 8003848:	007a1200 	.word	0x007a1200
 800384c:	02dc6c00 	.word	0x02dc6c00

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b02      	ldr	r3, [pc, #8]	; (8003860 <HAL_RCC_GetHCLKFreq+0x10>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	20000008 	.word	0x20000008

08003864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	025b      	lsls	r3, r3, #9
 800387c:	4013      	ands	r3, r2
 800387e:	d100      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003880:	e08f      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2317      	movs	r3, #23
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388a:	4b6f      	ldr	r3, [pc, #444]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	055b      	lsls	r3, r3, #21
 8003892:	4013      	ands	r3, r2
 8003894:	d111      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	4b6c      	ldr	r3, [pc, #432]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	4b6b      	ldr	r3, [pc, #428]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800389c:	2180      	movs	r1, #128	; 0x80
 800389e:	0549      	lsls	r1, r1, #21
 80038a0:	430a      	orrs	r2, r1
 80038a2:	61da      	str	r2, [r3, #28]
 80038a4:	4b68      	ldr	r3, [pc, #416]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	055b      	lsls	r3, r3, #21
 80038ac:	4013      	ands	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b2:	2317      	movs	r3, #23
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ba:	4b64      	ldr	r3, [pc, #400]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4013      	ands	r3, r2
 80038c4:	d11a      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c6:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b60      	ldr	r3, [pc, #384]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	0049      	lsls	r1, r1, #1
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d4:	f7ff f842 	bl	800295c <HAL_GetTick>
 80038d8:	0003      	movs	r3, r0
 80038da:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7ff f83d 	bl	800295c <HAL_GetTick>
 80038e2:	0002      	movs	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0a6      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	4b56      	ldr	r3, [pc, #344]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4013      	ands	r3, r2
 80038fa:	d0f0      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038fc:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038fe:	6a1a      	ldr	r2, [r3, #32]
 8003900:	23c0      	movs	r3, #192	; 0xc0
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d034      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	23c0      	movs	r3, #192	; 0xc0
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4013      	ands	r3, r2
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	429a      	cmp	r2, r3
 800391c:	d02c      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800391e:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a4b      	ldr	r2, [pc, #300]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003928:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800392a:	6a1a      	ldr	r2, [r3, #32]
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	0249      	lsls	r1, r1, #9
 8003932:	430a      	orrs	r2, r1
 8003934:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003936:	4b44      	ldr	r3, [pc, #272]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003938:	6a1a      	ldr	r2, [r3, #32]
 800393a:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800393c:	4945      	ldr	r1, [pc, #276]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800393e:	400a      	ands	r2, r1
 8003940:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003942:	4b41      	ldr	r3, [pc, #260]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	4013      	ands	r3, r2
 800394e:	d013      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7ff f804 	bl	800295c <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003958:	e009      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe ffff 	bl	800295c <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	4a3c      	ldr	r2, [pc, #240]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e067      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	2202      	movs	r2, #2
 8003974:	4013      	ands	r3, r2
 8003976:	d0f0      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003978:	4b33      	ldr	r3, [pc, #204]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4a34      	ldr	r2, [pc, #208]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800397e:	4013      	ands	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003988:	430a      	orrs	r2, r1
 800398a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800398c:	2317      	movs	r3, #23
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	4b2b      	ldr	r3, [pc, #172]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800399c:	492f      	ldr	r1, [pc, #188]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800399e:	400a      	ands	r2, r1
 80039a0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2201      	movs	r2, #1
 80039a8:	4013      	ands	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ac:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	2203      	movs	r2, #3
 80039b2:	4393      	bics	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039bc:	430a      	orrs	r2, r1
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2202      	movs	r2, #2
 80039c6:	4013      	ands	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039da:	430a      	orrs	r2, r1
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2220      	movs	r2, #32
 80039e4:	4013      	ands	r3, r2
 80039e6:	d009      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039e8:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	2210      	movs	r2, #16
 80039ee:	4393      	bics	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039f8:	430a      	orrs	r2, r1
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	029b      	lsls	r3, r3, #10
 8003a04:	4013      	ands	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	2280      	movs	r2, #128	; 0x80
 8003a0e:	4393      	bics	r3, r2
 8003a10:	0019      	movs	r1, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4013      	ands	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	2240      	movs	r2, #64	; 0x40
 8003a2e:	4393      	bics	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b006      	add	sp, #24
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	fffffcff 	.word	0xfffffcff
 8003a54:	fffeffff 	.word	0xfffeffff
 8003a58:	00001388 	.word	0x00001388
 8003a5c:	efffffff 	.word	0xefffffff
 8003a60:	fffcffff 	.word	0xfffcffff

08003a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e08a      	b.n	8003b8c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	225d      	movs	r2, #93	; 0x5d
 8003a80:	5c9b      	ldrb	r3, [r3, r2]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	225c      	movs	r2, #92	; 0x5c
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	0018      	movs	r0, r3
 8003a94:	f001 fc8e 	bl	80053b4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	225d      	movs	r2, #93	; 0x5d
 8003a9c:	2102      	movs	r1, #2
 8003a9e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2140      	movs	r1, #64	; 0x40
 8003aac:	438a      	bics	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	23e0      	movs	r3, #224	; 0xe0
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d902      	bls.n	8003ac2 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e002      	b.n	8003ac8 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	015b      	lsls	r3, r3, #5
 8003ac6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	23f0      	movs	r3, #240	; 0xf0
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d008      	beq.n	8003ae6 <HAL_SPI_Init+0x82>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	23e0      	movs	r3, #224	; 0xe0
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d002      	beq.n	8003ae6 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10c      	bne.n	8003b08 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	23e0      	movs	r3, #224	; 0xe0
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d903      	bls.n	8003b02 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
 8003b00:	e002      	b.n	8003b08 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6999      	ldr	r1, [r3, #24]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	400b      	ands	r3, r1
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	0011      	movs	r1, r2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	401a      	ands	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	0011      	movs	r1, r2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4907      	ldr	r1, [pc, #28]	; (8003b94 <HAL_SPI_Init+0x130>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	225d      	movs	r2, #93	; 0x5d
 8003b86:	2101      	movs	r1, #1
 8003b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b004      	add	sp, #16
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	fffff7ff 	.word	0xfffff7ff

08003b98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	1dbb      	adds	r3, r7, #6
 8003ba6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bac:	231f      	movs	r3, #31
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	225c      	movs	r2, #92	; 0x5c
 8003bb8:	5c9b      	ldrb	r3, [r3, r2]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_SPI_Transmit+0x2a>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e14f      	b.n	8003e62 <HAL_SPI_Transmit+0x2ca>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	225c      	movs	r2, #92	; 0x5c
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bca:	f7fe fec7 	bl	800295c <HAL_GetTick>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	225d      	movs	r2, #93	; 0x5d
 8003bd6:	5c9b      	ldrb	r3, [r3, r2]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d004      	beq.n	8003be8 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8003bde:	231f      	movs	r3, #31
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	2202      	movs	r2, #2
 8003be4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003be6:	e131      	b.n	8003e4c <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_SPI_Transmit+0x5e>
 8003bee:	1dbb      	adds	r3, r7, #6
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 8003bf6:	231f      	movs	r3, #31
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bfe:	e125      	b.n	8003e4c <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	225d      	movs	r2, #93	; 0x5d
 8003c04:	2103      	movs	r1, #3
 8003c06:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1dba      	adds	r2, r7, #6
 8003c18:	8812      	ldrh	r2, [r2, #0]
 8003c1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1dba      	adds	r2, r7, #6
 8003c20:	8812      	ldrh	r2, [r2, #0]
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2244      	movs	r2, #68	; 0x44
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2246      	movs	r2, #70	; 0x46
 8003c36:	2100      	movs	r1, #0
 8003c38:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d108      	bne.n	8003c64 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2180      	movs	r1, #128	; 0x80
 8003c5e:	01c9      	lsls	r1, r1, #7
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d007      	beq.n	8003c82 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2140      	movs	r1, #64	; 0x40
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	23e0      	movs	r3, #224	; 0xe0
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d948      	bls.n	8003d20 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <HAL_SPI_Transmit+0x108>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d139      	bne.n	8003d14 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	881a      	ldrh	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3302      	adds	r3, #2
 8003cae:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cbe:	e029      	b.n	8003d14 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d10f      	bne.n	8003cee <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	881a      	ldrh	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	3302      	adds	r3, #2
 8003cdc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cec:	e012      	b.n	8003d14 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_SPI_Transmit+0x172>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	d00c      	beq.n	8003d14 <HAL_SPI_Transmit+0x17c>
 8003cfa:	f7fe fe2f 	bl	800295c <HAL_GetTick>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d804      	bhi.n	8003d14 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d0a:	231f      	movs	r3, #31
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	2203      	movs	r2, #3
 8003d10:	701a      	strb	r2, [r3, #0]
          goto error;
 8003d12:	e09b      	b.n	8003e4c <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1d0      	bne.n	8003cc0 <HAL_SPI_Transmit+0x128>
 8003d1e:	e071      	b.n	8003e04 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_SPI_Transmit+0x19a>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d163      	bne.n	8003dfa <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d90f      	bls.n	8003d5c <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3302      	adds	r3, #2
 8003d4a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b02      	subs	r3, #2
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d5a:	e04e      	b.n	8003dfa <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	60ba      	str	r2, [r7, #8]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	320c      	adds	r2, #12
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d7a:	e03e      	b.n	8003dfa <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2202      	movs	r2, #2
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d124      	bne.n	8003dd4 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d90f      	bls.n	8003db4 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	881a      	ldrh	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3302      	adds	r3, #2
 8003da2:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b02      	subs	r3, #2
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003db2:	e022      	b.n	8003dfa <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	60ba      	str	r2, [r7, #8]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	320c      	adds	r2, #12
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dd2:	e012      	b.n	8003dfa <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_SPI_Transmit+0x258>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	d00c      	beq.n	8003dfa <HAL_SPI_Transmit+0x262>
 8003de0:	f7fe fdbc 	bl	800295c <HAL_GetTick>
 8003de4:	0002      	movs	r2, r0
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d804      	bhi.n	8003dfa <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8003df0:	231f      	movs	r3, #31
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2203      	movs	r2, #3
 8003df6:	701a      	strb	r2, [r3, #0]
          goto error;
 8003df8:	e028      	b.n	8003e4c <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1bb      	bne.n	8003d7c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	6839      	ldr	r1, [r7, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 f916 	bl	800403c <SPI_EndRxTxTransaction>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8003e40:	231f      	movs	r3, #31
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e000      	b.n	8003e4c <HAL_SPI_Transmit+0x2b4>
  }

error:
 8003e4a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	225d      	movs	r2, #93	; 0x5d
 8003e50:	2101      	movs	r1, #1
 8003e52:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	225c      	movs	r2, #92	; 0x5c
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e5c:	231f      	movs	r3, #31
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	781b      	ldrb	r3, [r3, #0]
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b008      	add	sp, #32
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e7a:	e050      	b.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	d04d      	beq.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8003e88:	f7fe fd68 	bl	800295c <HAL_GetTick>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d842      	bhi.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	21e0      	movs	r1, #224	; 0xe0
 8003ea4:	438a      	bics	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	2382      	movs	r3, #130	; 0x82
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d113      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x70>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d005      	beq.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d107      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2140      	movs	r1, #64	; 0x40
 8003ed8:	438a      	bics	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	019b      	lsls	r3, r3, #6
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d110      	bne.n	8003f0a <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4914      	ldr	r1, [pc, #80]	; (8003f44 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8003ef4:	400a      	ands	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2180      	movs	r1, #128	; 0x80
 8003f04:	0189      	lsls	r1, r1, #6
 8003f06:	430a      	orrs	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	225d      	movs	r2, #93	; 0x5d
 8003f0e:	2101      	movs	r1, #1
 8003f10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	225c      	movs	r2, #92	; 0x5c
 8003f16:	2100      	movs	r1, #0
 8003f18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e00e      	b.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d101      	bne.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0xc6>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8003f32:	2300      	movs	r3, #0
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d1a0      	bne.n	8003e7c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b004      	add	sp, #16
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	ffffdfff 	.word	0xffffdfff

08003f48 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8003f56:	e062      	b.n	800401e <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	23c0      	movs	r3, #192	; 0xc0
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d10c      	bne.n	8003f7c <SPI_WaitFifoStateUntilTimeout+0x34>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	2117      	movs	r1, #23
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	d04d      	beq.n	800401e <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <SPI_WaitFifoStateUntilTimeout+0x50>
 8003f88:	f7fe fce8 	bl	800295c <HAL_GetTick>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d842      	bhi.n	800401e <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	21e0      	movs	r1, #224	; 0xe0
 8003fa4:	438a      	bics	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	2382      	movs	r3, #130	; 0x82
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d113      	bne.n	8003fdc <SPI_WaitFifoStateUntilTimeout+0x94>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d005      	beq.n	8003fcc <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d107      	bne.n	8003fdc <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2140      	movs	r1, #64	; 0x40
 8003fd8:	438a      	bics	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	019b      	lsls	r3, r3, #6
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d110      	bne.n	800400a <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4911      	ldr	r1, [pc, #68]	; (8004038 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	0189      	lsls	r1, r1, #6
 8004006:	430a      	orrs	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	225d      	movs	r2, #93	; 0x5d
 800400e:	2101      	movs	r1, #1
 8004010:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	225c      	movs	r2, #92	; 0x5c
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e008      	b.n	8004030 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	4013      	ands	r3, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	d194      	bne.n	8003f58 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b006      	add	sp, #24
 8004036:	bd80      	pop	{r7, pc}
 8004038:	ffffdfff 	.word	0xffffdfff

0800403c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	23c0      	movs	r3, #192	; 0xc0
 800404c:	0159      	lsls	r1, r3, #5
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	0013      	movs	r3, r2
 8004056:	2200      	movs	r2, #0
 8004058:	f7ff ff76 	bl	8003f48 <SPI_WaitFifoStateUntilTimeout>
 800405c:	1e03      	subs	r3, r0, #0
 800405e:	d007      	beq.n	8004070 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	2220      	movs	r2, #32
 8004066:	431a      	orrs	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e027      	b.n	80040c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	0013      	movs	r3, r2
 800407a:	2200      	movs	r2, #0
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	f7ff fef5 	bl	8003e6c <SPI_WaitFlagStateUntilTimeout>
 8004082:	1e03      	subs	r3, r0, #0
 8004084:	d007      	beq.n	8004096 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	2220      	movs	r2, #32
 800408c:	431a      	orrs	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e014      	b.n	80040c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	23c0      	movs	r3, #192	; 0xc0
 800409a:	00d9      	lsls	r1, r3, #3
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	0013      	movs	r3, r2
 80040a4:	2200      	movs	r2, #0
 80040a6:	f7ff ff4f 	bl	8003f48 <SPI_WaitFifoStateUntilTimeout>
 80040aa:	1e03      	subs	r3, r0, #0
 80040ac:	d007      	beq.n	80040be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b2:	2220      	movs	r2, #32
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e000      	b.n	80040c0 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b004      	add	sp, #16
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e01e      	b.n	8004118 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	223d      	movs	r2, #61	; 0x3d
 80040de:	5c9b      	ldrb	r3, [r3, r2]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d107      	bne.n	80040f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	223c      	movs	r2, #60	; 0x3c
 80040ea:	2100      	movs	r1, #0
 80040ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f001 f9d5 	bl	80054a0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	223d      	movs	r2, #61	; 0x3d
 80040fa:	2102      	movs	r1, #2
 80040fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	0019      	movs	r1, r3
 8004108:	0010      	movs	r0, r2
 800410a:	f000 f809 	bl	8004120 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	223d      	movs	r2, #61	; 0x3d
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}

08004120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a34      	ldr	r2, [pc, #208]	; (8004208 <TIM_Base_SetConfig+0xe8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d008      	beq.n	800414e <TIM_Base_SetConfig+0x2e>
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	05db      	lsls	r3, r3, #23
 8004142:	429a      	cmp	r2, r3
 8004144:	d003      	beq.n	800414e <TIM_Base_SetConfig+0x2e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a30      	ldr	r2, [pc, #192]	; (800420c <TIM_Base_SetConfig+0xec>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2270      	movs	r2, #112	; 0x70
 8004152:	4393      	bics	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a29      	ldr	r2, [pc, #164]	; (8004208 <TIM_Base_SetConfig+0xe8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d018      	beq.n	800419a <TIM_Base_SetConfig+0x7a>
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	05db      	lsls	r3, r3, #23
 800416e:	429a      	cmp	r2, r3
 8004170:	d013      	beq.n	800419a <TIM_Base_SetConfig+0x7a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a25      	ldr	r2, [pc, #148]	; (800420c <TIM_Base_SetConfig+0xec>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00f      	beq.n	800419a <TIM_Base_SetConfig+0x7a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a24      	ldr	r2, [pc, #144]	; (8004210 <TIM_Base_SetConfig+0xf0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_Base_SetConfig+0x7a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <TIM_Base_SetConfig+0xf4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_Base_SetConfig+0x7a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a22      	ldr	r2, [pc, #136]	; (8004218 <TIM_Base_SetConfig+0xf8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0x7a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a21      	ldr	r2, [pc, #132]	; (800421c <TIM_Base_SetConfig+0xfc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a20      	ldr	r2, [pc, #128]	; (8004220 <TIM_Base_SetConfig+0x100>)
 800419e:	4013      	ands	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2280      	movs	r2, #128	; 0x80
 80041b0:	4393      	bics	r3, r2
 80041b2:	001a      	movs	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <TIM_Base_SetConfig+0xe8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_Base_SetConfig+0xd2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <TIM_Base_SetConfig+0xf4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_Base_SetConfig+0xd2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a0c      	ldr	r2, [pc, #48]	; (8004218 <TIM_Base_SetConfig+0xf8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_Base_SetConfig+0xd2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a0b      	ldr	r2, [pc, #44]	; (800421c <TIM_Base_SetConfig+0xfc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d103      	bne.n	80041fa <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	615a      	str	r2, [r3, #20]
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40000400 	.word	0x40000400
 8004210:	40002000 	.word	0x40002000
 8004214:	40014000 	.word	0x40014000
 8004218:	40014400 	.word	0x40014400
 800421c:	40014800 	.word	0x40014800
 8004220:	fffffcff 	.word	0xfffffcff

08004224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	223c      	movs	r2, #60	; 0x3c
 8004232:	5c9b      	ldrb	r3, [r3, r2]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e032      	b.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	223c      	movs	r2, #60	; 0x3c
 8004240:	2101      	movs	r1, #1
 8004242:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	223d      	movs	r2, #61	; 0x3d
 8004248:	2102      	movs	r1, #2
 800424a:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2170      	movs	r1, #112	; 0x70
 8004258:	438a      	bics	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	438a      	bics	r2, r1
 800427c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6899      	ldr	r1, [r3, #8]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	223d      	movs	r2, #61	; 0x3d
 8004294:	2101      	movs	r1, #1
 8004296:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	223c      	movs	r2, #60	; 0x3c
 800429c:	2100      	movs	r1, #0
 800429e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	0018      	movs	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b002      	add	sp, #8
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80042ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6038      	str	r0, [r7, #0]
 80042b4:	6079      	str	r1, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	001c      	movs	r4, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	085d      	lsrs	r5, r3, #1
 80042c0:	2301      	movs	r3, #1
 80042c2:	1c1e      	adds	r6, r3, #0
 80042c4:	2201      	movs	r2, #1
 80042c6:	4252      	negs	r2, r2
 80042c8:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <_ZSt5isinfd+0x58>)
 80042ca:	0020      	movs	r0, r4
 80042cc:	0029      	movs	r1, r5
 80042ce:	f7fe fa0d 	bl	80026ec <__aeabi_dcmpun>
 80042d2:	1e03      	subs	r3, r0, #0
 80042d4:	d10a      	bne.n	80042ec <_ZSt5isinfd+0x40>
 80042d6:	2201      	movs	r2, #1
 80042d8:	4252      	negs	r2, r2
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <_ZSt5isinfd+0x58>)
 80042dc:	0020      	movs	r0, r4
 80042de:	0029      	movs	r1, r5
 80042e0:	f7fc f8a8 	bl	8000434 <__aeabi_dcmple>
 80042e4:	1e03      	subs	r3, r0, #0
 80042e6:	d101      	bne.n	80042ec <_ZSt5isinfd+0x40>
 80042e8:	2300      	movs	r3, #0
 80042ea:	1c1e      	adds	r6, r3, #0
 80042ec:	b2f3      	uxtb	r3, r6
 80042ee:	2201      	movs	r2, #1
 80042f0:	4053      	eors	r3, r2
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	1c1a      	adds	r2, r3, #0
 80042f6:	2301      	movs	r3, #1
 80042f8:	4013      	ands	r3, r2
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	b003      	add	sp, #12
 8004302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004304:	7fefffff 	.word	0x7fefffff

08004308 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6038      	str	r0, [r7, #0]
 8004310:	6079      	str	r1, [r7, #4]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6838      	ldr	r0, [r7, #0]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	f7fe f9e7 	bl	80026ec <__aeabi_dcmpun>
 800431e:	1e03      	subs	r3, r0, #0
 8004320:	d001      	beq.n	8004326 <_ZSt5isnand+0x1e>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <_ZSt5isnand+0x20>
 8004326:	2300      	movs	r3, #0
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}

08004330 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	b0bd      	sub	sp, #244	; 0xf4
 8004334:	af04      	add	r7, sp, #16


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004336:	f7fe fad5 	bl	80028e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800433a:	f000 fe0b 	bl	8004f54 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800433e:	f000 ff11 	bl	8005164 <_ZL12MX_GPIO_Initv>
	MX_SPI2_Init();
 8004342:	f000 fe67 	bl	8005014 <_ZL12MX_SPI2_Initv>
	MX_TIM6_Init();
 8004346:	f000 febd 	bl	80050c4 <_ZL12MX_TIM6_Initv>

	/* USER CODE BEGIN 2 */
	TFT_GFX tftDisplay{hspi2.Instance};
 800434a:	4bfe      	ldr	r3, [pc, #1016]	; (8004744 <main+0x414>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	26a4      	movs	r6, #164	; 0xa4
 8004350:	19bb      	adds	r3, r7, r6
 8004352:	0011      	movs	r1, r2
 8004354:	0018      	movs	r0, r3
 8004356:	f001 fb2b 	bl	80059b0 <_ZN7TFT_GFXC1EP11SPI_TypeDef>
	 * LOW CELL VOLTAGE
	 * HIGH CELL VOLTAGE
	 * CURRENT
	 * AVG. TEMPERATURE
	 */
	const uint16_t textSize = 1;
 800435a:	23ce      	movs	r3, #206	; 0xce
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2201      	movs	r2, #1
 8004360:	801a      	strh	r2, [r3, #0]
	const uint16_t lineThickness = 5;
 8004362:	23a2      	movs	r3, #162	; 0xa2
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	2205      	movs	r2, #5
 8004368:	801a      	strh	r2, [r3, #0]
	const uint8_t chosenStatesFontSize = 2;
 800436a:	23cd      	movs	r3, #205	; 0xcd
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	2202      	movs	r2, #2
 8004370:	701a      	strb	r2, [r3, #0]
	const uint8_t stateSelectorFontSize = 3;
 8004372:	23cc      	movs	r3, #204	; 0xcc
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	2203      	movs	r2, #3
 8004378:	701a      	strb	r2, [r3, #0]

	//LANDSCAPE W/ SD CARD SLOT ON LEFT SIDE
	tftDisplay.setRotation(1);
 800437a:	19bb      	adds	r3, r7, r6
 800437c:	2101      	movs	r1, #1
 800437e:	0018      	movs	r0, r3
 8004380:	f002 f94d 	bl	800661e <_ZN7TFT_GFX11setRotationEh>

	//Set background to correct color and add outline
	GUI_API::drawSelectionLines(tftDisplay, backgroundColor, fontColor, lineColor, lineThickness);
 8004384:	49f0      	ldr	r1, [pc, #960]	; (8004748 <main+0x418>)
 8004386:	4af0      	ldr	r2, [pc, #960]	; (8004748 <main+0x418>)
 8004388:	19b8      	adds	r0, r7, r6
 800438a:	2305      	movs	r3, #5
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	000b      	movs	r3, r1
 8004390:	2100      	movs	r1, #0
 8004392:	f002 fc34 	bl	8006bfe <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>


	//CREATING SPEED TEXT BOX (TOP LEFT SQUARE)
	TFT_TEXT_BOX bottomSpeedTxtSel{&tftDisplay,backgroundColor,lineThickness + 0.15 * tftDisplay.width(), tftDisplay.height()/2 - (2*lineThickness), (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 8004396:	19bb      	adds	r3, r7, r6
 8004398:	0018      	movs	r0, r3
 800439a:	f002 f992 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 800439e:	0003      	movs	r3, r0
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7fe f9f5 	bl	8002790 <__aeabi_i2d>
 80043a6:	4ae9      	ldr	r2, [pc, #932]	; (800474c <main+0x41c>)
 80043a8:	4be9      	ldr	r3, [pc, #932]	; (8004750 <main+0x420>)
 80043aa:	f7fd fbe5 	bl	8001b78 <__aeabi_dmul>
 80043ae:	0003      	movs	r3, r0
 80043b0:	000c      	movs	r4, r1
 80043b2:	0018      	movs	r0, r3
 80043b4:	0021      	movs	r1, r4
 80043b6:	2200      	movs	r2, #0
 80043b8:	4be6      	ldr	r3, [pc, #920]	; (8004754 <main+0x424>)
 80043ba:	f7fc fcb7 	bl	8000d2c <__aeabi_dadd>
 80043be:	0003      	movs	r3, r0
 80043c0:	000c      	movs	r4, r1
 80043c2:	0018      	movs	r0, r3
 80043c4:	0021      	movs	r1, r4
 80043c6:	f7fc f8b7 	bl	8000538 <__aeabi_d2uiz>
 80043ca:	0003      	movs	r3, r0
 80043cc:	b29d      	uxth	r5, r3
 80043ce:	19bb      	adds	r3, r7, r6
 80043d0:	0018      	movs	r0, r3
 80043d2:	f002 f980 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 80043d6:	0003      	movs	r3, r0
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b0a      	subs	r3, #10
 80043de:	b29c      	uxth	r4, r3
 80043e0:	19bb      	adds	r3, r7, r6
 80043e2:	0018      	movs	r0, r3
 80043e4:	f002 f96d 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 80043e8:	0003      	movs	r3, r0
 80043ea:	3b0d      	subs	r3, #13
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	b21b      	sxth	r3, r3
 80043f0:	19b9      	adds	r1, r7, r6
 80043f2:	228c      	movs	r2, #140	; 0x8c
 80043f4:	18b8      	adds	r0, r7, r2
 80043f6:	2200      	movs	r2, #0
 80043f8:	9202      	str	r2, [sp, #8]
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	9400      	str	r4, [sp, #0]
 80043fe:	002b      	movs	r3, r5
 8004400:	2200      	movs	r2, #0
 8004402:	f002 fd08 	bl	8006e16 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomSpeedTxt = bottomSpeedTxtSel.write("SPEED (mph)", fontColor, 1);
 8004406:	21ca      	movs	r1, #202	; 0xca
 8004408:	187c      	adds	r4, r7, r1
 800440a:	4acf      	ldr	r2, [pc, #828]	; (8004748 <main+0x418>)
 800440c:	49d2      	ldr	r1, [pc, #840]	; (8004758 <main+0x428>)
 800440e:	238c      	movs	r3, #140	; 0x8c
 8004410:	18f8      	adds	r0, r7, r3
 8004412:	2301      	movs	r3, #1
 8004414:	f002 fd52 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 8004418:	0003      	movs	r3, r0
 800441a:	8023      	strh	r3, [r4, #0]

	//CELL VOLTAGE TEXT BOX (TOP RIGHT)
	TFT_TEXT_BOX bottomVoltTxtSel{&tftDisplay,backgroundColor,lineThickness + 0.6 * tftDisplay.width(), tftDisplay.height()/2 - (2*lineThickness), (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 800441c:	19bb      	adds	r3, r7, r6
 800441e:	0018      	movs	r0, r3
 8004420:	f002 f94f 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8004424:	0003      	movs	r3, r0
 8004426:	0018      	movs	r0, r3
 8004428:	f7fe f9b2 	bl	8002790 <__aeabi_i2d>
 800442c:	4ac7      	ldr	r2, [pc, #796]	; (800474c <main+0x41c>)
 800442e:	4bcb      	ldr	r3, [pc, #812]	; (800475c <main+0x42c>)
 8004430:	f7fd fba2 	bl	8001b78 <__aeabi_dmul>
 8004434:	0003      	movs	r3, r0
 8004436:	000c      	movs	r4, r1
 8004438:	0018      	movs	r0, r3
 800443a:	0021      	movs	r1, r4
 800443c:	2200      	movs	r2, #0
 800443e:	4bc5      	ldr	r3, [pc, #788]	; (8004754 <main+0x424>)
 8004440:	f7fc fc74 	bl	8000d2c <__aeabi_dadd>
 8004444:	0003      	movs	r3, r0
 8004446:	000c      	movs	r4, r1
 8004448:	0018      	movs	r0, r3
 800444a:	0021      	movs	r1, r4
 800444c:	f7fc f874 	bl	8000538 <__aeabi_d2uiz>
 8004450:	0003      	movs	r3, r0
 8004452:	b29d      	uxth	r5, r3
 8004454:	19bb      	adds	r3, r7, r6
 8004456:	0018      	movs	r0, r3
 8004458:	f002 f93d 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 800445c:	0003      	movs	r3, r0
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b0a      	subs	r3, #10
 8004464:	b29c      	uxth	r4, r3
 8004466:	19bb      	adds	r3, r7, r6
 8004468:	0018      	movs	r0, r3
 800446a:	f002 f92a 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 800446e:	0003      	movs	r3, r0
 8004470:	3b0d      	subs	r3, #13
 8004472:	b29b      	uxth	r3, r3
 8004474:	b21b      	sxth	r3, r3
 8004476:	19b9      	adds	r1, r7, r6
 8004478:	2278      	movs	r2, #120	; 0x78
 800447a:	18b8      	adds	r0, r7, r2
 800447c:	2200      	movs	r2, #0
 800447e:	9202      	str	r2, [sp, #8]
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	9400      	str	r4, [sp, #0]
 8004484:	002b      	movs	r3, r5
 8004486:	2200      	movs	r2, #0
 8004488:	f002 fcc5 	bl	8006e16 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomVoltTxt = bottomVoltTxtSel.write("BATTERY VOLTAGE", fontColor, 1);
 800448c:	21c8      	movs	r1, #200	; 0xc8
 800448e:	187c      	adds	r4, r7, r1
 8004490:	4aad      	ldr	r2, [pc, #692]	; (8004748 <main+0x418>)
 8004492:	49b3      	ldr	r1, [pc, #716]	; (8004760 <main+0x430>)
 8004494:	2378      	movs	r3, #120	; 0x78
 8004496:	18f8      	adds	r0, r7, r3
 8004498:	2301      	movs	r3, #1
 800449a:	f002 fd0f 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 800449e:	0003      	movs	r3, r0
 80044a0:	8023      	strh	r3, [r4, #0]

	//BATTERY CURRENT TEXT BOX (BOTTOM LEFT)
	TFT_TEXT_BOX bottomCurrentTxtSel{&tftDisplay,backgroundColor,lineThickness + 0.1 * tftDisplay.width(), tftDisplay.height() - (3*lineThickness), (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 80044a2:	19bb      	adds	r3, r7, r6
 80044a4:	0018      	movs	r0, r3
 80044a6:	f002 f90c 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 80044aa:	0003      	movs	r3, r0
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7fe f96f 	bl	8002790 <__aeabi_i2d>
 80044b2:	4aac      	ldr	r2, [pc, #688]	; (8004764 <main+0x434>)
 80044b4:	4bac      	ldr	r3, [pc, #688]	; (8004768 <main+0x438>)
 80044b6:	f7fd fb5f 	bl	8001b78 <__aeabi_dmul>
 80044ba:	0003      	movs	r3, r0
 80044bc:	000c      	movs	r4, r1
 80044be:	0018      	movs	r0, r3
 80044c0:	0021      	movs	r1, r4
 80044c2:	2200      	movs	r2, #0
 80044c4:	4ba3      	ldr	r3, [pc, #652]	; (8004754 <main+0x424>)
 80044c6:	f7fc fc31 	bl	8000d2c <__aeabi_dadd>
 80044ca:	0003      	movs	r3, r0
 80044cc:	000c      	movs	r4, r1
 80044ce:	0018      	movs	r0, r3
 80044d0:	0021      	movs	r1, r4
 80044d2:	f7fc f831 	bl	8000538 <__aeabi_d2uiz>
 80044d6:	0003      	movs	r3, r0
 80044d8:	b29d      	uxth	r5, r3
 80044da:	19bb      	adds	r3, r7, r6
 80044dc:	0018      	movs	r0, r3
 80044de:	f002 f8fa 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 80044e2:	0003      	movs	r3, r0
 80044e4:	3b0f      	subs	r3, #15
 80044e6:	b29c      	uxth	r4, r3
 80044e8:	19bb      	adds	r3, r7, r6
 80044ea:	0018      	movs	r0, r3
 80044ec:	f002 f8e9 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 80044f0:	0003      	movs	r3, r0
 80044f2:	3b0d      	subs	r3, #13
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	b21b      	sxth	r3, r3
 80044f8:	19b9      	adds	r1, r7, r6
 80044fa:	2264      	movs	r2, #100	; 0x64
 80044fc:	18b8      	adds	r0, r7, r2
 80044fe:	2200      	movs	r2, #0
 8004500:	9202      	str	r2, [sp, #8]
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	9400      	str	r4, [sp, #0]
 8004506:	002b      	movs	r3, r5
 8004508:	2200      	movs	r2, #0
 800450a:	f002 fc84 	bl	8006e16 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomCurrentTxt = bottomCurrentTxtSel.write("BATTERY CURRENT", fontColor, 1);
 800450e:	21c6      	movs	r1, #198	; 0xc6
 8004510:	187c      	adds	r4, r7, r1
 8004512:	4a8d      	ldr	r2, [pc, #564]	; (8004748 <main+0x418>)
 8004514:	4995      	ldr	r1, [pc, #596]	; (800476c <main+0x43c>)
 8004516:	2364      	movs	r3, #100	; 0x64
 8004518:	18f8      	adds	r0, r7, r3
 800451a:	2301      	movs	r3, #1
 800451c:	f002 fcce 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 8004520:	0003      	movs	r3, r0
 8004522:	8023      	strh	r3, [r4, #0]

	//AVG. TEMPERATURE TEXT BOX (BOTTOM RIGHT)
	TFT_TEXT_BOX bottomTempTxtSel{&tftDisplay,backgroundColor,lineThickness + 0.6 * tftDisplay.width(), tftDisplay.height() - (3*lineThickness), (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 8004524:	19bb      	adds	r3, r7, r6
 8004526:	0018      	movs	r0, r3
 8004528:	f002 f8cb 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 800452c:	0003      	movs	r3, r0
 800452e:	0018      	movs	r0, r3
 8004530:	f7fe f92e 	bl	8002790 <__aeabi_i2d>
 8004534:	4a85      	ldr	r2, [pc, #532]	; (800474c <main+0x41c>)
 8004536:	4b89      	ldr	r3, [pc, #548]	; (800475c <main+0x42c>)
 8004538:	f7fd fb1e 	bl	8001b78 <__aeabi_dmul>
 800453c:	0003      	movs	r3, r0
 800453e:	000c      	movs	r4, r1
 8004540:	0018      	movs	r0, r3
 8004542:	0021      	movs	r1, r4
 8004544:	2200      	movs	r2, #0
 8004546:	4b83      	ldr	r3, [pc, #524]	; (8004754 <main+0x424>)
 8004548:	f7fc fbf0 	bl	8000d2c <__aeabi_dadd>
 800454c:	0003      	movs	r3, r0
 800454e:	000c      	movs	r4, r1
 8004550:	0018      	movs	r0, r3
 8004552:	0021      	movs	r1, r4
 8004554:	f7fb fff0 	bl	8000538 <__aeabi_d2uiz>
 8004558:	0003      	movs	r3, r0
 800455a:	b29d      	uxth	r5, r3
 800455c:	19bb      	adds	r3, r7, r6
 800455e:	0018      	movs	r0, r3
 8004560:	f002 f8b9 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8004564:	0003      	movs	r3, r0
 8004566:	3b0f      	subs	r3, #15
 8004568:	b29c      	uxth	r4, r3
 800456a:	19bb      	adds	r3, r7, r6
 800456c:	0018      	movs	r0, r3
 800456e:	f002 f8a8 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8004572:	0003      	movs	r3, r0
 8004574:	3b0d      	subs	r3, #13
 8004576:	b29b      	uxth	r3, r3
 8004578:	b21b      	sxth	r3, r3
 800457a:	19b9      	adds	r1, r7, r6
 800457c:	2250      	movs	r2, #80	; 0x50
 800457e:	18b8      	adds	r0, r7, r2
 8004580:	2200      	movs	r2, #0
 8004582:	9202      	str	r2, [sp, #8]
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	9400      	str	r4, [sp, #0]
 8004588:	002b      	movs	r3, r5
 800458a:	2200      	movs	r2, #0
 800458c:	f002 fc43 	bl	8006e16 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomTempTxt = bottomTempTxtSel.write("TEMPERATURE (F)", fontColor, 1);
 8004590:	21c4      	movs	r1, #196	; 0xc4
 8004592:	187c      	adds	r4, r7, r1
 8004594:	4a6c      	ldr	r2, [pc, #432]	; (8004748 <main+0x418>)
 8004596:	4976      	ldr	r1, [pc, #472]	; (8004770 <main+0x440>)
 8004598:	2350      	movs	r3, #80	; 0x50
 800459a:	18f8      	adds	r0, r7, r3
 800459c:	2301      	movs	r3, #1
 800459e:	f002 fc8d 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 80045a2:	0003      	movs	r3, r0
 80045a4:	8023      	strh	r3, [r4, #0]


	//SPEED SELECTOR
	TFT_TEXT_BOX selectorSpeed{&tftDisplay,backgroundColor, lineThickness + 0.0 * tftDisplay.width(), 0.2 * tftDisplay.height() - (lineThickness), (int16_t)(tftDisplay.width() / 2), true};
 80045a6:	19bb      	adds	r3, r7, r6
 80045a8:	0018      	movs	r0, r3
 80045aa:	f002 f88a 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 80045ae:	0003      	movs	r3, r0
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7fe f8ed 	bl	8002790 <__aeabi_i2d>
 80045b6:	2200      	movs	r2, #0
 80045b8:	2300      	movs	r3, #0
 80045ba:	f7fd fadd 	bl	8001b78 <__aeabi_dmul>
 80045be:	0003      	movs	r3, r0
 80045c0:	000c      	movs	r4, r1
 80045c2:	0018      	movs	r0, r3
 80045c4:	0021      	movs	r1, r4
 80045c6:	2200      	movs	r2, #0
 80045c8:	4b62      	ldr	r3, [pc, #392]	; (8004754 <main+0x424>)
 80045ca:	f7fc fbaf 	bl	8000d2c <__aeabi_dadd>
 80045ce:	0003      	movs	r3, r0
 80045d0:	000c      	movs	r4, r1
 80045d2:	0018      	movs	r0, r3
 80045d4:	0021      	movs	r1, r4
 80045d6:	f7fb ffaf 	bl	8000538 <__aeabi_d2uiz>
 80045da:	0003      	movs	r3, r0
 80045dc:	b29d      	uxth	r5, r3
 80045de:	19bb      	adds	r3, r7, r6
 80045e0:	0018      	movs	r0, r3
 80045e2:	f002 f878 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 80045e6:	0003      	movs	r3, r0
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7fe f8d1 	bl	8002790 <__aeabi_i2d>
 80045ee:	4a5d      	ldr	r2, [pc, #372]	; (8004764 <main+0x434>)
 80045f0:	4b60      	ldr	r3, [pc, #384]	; (8004774 <main+0x444>)
 80045f2:	f7fd fac1 	bl	8001b78 <__aeabi_dmul>
 80045f6:	0003      	movs	r3, r0
 80045f8:	000c      	movs	r4, r1
 80045fa:	0018      	movs	r0, r3
 80045fc:	0021      	movs	r1, r4
 80045fe:	2200      	movs	r2, #0
 8004600:	4b54      	ldr	r3, [pc, #336]	; (8004754 <main+0x424>)
 8004602:	f7fd fd2b 	bl	800205c <__aeabi_dsub>
 8004606:	0003      	movs	r3, r0
 8004608:	000c      	movs	r4, r1
 800460a:	0018      	movs	r0, r3
 800460c:	0021      	movs	r1, r4
 800460e:	f7fb ff93 	bl	8000538 <__aeabi_d2uiz>
 8004612:	0003      	movs	r3, r0
 8004614:	b29c      	uxth	r4, r3
 8004616:	19bb      	adds	r3, r7, r6
 8004618:	0018      	movs	r0, r3
 800461a:	f002 f852 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 800461e:	0003      	movs	r3, r0
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	b29b      	uxth	r3, r3
 8004624:	b21b      	sxth	r3, r3
 8004626:	19b9      	adds	r1, r7, r6
 8004628:	223c      	movs	r2, #60	; 0x3c
 800462a:	18b8      	adds	r0, r7, r2
 800462c:	2201      	movs	r2, #1
 800462e:	9202      	str	r2, [sp, #8]
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	9400      	str	r4, [sp, #0]
 8004634:	002b      	movs	r3, r5
 8004636:	2200      	movs	r2, #0
 8004638:	f002 fbed 	bl	8006e16 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t speedTxt = selectorSpeed.write("", fontColor, 6);
 800463c:	21c2      	movs	r1, #194	; 0xc2
 800463e:	187c      	adds	r4, r7, r1
 8004640:	4a41      	ldr	r2, [pc, #260]	; (8004748 <main+0x418>)
 8004642:	494d      	ldr	r1, [pc, #308]	; (8004778 <main+0x448>)
 8004644:	233c      	movs	r3, #60	; 0x3c
 8004646:	18f8      	adds	r0, r7, r3
 8004648:	2306      	movs	r3, #6
 800464a:	f002 fc37 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 800464e:	0003      	movs	r3, r0
 8004650:	8023      	strh	r3, [r4, #0]

	//BATTERY CURRENT SELECTOR
	TFT_TEXT_BOX selectorBatCurrent{&tftDisplay,backgroundColor, lineThickness + 0.0 * tftDisplay.width(), 0.70 * tftDisplay.height() - (lineThickness), (int16_t)(tftDisplay.width() / 2), true};
 8004652:	19bb      	adds	r3, r7, r6
 8004654:	0018      	movs	r0, r3
 8004656:	f002 f834 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 800465a:	0003      	movs	r3, r0
 800465c:	0018      	movs	r0, r3
 800465e:	f7fe f897 	bl	8002790 <__aeabi_i2d>
 8004662:	2200      	movs	r2, #0
 8004664:	2300      	movs	r3, #0
 8004666:	f7fd fa87 	bl	8001b78 <__aeabi_dmul>
 800466a:	0003      	movs	r3, r0
 800466c:	000c      	movs	r4, r1
 800466e:	0018      	movs	r0, r3
 8004670:	0021      	movs	r1, r4
 8004672:	2200      	movs	r2, #0
 8004674:	4b37      	ldr	r3, [pc, #220]	; (8004754 <main+0x424>)
 8004676:	f7fc fb59 	bl	8000d2c <__aeabi_dadd>
 800467a:	0003      	movs	r3, r0
 800467c:	000c      	movs	r4, r1
 800467e:	0018      	movs	r0, r3
 8004680:	0021      	movs	r1, r4
 8004682:	f7fb ff59 	bl	8000538 <__aeabi_d2uiz>
 8004686:	0003      	movs	r3, r0
 8004688:	b29d      	uxth	r5, r3
 800468a:	19bb      	adds	r3, r7, r6
 800468c:	0018      	movs	r0, r3
 800468e:	f002 f822 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8004692:	0003      	movs	r3, r0
 8004694:	0018      	movs	r0, r3
 8004696:	f7fe f87b 	bl	8002790 <__aeabi_i2d>
 800469a:	4a38      	ldr	r2, [pc, #224]	; (800477c <main+0x44c>)
 800469c:	4b38      	ldr	r3, [pc, #224]	; (8004780 <main+0x450>)
 800469e:	f7fd fa6b 	bl	8001b78 <__aeabi_dmul>
 80046a2:	0003      	movs	r3, r0
 80046a4:	000c      	movs	r4, r1
 80046a6:	0018      	movs	r0, r3
 80046a8:	0021      	movs	r1, r4
 80046aa:	2200      	movs	r2, #0
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <main+0x424>)
 80046ae:	f7fd fcd5 	bl	800205c <__aeabi_dsub>
 80046b2:	0003      	movs	r3, r0
 80046b4:	000c      	movs	r4, r1
 80046b6:	0018      	movs	r0, r3
 80046b8:	0021      	movs	r1, r4
 80046ba:	f7fb ff3d 	bl	8000538 <__aeabi_d2uiz>
 80046be:	0003      	movs	r3, r0
 80046c0:	b29c      	uxth	r4, r3
 80046c2:	19bb      	adds	r3, r7, r6
 80046c4:	0018      	movs	r0, r3
 80046c6:	f001 fffc 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 80046ca:	0003      	movs	r3, r0
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	b21b      	sxth	r3, r3
 80046d2:	19b9      	adds	r1, r7, r6
 80046d4:	2228      	movs	r2, #40	; 0x28
 80046d6:	18b8      	adds	r0, r7, r2
 80046d8:	2201      	movs	r2, #1
 80046da:	9202      	str	r2, [sp, #8]
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	9400      	str	r4, [sp, #0]
 80046e0:	002b      	movs	r3, r5
 80046e2:	2200      	movs	r2, #0
 80046e4:	f002 fb97 	bl	8006e16 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t batCurrentTxt = selectorBatCurrent.write("", fontColor, 6);
 80046e8:	21c0      	movs	r1, #192	; 0xc0
 80046ea:	187c      	adds	r4, r7, r1
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <main+0x418>)
 80046ee:	4922      	ldr	r1, [pc, #136]	; (8004778 <main+0x448>)
 80046f0:	2328      	movs	r3, #40	; 0x28
 80046f2:	18f8      	adds	r0, r7, r3
 80046f4:	2306      	movs	r3, #6
 80046f6:	f002 fbe1 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 80046fa:	0003      	movs	r3, r0
 80046fc:	8023      	strh	r3, [r4, #0]

	//BATTERY VOLTAGE SELECTOR
	TFT_TEXT_BOX selectorBatVolt{&tftDisplay,backgroundColor, lineThickness + 0.50 * tftDisplay.width(), 0.2 * tftDisplay.height() - (lineThickness), (int16_t)(tftDisplay.width() - lineThickness), true};
 80046fe:	19bb      	adds	r3, r7, r6
 8004700:	0018      	movs	r0, r3
 8004702:	f001 ffde 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8004706:	0003      	movs	r3, r0
 8004708:	0018      	movs	r0, r3
 800470a:	f7fe f841 	bl	8002790 <__aeabi_i2d>
 800470e:	2200      	movs	r2, #0
 8004710:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <main+0x454>)
 8004712:	f7fd fa31 	bl	8001b78 <__aeabi_dmul>
 8004716:	0003      	movs	r3, r0
 8004718:	000c      	movs	r4, r1
 800471a:	0018      	movs	r0, r3
 800471c:	0021      	movs	r1, r4
 800471e:	2200      	movs	r2, #0
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <main+0x424>)
 8004722:	f7fc fb03 	bl	8000d2c <__aeabi_dadd>
 8004726:	0003      	movs	r3, r0
 8004728:	000c      	movs	r4, r1
 800472a:	0018      	movs	r0, r3
 800472c:	0021      	movs	r1, r4
 800472e:	f7fb ff03 	bl	8000538 <__aeabi_d2uiz>
 8004732:	0003      	movs	r3, r0
 8004734:	b29d      	uxth	r5, r3
 8004736:	19bb      	adds	r3, r7, r6
 8004738:	0018      	movs	r0, r3
 800473a:	f001 ffcc 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 800473e:	0003      	movs	r3, r0
 8004740:	0018      	movs	r0, r3
 8004742:	e021      	b.n	8004788 <main+0x458>
 8004744:	20000090 	.word	0x20000090
 8004748:	0000fc60 	.word	0x0000fc60
 800474c:	33333333 	.word	0x33333333
 8004750:	3fc33333 	.word	0x3fc33333
 8004754:	40140000 	.word	0x40140000
 8004758:	08008b10 	.word	0x08008b10
 800475c:	3fe33333 	.word	0x3fe33333
 8004760:	08008b1c 	.word	0x08008b1c
 8004764:	9999999a 	.word	0x9999999a
 8004768:	3fb99999 	.word	0x3fb99999
 800476c:	08008b2c 	.word	0x08008b2c
 8004770:	08008b3c 	.word	0x08008b3c
 8004774:	3fc99999 	.word	0x3fc99999
 8004778:	08008b4c 	.word	0x08008b4c
 800477c:	66666666 	.word	0x66666666
 8004780:	3fe66666 	.word	0x3fe66666
 8004784:	3fe00000 	.word	0x3fe00000
 8004788:	f7fe f802 	bl	8002790 <__aeabi_i2d>
 800478c:	4ac0      	ldr	r2, [pc, #768]	; (8004a90 <main+0x760>)
 800478e:	4bc1      	ldr	r3, [pc, #772]	; (8004a94 <main+0x764>)
 8004790:	f7fd f9f2 	bl	8001b78 <__aeabi_dmul>
 8004794:	0003      	movs	r3, r0
 8004796:	000c      	movs	r4, r1
 8004798:	0018      	movs	r0, r3
 800479a:	0021      	movs	r1, r4
 800479c:	2200      	movs	r2, #0
 800479e:	4bbe      	ldr	r3, [pc, #760]	; (8004a98 <main+0x768>)
 80047a0:	f7fd fc5c 	bl	800205c <__aeabi_dsub>
 80047a4:	0003      	movs	r3, r0
 80047a6:	000c      	movs	r4, r1
 80047a8:	0018      	movs	r0, r3
 80047aa:	0021      	movs	r1, r4
 80047ac:	f7fb fec4 	bl	8000538 <__aeabi_d2uiz>
 80047b0:	0003      	movs	r3, r0
 80047b2:	b29c      	uxth	r4, r3
 80047b4:	19bb      	adds	r3, r7, r6
 80047b6:	0018      	movs	r0, r3
 80047b8:	f001 ff83 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 80047bc:	0003      	movs	r3, r0
 80047be:	3b05      	subs	r3, #5
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	b21b      	sxth	r3, r3
 80047c4:	19b9      	adds	r1, r7, r6
 80047c6:	2214      	movs	r2, #20
 80047c8:	18b8      	adds	r0, r7, r2
 80047ca:	2201      	movs	r2, #1
 80047cc:	9202      	str	r2, [sp, #8]
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	9400      	str	r4, [sp, #0]
 80047d2:	002b      	movs	r3, r5
 80047d4:	2200      	movs	r2, #0
 80047d6:	f002 fb1e 	bl	8006e16 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t batVoltTxt = selectorBatVolt.write("", fontColor, 6);
 80047da:	21be      	movs	r1, #190	; 0xbe
 80047dc:	187c      	adds	r4, r7, r1
 80047de:	4aaf      	ldr	r2, [pc, #700]	; (8004a9c <main+0x76c>)
 80047e0:	49af      	ldr	r1, [pc, #700]	; (8004aa0 <main+0x770>)
 80047e2:	2314      	movs	r3, #20
 80047e4:	18f8      	adds	r0, r7, r3
 80047e6:	2306      	movs	r3, #6
 80047e8:	f002 fb68 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 80047ec:	0003      	movs	r3, r0
 80047ee:	8023      	strh	r3, [r4, #0]

	//TEMPERATURE SELECTOR
	TFT_TEXT_BOX selectorTemp{&tftDisplay,backgroundColor, lineThickness + 0.50 * tftDisplay.width(), 0.70 * tftDisplay.height() - (lineThickness), (int16_t)(tftDisplay.width() - lineThickness), true};
 80047f0:	19bb      	adds	r3, r7, r6
 80047f2:	0018      	movs	r0, r3
 80047f4:	f001 ff65 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 80047f8:	0003      	movs	r3, r0
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7fd ffc8 	bl	8002790 <__aeabi_i2d>
 8004800:	2200      	movs	r2, #0
 8004802:	4ba8      	ldr	r3, [pc, #672]	; (8004aa4 <main+0x774>)
 8004804:	f7fd f9b8 	bl	8001b78 <__aeabi_dmul>
 8004808:	0003      	movs	r3, r0
 800480a:	000c      	movs	r4, r1
 800480c:	0018      	movs	r0, r3
 800480e:	0021      	movs	r1, r4
 8004810:	2200      	movs	r2, #0
 8004812:	4ba1      	ldr	r3, [pc, #644]	; (8004a98 <main+0x768>)
 8004814:	f7fc fa8a 	bl	8000d2c <__aeabi_dadd>
 8004818:	0003      	movs	r3, r0
 800481a:	000c      	movs	r4, r1
 800481c:	0018      	movs	r0, r3
 800481e:	0021      	movs	r1, r4
 8004820:	f7fb fe8a 	bl	8000538 <__aeabi_d2uiz>
 8004824:	0003      	movs	r3, r0
 8004826:	b29d      	uxth	r5, r3
 8004828:	19bb      	adds	r3, r7, r6
 800482a:	0018      	movs	r0, r3
 800482c:	f001 ff53 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8004830:	0003      	movs	r3, r0
 8004832:	0018      	movs	r0, r3
 8004834:	f7fd ffac 	bl	8002790 <__aeabi_i2d>
 8004838:	4a9b      	ldr	r2, [pc, #620]	; (8004aa8 <main+0x778>)
 800483a:	4b9c      	ldr	r3, [pc, #624]	; (8004aac <main+0x77c>)
 800483c:	f7fd f99c 	bl	8001b78 <__aeabi_dmul>
 8004840:	0003      	movs	r3, r0
 8004842:	000c      	movs	r4, r1
 8004844:	0018      	movs	r0, r3
 8004846:	0021      	movs	r1, r4
 8004848:	2200      	movs	r2, #0
 800484a:	4b93      	ldr	r3, [pc, #588]	; (8004a98 <main+0x768>)
 800484c:	f7fd fc06 	bl	800205c <__aeabi_dsub>
 8004850:	0003      	movs	r3, r0
 8004852:	000c      	movs	r4, r1
 8004854:	0018      	movs	r0, r3
 8004856:	0021      	movs	r1, r4
 8004858:	f7fb fe6e 	bl	8000538 <__aeabi_d2uiz>
 800485c:	0003      	movs	r3, r0
 800485e:	b29c      	uxth	r4, r3
 8004860:	19bb      	adds	r3, r7, r6
 8004862:	0018      	movs	r0, r3
 8004864:	f001 ff2d 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8004868:	0003      	movs	r3, r0
 800486a:	3b05      	subs	r3, #5
 800486c:	b29b      	uxth	r3, r3
 800486e:	b21b      	sxth	r3, r3
 8004870:	19b9      	adds	r1, r7, r6
 8004872:	0038      	movs	r0, r7
 8004874:	2201      	movs	r2, #1
 8004876:	9202      	str	r2, [sp, #8]
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	9400      	str	r4, [sp, #0]
 800487c:	002b      	movs	r3, r5
 800487e:	2200      	movs	r2, #0
 8004880:	f002 fac9 	bl	8006e16 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t tempTxt = selectorTemp.write("", fontColor, 6);
 8004884:	23bc      	movs	r3, #188	; 0xbc
 8004886:	18fc      	adds	r4, r7, r3
 8004888:	4a84      	ldr	r2, [pc, #528]	; (8004a9c <main+0x76c>)
 800488a:	4985      	ldr	r1, [pc, #532]	; (8004aa0 <main+0x770>)
 800488c:	0038      	movs	r0, r7
 800488e:	2306      	movs	r3, #6
 8004890:	f002 fb14 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 8004894:	0003      	movs	r3, r0
 8004896:	8023      	strh	r3, [r4, #0]
	 * 		78 < batter voltage < 109
	 * 2. CREATE SELECTORS FOR EACH QUADRANT
	 * 3. IMPLEMENT COLOR FONT CHANGE FOR TOO HIGH/TOO LOW
	 */

	int prev_speed = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	22dc      	movs	r2, #220	; 0xdc
 800489c:	18ba      	adds	r2, r7, r2
 800489e:	6013      	str	r3, [r2, #0]
	int prev_temp = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	22d8      	movs	r2, #216	; 0xd8
 80048a4:	18ba      	adds	r2, r7, r2
 80048a6:	6013      	str	r3, [r2, #0]
	int prev_voltage = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	22d4      	movs	r2, #212	; 0xd4
 80048ac:	18ba      	adds	r2, r7, r2
 80048ae:	6013      	str	r3, [r2, #0]
	int prev_current = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	22d0      	movs	r2, #208	; 0xd0
 80048b4:	18ba      	adds	r2, r7, r2
 80048b6:	6013      	str	r3, [r2, #0]

	while(true){

		int speed = rand() % 3;
 80048b8:	f003 ff48 	bl	800874c <rand>
 80048bc:	0003      	movs	r3, r0
 80048be:	2103      	movs	r1, #3
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fb fd91 	bl	80003e8 <__aeabi_idivmod>
 80048c6:	000b      	movs	r3, r1
 80048c8:	22b8      	movs	r2, #184	; 0xb8
 80048ca:	18b9      	adds	r1, r7, r2
 80048cc:	600b      	str	r3, [r1, #0]
		if(speed != prev_speed)
 80048ce:	18bb      	adds	r3, r7, r2
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	23dc      	movs	r3, #220	; 0xdc
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d016      	beq.n	800490a <main+0x5da>
		{
			updateFloatSelector(selectorSpeed, speed, 3);
 80048dc:	24b8      	movs	r4, #184	; 0xb8
 80048de:	193b      	adds	r3, r7, r4
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	f7fc f9d9 	bl	8000c98 <__aeabi_i2f>
 80048e6:	1c01      	adds	r1, r0, #0
 80048e8:	4a71      	ldr	r2, [pc, #452]	; (8004ab0 <main+0x780>)
 80048ea:	233c      	movs	r3, #60	; 0x3c
 80048ec:	18f8      	adds	r0, r7, r3
 80048ee:	2301      	movs	r3, #1
 80048f0:	425b      	negs	r3, r3
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	4b6e      	ldr	r3, [pc, #440]	; (8004ab0 <main+0x780>)
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	0013      	movs	r3, r2
 80048fa:	2203      	movs	r2, #3
 80048fc:	f000 fa98 	bl	8004e30 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>
			prev_speed = speed;
 8004900:	193b      	adds	r3, r7, r4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	22dc      	movs	r2, #220	; 0xdc
 8004906:	18ba      	adds	r2, r7, r2
 8004908:	6013      	str	r3, [r2, #0]
		}


		int temp = rand() % 3;
 800490a:	f003 ff1f 	bl	800874c <rand>
 800490e:	0003      	movs	r3, r0
 8004910:	2103      	movs	r1, #3
 8004912:	0018      	movs	r0, r3
 8004914:	f7fb fd68 	bl	80003e8 <__aeabi_idivmod>
 8004918:	000b      	movs	r3, r1
 800491a:	22b4      	movs	r2, #180	; 0xb4
 800491c:	18b9      	adds	r1, r7, r2
 800491e:	600b      	str	r3, [r1, #0]
		if(temp != prev_temp)
 8004920:	18bb      	adds	r3, r7, r2
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	23d8      	movs	r3, #216	; 0xd8
 8004926:	18fb      	adds	r3, r7, r3
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d015      	beq.n	800495a <main+0x62a>
		{
			updateFloatSelector(selectorTemp, temp, 3);
 800492e:	24b4      	movs	r4, #180	; 0xb4
 8004930:	193b      	adds	r3, r7, r4
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	f7fc f9b0 	bl	8000c98 <__aeabi_i2f>
 8004938:	1c01      	adds	r1, r0, #0
 800493a:	4a5d      	ldr	r2, [pc, #372]	; (8004ab0 <main+0x780>)
 800493c:	0038      	movs	r0, r7
 800493e:	2301      	movs	r3, #1
 8004940:	425b      	negs	r3, r3
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	4b5a      	ldr	r3, [pc, #360]	; (8004ab0 <main+0x780>)
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	0013      	movs	r3, r2
 800494a:	2203      	movs	r2, #3
 800494c:	f000 fa70 	bl	8004e30 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>
			prev_temp = temp;
 8004950:	193b      	adds	r3, r7, r4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	22d8      	movs	r2, #216	; 0xd8
 8004956:	18ba      	adds	r2, r7, r2
 8004958:	6013      	str	r3, [r2, #0]
		}


		float voltage = (float)rand()/(RAND_MAX + 1)+1+(rand()%3);
 800495a:	f003 fef7 	bl	800874c <rand>
 800495e:	0003      	movs	r3, r0
 8004960:	0018      	movs	r0, r3
 8004962:	f7fc f999 	bl	8000c98 <__aeabi_i2f>
 8004966:	1c03      	adds	r3, r0, #0
 8004968:	21cf      	movs	r1, #207	; 0xcf
 800496a:	0609      	lsls	r1, r1, #24
 800496c:	1c18      	adds	r0, r3, #0
 800496e:	f7fb ff9b 	bl	80008a8 <__aeabi_fdiv>
 8004972:	1c03      	adds	r3, r0, #0
 8004974:	21fe      	movs	r1, #254	; 0xfe
 8004976:	0589      	lsls	r1, r1, #22
 8004978:	1c18      	adds	r0, r3, #0
 800497a:	f7fb fdfb 	bl	8000574 <__aeabi_fadd>
 800497e:	1c03      	adds	r3, r0, #0
 8004980:	1c1c      	adds	r4, r3, #0
 8004982:	f003 fee3 	bl	800874c <rand>
 8004986:	0003      	movs	r3, r0
 8004988:	2103      	movs	r1, #3
 800498a:	0018      	movs	r0, r3
 800498c:	f7fb fd2c 	bl	80003e8 <__aeabi_idivmod>
 8004990:	000b      	movs	r3, r1
 8004992:	0018      	movs	r0, r3
 8004994:	f7fc f980 	bl	8000c98 <__aeabi_i2f>
 8004998:	1c03      	adds	r3, r0, #0
 800499a:	1c19      	adds	r1, r3, #0
 800499c:	1c20      	adds	r0, r4, #0
 800499e:	f7fb fde9 	bl	8000574 <__aeabi_fadd>
 80049a2:	1c03      	adds	r3, r0, #0
 80049a4:	24b0      	movs	r4, #176	; 0xb0
 80049a6:	193a      	adds	r2, r7, r4
 80049a8:	6013      	str	r3, [r2, #0]
		if(voltage != prev_voltage)
 80049aa:	23d4      	movs	r3, #212	; 0xd4
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	f7fc f972 	bl	8000c98 <__aeabi_i2f>
 80049b4:	1c03      	adds	r3, r0, #0
 80049b6:	1c19      	adds	r1, r3, #0
 80049b8:	193b      	adds	r3, r7, r4
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	f7fb fd64 	bl	8000488 <__aeabi_fcmpeq>
 80049c0:	1e03      	subs	r3, r0, #0
 80049c2:	d115      	bne.n	80049f0 <main+0x6c0>
		{
			updateFloatSelector(selectorBatVolt, voltage, 3, MIN_BAT_VOLTAGE, MAX_BAT_VOLTAGE);
 80049c4:	24b0      	movs	r4, #176	; 0xb0
 80049c6:	193b      	adds	r3, r7, r4
 80049c8:	6819      	ldr	r1, [r3, #0]
 80049ca:	2314      	movs	r3, #20
 80049cc:	18f8      	adds	r0, r7, r3
 80049ce:	2301      	movs	r3, #1
 80049d0:	425b      	negs	r3, r3
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	236d      	movs	r3, #109	; 0x6d
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	234e      	movs	r3, #78	; 0x4e
 80049da:	2203      	movs	r2, #3
 80049dc:	f000 fa28 	bl	8004e30 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>
			prev_voltage = voltage;
 80049e0:	193b      	adds	r3, r7, r4
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	f7fc f938 	bl	8000c58 <__aeabi_f2iz>
 80049e8:	0003      	movs	r3, r0
 80049ea:	22d4      	movs	r2, #212	; 0xd4
 80049ec:	18ba      	adds	r2, r7, r2
 80049ee:	6013      	str	r3, [r2, #0]
		}


		float current = (float)rand()/(RAND_MAX + 1)+1+(rand()%3);
 80049f0:	f003 feac 	bl	800874c <rand>
 80049f4:	0003      	movs	r3, r0
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7fc f94e 	bl	8000c98 <__aeabi_i2f>
 80049fc:	1c03      	adds	r3, r0, #0
 80049fe:	21cf      	movs	r1, #207	; 0xcf
 8004a00:	0609      	lsls	r1, r1, #24
 8004a02:	1c18      	adds	r0, r3, #0
 8004a04:	f7fb ff50 	bl	80008a8 <__aeabi_fdiv>
 8004a08:	1c03      	adds	r3, r0, #0
 8004a0a:	21fe      	movs	r1, #254	; 0xfe
 8004a0c:	0589      	lsls	r1, r1, #22
 8004a0e:	1c18      	adds	r0, r3, #0
 8004a10:	f7fb fdb0 	bl	8000574 <__aeabi_fadd>
 8004a14:	1c03      	adds	r3, r0, #0
 8004a16:	1c1c      	adds	r4, r3, #0
 8004a18:	f003 fe98 	bl	800874c <rand>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	2103      	movs	r1, #3
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fb fce1 	bl	80003e8 <__aeabi_idivmod>
 8004a26:	000b      	movs	r3, r1
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7fc f935 	bl	8000c98 <__aeabi_i2f>
 8004a2e:	1c03      	adds	r3, r0, #0
 8004a30:	1c19      	adds	r1, r3, #0
 8004a32:	1c20      	adds	r0, r4, #0
 8004a34:	f7fb fd9e 	bl	8000574 <__aeabi_fadd>
 8004a38:	1c03      	adds	r3, r0, #0
 8004a3a:	24ac      	movs	r4, #172	; 0xac
 8004a3c:	193a      	adds	r2, r7, r4
 8004a3e:	6013      	str	r3, [r2, #0]
		if(current != prev_current)
 8004a40:	23d0      	movs	r3, #208	; 0xd0
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	f7fc f927 	bl	8000c98 <__aeabi_i2f>
 8004a4a:	1c03      	adds	r3, r0, #0
 8004a4c:	1c19      	adds	r1, r3, #0
 8004a4e:	193b      	adds	r3, r7, r4
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	f7fb fd19 	bl	8000488 <__aeabi_fcmpeq>
 8004a56:	1e03      	subs	r3, r0, #0
 8004a58:	d116      	bne.n	8004a88 <main+0x758>
		{
			updateFloatSelector(selectorBatCurrent, current, 3);
 8004a5a:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <main+0x780>)
 8004a5c:	24ac      	movs	r4, #172	; 0xac
 8004a5e:	193b      	adds	r3, r7, r4
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	2328      	movs	r3, #40	; 0x28
 8004a64:	18f8      	adds	r0, r7, r3
 8004a66:	2301      	movs	r3, #1
 8004a68:	425b      	negs	r3, r3
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <main+0x780>)
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	0013      	movs	r3, r2
 8004a72:	2203      	movs	r2, #3
 8004a74:	f000 f9dc 	bl	8004e30 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>
			prev_current = current;
 8004a78:	193b      	adds	r3, r7, r4
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	f7fc f8ec 	bl	8000c58 <__aeabi_f2iz>
 8004a80:	0003      	movs	r3, r0
 8004a82:	22d0      	movs	r2, #208	; 0xd0
 8004a84:	18ba      	adds	r2, r7, r2
 8004a86:	6013      	str	r3, [r2, #0]
		}


//				 20ms ~ 50Hz
				HAL_Delay(20);
 8004a88:	2014      	movs	r0, #20
 8004a8a:	f7fd ff71 	bl	8002970 <HAL_Delay>

	}
 8004a8e:	e713      	b.n	80048b8 <main+0x588>
 8004a90:	9999999a 	.word	0x9999999a
 8004a94:	3fc99999 	.word	0x3fc99999
 8004a98:	40140000 	.word	0x40140000
 8004a9c:	0000fc60 	.word	0x0000fc60
 8004aa0:	08008b4c 	.word	0x08008b4c
 8004aa4:	3fe00000 	.word	0x3fe00000
 8004aa8:	66666666 	.word	0x66666666
 8004aac:	3fe66666 	.word	0x3fe66666
 8004ab0:	fffffc18 	.word	0xfffffc18

08004ab4 <_Z4dtoaPcd>:

}


char * dtoa(char *s, double n) {
 8004ab4:	b5b0      	push	{r4, r5, r7, lr}
 8004ab6:	b08e      	sub	sp, #56	; 0x38
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	603a      	str	r2, [r7, #0]
 8004abe:	607b      	str	r3, [r7, #4]
	// handle special cases
	if (isnan(n)) {
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	687c      	ldr	r4, [r7, #4]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	0021      	movs	r1, r4
 8004ac8:	f7ff fc1e 	bl	8004308 <_ZSt5isnand>
 8004acc:	1e03      	subs	r3, r0, #0
 8004ace:	d008      	beq.n	8004ae2 <_Z4dtoaPcd+0x2e>
		strcpy(s, "nan");
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4bcb      	ldr	r3, [pc, #812]	; (8004e00 <_Z4dtoaPcd+0x34c>)
 8004ad4:	0010      	movs	r0, r2
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	2304      	movs	r3, #4
 8004ada:	001a      	movs	r2, r3
 8004adc:	f003 fe24 	bl	8008728 <memcpy>
 8004ae0:	e1a1      	b.n	8004e26 <_Z4dtoaPcd+0x372>
	} else if (isinf(n)) {
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	687c      	ldr	r4, [r7, #4]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	0021      	movs	r1, r4
 8004aea:	f7ff fbdf 	bl	80042ac <_ZSt5isinfd>
 8004aee:	1e03      	subs	r3, r0, #0
 8004af0:	d008      	beq.n	8004b04 <_Z4dtoaPcd+0x50>
		strcpy(s, "inf");
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4bc3      	ldr	r3, [pc, #780]	; (8004e04 <_Z4dtoaPcd+0x350>)
 8004af6:	0010      	movs	r0, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	2304      	movs	r3, #4
 8004afc:	001a      	movs	r2, r3
 8004afe:	f003 fe13 	bl	8008728 <memcpy>
 8004b02:	e190      	b.n	8004e26 <_Z4dtoaPcd+0x372>
	} else if (n == 0.0) {
 8004b04:	2200      	movs	r2, #0
 8004b06:	2300      	movs	r3, #0
 8004b08:	6838      	ldr	r0, [r7, #0]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	f7fb fc82 	bl	8000414 <__aeabi_dcmpeq>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d008      	beq.n	8004b26 <_Z4dtoaPcd+0x72>
		strcpy(s, "0");
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4bbc      	ldr	r3, [pc, #752]	; (8004e08 <_Z4dtoaPcd+0x354>)
 8004b18:	0010      	movs	r0, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	001a      	movs	r2, r3
 8004b20:	f003 fe02 	bl	8008728 <memcpy>
 8004b24:	e17f      	b.n	8004e26 <_Z4dtoaPcd+0x372>
	} else {
		int digit, m, m1;
		char *c = s;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	613b      	str	r3, [r7, #16]
		int neg = (n < 0);
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	1c1c      	adds	r4, r3, #0
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2300      	movs	r3, #0
 8004b32:	6838      	ldr	r0, [r7, #0]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	f7fb fc73 	bl	8000420 <__aeabi_dcmplt>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d101      	bne.n	8004b42 <_Z4dtoaPcd+0x8e>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	1c1c      	adds	r4, r3, #0
 8004b42:	b2e3      	uxtb	r3, r4
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
		if (neg)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <_Z4dtoaPcd+0xa6>
			n = -n;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2280      	movs	r2, #128	; 0x80
 8004b54:	0612      	lsls	r2, r2, #24
 8004b56:	4053      	eors	r3, r2
 8004b58:	607b      	str	r3, [r7, #4]
		// calculate magnitude
		m = log10(n);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	687c      	ldr	r4, [r7, #4]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	0021      	movs	r1, r4
 8004b62:	f002 fabf 	bl	80070e4 <log10>
 8004b66:	0003      	movs	r3, r0
 8004b68:	000c      	movs	r4, r1
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	0021      	movs	r1, r4
 8004b6e:	f7fd fdd9 	bl	8002724 <__aeabi_d2iz>
 8004b72:	0003      	movs	r3, r0
 8004b74:	637b      	str	r3, [r7, #52]	; 0x34
		int useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	2b0d      	cmp	r3, #13
 8004b7a:	dc08      	bgt.n	8004b8e <_Z4dtoaPcd+0xda>
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <_Z4dtoaPcd+0xd4>
 8004b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	dc02      	bgt.n	8004b8e <_Z4dtoaPcd+0xda>
 8004b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	da01      	bge.n	8004b92 <_Z4dtoaPcd+0xde>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <_Z4dtoaPcd+0xe0>
 8004b92:	2300      	movs	r3, #0
 8004b94:	623b      	str	r3, [r7, #32]
		if (neg)
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <_Z4dtoaPcd+0xf2>
			*(c++) = '-';
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	613a      	str	r2, [r7, #16]
 8004ba2:	222d      	movs	r2, #45	; 0x2d
 8004ba4:	701a      	strb	r2, [r3, #0]
		// set up for scientific notation
		if (useExp) {
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d028      	beq.n	8004bfe <_Z4dtoaPcd+0x14a>
			if (m < 0)
 8004bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da0e      	bge.n	8004bd0 <_Z4dtoaPcd+0x11c>
				m -= 1.0;
 8004bb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004bb4:	f7fd fdec 	bl	8002790 <__aeabi_i2d>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4b94      	ldr	r3, [pc, #592]	; (8004e0c <_Z4dtoaPcd+0x358>)
 8004bbc:	f7fd fa4e 	bl	800205c <__aeabi_dsub>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	000c      	movs	r4, r1
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	0021      	movs	r1, r4
 8004bc8:	f7fd fdac 	bl	8002724 <__aeabi_d2iz>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
			n = n / pow(10.0, m);
 8004bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4c8e      	ldr	r4, [pc, #568]	; (8004e10 <_Z4dtoaPcd+0x35c>)
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	0021      	movs	r1, r4
 8004bda:	f000 fbae 	bl	800533a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004bde:	0003      	movs	r3, r0
 8004be0:	000c      	movs	r4, r1
 8004be2:	001a      	movs	r2, r3
 8004be4:	0023      	movs	r3, r4
 8004be6:	6838      	ldr	r0, [r7, #0]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	f7fc fbbb 	bl	8001364 <__aeabi_ddiv>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	000c      	movs	r4, r1
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	607c      	str	r4, [r7, #4]
			m1 = m;
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
			m = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (m < 1.0) {
 8004bfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c00:	f7fd fdc6 	bl	8002790 <__aeabi_i2d>
 8004c04:	2200      	movs	r2, #0
 8004c06:	4b81      	ldr	r3, [pc, #516]	; (8004e0c <_Z4dtoaPcd+0x358>)
 8004c08:	f7fb fc0a 	bl	8000420 <__aeabi_dcmplt>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d001      	beq.n	8004c14 <_Z4dtoaPcd+0x160>
			m = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	637b      	str	r3, [r7, #52]	; 0x34
		}
		// convert the number
		while (n > PRECISION || m >= 0) {
 8004c14:	4b7f      	ldr	r3, [pc, #508]	; (8004e14 <_Z4dtoaPcd+0x360>)
 8004c16:	685c      	ldr	r4, [r3, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	1c15      	adds	r5, r2, #0
 8004c1e:	001a      	movs	r2, r3
 8004c20:	0023      	movs	r3, r4
 8004c22:	6838      	ldr	r0, [r7, #0]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	f7fb fc0f 	bl	8000448 <__aeabi_dcmpgt>
 8004c2a:	1e03      	subs	r3, r0, #0
 8004c2c:	d101      	bne.n	8004c32 <_Z4dtoaPcd+0x17e>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	1c1d      	adds	r5, r3, #0
 8004c32:	b2eb      	uxtb	r3, r5
 8004c34:	2201      	movs	r2, #1
 8004c36:	4053      	eors	r3, r2
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <_Z4dtoaPcd+0x190>
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	db67      	blt.n	8004d14 <_Z4dtoaPcd+0x260>
			double weight = pow(10.0, m);
 8004c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c46:	2300      	movs	r3, #0
 8004c48:	4c71      	ldr	r4, [pc, #452]	; (8004e10 <_Z4dtoaPcd+0x35c>)
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	0021      	movs	r1, r4
 8004c4e:	f000 fb74 	bl	800533a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004c52:	0003      	movs	r3, r0
 8004c54:	000c      	movs	r4, r1
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	61fc      	str	r4, [r7, #28]
			if (weight > 0 && !isinf(weight)) {
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	69b8      	ldr	r0, [r7, #24]
 8004c60:	69f9      	ldr	r1, [r7, #28]
 8004c62:	f7fb fbf1 	bl	8000448 <__aeabi_dcmpgt>
 8004c66:	1e03      	subs	r3, r0, #0
 8004c68:	d00e      	beq.n	8004c88 <_Z4dtoaPcd+0x1d4>
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	69fc      	ldr	r4, [r7, #28]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	0021      	movs	r1, r4
 8004c72:	f7ff fb1b 	bl	80042ac <_ZSt5isinfd>
 8004c76:	0003      	movs	r3, r0
 8004c78:	001a      	movs	r2, r3
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4053      	eors	r3, r2
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <_Z4dtoaPcd+0x1d4>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <_Z4dtoaPcd+0x1d6>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d02e      	beq.n	8004cec <_Z4dtoaPcd+0x238>
				digit = floor(n / weight);
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	6838      	ldr	r0, [r7, #0]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	f7fc fb65 	bl	8001364 <__aeabi_ddiv>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	000c      	movs	r4, r1
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	0021      	movs	r1, r4
 8004ca2:	f002 f99d 	bl	8006fe0 <floor>
 8004ca6:	0003      	movs	r3, r0
 8004ca8:	000c      	movs	r4, r1
 8004caa:	0018      	movs	r0, r3
 8004cac:	0021      	movs	r1, r4
 8004cae:	f7fd fd39 	bl	8002724 <__aeabi_d2iz>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	617b      	str	r3, [r7, #20]
				n -= (digit * weight);
 8004cb6:	6978      	ldr	r0, [r7, #20]
 8004cb8:	f7fd fd6a 	bl	8002790 <__aeabi_i2d>
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f7fc ff5a 	bl	8001b78 <__aeabi_dmul>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	000c      	movs	r4, r1
 8004cc8:	001a      	movs	r2, r3
 8004cca:	0023      	movs	r3, r4
 8004ccc:	6838      	ldr	r0, [r7, #0]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	f7fd f9c4 	bl	800205c <__aeabi_dsub>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	000c      	movs	r4, r1
 8004cd8:	603b      	str	r3, [r7, #0]
 8004cda:	607c      	str	r4, [r7, #4]
				*(c++) = '0' + digit;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	6139      	str	r1, [r7, #16]
 8004ce6:	3230      	adds	r2, #48	; 0x30
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
			}
			if (m == 0 && n > 0)
 8004cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10c      	bne.n	8004d0c <_Z4dtoaPcd+0x258>
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	6838      	ldr	r0, [r7, #0]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	f7fb fba5 	bl	8000448 <__aeabi_dcmpgt>
 8004cfe:	1e03      	subs	r3, r0, #0
 8004d00:	d004      	beq.n	8004d0c <_Z4dtoaPcd+0x258>
				*(c++) = '.';
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	613a      	str	r2, [r7, #16]
 8004d08:	222e      	movs	r2, #46	; 0x2e
 8004d0a:	701a      	strb	r2, [r3, #0]
			m--;
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
		while (n > PRECISION || m >= 0) {
 8004d12:	e77f      	b.n	8004c14 <_Z4dtoaPcd+0x160>
		}
		if (useExp) {
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d100      	bne.n	8004d1c <_Z4dtoaPcd+0x268>
 8004d1a:	e081      	b.n	8004e20 <_Z4dtoaPcd+0x36c>
			// convert the exponent
			int i, j;
			*(c++) = 'e';
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	613a      	str	r2, [r7, #16]
 8004d22:	2265      	movs	r2, #101	; 0x65
 8004d24:	701a      	strb	r2, [r3, #0]
			if (m1 > 0) {
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	dd05      	ble.n	8004d38 <_Z4dtoaPcd+0x284>
				*(c++) = '+';
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	613a      	str	r2, [r7, #16]
 8004d32:	222b      	movs	r2, #43	; 0x2b
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e007      	b.n	8004d48 <_Z4dtoaPcd+0x294>
			} else {
				*(c++) = '-';
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	613a      	str	r2, [r7, #16]
 8004d3e:	222d      	movs	r2, #45	; 0x2d
 8004d40:	701a      	strb	r2, [r3, #0]
				m1 = -m1;
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	425b      	negs	r3, r3
 8004d46:	633b      	str	r3, [r7, #48]	; 0x30
			}
			m = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
			while (m1 > 0) {
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	dd17      	ble.n	8004d82 <_Z4dtoaPcd+0x2ce>
				*(c++) = '0' + m1 % 10;
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	210a      	movs	r1, #10
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7fb fb46 	bl	80003e8 <__aeabi_idivmod>
 8004d5c:	000b      	movs	r3, r1
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	6139      	str	r1, [r7, #16]
 8004d66:	3230      	adds	r2, #48	; 0x30
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]
				m1 /= 10;
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	210a      	movs	r1, #10
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fb fa53 	bl	800021c <__divsi3>
 8004d76:	0003      	movs	r3, r0
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30
				m++;
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	637b      	str	r3, [r7, #52]	; 0x34
			while (m1 > 0) {
 8004d80:	e7e4      	b.n	8004d4c <_Z4dtoaPcd+0x298>
			}
			c -= m;
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	425b      	negs	r3, r3
 8004d88:	18d3      	adds	r3, r2, r3
 8004d8a:	613b      	str	r3, [r7, #16]
			for (i = 0, j = m-1; i<j; i++, j--) {
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d92:	3b01      	subs	r3, #1
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	da3c      	bge.n	8004e18 <_Z4dtoaPcd+0x364>
				// swap without temporary
				c[i] ^= c[j];
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	18d3      	adds	r3, r2, r3
 8004da4:	7819      	ldrb	r1, [r3, #0]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	18d3      	adds	r3, r2, r3
 8004dac:	781a      	ldrb	r2, [r3, #0]
 8004dae:	6938      	ldr	r0, [r7, #16]
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	18c3      	adds	r3, r0, r3
 8004db4:	404a      	eors	r2, r1
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
				c[j] ^= c[i];
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	18d3      	adds	r3, r2, r3
 8004dc0:	7819      	ldrb	r1, [r3, #0]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	18d3      	adds	r3, r2, r3
 8004dc8:	781a      	ldrb	r2, [r3, #0]
 8004dca:	6938      	ldr	r0, [r7, #16]
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	18c3      	adds	r3, r0, r3
 8004dd0:	404a      	eors	r2, r1
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]
				c[i] ^= c[j];
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	18d3      	adds	r3, r2, r3
 8004ddc:	7819      	ldrb	r1, [r3, #0]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	18d3      	adds	r3, r2, r3
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	6938      	ldr	r0, [r7, #16]
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	18c3      	adds	r3, r0, r3
 8004dec:	404a      	eors	r2, r1
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
			for (i = 0, j = m-1; i<j; i++, j--) {
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	3301      	adds	r3, #1
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfe:	e7ca      	b.n	8004d96 <_Z4dtoaPcd+0x2e2>
 8004e00:	08008b50 	.word	0x08008b50
 8004e04:	08008b54 	.word	0x08008b54
 8004e08:	08008b58 	.word	0x08008b58
 8004e0c:	3ff00000 	.word	0x3ff00000
 8004e10:	40240000 	.word	0x40240000
 8004e14:	20000000 	.word	0x20000000
			}
			c += m;
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	18d3      	adds	r3, r2, r3
 8004e1e:	613b      	str	r3, [r7, #16]
		}
		*(c) = '\0';
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
	}
	return s;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b00e      	add	sp, #56	; 0x38
 8004e2e:	bdb0      	pop	{r4, r5, r7, pc}

08004e30 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>:


void updateFloatSelector(TFT_TEXT_BOX &selector, float value, int precision, int minValue, int maxValue, int backgroundColor)
{
 8004e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e32:	b08f      	sub	sp, #60	; 0x3c
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004e38:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e3a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e3c:	623b      	str	r3, [r7, #32]
		else
			selector.write(buffer, fontColorGood, 4);

	}

	return;
 8004e3e:	466b      	mov	r3, sp
 8004e40:	607b      	str	r3, [r7, #4]
	char buffer[precision + 2];
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	3301      	adds	r3, #1
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
 8004e48:	001a      	movs	r2, r3
 8004e4a:	3201      	adds	r2, #1
 8004e4c:	613a      	str	r2, [r7, #16]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	617a      	str	r2, [r7, #20]
 8004e52:	6938      	ldr	r0, [r7, #16]
 8004e54:	6979      	ldr	r1, [r7, #20]
 8004e56:	0002      	movs	r2, r0
 8004e58:	0f52      	lsrs	r2, r2, #29
 8004e5a:	000e      	movs	r6, r1
 8004e5c:	00f6      	lsls	r6, r6, #3
 8004e5e:	61fe      	str	r6, [r7, #28]
 8004e60:	69fe      	ldr	r6, [r7, #28]
 8004e62:	4316      	orrs	r6, r2
 8004e64:	61fe      	str	r6, [r7, #28]
 8004e66:	0002      	movs	r2, r0
 8004e68:	00d2      	lsls	r2, r2, #3
 8004e6a:	61ba      	str	r2, [r7, #24]
 8004e6c:	001a      	movs	r2, r3
 8004e6e:	3201      	adds	r2, #1
 8004e70:	60ba      	str	r2, [r7, #8]
 8004e72:	2200      	movs	r2, #0
 8004e74:	60fa      	str	r2, [r7, #12]
 8004e76:	68b8      	ldr	r0, [r7, #8]
 8004e78:	68f9      	ldr	r1, [r7, #12]
 8004e7a:	0002      	movs	r2, r0
 8004e7c:	0f52      	lsrs	r2, r2, #29
 8004e7e:	000e      	movs	r6, r1
 8004e80:	00f5      	lsls	r5, r6, #3
 8004e82:	4315      	orrs	r5, r2
 8004e84:	0002      	movs	r2, r0
 8004e86:	00d4      	lsls	r4, r2, #3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	3307      	adds	r3, #7
 8004e8c:	08db      	lsrs	r3, r3, #3
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	466a      	mov	r2, sp
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	469d      	mov	sp, r3
 8004e96:	466b      	mov	r3, sp
 8004e98:	3300      	adds	r3, #0
 8004e9a:	633b      	str	r3, [r7, #48]	; 0x30
	dtoa(buffer, value);
 8004e9c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8004e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea0:	f7fd fcb0 	bl	8002804 <__aeabi_f2d>
 8004ea4:	0002      	movs	r2, r0
 8004ea6:	000b      	movs	r3, r1
 8004ea8:	0020      	movs	r0, r4
 8004eaa:	f7ff fe03 	bl	8004ab4 <_Z4dtoaPcd>
	if(backgroundColor != -1)
 8004eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	d007      	beq.n	8004ec4 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x94>
		selector.write(buffer, backgroundColor, 4);
 8004eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f001 fffd 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004ec2:	e037      	b.n	8004f34 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x104>
	else if(minValue == -1000 && maxValue == -1000)
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x114>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d10a      	bne.n	8004ee2 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0xb2>
 8004ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x114>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d106      	bne.n	8004ee2 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0xb2>
		selector.write(buffer, fontColor, 4);
 8004ed4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x118>)
 8004ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eda:	2304      	movs	r3, #4
 8004edc:	f001 ffee 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004ee0:	e028      	b.n	8004f34 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x104>
		if(value >= maxValue)
 8004ee2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004ee4:	f7fb fed8 	bl	8000c98 <__aeabi_i2f>
 8004ee8:	1c03      	adds	r3, r0, #0
 8004eea:	1c19      	adds	r1, r3, #0
 8004eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eee:	f7fb faef 	bl	80004d0 <__aeabi_fcmpge>
 8004ef2:	1e03      	subs	r3, r0, #0
 8004ef4:	d007      	beq.n	8004f06 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0xd6>
			selector.write(buffer, fontColorHigh, 4);
 8004ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ef8:	23f8      	movs	r3, #248	; 0xf8
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004efe:	2304      	movs	r3, #4
 8004f00:	f001 ffdc 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004f04:	e016      	b.n	8004f34 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x104>
		else if(value <= minValue)
 8004f06:	6a38      	ldr	r0, [r7, #32]
 8004f08:	f7fb fec6 	bl	8000c98 <__aeabi_i2f>
 8004f0c:	1c03      	adds	r3, r0, #0
 8004f0e:	1c19      	adds	r1, r3, #0
 8004f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f12:	f7fb fac9 	bl	80004a8 <__aeabi_fcmple>
 8004f16:	1e03      	subs	r3, r0, #0
 8004f18:	d006      	beq.n	8004f28 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0xf8>
			selector.write(buffer, fontColorLow, 4);
 8004f1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f1c:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x11c>)
 8004f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f20:	2304      	movs	r3, #4
 8004f22:	f001 ffcb 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004f26:	e005      	b.n	8004f34 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x104>
			selector.write(buffer, fontColorGood, 4);
 8004f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x120>)
 8004f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f2e:	2304      	movs	r3, #4
 8004f30:	f001 ffc4 	bl	8006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	469d      	mov	sp, r3
 8004f3a:	46c0      	nop			; (mov r8, r8)
}
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b00f      	add	sp, #60	; 0x3c
 8004f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	fffffc18 	.word	0xfffffc18
 8004f48:	0000fc60 	.word	0x0000fc60
 8004f4c:	000007ff 	.word	0x000007ff
 8004f50:	00003781 	.word	0x00003781

08004f54 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b099      	sub	sp, #100	; 0x64
 8004f58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f5a:	242c      	movs	r4, #44	; 0x2c
 8004f5c:	193b      	adds	r3, r7, r4
 8004f5e:	0018      	movs	r0, r3
 8004f60:	2334      	movs	r3, #52	; 0x34
 8004f62:	001a      	movs	r2, r3
 8004f64:	2100      	movs	r1, #0
 8004f66:	f003 fbe8 	bl	800873a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f6a:	231c      	movs	r3, #28
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	0018      	movs	r0, r3
 8004f70:	2310      	movs	r3, #16
 8004f72:	001a      	movs	r2, r3
 8004f74:	2100      	movs	r1, #0
 8004f76:	f003 fbe0 	bl	800873a <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f7a:	003b      	movs	r3, r7
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	231c      	movs	r3, #28
 8004f80:	001a      	movs	r2, r3
 8004f82:	2100      	movs	r1, #0
 8004f84:	f003 fbd9 	bl	800873a <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8004f88:	193b      	adds	r3, r7, r4
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	2201      	movs	r2, #1
 8004f92:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004f94:	193b      	adds	r3, r7, r4
 8004f96:	2200      	movs	r2, #0
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7fd ff6f 	bl	8002e80 <HAL_RCC_OscConfig>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	1e5a      	subs	r2, r3, #1
 8004fa6:	4193      	sbcs	r3, r2
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <_Z18SystemClock_Configv+0x5e>
	{
		Error_Handler();
 8004fae:	f000 f9bf 	bl	8005330 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fb2:	211c      	movs	r1, #28
 8004fb4:	187b      	adds	r3, r7, r1
 8004fb6:	2207      	movs	r2, #7
 8004fb8:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8004fba:	187b      	adds	r3, r7, r1
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	2200      	movs	r2, #0
 8004fca:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	2101      	movs	r1, #1
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f7fe fab5 	bl	8003540 <HAL_RCC_ClockConfig>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	4193      	sbcs	r3, r2
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <_Z18SystemClock_Configv+0x92>
	{
		Error_Handler();
 8004fe2:	f000 f9a5 	bl	8005330 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004fe6:	003b      	movs	r3, r7
 8004fe8:	2202      	movs	r2, #2
 8004fea:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004fec:	003b      	movs	r3, r7
 8004fee:	2200      	movs	r2, #0
 8004ff0:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ff2:	003b      	movs	r3, r7
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7fe fc35 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	4193      	sbcs	r3, r2
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <_Z18SystemClock_Configv+0xb6>
	{
		Error_Handler();
 8005006:	f000 f993 	bl	8005330 <Error_Handler>
	}
}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	46bd      	mov	sp, r7
 800500e:	b019      	add	sp, #100	; 0x64
 8005010:	bd90      	pop	{r4, r7, pc}
	...

08005014 <_ZL12MX_SPI2_Initv>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800501a:	4b28      	ldr	r3, [pc, #160]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 800501c:	4a28      	ldr	r2, [pc, #160]	; (80050c0 <_ZL12MX_SPI2_Initv+0xac>)
 800501e:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8005020:	4b26      	ldr	r3, [pc, #152]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 8005022:	2282      	movs	r2, #130	; 0x82
 8005024:	0052      	lsls	r2, r2, #1
 8005026:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005028:	4b24      	ldr	r3, [pc, #144]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 800502a:	2200      	movs	r2, #0
 800502c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800502e:	4b23      	ldr	r3, [pc, #140]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 8005030:	22e0      	movs	r2, #224	; 0xe0
 8005032:	00d2      	lsls	r2, r2, #3
 8005034:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 8005038:	2202      	movs	r2, #2
 800503a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800503c:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 800503e:	2201      	movs	r2, #1
 8005040:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8005042:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 8005044:	2280      	movs	r2, #128	; 0x80
 8005046:	0092      	lsls	r2, r2, #2
 8005048:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800504a:	4b1c      	ldr	r3, [pc, #112]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 800504c:	2210      	movs	r2, #16
 800504e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 8005052:	2200      	movs	r2, #0
 8005054:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005056:	4b19      	ldr	r3, [pc, #100]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 8005058:	2200      	movs	r2, #0
 800505a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800505c:	4b17      	ldr	r3, [pc, #92]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 800505e:	2200      	movs	r2, #0
 8005060:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8005062:	4b16      	ldr	r3, [pc, #88]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 8005064:	2207      	movs	r2, #7
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005068:	4b14      	ldr	r3, [pc, #80]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800506e:	4b13      	ldr	r3, [pc, #76]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 8005070:	2200      	movs	r2, #0
 8005072:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 8005076:	0018      	movs	r0, r3
 8005078:	f7fe fcf4 	bl	8003a64 <HAL_SPI_Init>
 800507c:	0003      	movs	r3, r0
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	4193      	sbcs	r3, r2
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <_ZL12MX_SPI2_Initv+0x78>
	{
		Error_Handler();
 8005088:	f000 f952 	bl	8005330 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */
	//Send 1 random byte to reset the sck
	uint8_t temp = 0;
 800508c:	1dfb      	adds	r3, r7, #7
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, &temp, sizeof(temp), HAL_MAX_DELAY);
 8005092:	2301      	movs	r3, #1
 8005094:	425b      	negs	r3, r3
 8005096:	1df9      	adds	r1, r7, #7
 8005098:	4808      	ldr	r0, [pc, #32]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 800509a:	2201      	movs	r2, #1
 800509c:	f7fe fd7c 	bl	8003b98 <HAL_SPI_Transmit>
	resetTftBoard();
 80050a0:	f001 fb23 	bl	80066ea <resetTftBoard>
	pullCSLow();
 80050a4:	f001 fb3c 	bl	8006720 <pullCSLow>
	ili9341_hspi_init(hspi2.Instance);
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <_ZL12MX_SPI2_Initv+0xa8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f001 fbdb 	bl	8006868 <ili9341_hspi_init>
	/* USER CODE END SPI2_Init 2 */

}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b002      	add	sp, #8
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	20000090 	.word	0x20000090
 80050c0:	40003800 	.word	0x40003800

080050c4 <_ZL12MX_TIM6_Initv>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050ca:	003b      	movs	r3, r7
 80050cc:	0018      	movs	r0, r3
 80050ce:	2308      	movs	r3, #8
 80050d0:	001a      	movs	r2, r3
 80050d2:	2100      	movs	r1, #0
 80050d4:	f003 fb31 	bl	800873a <memset>

	/* USER CODE BEGIN TIM6_Init 1 */
	//Set a period of 2ms
	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80050d8:	4b20      	ldr	r3, [pc, #128]	; (800515c <_ZL12MX_TIM6_Initv+0x98>)
 80050da:	4a21      	ldr	r2, [pc, #132]	; (8005160 <_ZL12MX_TIM6_Initv+0x9c>)
 80050dc:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 240-1;
 80050de:	4b1f      	ldr	r3, [pc, #124]	; (800515c <_ZL12MX_TIM6_Initv+0x98>)
 80050e0:	22ef      	movs	r2, #239	; 0xef
 80050e2:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050e4:	4b1d      	ldr	r3, [pc, #116]	; (800515c <_ZL12MX_TIM6_Initv+0x98>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 400-1;
 80050ea:	4b1c      	ldr	r3, [pc, #112]	; (800515c <_ZL12MX_TIM6_Initv+0x98>)
 80050ec:	2290      	movs	r2, #144	; 0x90
 80050ee:	32ff      	adds	r2, #255	; 0xff
 80050f0:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <_ZL12MX_TIM6_Initv+0x98>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80050f8:	4b18      	ldr	r3, [pc, #96]	; (800515c <_ZL12MX_TIM6_Initv+0x98>)
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7fe ffe4 	bl	80040c8 <HAL_TIM_Base_Init>
 8005100:	0003      	movs	r3, r0
 8005102:	1e5a      	subs	r2, r3, #1
 8005104:	4193      	sbcs	r3, r2
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <_ZL12MX_TIM6_Initv+0x4c>
	{
		Error_Handler();
 800510c:	f000 f910 	bl	8005330 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005110:	003b      	movs	r3, r7
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005116:	003b      	movs	r3, r7
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800511c:	003a      	movs	r2, r7
 800511e:	4b0f      	ldr	r3, [pc, #60]	; (800515c <_ZL12MX_TIM6_Initv+0x98>)
 8005120:	0011      	movs	r1, r2
 8005122:	0018      	movs	r0, r3
 8005124:	f7ff f87e 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8005128:	0003      	movs	r3, r0
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	4193      	sbcs	r3, r2
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <_ZL12MX_TIM6_Initv+0x74>
	{
		Error_Handler();
 8005134:	f000 f8fc 	bl	8005330 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */
	//Clear status reg
	htim6.Instance->SR &= TIM_SR_UIF;
 8005138:	4b08      	ldr	r3, [pc, #32]	; (800515c <_ZL12MX_TIM6_Initv+0x98>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	4b07      	ldr	r3, [pc, #28]	; (800515c <_ZL12MX_TIM6_Initv+0x98>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2101      	movs	r1, #1
 8005144:	400a      	ands	r2, r1
 8005146:	611a      	str	r2, [r3, #16]
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8005148:	2200      	movs	r2, #0
 800514a:	2103      	movs	r1, #3
 800514c:	2011      	movs	r0, #17
 800514e:	f7fd fcbf 	bl	8002ad0 <HAL_NVIC_SetPriority>
	/* USER CODE END TIM6_Init 2 */

}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b002      	add	sp, #8
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	200000f4 	.word	0x200000f4
 8005160:	40001000 	.word	0x40001000

08005164 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b08b      	sub	sp, #44	; 0x2c
 8005168:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800516a:	2414      	movs	r4, #20
 800516c:	193b      	adds	r3, r7, r4
 800516e:	0018      	movs	r0, r3
 8005170:	2314      	movs	r3, #20
 8005172:	001a      	movs	r2, r3
 8005174:	2100      	movs	r1, #0
 8005176:	f003 fae0 	bl	800873a <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800517a:	4b69      	ldr	r3, [pc, #420]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	4b68      	ldr	r3, [pc, #416]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 8005180:	2180      	movs	r1, #128	; 0x80
 8005182:	0309      	lsls	r1, r1, #12
 8005184:	430a      	orrs	r2, r1
 8005186:	615a      	str	r2, [r3, #20]
 8005188:	4b65      	ldr	r3, [pc, #404]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	031b      	lsls	r3, r3, #12
 8005190:	4013      	ands	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8005196:	4b62      	ldr	r3, [pc, #392]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	4b61      	ldr	r3, [pc, #388]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	03c9      	lsls	r1, r1, #15
 80051a0:	430a      	orrs	r2, r1
 80051a2:	615a      	str	r2, [r3, #20]
 80051a4:	4b5e      	ldr	r3, [pc, #376]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	03db      	lsls	r3, r3, #15
 80051ac:	4013      	ands	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80051b2:	4b5b      	ldr	r3, [pc, #364]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	4b5a      	ldr	r3, [pc, #360]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	0289      	lsls	r1, r1, #10
 80051bc:	430a      	orrs	r2, r1
 80051be:	615a      	str	r2, [r3, #20]
 80051c0:	4b57      	ldr	r3, [pc, #348]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	2380      	movs	r3, #128	; 0x80
 80051c6:	029b      	lsls	r3, r3, #10
 80051c8:	4013      	ands	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80051ce:	4b54      	ldr	r3, [pc, #336]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	4b53      	ldr	r3, [pc, #332]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 80051d4:	2180      	movs	r1, #128	; 0x80
 80051d6:	02c9      	lsls	r1, r1, #11
 80051d8:	430a      	orrs	r2, r1
 80051da:	615a      	str	r2, [r3, #20]
 80051dc:	4b50      	ldr	r3, [pc, #320]	; (8005320 <_ZL12MX_GPIO_Initv+0x1bc>)
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	02db      	lsls	r3, r3, #11
 80051e4:	4013      	ands	r3, r2
 80051e6:	607b      	str	r3, [r7, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TFT_D_C_GPIO_Port, TFT_D_C_Pin, GPIO_PIN_RESET);
 80051ea:	2390      	movs	r3, #144	; 0x90
 80051ec:	05db      	lsls	r3, r3, #23
 80051ee:	2200      	movs	r2, #0
 80051f0:	2120      	movs	r1, #32
 80051f2:	0018      	movs	r0, r3
 80051f4:	f7fd fe0a 	bl	8002e0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80051f8:	4b4a      	ldr	r3, [pc, #296]	; (8005324 <_ZL12MX_GPIO_Initv+0x1c0>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	2102      	movs	r1, #2
 80051fe:	0018      	movs	r0, r3
 8005200:	f7fd fe04 	bl	8002e0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8005204:	2390      	movs	r3, #144	; 0x90
 8005206:	05db      	lsls	r3, r3, #23
 8005208:	2200      	movs	r2, #0
 800520a:	2110      	movs	r1, #16
 800520c:	0018      	movs	r0, r3
 800520e:	f7fd fdfd 	bl	8002e0c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SPI2_NSS_Pin */
	GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8005212:	193b      	adds	r3, r7, r4
 8005214:	2202      	movs	r2, #2
 8005216:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005218:	193b      	adds	r3, r7, r4
 800521a:	2201      	movs	r2, #1
 800521c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	193b      	adds	r3, r7, r4
 8005220:	2200      	movs	r2, #0
 8005222:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005224:	193b      	adds	r3, r7, r4
 8005226:	2203      	movs	r2, #3
 8005228:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800522a:	193b      	adds	r3, r7, r4
 800522c:	4a3d      	ldr	r2, [pc, #244]	; (8005324 <_ZL12MX_GPIO_Initv+0x1c0>)
 800522e:	0019      	movs	r1, r3
 8005230:	0010      	movs	r0, r2
 8005232:	f7fd fc6f 	bl	8002b14 <HAL_GPIO_Init>

	/*Configure GPIO pins : TFT_D_C_Pin*/
	GPIO_InitStruct.Pin = TFT_D_C_Pin;
 8005236:	193b      	adds	r3, r7, r4
 8005238:	2220      	movs	r2, #32
 800523a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800523c:	193b      	adds	r3, r7, r4
 800523e:	2201      	movs	r2, #1
 8005240:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005242:	193b      	adds	r3, r7, r4
 8005244:	2200      	movs	r2, #0
 8005246:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005248:	193b      	adds	r3, r7, r4
 800524a:	2203      	movs	r2, #3
 800524c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(TFT_D_C_GPIO_Port, &GPIO_InitStruct);
 800524e:	193a      	adds	r2, r7, r4
 8005250:	2390      	movs	r3, #144	; 0x90
 8005252:	05db      	lsls	r3, r3, #23
 8005254:	0011      	movs	r1, r2
 8005256:	0018      	movs	r0, r3
 8005258:	f7fd fc5c 	bl	8002b14 <HAL_GPIO_Init>

	/*Configure GPIO pins : TFT_RST_Pin */
	GPIO_InitStruct.Pin = TFT_RST_Pin;
 800525c:	193b      	adds	r3, r7, r4
 800525e:	2210      	movs	r2, #16
 8005260:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005262:	193b      	adds	r3, r7, r4
 8005264:	2201      	movs	r2, #1
 8005266:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	193b      	adds	r3, r7, r4
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800526e:	193b      	adds	r3, r7, r4
 8005270:	2200      	movs	r2, #0
 8005272:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8005274:	193a      	adds	r2, r7, r4
 8005276:	2390      	movs	r3, #144	; 0x90
 8005278:	05db      	lsls	r3, r3, #23
 800527a:	0011      	movs	r1, r2
 800527c:	0018      	movs	r0, r3
 800527e:	f7fd fc49 	bl	8002b14 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENC_B_Pin */
	GPIO_InitStruct.Pin = ENC_B_Pin;
 8005282:	193b      	adds	r3, r7, r4
 8005284:	2280      	movs	r2, #128	; 0x80
 8005286:	0212      	lsls	r2, r2, #8
 8005288:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800528a:	193b      	adds	r3, r7, r4
 800528c:	4a26      	ldr	r2, [pc, #152]	; (8005328 <_ZL12MX_GPIO_Initv+0x1c4>)
 800528e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005290:	193b      	adds	r3, r7, r4
 8005292:	2201      	movs	r2, #1
 8005294:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8005296:	193a      	adds	r2, r7, r4
 8005298:	2390      	movs	r3, #144	; 0x90
 800529a:	05db      	lsls	r3, r3, #23
 800529c:	0011      	movs	r1, r2
 800529e:	0018      	movs	r0, r3
 80052a0:	f7fd fc38 	bl	8002b14 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENC_A_Pin */
	GPIO_InitStruct.Pin = ENC_A_Pin;
 80052a4:	0021      	movs	r1, r4
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	2280      	movs	r2, #128	; 0x80
 80052aa:	00d2      	lsls	r2, r2, #3
 80052ac:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80052ae:	187b      	adds	r3, r7, r1
 80052b0:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <_ZL12MX_GPIO_Initv+0x1c4>)
 80052b2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052b4:	187b      	adds	r3, r7, r1
 80052b6:	2201      	movs	r2, #1
 80052b8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 80052ba:	000c      	movs	r4, r1
 80052bc:	187b      	adds	r3, r7, r1
 80052be:	4a1b      	ldr	r2, [pc, #108]	; (800532c <_ZL12MX_GPIO_Initv+0x1c8>)
 80052c0:	0019      	movs	r1, r3
 80052c2:	0010      	movs	r0, r2
 80052c4:	f7fd fc26 	bl	8002b14 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENC_OK_Pin */
	GPIO_InitStruct.Pin = ENC_OK_Pin;
 80052c8:	0021      	movs	r1, r4
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	2280      	movs	r2, #128	; 0x80
 80052ce:	0112      	lsls	r2, r2, #4
 80052d0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052d2:	187b      	adds	r3, r7, r1
 80052d4:	2200      	movs	r2, #0
 80052d6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052d8:	187b      	adds	r3, r7, r1
 80052da:	2201      	movs	r2, #1
 80052dc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(ENC_OK_GPIO_Port, &GPIO_InitStruct);
 80052de:	000c      	movs	r4, r1
 80052e0:	187b      	adds	r3, r7, r1
 80052e2:	4a12      	ldr	r2, [pc, #72]	; (800532c <_ZL12MX_GPIO_Initv+0x1c8>)
 80052e4:	0019      	movs	r1, r3
 80052e6:	0010      	movs	r0, r2
 80052e8:	f7fd fc14 	bl	8002b14 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_CANCEL_Pin */
	GPIO_InitStruct.Pin = BTN_CANCEL_Pin;
 80052ec:	0021      	movs	r1, r4
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	0152      	lsls	r2, r2, #5
 80052f4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052f6:	187b      	adds	r3, r7, r1
 80052f8:	2200      	movs	r2, #0
 80052fa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052fc:	187b      	adds	r3, r7, r1
 80052fe:	2201      	movs	r2, #1
 8005300:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BTN_CANCEL_Port, &GPIO_InitStruct);
 8005302:	187b      	adds	r3, r7, r1
 8005304:	4a09      	ldr	r2, [pc, #36]	; (800532c <_ZL12MX_GPIO_Initv+0x1c8>)
 8005306:	0019      	movs	r1, r3
 8005308:	0010      	movs	r0, r2
 800530a:	f7fd fc03 	bl	8002b14 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800530e:	2200      	movs	r2, #0
 8005310:	2101      	movs	r1, #1
 8005312:	2007      	movs	r0, #7
 8005314:	f7fd fbdc 	bl	8002ad0 <HAL_NVIC_SetPriority>
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	b00b      	add	sp, #44	; 0x2c
 800531e:	bd90      	pop	{r4, r7, pc}
 8005320:	40021000 	.word	0x40021000
 8005324:	48000400 	.word	0x48000400
 8005328:	10310000 	.word	0x10310000
 800532c:	48000800 	.word	0x48000800

08005330 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800533a:	b590      	push	{r4, r7, lr}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	60b8      	str	r0, [r7, #8]
 8005342:	60f9      	str	r1, [r7, #12]
 8005344:	607a      	str	r2, [r7, #4]
      return pow(__type(__x), __type(__y));
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fd fa22 	bl	8002790 <__aeabi_i2d>
 800534c:	0003      	movs	r3, r0
 800534e:	000c      	movs	r4, r1
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	001a      	movs	r2, r3
 8005356:	0023      	movs	r3, r4
 8005358:	f001 ff42 	bl	80071e0 <pow>
 800535c:	0003      	movs	r3, r0
 800535e:	000c      	movs	r4, r1
    }
 8005360:	0018      	movs	r0, r3
 8005362:	0021      	movs	r1, r4
 8005364:	46bd      	mov	sp, r7
 8005366:	b005      	add	sp, #20
 8005368:	bd90      	pop	{r4, r7, pc}
	...

0800536c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <HAL_MspInit+0x44>)
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <HAL_MspInit+0x44>)
 8005378:	2101      	movs	r1, #1
 800537a:	430a      	orrs	r2, r1
 800537c:	619a      	str	r2, [r3, #24]
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <HAL_MspInit+0x44>)
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	2201      	movs	r2, #1
 8005384:	4013      	ands	r3, r2
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <HAL_MspInit+0x44>)
 800538c:	69da      	ldr	r2, [r3, #28]
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <HAL_MspInit+0x44>)
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	0549      	lsls	r1, r1, #21
 8005394:	430a      	orrs	r2, r1
 8005396:	61da      	str	r2, [r3, #28]
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_MspInit+0x44>)
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	055b      	lsls	r3, r3, #21
 80053a0:	4013      	ands	r3, r2
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b002      	add	sp, #8
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	40021000 	.word	0x40021000

080053b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b08b      	sub	sp, #44	; 0x2c
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053bc:	2314      	movs	r3, #20
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	0018      	movs	r0, r3
 80053c2:	2314      	movs	r3, #20
 80053c4:	001a      	movs	r2, r3
 80053c6:	2100      	movs	r1, #0
 80053c8:	f003 f9b7 	bl	800873a <memset>
  if(hspi->Instance==SPI2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a2f      	ldr	r2, [pc, #188]	; (8005490 <HAL_SPI_MspInit+0xdc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d157      	bne.n	8005486 <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80053d6:	4b2f      	ldr	r3, [pc, #188]	; (8005494 <HAL_SPI_MspInit+0xe0>)
 80053d8:	69da      	ldr	r2, [r3, #28]
 80053da:	4b2e      	ldr	r3, [pc, #184]	; (8005494 <HAL_SPI_MspInit+0xe0>)
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	01c9      	lsls	r1, r1, #7
 80053e0:	430a      	orrs	r2, r1
 80053e2:	61da      	str	r2, [r3, #28]
 80053e4:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_SPI_MspInit+0xe0>)
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	01db      	lsls	r3, r3, #7
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f2:	4b28      	ldr	r3, [pc, #160]	; (8005494 <HAL_SPI_MspInit+0xe0>)
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	4b27      	ldr	r3, [pc, #156]	; (8005494 <HAL_SPI_MspInit+0xe0>)
 80053f8:	2180      	movs	r1, #128	; 0x80
 80053fa:	0309      	lsls	r1, r1, #12
 80053fc:	430a      	orrs	r2, r1
 80053fe:	615a      	str	r2, [r3, #20]
 8005400:	4b24      	ldr	r3, [pc, #144]	; (8005494 <HAL_SPI_MspInit+0xe0>)
 8005402:	695a      	ldr	r2, [r3, #20]
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	031b      	lsls	r3, r3, #12
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800540e:	4b21      	ldr	r3, [pc, #132]	; (8005494 <HAL_SPI_MspInit+0xe0>)
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	4b20      	ldr	r3, [pc, #128]	; (8005494 <HAL_SPI_MspInit+0xe0>)
 8005414:	2180      	movs	r1, #128	; 0x80
 8005416:	02c9      	lsls	r1, r1, #11
 8005418:	430a      	orrs	r2, r1
 800541a:	615a      	str	r2, [r3, #20]
 800541c:	4b1d      	ldr	r3, [pc, #116]	; (8005494 <HAL_SPI_MspInit+0xe0>)
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	02db      	lsls	r3, r3, #11
 8005424:	4013      	ands	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800542a:	2114      	movs	r1, #20
 800542c:	187b      	adds	r3, r7, r1
 800542e:	220c      	movs	r2, #12
 8005430:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005432:	187b      	adds	r3, r7, r1
 8005434:	2202      	movs	r2, #2
 8005436:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	187b      	adds	r3, r7, r1
 800543a:	2200      	movs	r2, #0
 800543c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800543e:	187b      	adds	r3, r7, r1
 8005440:	2203      	movs	r2, #3
 8005442:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8005444:	187b      	adds	r3, r7, r1
 8005446:	2201      	movs	r2, #1
 8005448:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800544a:	000c      	movs	r4, r1
 800544c:	187b      	adds	r3, r7, r1
 800544e:	4a12      	ldr	r2, [pc, #72]	; (8005498 <HAL_SPI_MspInit+0xe4>)
 8005450:	0019      	movs	r1, r3
 8005452:	0010      	movs	r0, r2
 8005454:	f7fd fb5e 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005458:	0021      	movs	r1, r4
 800545a:	187b      	adds	r3, r7, r1
 800545c:	2280      	movs	r2, #128	; 0x80
 800545e:	00d2      	lsls	r2, r2, #3
 8005460:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005462:	187b      	adds	r3, r7, r1
 8005464:	2202      	movs	r2, #2
 8005466:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005468:	187b      	adds	r3, r7, r1
 800546a:	2200      	movs	r2, #0
 800546c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800546e:	187b      	adds	r3, r7, r1
 8005470:	2203      	movs	r2, #3
 8005472:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005474:	187b      	adds	r3, r7, r1
 8005476:	2205      	movs	r2, #5
 8005478:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800547a:	187b      	adds	r3, r7, r1
 800547c:	4a07      	ldr	r2, [pc, #28]	; (800549c <HAL_SPI_MspInit+0xe8>)
 800547e:	0019      	movs	r1, r3
 8005480:	0010      	movs	r0, r2
 8005482:	f7fd fb47 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b00b      	add	sp, #44	; 0x2c
 800548c:	bd90      	pop	{r4, r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	40003800 	.word	0x40003800
 8005494:	40021000 	.word	0x40021000
 8005498:	48000800 	.word	0x48000800
 800549c:	48000400 	.word	0x48000400

080054a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <HAL_TIM_Base_MspInit+0x34>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10b      	bne.n	80054ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <HAL_TIM_Base_MspInit+0x38>)
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <HAL_TIM_Base_MspInit+0x38>)
 80054b8:	2110      	movs	r1, #16
 80054ba:	430a      	orrs	r2, r1
 80054bc:	61da      	str	r2, [r3, #28]
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_TIM_Base_MspInit+0x38>)
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	2210      	movs	r2, #16
 80054c4:	4013      	ands	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b004      	add	sp, #16
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	40001000 	.word	0x40001000
 80054d8:	40021000 	.word	0x40021000

080054dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80054e0:	46c0      	nop			; (mov r8, r8)
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054ea:	e7fe      	b.n	80054ea <HardFault_Handler+0x4>

080054ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005504:	f7fd fa1e 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005508:	46c0      	nop			; (mov r8, r8)
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  //This is for the encoder A input
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	0018      	movs	r0, r3
 8005518:	f7fd fc96 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  //This is for the encoder B input
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	0018      	movs	r0, r3
 8005522:	f7fd fc91 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
	//Clear interrupt flag
	htim6.Instance->SR &= ~TIM_SR_UIF;
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <TIM6_DAC_IRQHandler+0x30>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <TIM6_DAC_IRQHandler+0x30>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2101      	movs	r1, #1
 800553c:	438a      	bics	r2, r1
 800553e:	611a      	str	r2, [r3, #16]
	okButtonPtr->process();
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <TIM6_DAC_IRQHandler+0x34>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	0018      	movs	r0, r3
 8005546:	f000 f929 	bl	800579c <_ZN11SW_DEBOUNCE7processEv>
	cancelButtonPtr->process();
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <TIM6_DAC_IRQHandler+0x38>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 f924 	bl	800579c <_ZN11SW_DEBOUNCE7processEv>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	200000f4 	.word	0x200000f4
 8005560:	20000138 	.word	0x20000138
 8005564:	2000013c 	.word	0x2000013c

08005568 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	0002      	movs	r2, r0
 8005570:	1dbb      	adds	r3, r7, #6
 8005572:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin)
 8005574:	1dbb      	adds	r3, r7, #6
 8005576:	881a      	ldrh	r2, [r3, #0]
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	429a      	cmp	r2, r3
 800557e:	d005      	beq.n	800558c <HAL_GPIO_EXTI_Callback+0x24>
 8005580:	1dbb      	adds	r3, r7, #6
 8005582:	881a      	ldrh	r2, [r3, #0]
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	429a      	cmp	r2, r3
 800558a:	d117      	bne.n	80055bc <HAL_GPIO_EXTI_Callback+0x54>
	{
		encoderPtr->process((ENC_A_GPIO_Port->IDR & ENC_A_Pin) != 0, (ENC_B_GPIO_Port->IDR & ENC_B_Pin) != 0);
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	0018      	movs	r0, r3
 8005592:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <HAL_GPIO_EXTI_Callback+0x60>)
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4013      	ands	r3, r2
 800559c:	1e5a      	subs	r2, r3, #1
 800559e:	4193      	sbcs	r3, r2
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	0019      	movs	r1, r3
 80055a4:	2390      	movs	r3, #144	; 0x90
 80055a6:	05db      	lsls	r3, r3, #23
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	4013      	ands	r3, r2
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	4193      	sbcs	r3, r2
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	001a      	movs	r2, r3
 80055b8:	f000 f878 	bl	80056ac <_ZN14ROTARY_ENCODER7processEhh>
	}
}
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000134 	.word	0x20000134
 80055c8:	48000800 	.word	0x48000800

080055cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80055d4:	4b11      	ldr	r3, [pc, #68]	; (800561c <_sbrk+0x50>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <_sbrk+0x16>
		heap_end = &end;
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <_sbrk+0x50>)
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <_sbrk+0x54>)
 80055e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80055e2:	4b0e      	ldr	r3, [pc, #56]	; (800561c <_sbrk+0x50>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <_sbrk+0x50>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	18d3      	adds	r3, r2, r3
 80055f0:	466a      	mov	r2, sp
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d907      	bls.n	8005606 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80055f6:	f003 f86d 	bl	80086d4 <__errno>
 80055fa:	0003      	movs	r3, r0
 80055fc:	220c      	movs	r2, #12
 80055fe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005600:	2301      	movs	r3, #1
 8005602:	425b      	negs	r3, r3
 8005604:	e006      	b.n	8005614 <_sbrk+0x48>
	}

	heap_end += incr;
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <_sbrk+0x50>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	18d2      	adds	r2, r2, r3
 800560e:	4b03      	ldr	r3, [pc, #12]	; (800561c <_sbrk+0x50>)
 8005610:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005612:	68fb      	ldr	r3, [r7, #12]
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b004      	add	sp, #16
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000140 	.word	0x20000140
 8005620:	20000158 	.word	0x20000158

08005624 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005628:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <SystemInit+0x70>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <SystemInit+0x70>)
 800562e:	2101      	movs	r1, #1
 8005630:	430a      	orrs	r2, r1
 8005632:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8005634:	4b17      	ldr	r3, [pc, #92]	; (8005694 <SystemInit+0x70>)
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	4b16      	ldr	r3, [pc, #88]	; (8005694 <SystemInit+0x70>)
 800563a:	4917      	ldr	r1, [pc, #92]	; (8005698 <SystemInit+0x74>)
 800563c:	400a      	ands	r2, r1
 800563e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8005640:	4b14      	ldr	r3, [pc, #80]	; (8005694 <SystemInit+0x70>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b13      	ldr	r3, [pc, #76]	; (8005694 <SystemInit+0x70>)
 8005646:	4915      	ldr	r1, [pc, #84]	; (800569c <SystemInit+0x78>)
 8005648:	400a      	ands	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800564c:	4b11      	ldr	r3, [pc, #68]	; (8005694 <SystemInit+0x70>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <SystemInit+0x70>)
 8005652:	4913      	ldr	r1, [pc, #76]	; (80056a0 <SystemInit+0x7c>)
 8005654:	400a      	ands	r2, r1
 8005656:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <SystemInit+0x70>)
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <SystemInit+0x70>)
 800565e:	4911      	ldr	r1, [pc, #68]	; (80056a4 <SystemInit+0x80>)
 8005660:	400a      	ands	r2, r1
 8005662:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <SystemInit+0x70>)
 8005666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <SystemInit+0x70>)
 800566a:	210f      	movs	r1, #15
 800566c:	438a      	bics	r2, r1
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8005670:	4b08      	ldr	r3, [pc, #32]	; (8005694 <SystemInit+0x70>)
 8005672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005674:	4b07      	ldr	r3, [pc, #28]	; (8005694 <SystemInit+0x70>)
 8005676:	490c      	ldr	r1, [pc, #48]	; (80056a8 <SystemInit+0x84>)
 8005678:	400a      	ands	r2, r1
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <SystemInit+0x70>)
 800567e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <SystemInit+0x70>)
 8005682:	2101      	movs	r1, #1
 8005684:	438a      	bics	r2, r1
 8005686:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005688:	4b02      	ldr	r3, [pc, #8]	; (8005694 <SystemInit+0x70>)
 800568a:	2200      	movs	r2, #0
 800568c:	609a      	str	r2, [r3, #8]

}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40021000 	.word	0x40021000
 8005698:	08ffb80c 	.word	0x08ffb80c
 800569c:	fef6ffff 	.word	0xfef6ffff
 80056a0:	fffbffff 	.word	0xfffbffff
 80056a4:	ffc0ffff 	.word	0xffc0ffff
 80056a8:	fffcfe2c 	.word	0xfffcfe2c

080056ac <_ZN14ROTARY_ENCODER7processEhh>:
ROTARY_ENCODER::ROTARY_ENCODER(uint8_t ticks_per_step):
ticksPerStep{ticks_per_step}, tickCounter{0}, state{R_START}
{}

void ROTARY_ENCODER::process(uint8_t a_state, uint8_t b_state)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	0008      	movs	r0, r1
 80056b6:	0011      	movs	r1, r2
 80056b8:	1cfb      	adds	r3, r7, #3
 80056ba:	1c02      	adds	r2, r0, #0
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	1cbb      	adds	r3, r7, #2
 80056c0:	1c0a      	adds	r2, r1, #0
 80056c2:	701a      	strb	r2, [r3, #0]
	state = ttable[state & 0xF][((a_state & 0x1) << 1) | (b_state & 0x1)];
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	7a1b      	ldrb	r3, [r3, #8]
 80056c8:	001a      	movs	r2, r3
 80056ca:	230f      	movs	r3, #15
 80056cc:	401a      	ands	r2, r3
 80056ce:	1cfb      	adds	r3, r7, #3
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	2102      	movs	r1, #2
 80056d6:	4019      	ands	r1, r3
 80056d8:	1cbb      	adds	r3, r7, #2
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2001      	movs	r0, #1
 80056de:	4003      	ands	r3, r0
 80056e0:	430b      	orrs	r3, r1
 80056e2:	492d      	ldr	r1, [pc, #180]	; (8005798 <_ZN14ROTARY_ENCODER7processEhh+0xec>)
 80056e4:	0092      	lsls	r2, r2, #2
 80056e6:	188a      	adds	r2, r1, r2
 80056e8:	5cd2      	ldrb	r2, [r2, r3]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	721a      	strb	r2, [r3, #8]
	if(state & (DIR_CCW | DIR_CW))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	7a1b      	ldrb	r3, [r3, #8]
 80056f2:	001a      	movs	r2, r3
 80056f4:	2330      	movs	r3, #48	; 0x30
 80056f6:	4013      	ands	r3, r2
 80056f8:	d049      	beq.n	800578e <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	{
	    if(state & DIR_CW)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7a1b      	ldrb	r3, [r3, #8]
 80056fe:	001a      	movs	r2, r3
 8005700:	2310      	movs	r3, #16
 8005702:	4013      	ands	r3, r2
 8005704:	d011      	beq.n	800572a <_ZN14ROTARY_ENCODER7processEhh+0x7e>
	    {
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter < 0)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2206      	movs	r2, #6
 800570a:	5e9b      	ldrsh	r3, [r3, r2]
 800570c:	2b00      	cmp	r3, #0
 800570e:	da02      	bge.n	8005716 <_ZN14ROTARY_ENCODER7processEhh+0x6a>
	    	{
	    		this->tickCounter = 0;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter++;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2206      	movs	r2, #6
 800571a:	5e9b      	ldrsh	r3, [r3, r2]
 800571c:	b29b      	uxth	r3, r3
 800571e:	3301      	adds	r3, #1
 8005720:	b29b      	uxth	r3, r3
 8005722:	b21a      	sxth	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	80da      	strh	r2, [r3, #6]
 8005728:	e010      	b.n	800574c <_ZN14ROTARY_ENCODER7processEhh+0xa0>
	    }else{
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter > 0)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2206      	movs	r2, #6
 800572e:	5e9b      	ldrsh	r3, [r3, r2]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dd02      	ble.n	800573a <_ZN14ROTARY_ENCODER7processEhh+0x8e>
	    	{
	    		this->tickCounter = 0;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter--;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2206      	movs	r2, #6
 800573e:	5e9b      	ldrsh	r3, [r3, r2]
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b01      	subs	r3, #1
 8005744:	b29b      	uxth	r3, r3
 8005746:	b21a      	sxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	80da      	strh	r2, [r3, #6]
	    }

	    uint16_t tempCounter = (this->tickCounter < 0) ? this->tickCounter * -1 : this->tickCounter;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2206      	movs	r2, #6
 8005750:	5e9b      	ldrsh	r3, [r3, r2]
 8005752:	17d9      	asrs	r1, r3, #31
 8005754:	185a      	adds	r2, r3, r1
 8005756:	404a      	eors	r2, r1
 8005758:	210e      	movs	r1, #14
 800575a:	187b      	adds	r3, r7, r1
 800575c:	801a      	strh	r2, [r3, #0]
	    if(tempCounter >= this->ticksPerStep)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	791b      	ldrb	r3, [r3, #4]
 8005762:	b29b      	uxth	r3, r3
 8005764:	187a      	adds	r2, r7, r1
 8005766:	8812      	ldrh	r2, [r2, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d310      	bcc.n	800578e <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	    {
	    	this->doStep(state & DIR_CW);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	7a12      	ldrb	r2, [r2, #8]
 8005776:	0011      	movs	r1, r2
 8005778:	2210      	movs	r2, #16
 800577a:	400a      	ands	r2, r1
 800577c:	1e51      	subs	r1, r2, #1
 800577e:	418a      	sbcs	r2, r1
 8005780:	b2d1      	uxtb	r1, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	0010      	movs	r0, r2
 8005786:	4798      	blx	r3
	    	this->tickCounter = 0;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	80da      	strh	r2, [r3, #6]
	    }
	}
}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b004      	add	sp, #16
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	08008c6c 	.word	0x08008c6c

0800579c <_ZN11SW_DEBOUNCE7processEv>:
switchBitSequence{0xFF},stateMachineState{SW_STATE_MACHINE::SWITCH_OPEN}, validPressBitSequence{static_cast<uint8_t>(1 << static_cast<uint8_t>(ms_for_valid_press/timer_period_ms))},
msHeldCounter{0}, timerPeriodMs{timer_period_ms}, msForValidPress{ms_for_valid_press} , timerInstance{timer_instance}
{}

void SW_DEBOUNCE::process(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	this->switchBitSequence = (this->switchBitSequence << 1) | ((this->gpioPort->IDR & this->gpioPin) != 0);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7b1b      	ldrb	r3, [r3, #12]
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	b25a      	sxtb	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	8889      	ldrh	r1, [r1, #4]
 80057b6:	400b      	ands	r3, r1
 80057b8:	1e59      	subs	r1, r3, #1
 80057ba:	418b      	sbcs	r3, r1
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	b25b      	sxtb	r3, r3
 80057c0:	4313      	orrs	r3, r2
 80057c2:	b25b      	sxtb	r3, r3
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	731a      	strb	r2, [r3, #12]
	if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_OPEN)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11b      	bne.n	800580a <_ZN11SW_DEBOUNCE7processEv+0x6e>
	{
		if((this->switchBitSequence & (this->validPressBitSequence | (this->validPressBitSequence - 1))) == this->validPressBitSequence)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7b1b      	ldrb	r3, [r3, #12]
 80057d6:	001a      	movs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7d1b      	ldrb	r3, [r3, #20]
 80057dc:	0019      	movs	r1, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7d1b      	ldrb	r3, [r3, #20]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	430b      	orrs	r3, r1
 80057e6:	4013      	ands	r3, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	7d12      	ldrb	r2, [r2, #20]
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d13a      	bne.n	8005866 <_ZN11SW_DEBOUNCE7processEv+0xca>
		{
			this->stateMachineState = SW_STATE_MACHINE::VALID_PRESS_DETECTED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	611a      	str	r2, [r3, #16]
			this->msHeldCounter = this->msForValidPress;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	5c9b      	ldrb	r3, [r3, r2]
 80057fc:	001a      	movs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	619a      	str	r2, [r3, #24]
			//Reset the bit sequence to only count held time now
			this->switchBitSequence = 0;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	731a      	strb	r2, [r3, #12]
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
		{
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
		}
	}
}
 8005808:	e02d      	b.n	8005866 <_ZN11SW_DEBOUNCE7processEv+0xca>
	}else if(this->stateMachineState == SW_STATE_MACHINE::VALID_PRESS_DETECTED)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d11e      	bne.n	8005850 <_ZN11SW_DEBOUNCE7processEv+0xb4>
		if(!this->switchBitSequence)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	7b1b      	ldrb	r3, [r3, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d107      	bne.n	800582a <_ZN11SW_DEBOUNCE7processEv+0x8e>
			this->msHeldCounter+= this->timerPeriodMs;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	18d2      	adds	r2, r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	619a      	str	r2, [r3, #24]
}
 8005828:	e01d      	b.n	8005866 <_ZN11SW_DEBOUNCE7processEv+0xca>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_RELEASED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	611a      	str	r2, [r3, #16]
			if(this->msHeldCounter >= static_cast<uint32_t>(SWITCH_STATE::THREE_SECOND_PRESS))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	4a0e      	ldr	r2, [pc, #56]	; (8005870 <_ZN11SW_DEBOUNCE7processEv+0xd4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d903      	bls.n	8005842 <_ZN11SW_DEBOUNCE7processEv+0xa6>
				this->debouncedState = SWITCH_STATE::THREE_SECOND_PRESS;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a0d      	ldr	r2, [pc, #52]	; (8005874 <_ZN11SW_DEBOUNCE7processEv+0xd8>)
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	e002      	b.n	8005848 <_ZN11SW_DEBOUNCE7processEv+0xac>
				this->debouncedState = SWITCH_STATE::SHORT_PRESS;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	609a      	str	r2, [r3, #8]
			this->msHeldCounter = 0;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]
}
 800584e:	e00a      	b.n	8005866 <_ZN11SW_DEBOUNCE7processEv+0xca>
	}else if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_RELEASED)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d106      	bne.n	8005866 <_ZN11SW_DEBOUNCE7processEv+0xca>
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7b1b      	ldrb	r3, [r3, #12]
 800585c:	2bff      	cmp	r3, #255	; 0xff
 800585e:	d102      	bne.n	8005866 <_ZN11SW_DEBOUNCE7processEv+0xca>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	611a      	str	r2, [r3, #16]
}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	46bd      	mov	sp, r7
 800586a:	b002      	add	sp, #8
 800586c:	bd80      	pop	{r7, pc}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	00000bb7 	.word	0x00000bb7
 8005874:	00000bb8 	.word	0x00000bb8

08005878 <_ZN7TFT_GFX11getWordSizeEPKc>:

//Public Function Prototypes

//Private Function Definitions
uint8_t TFT_GFX::getWordSize(const char* string)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 8005882:	230f      	movs	r3, #15
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
	while(*string != ' ' && *string != '\0')
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b20      	cmp	r3, #32
 8005890:	d00d      	beq.n	80058ae <_ZN7TFT_GFX11getWordSizeEPKc+0x36>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <_ZN7TFT_GFX11getWordSizeEPKc+0x36>
	{
		counter++;
 800589a:	210f      	movs	r1, #15
 800589c:	187b      	adds	r3, r7, r1
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	187b      	adds	r3, r7, r1
 80058a2:	3201      	adds	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
		string++;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	603b      	str	r3, [r7, #0]
	while(*string != ' ' && *string != '\0')
 80058ac:	e7ed      	b.n	800588a <_ZN7TFT_GFX11getWordSizeEPKc+0x12>
	}
	return counter;
 80058ae:	230f      	movs	r3, #15
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	781b      	ldrb	r3, [r3, #0]
}
 80058b4:	0018      	movs	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b004      	add	sp, #16
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_ZN7TFT_GFX11getLineSizeEPKch>:

uint8_t TFT_GFX::getLineSize(const char* string, uint8_t max_chars_in_line)
{
 80058bc:	b5b0      	push	{r4, r5, r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	1dfb      	adds	r3, r7, #7
 80058c8:	701a      	strb	r2, [r3, #0]
	uint8_t currCharsInLine = 0;
 80058ca:	2317      	movs	r3, #23
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
	bool overFlowed = false;
 80058d2:	2316      	movs	r3, #22
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
	while(*string && !overFlowed)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d03f      	beq.n	8005962 <_ZN7TFT_GFX11getLineSizeEPKch+0xa6>
 80058e2:	2316      	movs	r3, #22
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d13a      	bne.n	8005962 <_ZN7TFT_GFX11getLineSizeEPKch+0xa6>
	{
		uint8_t nextWordSize = this->getWordSize(string);
 80058ec:	2515      	movs	r5, #21
 80058ee:	197c      	adds	r4, r7, r5
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	0011      	movs	r1, r2
 80058f6:	0018      	movs	r0, r3
 80058f8:	f7ff ffbe 	bl	8005878 <_ZN7TFT_GFX11getWordSizeEPKc>
 80058fc:	0003      	movs	r3, r0
 80058fe:	7023      	strb	r3, [r4, #0]
		//This is to account for spaces
		if(nextWordSize == 0)
 8005900:	197b      	adds	r3, r7, r5
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <_ZN7TFT_GFX11getLineSizeEPKch+0x54>
		{
			nextWordSize = 1;
 8005908:	2315      	movs	r3, #21
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	2201      	movs	r2, #1
 800590e:	701a      	strb	r2, [r3, #0]
		}
		//Check if we overflow
		if(currCharsInLine + nextWordSize > max_chars_in_line)
 8005910:	2317      	movs	r3, #23
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	2315      	movs	r3, #21
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	18d2      	adds	r2, r2, r3
 800591e:	1dfb      	adds	r3, r7, #7
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	dd0e      	ble.n	8005944 <_ZN7TFT_GFX11getLineSizeEPKch+0x88>
		{
			if(currCharsInLine == 0)
 8005926:	2317      	movs	r3, #23
 8005928:	18fb      	adds	r3, r7, r3
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <_ZN7TFT_GFX11getLineSizeEPKch+0x7e>
			{
				currCharsInLine = max_chars_in_line;
 8005930:	2317      	movs	r3, #23
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	1dfa      	adds	r2, r7, #7
 8005936:	7812      	ldrb	r2, [r2, #0]
 8005938:	701a      	strb	r2, [r3, #0]
			}
			overFlowed = true;
 800593a:	2316      	movs	r3, #22
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	2201      	movs	r2, #1
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	e7ca      	b.n	80058da <_ZN7TFT_GFX11getLineSizeEPKch+0x1e>
		}else{
			currCharsInLine += nextWordSize;
 8005944:	2217      	movs	r2, #23
 8005946:	18bb      	adds	r3, r7, r2
 8005948:	18b9      	adds	r1, r7, r2
 800594a:	2015      	movs	r0, #21
 800594c:	183a      	adds	r2, r7, r0
 800594e:	7809      	ldrb	r1, [r1, #0]
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	188a      	adds	r2, r1, r2
 8005954:	701a      	strb	r2, [r3, #0]
			string += nextWordSize;
 8005956:	183b      	adds	r3, r7, r0
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	18d3      	adds	r3, r2, r3
 800595e:	60bb      	str	r3, [r7, #8]
	while(*string && !overFlowed)
 8005960:	e7bb      	b.n	80058da <_ZN7TFT_GFX11getLineSizeEPKch+0x1e>
		}
	}
	return currCharsInLine;
 8005962:	2317      	movs	r3, #23
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	781b      	ldrb	r3, [r3, #0]
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b006      	add	sp, #24
 800596e:	bdb0      	pop	{r4, r5, r7, pc}

08005970 <_ZN7TFT_GFX13getStringSizeEPKc>:

uint8_t TFT_GFX::getStringSize(const char* string)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 800597a:	230f      	movs	r3, #15
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
	while(*(string++))
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	603a      	str	r2, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	1e5a      	subs	r2, r3, #1
 800598c:	4193      	sbcs	r3, r2
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <_ZN7TFT_GFX13getStringSizeEPKc+0x32>
	{
		counter++;
 8005994:	210f      	movs	r1, #15
 8005996:	187b      	adds	r3, r7, r1
 8005998:	781a      	ldrb	r2, [r3, #0]
 800599a:	187b      	adds	r3, r7, r1
 800599c:	3201      	adds	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
	while(*(string++))
 80059a0:	e7ef      	b.n	8005982 <_ZN7TFT_GFX13getStringSizeEPKc+0x12>
	}
	return counter;
 80059a2:	230f      	movs	r3, #15
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	781b      	ldrb	r3, [r3, #0]
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b004      	add	sp, #16
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <_ZN7TFT_GFXC1EP11SPI_TypeDef>:
//Public Function Definitions
TFT_GFX::TFT_GFX(SPI_TypeDef *SPIx):
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
spiInstance{SPIx}, _width{ILI9341_TFTWIDTH}, _height{ILI9341_TFTHEIGHT}
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	22f0      	movs	r2, #240	; 0xf0
 80059c4:	809a      	strh	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	22a0      	movs	r2, #160	; 0xa0
 80059ca:	0052      	lsls	r2, r2, #1
 80059cc:	80da      	strh	r2, [r3, #6]
{}
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b002      	add	sp, #8
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <_ZN7TFT_GFX13setAddrWindowEtttt>:

void TFT_GFX::setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 80059d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	000c      	movs	r4, r1
 80059e2:	0010      	movs	r0, r2
 80059e4:	0019      	movs	r1, r3
 80059e6:	250a      	movs	r5, #10
 80059e8:	197b      	adds	r3, r7, r5
 80059ea:	1c22      	adds	r2, r4, #0
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	2608      	movs	r6, #8
 80059f0:	19bb      	adds	r3, r7, r6
 80059f2:	1c02      	adds	r2, r0, #0
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	1dbb      	adds	r3, r7, #6
 80059f8:	1c0a      	adds	r2, r1, #0
 80059fa:	801a      	strh	r2, [r3, #0]
    uint16_t x2 = (x1 + w - 1);
 80059fc:	002c      	movs	r4, r5
 80059fe:	193a      	adds	r2, r7, r4
 8005a00:	1dbb      	adds	r3, r7, #6
 8005a02:	8812      	ldrh	r2, [r2, #0]
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	18d3      	adds	r3, r2, r3
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	2316      	movs	r3, #22
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	3a01      	subs	r2, #1
 8005a10:	801a      	strh	r2, [r3, #0]
    uint16_t y2 = (y1 + h - 1);
 8005a12:	0035      	movs	r5, r6
 8005a14:	197b      	adds	r3, r7, r5
 8005a16:	2228      	movs	r2, #40	; 0x28
 8005a18:	2108      	movs	r1, #8
 8005a1a:	1879      	adds	r1, r7, r1
 8005a1c:	1889      	adds	r1, r1, r2
 8005a1e:	881a      	ldrh	r2, [r3, #0]
 8005a20:	880b      	ldrh	r3, [r1, #0]
 8005a22:	18d3      	adds	r3, r2, r3
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	2614      	movs	r6, #20
 8005a28:	19bb      	adds	r3, r7, r6
 8005a2a:	3a01      	subs	r2, #1
 8005a2c:	801a      	strh	r2, [r3, #0]
	// Set column range.
	hspi_cmd(this->spiInstance, 0x2A);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	212a      	movs	r1, #42	; 0x2a
 8005a34:	0018      	movs	r0, r3
 8005a36:	f000 feba 	bl	80067ae <hspi_cmd>
	hspi_w16(this->spiInstance, x1);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	193b      	adds	r3, r7, r4
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	0019      	movs	r1, r3
 8005a44:	0010      	movs	r0, r2
 8005a46:	f000 fe8f 	bl	8006768 <hspi_w16>
	hspi_w16(this->spiInstance, x2);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	2316      	movs	r3, #22
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	0019      	movs	r1, r3
 8005a56:	0010      	movs	r0, r2
 8005a58:	f000 fe86 	bl	8006768 <hspi_w16>
	
	// Set row range.
	hspi_cmd(this->spiInstance, 0x2B);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	212b      	movs	r1, #43	; 0x2b
 8005a62:	0018      	movs	r0, r3
 8005a64:	f000 fea3 	bl	80067ae <hspi_cmd>
	hspi_w16(this->spiInstance, y1);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	197b      	adds	r3, r7, r5
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	0019      	movs	r1, r3
 8005a72:	0010      	movs	r0, r2
 8005a74:	f000 fe78 	bl	8006768 <hspi_w16>
	hspi_w16(this->spiInstance, y2);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	19bb      	adds	r3, r7, r6
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	0019      	movs	r1, r3
 8005a82:	0010      	movs	r0, r2
 8005a84:	f000 fe70 	bl	8006768 <hspi_w16>
	
	// Set 'write to RAM'
	hspi_cmd(this->spiInstance, 0x2C);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	212c      	movs	r1, #44	; 0x2c
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f000 fe8d 	bl	80067ae <hspi_cmd>
}
 8005a94:	46c0      	nop			; (mov r8, r8)
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b007      	add	sp, #28
 8005a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a9c <_ZN7TFT_GFX10writePixelEsst>:

void TFT_GFX::writePixel(int16_t x, int16_t y, uint16_t color) 
{
 8005a9c:	b5b0      	push	{r4, r5, r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	000c      	movs	r4, r1
 8005aa6:	0010      	movs	r0, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	250a      	movs	r5, #10
 8005aac:	197b      	adds	r3, r7, r5
 8005aae:	1c22      	adds	r2, r4, #0
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	1c02      	adds	r2, r0, #0
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	1dbb      	adds	r3, r7, #6
 8005abc:	1c0a      	adds	r2, r1, #0
 8005abe:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && (y >= 0) && (y < this->_height)) 
 8005ac0:	197b      	adds	r3, r7, r5
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	db29      	blt.n	8005b1e <_ZN7TFT_GFX10writePixelEsst+0x82>
 8005aca:	230a      	movs	r3, #10
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	2200      	movs	r2, #0
 8005ad0:	5e9b      	ldrsh	r3, [r3, r2]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	8892      	ldrh	r2, [r2, #4]
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	da21      	bge.n	8005b1e <_ZN7TFT_GFX10writePixelEsst+0x82>
 8005ada:	2308      	movs	r3, #8
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	2200      	movs	r2, #0
 8005ae0:	5e9b      	ldrsh	r3, [r3, r2]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	db1b      	blt.n	8005b1e <_ZN7TFT_GFX10writePixelEsst+0x82>
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	2200      	movs	r2, #0
 8005aec:	5e9b      	ldrsh	r3, [r3, r2]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	88d2      	ldrh	r2, [r2, #6]
 8005af2:	4293      	cmp	r3, r2
 8005af4:	da13      	bge.n	8005b1e <_ZN7TFT_GFX10writePixelEsst+0x82>
    {
        setAddrWindow(x, y, 1, 1);
 8005af6:	230a      	movs	r3, #10
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	8819      	ldrh	r1, [r3, #0]
 8005afc:	2308      	movs	r3, #8
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	881a      	ldrh	r2, [r3, #0]
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	2301      	movs	r3, #1
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f7ff ff65 	bl	80059d8 <_ZN7TFT_GFX13setAddrWindowEtttt>
        hspi_w16(this->spiInstance, color);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	1dbb      	adds	r3, r7, #6
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	0019      	movs	r1, r3
 8005b18:	0010      	movs	r0, r2
 8005b1a:	f000 fe25 	bl	8006768 <hspi_w16>
    }
}
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	46bd      	mov	sp, r7
 8005b22:	b004      	add	sp, #16
 8005b24:	bdb0      	pop	{r4, r5, r7, pc}

08005b26 <_ZN7TFT_GFX13writeFillRectEsssst>:

void TFT_GFX::writeFillRect(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 8005b26:	b5b0      	push	{r4, r5, r7, lr}
 8005b28:	b088      	sub	sp, #32
 8005b2a:	af02      	add	r7, sp, #8
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	000c      	movs	r4, r1
 8005b30:	0010      	movs	r0, r2
 8005b32:	0019      	movs	r1, r3
 8005b34:	230a      	movs	r3, #10
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	1c22      	adds	r2, r4, #0
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	1c02      	adds	r2, r0, #0
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	1dbb      	adds	r3, r7, #6
 8005b46:	1c0a      	adds	r2, r1, #0
 8005b48:	801a      	strh	r2, [r3, #0]
    if(w && h) {                            // Nonzero width and height?
 8005b4a:	1dbb      	adds	r3, r7, #6
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	5e9b      	ldrsh	r3, [r3, r2]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d100      	bne.n	8005b56 <_ZN7TFT_GFX13writeFillRectEsssst+0x30>
 8005b54:	e0c8      	b.n	8005ce8 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
 8005b56:	2328      	movs	r3, #40	; 0x28
 8005b58:	18fb      	adds	r3, r7, r3
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	5e9b      	ldrsh	r3, [r3, r2]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d100      	bne.n	8005b64 <_ZN7TFT_GFX13writeFillRectEsssst+0x3e>
 8005b62:	e0c1      	b.n	8005ce8 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
        if(w < 0) {                         // If negative width...
 8005b64:	1dbb      	adds	r3, r7, #6
 8005b66:	2200      	movs	r2, #0
 8005b68:	5e9b      	ldrsh	r3, [r3, r2]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	da10      	bge.n	8005b90 <_ZN7TFT_GFX13writeFillRectEsssst+0x6a>
            x +=  w + 1;                    //   Move X to left edge
 8005b6e:	1dbb      	adds	r3, r7, #6
 8005b70:	881a      	ldrh	r2, [r3, #0]
 8005b72:	210a      	movs	r1, #10
 8005b74:	187b      	adds	r3, r7, r1
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	18d3      	adds	r3, r2, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	187b      	adds	r3, r7, r1
 8005b82:	801a      	strh	r2, [r3, #0]
            w  = -w;                        //   Use positive width
 8005b84:	1dbb      	adds	r3, r7, #6
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	425b      	negs	r3, r3
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	1dbb      	adds	r3, r7, #6
 8005b8e:	801a      	strh	r2, [r3, #0]
        }
        if(x < this->_width) {                    // Not off right
 8005b90:	230a      	movs	r3, #10
 8005b92:	18fb      	adds	r3, r7, r3
 8005b94:	2200      	movs	r2, #0
 8005b96:	5e9b      	ldrsh	r3, [r3, r2]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	8892      	ldrh	r2, [r2, #4]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	db00      	blt.n	8005ba2 <_ZN7TFT_GFX13writeFillRectEsssst+0x7c>
 8005ba0:	e0a2      	b.n	8005ce8 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
            if(h < 0) {                     // If negative height...
 8005ba2:	2328      	movs	r3, #40	; 0x28
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	5e9b      	ldrsh	r3, [r3, r2]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da11      	bge.n	8005bd2 <_ZN7TFT_GFX13writeFillRectEsssst+0xac>
                y +=  h + 1;                //   Move Y to top edge
 8005bae:	2128      	movs	r1, #40	; 0x28
 8005bb0:	187b      	adds	r3, r7, r1
 8005bb2:	881a      	ldrh	r2, [r3, #0]
 8005bb4:	2008      	movs	r0, #8
 8005bb6:	183b      	adds	r3, r7, r0
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	18d3      	adds	r3, r2, r3
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	183b      	adds	r3, r7, r0
 8005bc4:	801a      	strh	r2, [r3, #0]
                h  = -h;                    //   Use positive height
 8005bc6:	187b      	adds	r3, r7, r1
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	425b      	negs	r3, r3
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	187b      	adds	r3, r7, r1
 8005bd0:	801a      	strh	r2, [r3, #0]
            }
            if(y < this->_height) {               // Not off bottom
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	5e9b      	ldrsh	r3, [r3, r2]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	88d2      	ldrh	r2, [r2, #6]
 8005bde:	4293      	cmp	r3, r2
 8005be0:	db00      	blt.n	8005be4 <_ZN7TFT_GFX13writeFillRectEsssst+0xbe>
 8005be2:	e081      	b.n	8005ce8 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                int16_t x2 = x + w - 1;
 8005be4:	230a      	movs	r3, #10
 8005be6:	18fb      	adds	r3, r7, r3
 8005be8:	881a      	ldrh	r2, [r3, #0]
 8005bea:	1dbb      	adds	r3, r7, #6
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	18d3      	adds	r3, r2, r3
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	2116      	movs	r1, #22
 8005bf8:	187b      	adds	r3, r7, r1
 8005bfa:	801a      	strh	r2, [r3, #0]
                if(x2 >= 0) {               // Not off left
 8005bfc:	187b      	adds	r3, r7, r1
 8005bfe:	2200      	movs	r2, #0
 8005c00:	5e9b      	ldrsh	r3, [r3, r2]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	da00      	bge.n	8005c08 <_ZN7TFT_GFX13writeFillRectEsssst+0xe2>
 8005c06:	e06f      	b.n	8005ce8 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                    int16_t y2 = y + h - 1;
 8005c08:	2308      	movs	r3, #8
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	881a      	ldrh	r2, [r3, #0]
 8005c0e:	2328      	movs	r3, #40	; 0x28
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	18d3      	adds	r3, r2, r3
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	2114      	movs	r1, #20
 8005c1e:	187b      	adds	r3, r7, r1
 8005c20:	801a      	strh	r2, [r3, #0]
                    if(y2 >= 0) {           // Not off top
 8005c22:	187b      	adds	r3, r7, r1
 8005c24:	2200      	movs	r2, #0
 8005c26:	5e9b      	ldrsh	r3, [r3, r2]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	db5d      	blt.n	8005ce8 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                        // Rectangle partly or fully overlaps screen
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 8005c2c:	230a      	movs	r3, #10
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	2200      	movs	r2, #0
 8005c32:	5e9b      	ldrsh	r3, [r3, r2]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	da0a      	bge.n	8005c4e <_ZN7TFT_GFX13writeFillRectEsssst+0x128>
 8005c38:	230a      	movs	r3, #10
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	2316      	movs	r3, #22
 8005c42:	18fb      	adds	r3, r7, r3
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	1dbb      	adds	r3, r7, #6
 8005c4c:	801a      	strh	r2, [r3, #0]
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8005c4e:	2308      	movs	r3, #8
 8005c50:	18fb      	adds	r3, r7, r3
 8005c52:	2200      	movs	r2, #0
 8005c54:	5e9b      	ldrsh	r3, [r3, r2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da0b      	bge.n	8005c72 <_ZN7TFT_GFX13writeFillRectEsssst+0x14c>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	18fb      	adds	r3, r7, r3
 8005c5e:	2200      	movs	r2, #0
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	2314      	movs	r3, #20
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	2328      	movs	r3, #40	; 0x28
 8005c6e:	18fb      	adds	r3, r7, r3
 8005c70:	801a      	strh	r2, [r3, #0]
                        if(x2 >= this->_width)  { w = this->_width  - x;   } // Clip right
 8005c72:	2316      	movs	r3, #22
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	2200      	movs	r2, #0
 8005c78:	5e9b      	ldrsh	r3, [r3, r2]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	8892      	ldrh	r2, [r2, #4]
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	db08      	blt.n	8005c94 <_ZN7TFT_GFX13writeFillRectEsssst+0x16e>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	889a      	ldrh	r2, [r3, #4]
 8005c86:	230a      	movs	r3, #10
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	1dbb      	adds	r3, r7, #6
 8005c92:	801a      	strh	r2, [r3, #0]
                        if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 8005c94:	2314      	movs	r3, #20
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	2200      	movs	r2, #0
 8005c9a:	5e9b      	ldrsh	r3, [r3, r2]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	88d2      	ldrh	r2, [r2, #6]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	db09      	blt.n	8005cb8 <_ZN7TFT_GFX13writeFillRectEsssst+0x192>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	88da      	ldrh	r2, [r3, #6]
 8005ca8:	2308      	movs	r3, #8
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	2328      	movs	r3, #40	; 0x28
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	801a      	strh	r2, [r3, #0]
                        writeFillRectPreclipped(x, y, w, h, color);
 8005cb8:	1dbb      	adds	r3, r7, #6
 8005cba:	2400      	movs	r4, #0
 8005cbc:	5f1c      	ldrsh	r4, [r3, r4]
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	5e9a      	ldrsh	r2, [r3, r2]
 8005cc6:	230a      	movs	r3, #10
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	2100      	movs	r1, #0
 8005ccc:	5e59      	ldrsh	r1, [r3, r1]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	232c      	movs	r3, #44	; 0x2c
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	2328      	movs	r3, #40	; 0x28
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	2500      	movs	r5, #0
 8005cde:	5f5b      	ldrsh	r3, [r3, r5]
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	0023      	movs	r3, r4
 8005ce4:	f000 f804 	bl	8005cf0 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
                    }
                }
            }
        }
    }
}
 8005ce8:	46c0      	nop			; (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b006      	add	sp, #24
 8005cee:	bdb0      	pop	{r4, r5, r7, pc}

08005cf0 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>:

inline void TFT_GFX::writeFillRectPreclipped(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 8005cf0:	b5b0      	push	{r4, r5, r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	000c      	movs	r4, r1
 8005cfa:	0010      	movs	r0, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	250a      	movs	r5, #10
 8005d00:	197b      	adds	r3, r7, r5
 8005d02:	1c22      	adds	r2, r4, #0
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	2408      	movs	r4, #8
 8005d08:	193b      	adds	r3, r7, r4
 8005d0a:	1c02      	adds	r2, r0, #0
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	1dbb      	adds	r3, r7, #6
 8005d10:	1c0a      	adds	r2, r1, #0
 8005d12:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, w, h);
 8005d14:	197b      	adds	r3, r7, r5
 8005d16:	8819      	ldrh	r1, [r3, #0]
 8005d18:	193b      	adds	r3, r7, r4
 8005d1a:	881a      	ldrh	r2, [r3, #0]
 8005d1c:	1dbb      	adds	r3, r7, #6
 8005d1e:	881c      	ldrh	r4, [r3, #0]
 8005d20:	2520      	movs	r5, #32
 8005d22:	197b      	adds	r3, r7, r5
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	0023      	movs	r3, r4
 8005d2c:	f7ff fe54 	bl	80059d8 <_ZN7TFT_GFX13setAddrWindowEtttt>
    writeColor(color, (uint32_t)w * h);
 8005d30:	1dbb      	adds	r3, r7, #6
 8005d32:	2200      	movs	r2, #0
 8005d34:	5e9b      	ldrsh	r3, [r3, r2]
 8005d36:	197a      	adds	r2, r7, r5
 8005d38:	2100      	movs	r1, #0
 8005d3a:	5e52      	ldrsh	r2, [r2, r1]
 8005d3c:	435a      	muls	r2, r3
 8005d3e:	2324      	movs	r3, #36	; 0x24
 8005d40:	18fb      	adds	r3, r7, r3
 8005d42:	8819      	ldrh	r1, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	0018      	movs	r0, r3
 8005d48:	f000 f804 	bl	8005d54 <_ZN7TFT_GFX10writeColorEtm>
}
 8005d4c:	46c0      	nop			; (mov r8, r8)
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b004      	add	sp, #16
 8005d52:	bdb0      	pop	{r4, r5, r7, pc}

08005d54 <_ZN7TFT_GFX10writeColorEtm>:

void TFT_GFX::writeColor(uint16_t color, uint32_t len){
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	230a      	movs	r3, #10
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	1c0a      	adds	r2, r1, #0
 8005d64:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++){
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d20c      	bcs.n	8005d8c <_ZN7TFT_GFX10writeColorEtm+0x38>
		hspi_w16(this->spiInstance, color);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	230a      	movs	r3, #10
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	0010      	movs	r0, r2
 8005d80:	f000 fcf2 	bl	8006768 <hspi_w16>
	for(uint32_t i = 0; i < len; i++){
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3301      	adds	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	e7ee      	b.n	8005d6a <_ZN7TFT_GFX10writeColorEtm+0x16>
	}
}
 8005d8c:	46c0      	nop			; (mov r8, r8)
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b006      	add	sp, #24
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <_ZN7TFT_GFX14writeFastVLineEssst>:

void inline TFT_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8005d94:	b5b0      	push	{r4, r5, r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	000c      	movs	r4, r1
 8005d9e:	0010      	movs	r0, r2
 8005da0:	0019      	movs	r1, r3
 8005da2:	250a      	movs	r5, #10
 8005da4:	197b      	adds	r3, r7, r5
 8005da6:	1c22      	adds	r2, r4, #0
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	2308      	movs	r3, #8
 8005dac:	18fb      	adds	r3, r7, r3
 8005dae:	1c02      	adds	r2, r0, #0
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	1dbb      	adds	r3, r7, #6
 8005db4:	1c0a      	adds	r2, r1, #0
 8005db6:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && h) { // X on screen, nonzero height
 8005db8:	197b      	adds	r3, r7, r5
 8005dba:	2200      	movs	r2, #0
 8005dbc:	5e9b      	ldrsh	r3, [r3, r2]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	da00      	bge.n	8005dc4 <_ZN7TFT_GFX14writeFastVLineEssst+0x30>
 8005dc2:	e072      	b.n	8005eaa <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 8005dc4:	230a      	movs	r3, #10
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	2200      	movs	r2, #0
 8005dca:	5e9b      	ldrsh	r3, [r3, r2]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	8892      	ldrh	r2, [r2, #4]
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	db00      	blt.n	8005dd6 <_ZN7TFT_GFX14writeFastVLineEssst+0x42>
 8005dd4:	e069      	b.n	8005eaa <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 8005dd6:	1dbb      	adds	r3, r7, #6
 8005dd8:	2200      	movs	r2, #0
 8005dda:	5e9b      	ldrsh	r3, [r3, r2]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d064      	beq.n	8005eaa <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
        if(h < 0) {                     // If negative height...
 8005de0:	1dbb      	adds	r3, r7, #6
 8005de2:	2200      	movs	r2, #0
 8005de4:	5e9b      	ldrsh	r3, [r3, r2]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da10      	bge.n	8005e0c <_ZN7TFT_GFX14writeFastVLineEssst+0x78>
            y +=  h + 1;                //   Move Y to top edge
 8005dea:	1dbb      	adds	r3, r7, #6
 8005dec:	881a      	ldrh	r2, [r3, #0]
 8005dee:	2108      	movs	r1, #8
 8005df0:	187b      	adds	r3, r7, r1
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	18d3      	adds	r3, r2, r3
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3301      	adds	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	187b      	adds	r3, r7, r1
 8005dfe:	801a      	strh	r2, [r3, #0]
            h  = -h;                    //   Use positive height
 8005e00:	1dbb      	adds	r3, r7, #6
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	425b      	negs	r3, r3
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	1dbb      	adds	r3, r7, #6
 8005e0a:	801a      	strh	r2, [r3, #0]
        }
        if(y < this->_height) {               // Not off bottom
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	18fb      	adds	r3, r7, r3
 8005e10:	2200      	movs	r2, #0
 8005e12:	5e9b      	ldrsh	r3, [r3, r2]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	88d2      	ldrh	r2, [r2, #6]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	da46      	bge.n	8005eaa <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
            int16_t y2 = y + h - 1;
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	881a      	ldrh	r2, [r3, #0]
 8005e22:	1dbb      	adds	r3, r7, #6
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	18d3      	adds	r3, r2, r3
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	2116      	movs	r1, #22
 8005e30:	187b      	adds	r3, r7, r1
 8005e32:	801a      	strh	r2, [r3, #0]
            if(y2 >= 0) {               // Not off top
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	2200      	movs	r2, #0
 8005e38:	5e9b      	ldrsh	r3, [r3, r2]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	db35      	blt.n	8005eaa <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
                // Line partly or fully overlaps screen
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8005e3e:	2308      	movs	r3, #8
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	2200      	movs	r2, #0
 8005e44:	5e9b      	ldrsh	r3, [r3, r2]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da0a      	bge.n	8005e60 <_ZN7TFT_GFX14writeFastVLineEssst+0xcc>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	2200      	movs	r2, #0
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	2316      	movs	r3, #22
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	1dbb      	adds	r3, r7, #6
 8005e5e:	801a      	strh	r2, [r3, #0]
                if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 8005e60:	2316      	movs	r3, #22
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	2200      	movs	r2, #0
 8005e66:	5e9b      	ldrsh	r3, [r3, r2]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	88d2      	ldrh	r2, [r2, #6]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	db08      	blt.n	8005e82 <_ZN7TFT_GFX14writeFastVLineEssst+0xee>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88da      	ldrh	r2, [r3, #6]
 8005e74:	2308      	movs	r3, #8
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	1dbb      	adds	r3, r7, #6
 8005e80:	801a      	strh	r2, [r3, #0]
                writeFillRectPreclipped(x, y, 1, h, color);
 8005e82:	2308      	movs	r3, #8
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	2200      	movs	r2, #0
 8005e88:	5e9a      	ldrsh	r2, [r3, r2]
 8005e8a:	230a      	movs	r3, #10
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	2100      	movs	r1, #0
 8005e90:	5e59      	ldrsh	r1, [r3, r1]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	2328      	movs	r3, #40	; 0x28
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	1dbb      	adds	r3, r7, #6
 8005e9e:	2400      	movs	r4, #0
 8005ea0:	5f1b      	ldrsh	r3, [r3, r4]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f7ff ff23 	bl	8005cf0 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
            }
        }
    }
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b006      	add	sp, #24
 8005eb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005eb4 <_ZN7TFT_GFX8drawCharEsshtthh>:
        }
    }
}

void TFT_GFX::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) 
{
 8005eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb6:	b089      	sub	sp, #36	; 0x24
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	000c      	movs	r4, r1
 8005ebe:	0010      	movs	r0, r2
 8005ec0:	0019      	movs	r1, r3
 8005ec2:	250a      	movs	r5, #10
 8005ec4:	197b      	adds	r3, r7, r5
 8005ec6:	1c22      	adds	r2, r4, #0
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	2308      	movs	r3, #8
 8005ecc:	18fb      	adds	r3, r7, r3
 8005ece:	1c02      	adds	r2, r0, #0
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	1dfb      	adds	r3, r7, #7
 8005ed4:	1c0a      	adds	r2, r1, #0
 8005ed6:	701a      	strb	r2, [r3, #0]
    if((x >= this->_width)            || // Clip right
 8005ed8:	197b      	adds	r3, r7, r5
 8005eda:	2200      	movs	r2, #0
 8005edc:	5e9b      	ldrsh	r3, [r3, r2]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	8892      	ldrh	r2, [r2, #4]
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	db00      	blt.n	8005ee8 <_ZN7TFT_GFX8drawCharEsshtthh+0x34>
 8005ee6:	e1c2      	b.n	800626e <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        (y >= this->_height)           || // Clip bottom
 8005ee8:	2308      	movs	r3, #8
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	2200      	movs	r2, #0
 8005eee:	5e9b      	ldrsh	r3, [r3, r2]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	88d2      	ldrh	r2, [r2, #6]
    if((x >= this->_width)            || // Clip right
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	db00      	blt.n	8005efa <_ZN7TFT_GFX8drawCharEsshtthh+0x46>
 8005ef8:	e1b9      	b.n	800626e <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8005efa:	230a      	movs	r3, #10
 8005efc:	18fb      	adds	r3, r7, r3
 8005efe:	2100      	movs	r1, #0
 8005f00:	5e59      	ldrsh	r1, [r3, r1]
 8005f02:	2330      	movs	r3, #48	; 0x30
 8005f04:	2208      	movs	r2, #8
 8005f06:	4694      	mov	ip, r2
 8005f08:	44bc      	add	ip, r7
 8005f0a:	4463      	add	r3, ip
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	0013      	movs	r3, r2
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	189b      	adds	r3, r3, r2
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	18cb      	adds	r3, r1, r3
 8005f18:	3b01      	subs	r3, #1
        (y >= this->_height)           || // Clip bottom
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	da00      	bge.n	8005f20 <_ZN7TFT_GFX8drawCharEsshtthh+0x6c>
 8005f1e:	e1a6      	b.n	800626e <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8005f20:	2308      	movs	r3, #8
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	2200      	movs	r2, #0
 8005f26:	5e9a      	ldrsh	r2, [r3, r2]
 8005f28:	2334      	movs	r3, #52	; 0x34
 8005f2a:	2108      	movs	r1, #8
 8005f2c:	468c      	mov	ip, r1
 8005f2e:	44bc      	add	ip, r7
 8005f30:	4463      	add	r3, ip
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	18d3      	adds	r3, r2, r3
 8005f38:	3b01      	subs	r3, #1
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da00      	bge.n	8005f40 <_ZN7TFT_GFX8drawCharEsshtthh+0x8c>
 8005f3e:	e196      	b.n	800626e <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        return;

    if(c >= 176) c++; // Handle 'classic' charset behavior
 8005f40:	1dfb      	adds	r3, r7, #7
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2baf      	cmp	r3, #175	; 0xaf
 8005f46:	d904      	bls.n	8005f52 <_ZN7TFT_GFX8drawCharEsshtthh+0x9e>
 8005f48:	1dfb      	adds	r3, r7, #7
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	1dfb      	adds	r3, r7, #7
 8005f4e:	3201      	adds	r2, #1
 8005f50:	701a      	strb	r2, [r3, #0]

    //startWrite();
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8005f52:	2317      	movs	r3, #23
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	2317      	movs	r3, #23
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	dd00      	ble.n	8005f68 <_ZN7TFT_GFX8drawCharEsshtthh+0xb4>
 8005f66:	e11f      	b.n	80061a8 <_ZN7TFT_GFX8drawCharEsshtthh+0x2f4>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8005f68:	1dfb      	adds	r3, r7, #7
 8005f6a:	781a      	ldrb	r2, [r3, #0]
 8005f6c:	0013      	movs	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	189a      	adds	r2, r3, r2
 8005f72:	2317      	movs	r3, #23
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b25b      	sxtb	r3, r3
 8005f7a:	18d2      	adds	r2, r2, r3
 8005f7c:	2316      	movs	r3, #22
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	49bd      	ldr	r1, [pc, #756]	; (8006278 <_ZN7TFT_GFX8drawCharEsshtthh+0x3c4>)
 8005f82:	5c8a      	ldrb	r2, [r1, r2]
 8005f84:	701a      	strb	r2, [r3, #0]
        for(int8_t j=0; j<8; j++, line >>= 1) {
 8005f86:	2315      	movs	r3, #21
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	2315      	movs	r3, #21
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b25b      	sxtb	r3, r3
 8005f96:	2b07      	cmp	r3, #7
 8005f98:	dd00      	ble.n	8005f9c <_ZN7TFT_GFX8drawCharEsshtthh+0xe8>
 8005f9a:	e0fb      	b.n	8006194 <_ZN7TFT_GFX8drawCharEsshtthh+0x2e0>
            if(line & 1) {
 8005f9c:	2316      	movs	r3, #22
 8005f9e:	18fb      	adds	r3, r7, r3
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d06c      	beq.n	8006082 <_ZN7TFT_GFX8drawCharEsshtthh+0x1ce>
                if(size_x == 1 && size_y == 1)
 8005fa8:	2330      	movs	r3, #48	; 0x30
 8005faa:	2208      	movs	r2, #8
 8005fac:	4694      	mov	ip, r2
 8005fae:	44bc      	add	ip, r7
 8005fb0:	4463      	add	r3, ip
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d127      	bne.n	8006008 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
 8005fb8:	2334      	movs	r3, #52	; 0x34
 8005fba:	2208      	movs	r2, #8
 8005fbc:	4694      	mov	ip, r2
 8005fbe:	44bc      	add	ip, r7
 8005fc0:	4463      	add	r3, ip
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d11f      	bne.n	8006008 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
                    writePixel(x+i, y+j, color);
 8005fc8:	2317      	movs	r3, #23
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	18d3      	adds	r3, r2, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b219      	sxth	r1, r3
 8005fde:	2315      	movs	r3, #21
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	b25b      	sxtb	r3, r3
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	2308      	movs	r3, #8
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	18d3      	adds	r3, r2, r3
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	b21a      	sxth	r2, r3
 8005ff4:	2328      	movs	r3, #40	; 0x28
 8005ff6:	2008      	movs	r0, #8
 8005ff8:	4684      	mov	ip, r0
 8005ffa:	44bc      	add	ip, r7
 8005ffc:	4463      	add	r3, ip
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff fd4b 	bl	8005a9c <_ZN7TFT_GFX10writePixelEsst>
 8006006:	e0b5      	b.n	8006174 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 8006008:	2317      	movs	r3, #23
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b25b      	sxtb	r3, r3
 8006010:	b29b      	uxth	r3, r3
 8006012:	2030      	movs	r0, #48	; 0x30
 8006014:	2408      	movs	r4, #8
 8006016:	193a      	adds	r2, r7, r4
 8006018:	1812      	adds	r2, r2, r0
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	b292      	uxth	r2, r2
 800601e:	4353      	muls	r3, r2
 8006020:	b29a      	uxth	r2, r3
 8006022:	230a      	movs	r3, #10
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	18d3      	adds	r3, r2, r3
 800602a:	b29b      	uxth	r3, r3
 800602c:	b219      	sxth	r1, r3
 800602e:	2315      	movs	r3, #21
 8006030:	18fb      	adds	r3, r7, r3
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	b25b      	sxtb	r3, r3
 8006036:	b29b      	uxth	r3, r3
 8006038:	2634      	movs	r6, #52	; 0x34
 800603a:	193a      	adds	r2, r7, r4
 800603c:	1992      	adds	r2, r2, r6
 800603e:	7812      	ldrb	r2, [r2, #0]
 8006040:	b292      	uxth	r2, r2
 8006042:	4353      	muls	r3, r2
 8006044:	b29a      	uxth	r2, r3
 8006046:	0023      	movs	r3, r4
 8006048:	001d      	movs	r5, r3
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	18d3      	adds	r3, r2, r3
 8006050:	b29b      	uxth	r3, r3
 8006052:	b21c      	sxth	r4, r3
 8006054:	002a      	movs	r2, r5
 8006056:	18bb      	adds	r3, r7, r2
 8006058:	181b      	adds	r3, r3, r0
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	b21d      	sxth	r5, r3
 800605e:	18bb      	adds	r3, r7, r2
 8006060:	199b      	adds	r3, r3, r6
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	b21b      	sxth	r3, r3
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	2228      	movs	r2, #40	; 0x28
 800606a:	2608      	movs	r6, #8
 800606c:	46b4      	mov	ip, r6
 800606e:	44bc      	add	ip, r7
 8006070:	4462      	add	r2, ip
 8006072:	8812      	ldrh	r2, [r2, #0]
 8006074:	9201      	str	r2, [sp, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	002b      	movs	r3, r5
 800607a:	0022      	movs	r2, r4
 800607c:	f7ff fd53 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>
 8006080:	e078      	b.n	8006174 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
            } else if(bg != color) {
 8006082:	232c      	movs	r3, #44	; 0x2c
 8006084:	2208      	movs	r2, #8
 8006086:	4694      	mov	ip, r2
 8006088:	44bc      	add	ip, r7
 800608a:	4463      	add	r3, ip
 800608c:	2228      	movs	r2, #40	; 0x28
 800608e:	2108      	movs	r1, #8
 8006090:	1879      	adds	r1, r7, r1
 8006092:	1889      	adds	r1, r1, r2
 8006094:	881a      	ldrh	r2, [r3, #0]
 8006096:	880b      	ldrh	r3, [r1, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d06b      	beq.n	8006174 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                if(size_x == 1 && size_y == 1)
 800609c:	2330      	movs	r3, #48	; 0x30
 800609e:	2208      	movs	r2, #8
 80060a0:	4694      	mov	ip, r2
 80060a2:	44bc      	add	ip, r7
 80060a4:	4463      	add	r3, ip
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d127      	bne.n	80060fc <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
 80060ac:	2334      	movs	r3, #52	; 0x34
 80060ae:	2208      	movs	r2, #8
 80060b0:	4694      	mov	ip, r2
 80060b2:	44bc      	add	ip, r7
 80060b4:	4463      	add	r3, ip
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d11f      	bne.n	80060fc <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
                    writePixel(x+i, y+j, bg);
 80060bc:	2317      	movs	r3, #23
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	230a      	movs	r3, #10
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	18d3      	adds	r3, r2, r3
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	b219      	sxth	r1, r3
 80060d2:	2315      	movs	r3, #21
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	b25b      	sxtb	r3, r3
 80060da:	b29a      	uxth	r2, r3
 80060dc:	2308      	movs	r3, #8
 80060de:	18fb      	adds	r3, r7, r3
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	18d3      	adds	r3, r2, r3
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b21a      	sxth	r2, r3
 80060e8:	232c      	movs	r3, #44	; 0x2c
 80060ea:	2008      	movs	r0, #8
 80060ec:	4684      	mov	ip, r0
 80060ee:	44bc      	add	ip, r7
 80060f0:	4463      	add	r3, ip
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff fcd1 	bl	8005a9c <_ZN7TFT_GFX10writePixelEsst>
 80060fa:	e03b      	b.n	8006174 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80060fc:	2317      	movs	r3, #23
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	b25b      	sxtb	r3, r3
 8006104:	b29b      	uxth	r3, r3
 8006106:	2030      	movs	r0, #48	; 0x30
 8006108:	2408      	movs	r4, #8
 800610a:	193a      	adds	r2, r7, r4
 800610c:	1812      	adds	r2, r2, r0
 800610e:	7812      	ldrb	r2, [r2, #0]
 8006110:	b292      	uxth	r2, r2
 8006112:	4353      	muls	r3, r2
 8006114:	b29a      	uxth	r2, r3
 8006116:	230a      	movs	r3, #10
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	18d3      	adds	r3, r2, r3
 800611e:	b29b      	uxth	r3, r3
 8006120:	b219      	sxth	r1, r3
 8006122:	2315      	movs	r3, #21
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b25b      	sxtb	r3, r3
 800612a:	b29b      	uxth	r3, r3
 800612c:	2634      	movs	r6, #52	; 0x34
 800612e:	193a      	adds	r2, r7, r4
 8006130:	1992      	adds	r2, r2, r6
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	b292      	uxth	r2, r2
 8006136:	4353      	muls	r3, r2
 8006138:	b29a      	uxth	r2, r3
 800613a:	0023      	movs	r3, r4
 800613c:	001d      	movs	r5, r3
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	18d3      	adds	r3, r2, r3
 8006144:	b29b      	uxth	r3, r3
 8006146:	b21c      	sxth	r4, r3
 8006148:	002a      	movs	r2, r5
 800614a:	18bb      	adds	r3, r7, r2
 800614c:	181b      	adds	r3, r3, r0
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	b21d      	sxth	r5, r3
 8006152:	18bb      	adds	r3, r7, r2
 8006154:	199b      	adds	r3, r3, r6
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b21b      	sxth	r3, r3
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	222c      	movs	r2, #44	; 0x2c
 800615e:	2608      	movs	r6, #8
 8006160:	46b4      	mov	ip, r6
 8006162:	44bc      	add	ip, r7
 8006164:	4462      	add	r2, ip
 8006166:	8812      	ldrh	r2, [r2, #0]
 8006168:	9201      	str	r2, [sp, #4]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	002b      	movs	r3, r5
 800616e:	0022      	movs	r2, r4
 8006170:	f7ff fcd9 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>
        for(int8_t j=0; j<8; j++, line >>= 1) {
 8006174:	2115      	movs	r1, #21
 8006176:	187b      	adds	r3, r7, r1
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b25b      	sxtb	r3, r3
 800617c:	b2db      	uxtb	r3, r3
 800617e:	3301      	adds	r3, #1
 8006180:	b2da      	uxtb	r2, r3
 8006182:	187b      	adds	r3, r7, r1
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	2116      	movs	r1, #22
 8006188:	187b      	adds	r3, r7, r1
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	105a      	asrs	r2, r3, #1
 800618e:	187b      	adds	r3, r7, r1
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e6fc      	b.n	8005f8e <_ZN7TFT_GFX8drawCharEsshtthh+0xda>
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8006194:	2117      	movs	r1, #23
 8006196:	187b      	adds	r3, r7, r1
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	b25b      	sxtb	r3, r3
 800619c:	b2db      	uxtb	r3, r3
 800619e:	3301      	adds	r3, #1
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	187b      	adds	r3, r7, r1
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	e6d8      	b.n	8005f5a <_ZN7TFT_GFX8drawCharEsshtthh+0xa6>
            }
        }
    }
    if(bg != color) { // If opaque, draw vertical line for last column
 80061a8:	232c      	movs	r3, #44	; 0x2c
 80061aa:	2208      	movs	r2, #8
 80061ac:	4694      	mov	ip, r2
 80061ae:	44bc      	add	ip, r7
 80061b0:	4463      	add	r3, ip
 80061b2:	2228      	movs	r2, #40	; 0x28
 80061b4:	2108      	movs	r1, #8
 80061b6:	1879      	adds	r1, r7, r1
 80061b8:	1889      	adds	r1, r1, r2
 80061ba:	881a      	ldrh	r2, [r3, #0]
 80061bc:	880b      	ldrh	r3, [r1, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d056      	beq.n	8006270 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 80061c2:	2330      	movs	r3, #48	; 0x30
 80061c4:	2208      	movs	r2, #8
 80061c6:	4694      	mov	ip, r2
 80061c8:	44bc      	add	ip, r7
 80061ca:	4463      	add	r3, ip
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d11d      	bne.n	800620e <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 80061d2:	2334      	movs	r3, #52	; 0x34
 80061d4:	2208      	movs	r2, #8
 80061d6:	4694      	mov	ip, r2
 80061d8:	44bc      	add	ip, r7
 80061da:	4463      	add	r3, ip
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d115      	bne.n	800620e <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 80061e2:	230a      	movs	r3, #10
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	3305      	adds	r3, #5
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	b219      	sxth	r1, r3
 80061ee:	2308      	movs	r3, #8
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	2200      	movs	r2, #0
 80061f4:	5e9a      	ldrsh	r2, [r3, r2]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	232c      	movs	r3, #44	; 0x2c
 80061fa:	2408      	movs	r4, #8
 80061fc:	46a4      	mov	ip, r4
 80061fe:	44bc      	add	ip, r7
 8006200:	4463      	add	r3, ip
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	2308      	movs	r3, #8
 8006208:	f7ff fdc4 	bl	8005d94 <_ZN7TFT_GFX14writeFastVLineEssst>
 800620c:	e030      	b.n	8006270 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 800620e:	2030      	movs	r0, #48	; 0x30
 8006210:	2408      	movs	r4, #8
 8006212:	193b      	adds	r3, r7, r4
 8006214:	181b      	adds	r3, r3, r0
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	1c1a      	adds	r2, r3, #0
 800621c:	0092      	lsls	r2, r2, #2
 800621e:	18d3      	adds	r3, r2, r3
 8006220:	b29a      	uxth	r2, r3
 8006222:	230a      	movs	r3, #10
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	18d3      	adds	r3, r2, r3
 800622a:	b29b      	uxth	r3, r3
 800622c:	b219      	sxth	r1, r3
 800622e:	193b      	adds	r3, r7, r4
 8006230:	181b      	adds	r3, r3, r0
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	b21d      	sxth	r5, r3
 8006236:	2334      	movs	r3, #52	; 0x34
 8006238:	2208      	movs	r2, #8
 800623a:	4694      	mov	ip, r2
 800623c:	44bc      	add	ip, r7
 800623e:	4463      	add	r3, ip
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	b29b      	uxth	r3, r3
 8006248:	b21b      	sxth	r3, r3
 800624a:	0022      	movs	r2, r4
 800624c:	18ba      	adds	r2, r7, r2
 800624e:	2400      	movs	r4, #0
 8006250:	5f14      	ldrsh	r4, [r2, r4]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	222c      	movs	r2, #44	; 0x2c
 8006256:	2608      	movs	r6, #8
 8006258:	46b4      	mov	ip, r6
 800625a:	44bc      	add	ip, r7
 800625c:	4462      	add	r2, ip
 800625e:	8812      	ldrh	r2, [r2, #0]
 8006260:	9201      	str	r2, [sp, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	002b      	movs	r3, r5
 8006266:	0022      	movs	r2, r4
 8006268:	f7ff fc5d 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>
 800626c:	e000      	b.n	8006270 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        return;
 800626e:	46c0      	nop			; (mov r8, r8)
    }
    //endWrite();
}
 8006270:	46bd      	mov	sp, r7
 8006272:	b007      	add	sp, #28
 8006274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	08008c88 	.word	0x08008c88

0800627c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	0018      	movs	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	b002      	add	sp, #8
 800628c:	bd80      	pop	{r7, pc}

0800628e <_ZNSt4pairIttEC1IRtS2_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	0018      	movs	r0, r3
 800629e:	f7ff ffed 	bl	800627c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80062a2:	0003      	movs	r3, r0
 80062a4:	881a      	ldrh	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0018      	movs	r0, r3
 80062ae:	f7ff ffe5 	bl	800627c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80062b2:	0003      	movs	r3, r0
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	805a      	strh	r2, [r3, #2]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	0018      	movs	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	b004      	add	sp, #16
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <_ZSt9make_pairIRtS0_ESt4pairINSt17__decay_and_stripIT_E6__typeENS2_IT0_E6__typeEEOS3_OS6_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 80062c4:	b5b0      	push	{r4, r5, r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7ff ffd3 	bl	800627c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80062d6:	0004      	movs	r4, r0
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	0018      	movs	r0, r3
 80062dc:	f7ff ffce 	bl	800627c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80062e0:	0002      	movs	r2, r0
 80062e2:	250c      	movs	r5, #12
 80062e4:	197b      	adds	r3, r7, r5
 80062e6:	0021      	movs	r1, r4
 80062e8:	0018      	movs	r0, r3
 80062ea:	f7ff ffd0 	bl	800628e <_ZNSt4pairIttEC1IRtS2_Lb1EEEOT_OT0_>
 80062ee:	2108      	movs	r1, #8
 80062f0:	187b      	adds	r3, r7, r1
 80062f2:	197a      	adds	r2, r7, r5
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	187a      	adds	r2, r7, r1
 80062fa:	2300      	movs	r3, #0
 80062fc:	8811      	ldrh	r1, [r2, #0]
 80062fe:	0409      	lsls	r1, r1, #16
 8006300:	0c09      	lsrs	r1, r1, #16
 8006302:	0c1b      	lsrs	r3, r3, #16
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	430b      	orrs	r3, r1
 8006308:	8852      	ldrh	r2, [r2, #2]
 800630a:	0412      	lsls	r2, r2, #16
 800630c:	041b      	lsls	r3, r3, #16
 800630e:	0c1b      	lsrs	r3, r3, #16
 8006310:	4313      	orrs	r3, r2
    }
 8006312:	0018      	movs	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	b004      	add	sp, #16
 8006318:	bdb0      	pop	{r4, r5, r7, pc}

0800631a <_ZN7TFT_GFX10drawStringEssPKctthhtb>:

std::pair<uint16_t, uint16_t> TFT_GFX::drawString(int16_t init_x, int16_t init_y, const char* s, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y, uint16_t x_edge, bool do_center)
{
 800631a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631c:	46c6      	mov	lr, r8
 800631e:	b500      	push	{lr}
 8006320:	b08e      	sub	sp, #56	; 0x38
 8006322:	af04      	add	r7, sp, #16
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	0008      	movs	r0, r1
 8006328:	0011      	movs	r1, r2
 800632a:	607b      	str	r3, [r7, #4]
 800632c:	230a      	movs	r3, #10
 800632e:	18fb      	adds	r3, r7, r3
 8006330:	1c02      	adds	r2, r0, #0
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	2308      	movs	r3, #8
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	1c0a      	adds	r2, r1, #0
 800633a:	801a      	strh	r2, [r3, #0]
	uint8_t totalChars = this->getStringSize(s);
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	0011      	movs	r1, r2
 8006342:	0018      	movs	r0, r3
 8006344:	f7ff fb14 	bl	8005970 <_ZN7TFT_GFX13getStringSizeEPKc>
 8006348:	0003      	movs	r3, r0
 800634a:	001a      	movs	r2, r3
 800634c:	211b      	movs	r1, #27
 800634e:	187b      	adds	r3, r7, r1
 8006350:	701a      	strb	r2, [r3, #0]
	totalChars = (totalChars > TFT_GFX::MAX_STRING_LENGTH ? TFT_GFX::MAX_STRING_LENGTH : totalChars);
 8006352:	187b      	adds	r3, r7, r1
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d803      	bhi.n	8006362 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x48>
 800635a:	231b      	movs	r3, #27
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	e000      	b.n	8006364 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x4a>
 8006362:	2264      	movs	r2, #100	; 0x64
 8006364:	231b      	movs	r3, #27
 8006366:	18fb      	adds	r3, r7, r3
 8006368:	701a      	strb	r2, [r3, #0]

	uint16_t currX = init_x;
 800636a:	2326      	movs	r3, #38	; 0x26
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	210a      	movs	r1, #10
 8006370:	187a      	adds	r2, r7, r1
 8006372:	8812      	ldrh	r2, [r2, #0]
 8006374:	801a      	strh	r2, [r3, #0]
	uint16_t currY = init_y;
 8006376:	2324      	movs	r3, #36	; 0x24
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	2008      	movs	r0, #8
 800637c:	183a      	adds	r2, r7, r0
 800637e:	8812      	ldrh	r2, [r2, #0]
 8006380:	801a      	strh	r2, [r3, #0]

	uint16_t maxX = init_x;
 8006382:	187b      	adds	r3, r7, r1
 8006384:	881a      	ldrh	r2, [r3, #0]
 8006386:	2318      	movs	r3, #24
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	801a      	strh	r2, [r3, #0]
	uint16_t maxY = init_y + (size_y * 8);
 800638c:	2344      	movs	r3, #68	; 0x44
 800638e:	2208      	movs	r2, #8
 8006390:	4694      	mov	ip, r2
 8006392:	44bc      	add	ip, r7
 8006394:	4463      	add	r3, ip
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	b29a      	uxth	r2, r3
 800639e:	183b      	adds	r3, r7, r0
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	18d3      	adds	r3, r2, r3
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	2316      	movs	r3, #22
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	801a      	strh	r2, [r3, #0]

	const uint8_t maxCharsInLine = (x_edge - init_x)/(size_x * 6);
 80063ac:	2348      	movs	r3, #72	; 0x48
 80063ae:	2208      	movs	r2, #8
 80063b0:	4694      	mov	ip, r2
 80063b2:	44bc      	add	ip, r7
 80063b4:	4463      	add	r3, ip
 80063b6:	881a      	ldrh	r2, [r3, #0]
 80063b8:	187b      	adds	r3, r7, r1
 80063ba:	2100      	movs	r1, #0
 80063bc:	5e5b      	ldrsh	r3, [r3, r1]
 80063be:	1ad0      	subs	r0, r2, r3
 80063c0:	2340      	movs	r3, #64	; 0x40
 80063c2:	2208      	movs	r2, #8
 80063c4:	4694      	mov	ip, r2
 80063c6:	44bc      	add	ip, r7
 80063c8:	4463      	add	r3, ip
 80063ca:	781a      	ldrb	r2, [r3, #0]
 80063cc:	0013      	movs	r3, r2
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	189b      	adds	r3, r3, r2
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	0019      	movs	r1, r3
 80063d6:	f7f9 ff21 	bl	800021c <__divsi3>
 80063da:	0003      	movs	r3, r0
 80063dc:	001a      	movs	r2, r3
 80063de:	2321      	movs	r3, #33	; 0x21
 80063e0:	18fb      	adds	r3, r7, r3
 80063e2:	701a      	strb	r2, [r3, #0]
	while(*s)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d100      	bne.n	80063ee <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xd4>
 80063ec:	e0d9      	b.n	80065a2 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x288>
	{
		uint8_t currLineSize = this->getLineSize(s, maxCharsInLine);
 80063ee:	2520      	movs	r5, #32
 80063f0:	197c      	adds	r4, r7, r5
 80063f2:	2321      	movs	r3, #33	; 0x21
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	781a      	ldrb	r2, [r3, #0]
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	0018      	movs	r0, r3
 80063fe:	f7ff fa5d 	bl	80058bc <_ZN7TFT_GFX11getLineSizeEPKch>
 8006402:	0003      	movs	r3, r0
 8006404:	7023      	strb	r3, [r4, #0]
		uint8_t functionalLineSize;
		if(s[currLineSize - 1] == ' ')
 8006406:	197b      	adds	r3, r7, r5
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	3b01      	subs	r3, #1
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	18d3      	adds	r3, r2, r3
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	2b20      	cmp	r3, #32
 8006414:	d107      	bne.n	8006426 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x10c>
		{
			functionalLineSize = currLineSize - 1;
 8006416:	2323      	movs	r3, #35	; 0x23
 8006418:	18fb      	adds	r3, r7, r3
 800641a:	2220      	movs	r2, #32
 800641c:	18ba      	adds	r2, r7, r2
 800641e:	7812      	ldrb	r2, [r2, #0]
 8006420:	3a01      	subs	r2, #1
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	e005      	b.n	8006432 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x118>
		}else{
			functionalLineSize = currLineSize;
 8006426:	2323      	movs	r3, #35	; 0x23
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	2220      	movs	r2, #32
 800642c:	18ba      	adds	r2, r7, r2
 800642e:	7812      	ldrb	r2, [r2, #0]
 8006430:	701a      	strb	r2, [r3, #0]
		}

		if(do_center)
 8006432:	234c      	movs	r3, #76	; 0x4c
 8006434:	2208      	movs	r2, #8
 8006436:	4694      	mov	ip, r2
 8006438:	44bc      	add	ip, r7
 800643a:	4463      	add	r3, ip
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d026      	beq.n	8006490 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x176>
		{
			currX = ((x_edge - init_x) - (functionalLineSize * size_x * 6))/2 + init_x;
 8006442:	2348      	movs	r3, #72	; 0x48
 8006444:	2208      	movs	r2, #8
 8006446:	4694      	mov	ip, r2
 8006448:	44bc      	add	ip, r7
 800644a:	4463      	add	r3, ip
 800644c:	881a      	ldrh	r2, [r3, #0]
 800644e:	230a      	movs	r3, #10
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2100      	movs	r1, #0
 8006454:	5e5b      	ldrsh	r3, [r3, r1]
 8006456:	1ad1      	subs	r1, r2, r3
 8006458:	2323      	movs	r3, #35	; 0x23
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2240      	movs	r2, #64	; 0x40
 8006460:	2008      	movs	r0, #8
 8006462:	4684      	mov	ip, r0
 8006464:	44bc      	add	ip, r7
 8006466:	4462      	add	r2, ip
 8006468:	7812      	ldrb	r2, [r2, #0]
 800646a:	435a      	muls	r2, r3
 800646c:	0013      	movs	r3, r2
 800646e:	0092      	lsls	r2, r2, #2
 8006470:	1a9b      	subs	r3, r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	18cb      	adds	r3, r1, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	da00      	bge.n	800647c <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x162>
 800647a:	3301      	adds	r3, #1
 800647c:	105b      	asrs	r3, r3, #1
 800647e:	b299      	uxth	r1, r3
 8006480:	230a      	movs	r3, #10
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	2326      	movs	r3, #38	; 0x26
 8006488:	18fb      	adds	r3, r7, r3
 800648a:	188a      	adds	r2, r1, r2
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	e005      	b.n	800649c <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x182>
		}else{
			currX = init_x;
 8006490:	2326      	movs	r3, #38	; 0x26
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	220a      	movs	r2, #10
 8006496:	18ba      	adds	r2, r7, r2
 8006498:	8812      	ldrh	r2, [r2, #0]
 800649a:	801a      	strh	r2, [r3, #0]
		}

		for(uint8_t i = 0; i < functionalLineSize; i++)
 800649c:	2322      	movs	r3, #34	; 0x22
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	2322      	movs	r3, #34	; 0x22
 80064a6:	18fa      	adds	r2, r7, r3
 80064a8:	2323      	movs	r3, #35	; 0x23
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	7812      	ldrb	r2, [r2, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d250      	bcs.n	8006556 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x23c>
		{
			drawChar(currX,currY,*(s++),color,bg,size_x,size_y);
 80064b4:	2526      	movs	r5, #38	; 0x26
 80064b6:	197b      	adds	r3, r7, r5
 80064b8:	2100      	movs	r1, #0
 80064ba:	5e59      	ldrsh	r1, [r3, r1]
 80064bc:	2324      	movs	r3, #36	; 0x24
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	2400      	movs	r4, #0
 80064c2:	5f1c      	ldrsh	r4, [r3, r4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	4698      	mov	r8, r3
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	2344      	movs	r3, #68	; 0x44
 80064d2:	2208      	movs	r2, #8
 80064d4:	4694      	mov	ip, r2
 80064d6:	44bc      	add	ip, r7
 80064d8:	4463      	add	r3, ip
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	9303      	str	r3, [sp, #12]
 80064de:	2640      	movs	r6, #64	; 0x40
 80064e0:	2308      	movs	r3, #8
 80064e2:	18fa      	adds	r2, r7, r3
 80064e4:	1993      	adds	r3, r2, r6
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	9302      	str	r3, [sp, #8]
 80064ea:	233c      	movs	r3, #60	; 0x3c
 80064ec:	2208      	movs	r2, #8
 80064ee:	4694      	mov	ip, r2
 80064f0:	44bc      	add	ip, r7
 80064f2:	4463      	add	r3, ip
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	2338      	movs	r3, #56	; 0x38
 80064fa:	2208      	movs	r2, #8
 80064fc:	4694      	mov	ip, r2
 80064fe:	44bc      	add	ip, r7
 8006500:	4463      	add	r3, ip
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	4643      	mov	r3, r8
 8006508:	0022      	movs	r2, r4
 800650a:	f7ff fcd3 	bl	8005eb4 <_ZN7TFT_GFX8drawCharEsshtthh>
			currX += size_x * 6;
 800650e:	2308      	movs	r3, #8
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	199b      	adds	r3, r3, r6
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	1c1a      	adds	r2, r3, #0
 800651a:	1c13      	adds	r3, r2, #0
 800651c:	18db      	adds	r3, r3, r3
 800651e:	189b      	adds	r3, r3, r2
 8006520:	18db      	adds	r3, r3, r3
 8006522:	b299      	uxth	r1, r3
 8006524:	197b      	adds	r3, r7, r5
 8006526:	197a      	adds	r2, r7, r5
 8006528:	8812      	ldrh	r2, [r2, #0]
 800652a:	188a      	adds	r2, r1, r2
 800652c:	801a      	strh	r2, [r3, #0]
			if(currX > maxX)
 800652e:	2318      	movs	r3, #24
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	197a      	adds	r2, r7, r5
 8006536:	8812      	ldrh	r2, [r2, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d905      	bls.n	8006548 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x22e>
			{
				maxX = currX;
 800653c:	2318      	movs	r3, #24
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	2226      	movs	r2, #38	; 0x26
 8006542:	18ba      	adds	r2, r7, r2
 8006544:	8812      	ldrh	r2, [r2, #0]
 8006546:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < functionalLineSize; i++)
 8006548:	2122      	movs	r1, #34	; 0x22
 800654a:	187b      	adds	r3, r7, r1
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	187b      	adds	r3, r7, r1
 8006550:	3201      	adds	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e7a6      	b.n	80064a4 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x18a>
			}
		}
		//Skip the space
		s += (functionalLineSize == currLineSize ? 0 : 1);
 8006556:	2323      	movs	r3, #35	; 0x23
 8006558:	18fa      	adds	r2, r7, r3
 800655a:	2320      	movs	r3, #32
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	1e5a      	subs	r2, r3, #1
 8006566:	4193      	sbcs	r3, r2
 8006568:	b2db      	uxtb	r3, r3
 800656a:	001a      	movs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	189b      	adds	r3, r3, r2
 8006570:	607b      	str	r3, [r7, #4]
		//Go to next row
		currY += size_y * 8;
 8006572:	2344      	movs	r3, #68	; 0x44
 8006574:	2208      	movs	r2, #8
 8006576:	4694      	mov	ip, r2
 8006578:	44bc      	add	ip, r7
 800657a:	4463      	add	r3, ip
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	b299      	uxth	r1, r3
 8006584:	2224      	movs	r2, #36	; 0x24
 8006586:	18bb      	adds	r3, r7, r2
 8006588:	18ba      	adds	r2, r7, r2
 800658a:	8812      	ldrh	r2, [r2, #0]
 800658c:	188a      	adds	r2, r1, r2
 800658e:	801a      	strh	r2, [r3, #0]
		//If the next line starts with a space lets just skip it
		if(*s == ' ')
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b20      	cmp	r3, #32
 8006596:	d000      	beq.n	800659a <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x280>
 8006598:	e724      	b.n	80063e4 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xca>
		{
			s++;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3301      	adds	r3, #1
 800659e:	607b      	str	r3, [r7, #4]
	while(*s)
 80065a0:	e720      	b.n	80063e4 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xca>
		}
	}
	maxY = currY;
 80065a2:	2316      	movs	r3, #22
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	2224      	movs	r2, #36	; 0x24
 80065a8:	18ba      	adds	r2, r7, r2
 80065aa:	8812      	ldrh	r2, [r2, #0]
 80065ac:	801a      	strh	r2, [r3, #0]
	if(maxX > this->_width)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	889a      	ldrh	r2, [r3, #4]
 80065b2:	2318      	movs	r3, #24
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d204      	bcs.n	80065c6 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x2ac>
	{
		maxX = this->_width;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	889a      	ldrh	r2, [r3, #4]
 80065c0:	2318      	movs	r3, #24
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	801a      	strh	r2, [r3, #0]
	}
	if(maxY > this->_height)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	88da      	ldrh	r2, [r3, #6]
 80065ca:	2316      	movs	r3, #22
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d204      	bcs.n	80065de <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x2c4>
	{
		maxY = this->_height;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	88da      	ldrh	r2, [r3, #6]
 80065d8:	2316      	movs	r3, #22
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	801a      	strh	r2, [r3, #0]
	}
	return std::make_pair(maxX, maxY);
 80065de:	2316      	movs	r3, #22
 80065e0:	18fa      	adds	r2, r7, r3
 80065e2:	2318      	movs	r3, #24
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	0011      	movs	r1, r2
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7ff fe6b 	bl	80062c4 <_ZSt9make_pairIRtS0_ESt4pairINSt17__decay_and_stripIT_E6__typeENS2_IT0_E6__typeEEOS3_OS6_>
 80065ee:	0003      	movs	r3, r0
 80065f0:	001a      	movs	r2, r3
 80065f2:	211c      	movs	r1, #28
 80065f4:	187b      	adds	r3, r7, r1
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	187a      	adds	r2, r7, r1
 80065fa:	2300      	movs	r3, #0
 80065fc:	8811      	ldrh	r1, [r2, #0]
 80065fe:	0409      	lsls	r1, r1, #16
 8006600:	0c09      	lsrs	r1, r1, #16
 8006602:	0c1b      	lsrs	r3, r3, #16
 8006604:	041b      	lsls	r3, r3, #16
 8006606:	430b      	orrs	r3, r1
 8006608:	8852      	ldrh	r2, [r2, #2]
 800660a:	0412      	lsls	r2, r2, #16
 800660c:	041b      	lsls	r3, r3, #16
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	4313      	orrs	r3, r2
}
 8006612:	0018      	movs	r0, r3
 8006614:	46bd      	mov	sp, r7
 8006616:	b00a      	add	sp, #40	; 0x28
 8006618:	bc04      	pop	{r2}
 800661a:	4690      	mov	r8, r2
 800661c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800661e <_ZN7TFT_GFX11setRotationEh>:

void TFT_GFX::setRotation(uint8_t m)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	000a      	movs	r2, r1
 8006628:	1cfb      	adds	r3, r7, #3
 800662a:	701a      	strb	r2, [r3, #0]
	uint8_t rotation = m % 4; // can't be higher than 3
 800662c:	1cfb      	adds	r3, r7, #3
 800662e:	781a      	ldrb	r2, [r3, #0]
 8006630:	200f      	movs	r0, #15
 8006632:	183b      	adds	r3, r7, r0
 8006634:	2103      	movs	r1, #3
 8006636:	400a      	ands	r2, r1
 8006638:	701a      	strb	r2, [r3, #0]
	    switch (rotation) {
 800663a:	183b      	adds	r3, r7, r0
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d013      	beq.n	800666a <_ZN7TFT_GFX11setRotationEh+0x4c>
 8006642:	dc02      	bgt.n	800664a <_ZN7TFT_GFX11setRotationEh+0x2c>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <_ZN7TFT_GFX11setRotationEh+0x36>
 8006648:	e030      	b.n	80066ac <_ZN7TFT_GFX11setRotationEh+0x8e>
 800664a:	2b02      	cmp	r3, #2
 800664c:	d018      	beq.n	8006680 <_ZN7TFT_GFX11setRotationEh+0x62>
 800664e:	2b03      	cmp	r3, #3
 8006650:	d021      	beq.n	8006696 <_ZN7TFT_GFX11setRotationEh+0x78>
 8006652:	e02b      	b.n	80066ac <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 0:
	            m = (MADCTL_MX | MADCTL_BGR);
 8006654:	1cfb      	adds	r3, r7, #3
 8006656:	2248      	movs	r2, #72	; 0x48
 8006658:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	22f0      	movs	r2, #240	; 0xf0
 800665e:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	22a0      	movs	r2, #160	; 0xa0
 8006664:	0052      	lsls	r2, r2, #1
 8006666:	80da      	strh	r2, [r3, #6]
	            break;
 8006668:	e020      	b.n	80066ac <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 1:
	            m = (MADCTL_MV | MADCTL_BGR);
 800666a:	1cfb      	adds	r3, r7, #3
 800666c:	2228      	movs	r2, #40	; 0x28
 800666e:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	22a0      	movs	r2, #160	; 0xa0
 8006674:	0052      	lsls	r2, r2, #1
 8006676:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	22f0      	movs	r2, #240	; 0xf0
 800667c:	80da      	strh	r2, [r3, #6]
	            break;
 800667e:	e015      	b.n	80066ac <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 2:
	            m = (MADCTL_MY | MADCTL_BGR);
 8006680:	1cfb      	adds	r3, r7, #3
 8006682:	2288      	movs	r2, #136	; 0x88
 8006684:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	22f0      	movs	r2, #240	; 0xf0
 800668a:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	22a0      	movs	r2, #160	; 0xa0
 8006690:	0052      	lsls	r2, r2, #1
 8006692:	80da      	strh	r2, [r3, #6]
	            break;
 8006694:	e00a      	b.n	80066ac <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 3:
	            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8006696:	1cfb      	adds	r3, r7, #3
 8006698:	22e8      	movs	r2, #232	; 0xe8
 800669a:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	22a0      	movs	r2, #160	; 0xa0
 80066a0:	0052      	lsls	r2, r2, #1
 80066a2:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	22f0      	movs	r2, #240	; 0xf0
 80066a8:	80da      	strh	r2, [r3, #6]
	            break;
 80066aa:	46c0      	nop			; (mov r8, r8)
	    }
	    sendCommand(this->spiInstance, ILI9341_MADCTL, &m, 1);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	1cfa      	adds	r2, r7, #3
 80066b2:	2301      	movs	r3, #1
 80066b4:	2136      	movs	r1, #54	; 0x36
 80066b6:	f000 f8a8 	bl	800680a <sendCommand>
}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	46bd      	mov	sp, r7
 80066be:	b004      	add	sp, #16
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <_ZN7TFT_GFX5widthEv>:

uint16_t TFT_GFX::width(void)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
	return this->_width;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	889b      	ldrh	r3, [r3, #4]
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b002      	add	sp, #8
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <_ZN7TFT_GFX6heightEv>:

uint16_t TFT_GFX::height(void)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
	return this->_height;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	88db      	ldrh	r3, [r3, #6]
}
 80066e2:	0018      	movs	r0, r3
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b002      	add	sp, #8
 80066e8:	bd80      	pop	{r7, pc}

080066ea <resetTftBoard>:
#include "hspi.h"
#include "pin-definitions.h"

void resetTftBoard(void)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	af00      	add	r7, sp, #0
	TFT_RST_PORT->ODR &= ~(1 << TFT_RST_PIN);
 80066ee:	2390      	movs	r3, #144	; 0x90
 80066f0:	05db      	lsls	r3, r3, #23
 80066f2:	695a      	ldr	r2, [r3, #20]
 80066f4:	2390      	movs	r3, #144	; 0x90
 80066f6:	05db      	lsls	r3, r3, #23
 80066f8:	2110      	movs	r1, #16
 80066fa:	438a      	bics	r2, r1
 80066fc:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 80066fe:	2096      	movs	r0, #150	; 0x96
 8006700:	f7fc f936 	bl	8002970 <HAL_Delay>
	TFT_RST_PORT->ODR |=  (1 << TFT_RST_PIN);
 8006704:	2390      	movs	r3, #144	; 0x90
 8006706:	05db      	lsls	r3, r3, #23
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	2390      	movs	r3, #144	; 0x90
 800670c:	05db      	lsls	r3, r3, #23
 800670e:	2110      	movs	r1, #16
 8006710:	430a      	orrs	r2, r1
 8006712:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8006714:	2096      	movs	r0, #150	; 0x96
 8006716:	f7fc f92b 	bl	8002970 <HAL_Delay>
}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <pullCSLow>:

void pullCSLow(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
	SPI2_CS_PORT->ODR &= ~(1 << SPI2_CS_PIN);
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <pullCSLow+0x18>)
 8006726:	695a      	ldr	r2, [r3, #20]
 8006728:	4b03      	ldr	r3, [pc, #12]	; (8006738 <pullCSLow+0x18>)
 800672a:	2102      	movs	r1, #2
 800672c:	438a      	bics	r2, r1
 800672e:	615a      	str	r2, [r3, #20]
}
 8006730:	46c0      	nop			; (mov r8, r8)
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	48000400 	.word	0x48000400

0800673c <hspi_w8>:
void pullCSHigh(void)
{
	SPI2_CS_PORT->ODR |= (1 << SPI2_CS_PIN);
}

void hspi_w8(SPI_TypeDef *SPIx, uint8_t dat) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	000a      	movs	r2, r1
 8006746:	1cfb      	adds	r3, r7, #3
 8006748:	701a      	strb	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2202      	movs	r2, #2
 8006752:	4013      	ands	r3, r2
 8006754:	d0fa      	beq.n	800674c <hspi_w8+0x10>
  // Send the byte.
  *(uint8_t*)&(SPIx->DR) = dat;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	330c      	adds	r3, #12
 800675a:	1cfa      	adds	r2, r7, #3
 800675c:	7812      	ldrb	r2, [r2, #0]
 800675e:	701a      	strb	r2, [r3, #0]
}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	46bd      	mov	sp, r7
 8006764:	b002      	add	sp, #8
 8006766:	bd80      	pop	{r7, pc}

08006768 <hspi_w16>:

void hspi_w16(SPI_TypeDef *SPIx, uint16_t dat) {
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	000a      	movs	r2, r1
 8006772:	1cbb      	adds	r3, r7, #2
 8006774:	801a      	strh	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 8006776:	46c0      	nop			; (mov r8, r8)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2202      	movs	r2, #2
 800677e:	4013      	ands	r3, r2
 8006780:	d0fa      	beq.n	8006778 <hspi_w16+0x10>
  // Send the data.
  // (Flip the bytes for the little-endian ARM core.)
  dat = (((dat & 0x00FF) << 8) | ((dat & 0xFF00) >> 8));
 8006782:	1cbb      	adds	r3, r7, #2
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	b21a      	sxth	r2, r3
 800678a:	1cbb      	adds	r3, r7, #2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	0a1b      	lsrs	r3, r3, #8
 8006790:	b29b      	uxth	r3, r3
 8006792:	b21b      	sxth	r3, r3
 8006794:	4313      	orrs	r3, r2
 8006796:	b21a      	sxth	r2, r3
 8006798:	1cbb      	adds	r3, r7, #2
 800679a:	801a      	strh	r2, [r3, #0]
  *(uint16_t*)&(SPIx->DR) = dat;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	330c      	adds	r3, #12
 80067a0:	1cba      	adds	r2, r7, #2
 80067a2:	8812      	ldrh	r2, [r2, #0]
 80067a4:	801a      	strh	r2, [r3, #0]
}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b002      	add	sp, #8
 80067ac:	bd80      	pop	{r7, pc}

080067ae <hspi_cmd>:

void hspi_cmd(SPI_TypeDef *SPIx, uint8_t cmd) {
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	000a      	movs	r2, r1
 80067b8:	1cfb      	adds	r3, r7, #3
 80067ba:	701a      	strb	r2, [r3, #0]
  while ((SPIx->SR & SPI_SR_BSY)) {};
 80067bc:	46c0      	nop			; (mov r8, r8)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	2280      	movs	r2, #128	; 0x80
 80067c4:	4013      	ands	r3, r2
 80067c6:	d1fa      	bne.n	80067be <hspi_cmd+0x10>
  TFT_DC_PORT->ODR &= ~(1 << TFT_DC_PIN);
 80067c8:	2390      	movs	r3, #144	; 0x90
 80067ca:	05db      	lsls	r3, r3, #23
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	2390      	movs	r3, #144	; 0x90
 80067d0:	05db      	lsls	r3, r3, #23
 80067d2:	2120      	movs	r1, #32
 80067d4:	438a      	bics	r2, r1
 80067d6:	615a      	str	r2, [r3, #20]
  hspi_w8(SPIx, cmd);
 80067d8:	1cfb      	adds	r3, r7, #3
 80067da:	781a      	ldrb	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	0011      	movs	r1, r2
 80067e0:	0018      	movs	r0, r3
 80067e2:	f7ff ffab 	bl	800673c <hspi_w8>
  while ((SPIx->SR & SPI_SR_BSY)) {};
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2280      	movs	r2, #128	; 0x80
 80067ee:	4013      	ands	r3, r2
 80067f0:	d1fa      	bne.n	80067e8 <hspi_cmd+0x3a>
  TFT_DC_PORT->ODR |=  (1 << TFT_DC_PIN);
 80067f2:	2390      	movs	r3, #144	; 0x90
 80067f4:	05db      	lsls	r3, r3, #23
 80067f6:	695a      	ldr	r2, [r3, #20]
 80067f8:	2390      	movs	r3, #144	; 0x90
 80067fa:	05db      	lsls	r3, r3, #23
 80067fc:	2120      	movs	r1, #32
 80067fe:	430a      	orrs	r2, r1
 8006800:	615a      	str	r2, [r3, #20]
}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	46bd      	mov	sp, r7
 8006806:	b002      	add	sp, #8
 8006808:	bd80      	pop	{r7, pc}

0800680a <sendCommand>:

void sendCommand(SPI_TypeDef *SPIx, uint8_t cmd, uint8_t* data, uint8_t length)
{
 800680a:	b590      	push	{r4, r7, lr}
 800680c:	b087      	sub	sp, #28
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	0008      	movs	r0, r1
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	0019      	movs	r1, r3
 8006818:	240b      	movs	r4, #11
 800681a:	193b      	adds	r3, r7, r4
 800681c:	1c02      	adds	r2, r0, #0
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	230a      	movs	r3, #10
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	1c0a      	adds	r2, r1, #0
 8006826:	701a      	strb	r2, [r3, #0]
	hspi_cmd(SPIx,cmd);
 8006828:	193b      	adds	r3, r7, r4
 800682a:	781a      	ldrb	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0011      	movs	r1, r2
 8006830:	0018      	movs	r0, r3
 8006832:	f7ff ffbc 	bl	80067ae <hspi_cmd>
	for(int i = 0; i < length; i++)
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	e00b      	b.n	8006854 <sendCommand+0x4a>
	{
		hspi_w8(SPIx, *(data++));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	0011      	movs	r1, r2
 8006848:	0018      	movs	r0, r3
 800684a:	f7ff ff77 	bl	800673c <hspi_w8>
	for(int i = 0; i < length; i++)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	3301      	adds	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	230a      	movs	r3, #10
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	429a      	cmp	r2, r3
 800685e:	dbed      	blt.n	800683c <sendCommand+0x32>
	}
}
 8006860:	46c0      	nop			; (mov r8, r8)
 8006862:	46bd      	mov	sp, r7
 8006864:	b007      	add	sp, #28
 8006866:	bd90      	pop	{r4, r7, pc}

08006868 <ili9341_hspi_init>:

void ili9341_hspi_init(SPI_TypeDef *SPIx) {
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  // (Display off)
  //hspi_cmd(SPIx, 0x28);
  // Issue a series of initialization commands from the
  // Adafruit library for a simple 'known good' test.
  // (TODO: Add named macro definitions for these hex values.)
  hspi_cmd(SPIx, 0xEF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	21ef      	movs	r1, #239	; 0xef
 8006874:	0018      	movs	r0, r3
 8006876:	f7ff ff9a 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x03);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2103      	movs	r1, #3
 800687e:	0018      	movs	r0, r3
 8006880:	f7ff ff5c 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x80);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2180      	movs	r1, #128	; 0x80
 8006888:	0018      	movs	r0, r3
 800688a:	f7ff ff57 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x02);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2102      	movs	r1, #2
 8006892:	0018      	movs	r0, r3
 8006894:	f7ff ff52 	bl	800673c <hspi_w8>
  hspi_cmd(SPIx, 0xCF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	21cf      	movs	r1, #207	; 0xcf
 800689c:	0018      	movs	r0, r3
 800689e:	f7ff ff86 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2100      	movs	r1, #0
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7ff ff48 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	21c1      	movs	r1, #193	; 0xc1
 80068b0:	0018      	movs	r0, r3
 80068b2:	f7ff ff43 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x30);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2130      	movs	r1, #48	; 0x30
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7ff ff3e 	bl	800673c <hspi_w8>
  hspi_cmd(SPIx, 0xED);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	21ed      	movs	r1, #237	; 0xed
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7ff ff72 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x64);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2164      	movs	r1, #100	; 0x64
 80068ce:	0018      	movs	r0, r3
 80068d0:	f7ff ff34 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x03);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2103      	movs	r1, #3
 80068d8:	0018      	movs	r0, r3
 80068da:	f7ff ff2f 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x12);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2112      	movs	r1, #18
 80068e2:	0018      	movs	r0, r3
 80068e4:	f7ff ff2a 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x81);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2181      	movs	r1, #129	; 0x81
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff ff25 	bl	800673c <hspi_w8>
  hspi_cmd(SPIx, 0xE8);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	21e8      	movs	r1, #232	; 0xe8
 80068f6:	0018      	movs	r0, r3
 80068f8:	f7ff ff59 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x85);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2185      	movs	r1, #133	; 0x85
 8006900:	0018      	movs	r0, r3
 8006902:	f7ff ff1b 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2100      	movs	r1, #0
 800690a:	0018      	movs	r0, r3
 800690c:	f7ff ff16 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x78);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2178      	movs	r1, #120	; 0x78
 8006914:	0018      	movs	r0, r3
 8006916:	f7ff ff11 	bl	800673c <hspi_w8>
  hspi_cmd(SPIx, 0xCB);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	21cb      	movs	r1, #203	; 0xcb
 800691e:	0018      	movs	r0, r3
 8006920:	f7ff ff45 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x39);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2139      	movs	r1, #57	; 0x39
 8006928:	0018      	movs	r0, r3
 800692a:	f7ff ff07 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x2C);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	212c      	movs	r1, #44	; 0x2c
 8006932:	0018      	movs	r0, r3
 8006934:	f7ff ff02 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2100      	movs	r1, #0
 800693c:	0018      	movs	r0, r3
 800693e:	f7ff fefd 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x34);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2134      	movs	r1, #52	; 0x34
 8006946:	0018      	movs	r0, r3
 8006948:	f7ff fef8 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x02);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2102      	movs	r1, #2
 8006950:	0018      	movs	r0, r3
 8006952:	f7ff fef3 	bl	800673c <hspi_w8>
  hspi_cmd(SPIx, 0xF7);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	21f7      	movs	r1, #247	; 0xf7
 800695a:	0018      	movs	r0, r3
 800695c:	f7ff ff27 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x20);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2120      	movs	r1, #32
 8006964:	0018      	movs	r0, r3
 8006966:	f7ff fee9 	bl	800673c <hspi_w8>
  hspi_cmd(SPIx, 0xEA);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	21ea      	movs	r1, #234	; 0xea
 800696e:	0018      	movs	r0, r3
 8006970:	f7ff ff1d 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2100      	movs	r1, #0
 8006978:	0018      	movs	r0, r3
 800697a:	f7ff fedf 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2100      	movs	r1, #0
 8006982:	0018      	movs	r0, r3
 8006984:	f7ff feda 	bl	800673c <hspi_w8>
  // PWCTR1
  hspi_cmd(SPIx, 0xC0);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	21c0      	movs	r1, #192	; 0xc0
 800698c:	0018      	movs	r0, r3
 800698e:	f7ff ff0e 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x23);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2123      	movs	r1, #35	; 0x23
 8006996:	0018      	movs	r0, r3
 8006998:	f7ff fed0 	bl	800673c <hspi_w8>
  // PWCTR2
  hspi_cmd(SPIx, 0xC1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	21c1      	movs	r1, #193	; 0xc1
 80069a0:	0018      	movs	r0, r3
 80069a2:	f7ff ff04 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x10);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2110      	movs	r1, #16
 80069aa:	0018      	movs	r0, r3
 80069ac:	f7ff fec6 	bl	800673c <hspi_w8>
  // VMCTR1
  hspi_cmd(SPIx, 0xC5);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	21c5      	movs	r1, #197	; 0xc5
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7ff fefa 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x3E);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	213e      	movs	r1, #62	; 0x3e
 80069be:	0018      	movs	r0, r3
 80069c0:	f7ff febc 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x28);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2128      	movs	r1, #40	; 0x28
 80069c8:	0018      	movs	r0, r3
 80069ca:	f7ff feb7 	bl	800673c <hspi_w8>
  // VMCTR2
  hspi_cmd(SPIx, 0xC7);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	21c7      	movs	r1, #199	; 0xc7
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7ff feeb 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x86);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2186      	movs	r1, #134	; 0x86
 80069dc:	0018      	movs	r0, r3
 80069de:	f7ff fead 	bl	800673c <hspi_w8>
  // MADCTL
  hspi_cmd(SPIx, 0x36);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2136      	movs	r1, #54	; 0x36
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7ff fee1 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x48);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2148      	movs	r1, #72	; 0x48
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7ff fea3 	bl	800673c <hspi_w8>
  // VSCRSADD
  hspi_cmd(SPIx, 0x37);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2137      	movs	r1, #55	; 0x37
 80069fa:	0018      	movs	r0, r3
 80069fc:	f7ff fed7 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2100      	movs	r1, #0
 8006a04:	0018      	movs	r0, r3
 8006a06:	f7ff fe99 	bl	800673c <hspi_w8>
  // PIXFMT
  hspi_cmd(SPIx, 0x3A);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	213a      	movs	r1, #58	; 0x3a
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7ff fecd 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x55);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2155      	movs	r1, #85	; 0x55
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f7ff fe8f 	bl	800673c <hspi_w8>
  // FRMCTR1
  hspi_cmd(SPIx, 0xB1);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	21b1      	movs	r1, #177	; 0xb1
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7ff fec3 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f7ff fe85 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x18);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2118      	movs	r1, #24
 8006a36:	0018      	movs	r0, r3
 8006a38:	f7ff fe80 	bl	800673c <hspi_w8>
  // DFUNCTR
  hspi_cmd(SPIx, 0xB6);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	21b6      	movs	r1, #182	; 0xb6
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7ff feb4 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x08);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2108      	movs	r1, #8
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7ff fe76 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x82);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2182      	movs	r1, #130	; 0x82
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7ff fe71 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x27);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2127      	movs	r1, #39	; 0x27
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f7ff fe6c 	bl	800673c <hspi_w8>
  hspi_cmd(SPIx, 0xF2);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	21f2      	movs	r1, #242	; 0xf2
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f7ff fea0 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2100      	movs	r1, #0
 8006a72:	0018      	movs	r0, r3
 8006a74:	f7ff fe62 	bl	800673c <hspi_w8>
  // GAMMASET
  hspi_cmd(SPIx, 0x26);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2126      	movs	r1, #38	; 0x26
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7ff fe96 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x01);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2101      	movs	r1, #1
 8006a86:	0018      	movs	r0, r3
 8006a88:	f7ff fe58 	bl	800673c <hspi_w8>
  // (Actual gamma settings)
  hspi_cmd(SPIx, 0xE0);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	21e0      	movs	r1, #224	; 0xe0
 8006a90:	0018      	movs	r0, r3
 8006a92:	f7ff fe8c 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x0F);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	210f      	movs	r1, #15
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f7ff fe4e 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2131      	movs	r1, #49	; 0x31
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f7ff fe49 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x2B);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	212b      	movs	r1, #43	; 0x2b
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f7ff fe44 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	210c      	movs	r1, #12
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f7ff fe3f 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	210e      	movs	r1, #14
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7ff fe3a 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x08);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2108      	movs	r1, #8
 8006acc:	0018      	movs	r0, r3
 8006ace:	f7ff fe35 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x4E);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	214e      	movs	r1, #78	; 0x4e
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f7ff fe30 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0xF1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	21f1      	movs	r1, #241	; 0xf1
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7ff fe2b 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x37);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2137      	movs	r1, #55	; 0x37
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7ff fe26 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x07);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2107      	movs	r1, #7
 8006af4:	0018      	movs	r0, r3
 8006af6:	f7ff fe21 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x10);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2110      	movs	r1, #16
 8006afe:	0018      	movs	r0, r3
 8006b00:	f7ff fe1c 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2103      	movs	r1, #3
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7ff fe17 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	210e      	movs	r1, #14
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7ff fe12 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x09);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2109      	movs	r1, #9
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	f7ff fe0d 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2100      	movs	r1, #0
 8006b26:	0018      	movs	r0, r3
 8006b28:	f7ff fe08 	bl	800673c <hspi_w8>
  hspi_cmd(SPIx, 0xE1);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	21e1      	movs	r1, #225	; 0xe1
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7ff fe3c 	bl	80067ae <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f7ff fdfe 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	210e      	movs	r1, #14
 8006b44:	0018      	movs	r0, r3
 8006b46:	f7ff fdf9 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x14);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2114      	movs	r1, #20
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7ff fdf4 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2103      	movs	r1, #3
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f7ff fdef 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x11);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2111      	movs	r1, #17
 8006b62:	0018      	movs	r0, r3
 8006b64:	f7ff fdea 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x07);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2107      	movs	r1, #7
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7ff fde5 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2131      	movs	r1, #49	; 0x31
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7ff fde0 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	21c1      	movs	r1, #193	; 0xc1
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7ff fddb 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x48);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2148      	movs	r1, #72	; 0x48
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f7ff fdd6 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x08);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2108      	movs	r1, #8
 8006b94:	0018      	movs	r0, r3
 8006b96:	f7ff fdd1 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	210f      	movs	r1, #15
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7ff fdcc 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	210c      	movs	r1, #12
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f7ff fdc7 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2131      	movs	r1, #49	; 0x31
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7ff fdc2 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x36);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2136      	movs	r1, #54	; 0x36
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f7ff fdbd 	bl	800673c <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	210f      	movs	r1, #15
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f7ff fdb8 	bl	800673c <hspi_w8>
  // Exit sleep mode.
  hspi_cmd(SPIx, 0x11);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2111      	movs	r1, #17
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f7ff fdec 	bl	80067ae <hspi_cmd>
  HAL_Delay(150);
 8006bd6:	2096      	movs	r0, #150	; 0x96
 8006bd8:	f7fb feca 	bl	8002970 <HAL_Delay>
  // Display on.
  hspi_cmd(SPIx, 0x29);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2129      	movs	r1, #41	; 0x29
 8006be0:	0018      	movs	r0, r3
 8006be2:	f7ff fde4 	bl	80067ae <hspi_cmd>
	HAL_Delay(150);
 8006be6:	2096      	movs	r0, #150	; 0x96
 8006be8:	f7fb fec2 	bl	8002970 <HAL_Delay>
  // 'Normal' display mode.
  hspi_cmd(SPIx, 0x13);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2113      	movs	r1, #19
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7ff fddc 	bl	80067ae <hspi_cmd>
}
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>:
	drawSelectionLines(tftDisplay, backgroundColor, fontColor, lineColor, lineThickness);
	writeSelectionWords(instructionBox, mainTitle, stateSelector, fontColor, stateSelectorFontSize);
}

void drawSelectionLines(TFT_GFX& tftDisplay,const uint16_t backgroundColor,const uint16_t fontColor,const uint16_t lineColor,const uint16_t lineThickness)
{
 8006bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c00:	b087      	sub	sp, #28
 8006c02:	af02      	add	r7, sp, #8
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	000c      	movs	r4, r1
 8006c08:	0010      	movs	r0, r2
 8006c0a:	0019      	movs	r1, r3
 8006c0c:	230a      	movs	r3, #10
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	1c22      	adds	r2, r4, #0
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	2408      	movs	r4, #8
 8006c16:	193b      	adds	r3, r7, r4
 8006c18:	1c02      	adds	r2, r0, #0
 8006c1a:	801a      	strh	r2, [r3, #0]
 8006c1c:	1dbb      	adds	r3, r7, #6
 8006c1e:	1c0a      	adds	r2, r1, #0
 8006c20:	801a      	strh	r2, [r3, #0]

	//for the love of god don't touch these plz

	//Set background to correct color and add outline
	tftDisplay.writeFillRect(0, 0, tftDisplay.width(), tftDisplay.height(), lineColor);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f7ff fd4c 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006c2a:	0003      	movs	r3, r0
 8006c2c:	b21c      	sxth	r4, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	0018      	movs	r0, r3
 8006c32:	f7ff fd50 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8006c36:	0003      	movs	r3, r0
 8006c38:	b21b      	sxth	r3, r3
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	1dba      	adds	r2, r7, #6
 8006c3e:	8812      	ldrh	r2, [r2, #0]
 8006c40:	9201      	str	r2, [sp, #4]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	0023      	movs	r3, r4
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	f7fe ff6c 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width() - lineThickness * 2, tftDisplay.height() - lineThickness * 2, backgroundColor);
 8006c4e:	2628      	movs	r6, #40	; 0x28
 8006c50:	19bb      	adds	r3, r7, r6
 8006c52:	2100      	movs	r1, #0
 8006c54:	5e5c      	ldrsh	r4, [r3, r1]
 8006c56:	19bb      	adds	r3, r7, r6
 8006c58:	2100      	movs	r1, #0
 8006c5a:	5e5d      	ldrsh	r5, [r3, r1]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f7ff fd2f 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006c64:	0003      	movs	r3, r0
 8006c66:	001a      	movs	r2, r3
 8006c68:	19bb      	adds	r3, r7, r6
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	18db      	adds	r3, r3, r3
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	b21e      	sxth	r6, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f7ff fd2c 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8006c7e:	0003      	movs	r3, r0
 8006c80:	001a      	movs	r2, r3
 8006c82:	2328      	movs	r3, #40	; 0x28
 8006c84:	18fb      	adds	r3, r7, r3
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	18db      	adds	r3, r3, r3
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	b21b      	sxth	r3, r3
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	220a      	movs	r2, #10
 8006c96:	18ba      	adds	r2, r7, r2
 8006c98:	8812      	ldrh	r2, [r2, #0]
 8006c9a:	9201      	str	r2, [sp, #4]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	0033      	movs	r3, r6
 8006ca0:	002a      	movs	r2, r5
 8006ca2:	0021      	movs	r1, r4
 8006ca4:	f7fe ff3f 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>

	//Upper Left Border Box
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width()/2, tftDisplay.height()/2, lineColor);
 8006ca8:	2628      	movs	r6, #40	; 0x28
 8006caa:	19bb      	adds	r3, r7, r6
 8006cac:	2100      	movs	r1, #0
 8006cae:	5e5c      	ldrsh	r4, [r3, r1]
 8006cb0:	19bb      	adds	r3, r7, r6
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	5e5d      	ldrsh	r5, [r3, r1]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f7ff fd02 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006cbe:	0003      	movs	r3, r0
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	b21e      	sxth	r6, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f7ff fd04 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	b21b      	sxth	r3, r3
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	1dba      	adds	r2, r7, #6
 8006cda:	8812      	ldrh	r2, [r2, #0]
 8006cdc:	9201      	str	r2, [sp, #4]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	0033      	movs	r3, r6
 8006ce2:	002a      	movs	r2, r5
 8006ce4:	0021      	movs	r1, r4
 8006ce6:	f7fe ff1e 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width()/2-lineThickness, tftDisplay.height()/2-lineThickness, backgroundColor);
 8006cea:	2628      	movs	r6, #40	; 0x28
 8006cec:	19bb      	adds	r3, r7, r6
 8006cee:	2100      	movs	r1, #0
 8006cf0:	5e5c      	ldrsh	r4, [r3, r1]
 8006cf2:	19bb      	adds	r3, r7, r6
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	5e5d      	ldrsh	r5, [r3, r1]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7ff fce1 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006d00:	0003      	movs	r3, r0
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	19bb      	adds	r3, r7, r6
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	b21e      	sxth	r6, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	0018      	movs	r0, r3
 8006d14:	f7ff fcdf 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8006d18:	0003      	movs	r3, r0
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	2328      	movs	r3, #40	; 0x28
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	b21b      	sxth	r3, r3
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	220a      	movs	r2, #10
 8006d2e:	18ba      	adds	r2, r7, r2
 8006d30:	8812      	ldrh	r2, [r2, #0]
 8006d32:	9201      	str	r2, [sp, #4]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	0033      	movs	r3, r6
 8006d38:	002a      	movs	r2, r5
 8006d3a:	0021      	movs	r1, r4
 8006d3c:	f7fe fef3 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>

	//Bottom Right Border Box
	tftDisplay.writeFillRect(tftDisplay.width()/2, tftDisplay.height()/2, tftDisplay.width(), tftDisplay.height(), lineColor);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	0018      	movs	r0, r3
 8006d44:	f7ff fcbd 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	b21c      	sxth	r4, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	0018      	movs	r0, r3
 8006d54:	f7ff fcbf 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8006d58:	0003      	movs	r3, r0
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	b21d      	sxth	r5, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	0018      	movs	r0, r3
 8006d64:	f7ff fcad 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006d68:	0003      	movs	r3, r0
 8006d6a:	b21e      	sxth	r6, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f7ff fcb1 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8006d74:	0003      	movs	r3, r0
 8006d76:	b21b      	sxth	r3, r3
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	1dba      	adds	r2, r7, #6
 8006d7c:	8812      	ldrh	r2, [r2, #0]
 8006d7e:	9201      	str	r2, [sp, #4]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	0033      	movs	r3, r6
 8006d84:	002a      	movs	r2, r5
 8006d86:	0021      	movs	r1, r4
 8006d88:	f7fe fecd 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(tftDisplay.width()/2+lineThickness, tftDisplay.height()/2+lineThickness, (tftDisplay.width() / 2 ) - (2 * lineThickness), (tftDisplay.height() / 2 ) - (2 * lineThickness), backgroundColor);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7ff fc97 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006d94:	0003      	movs	r3, r0
 8006d96:	085b      	lsrs	r3, r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	2628      	movs	r6, #40	; 0x28
 8006d9c:	19bb      	adds	r3, r7, r6
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	18d3      	adds	r3, r2, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	b21c      	sxth	r4, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	0018      	movs	r0, r3
 8006daa:	f7ff fc94 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8006dae:	0003      	movs	r3, r0
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	19bb      	adds	r3, r7, r6
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	18d3      	adds	r3, r2, r3
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	b21d      	sxth	r5, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f7ff fc7e 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	085b      	lsrs	r3, r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	19bb      	adds	r3, r7, r6
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	18db      	adds	r3, r3, r3
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	b21e      	sxth	r6, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f7ff fc7a 	bl	80066d6 <_ZN7TFT_GFX6heightEv>
 8006de2:	0003      	movs	r3, r0
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	2328      	movs	r3, #40	; 0x28
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	18db      	adds	r3, r3, r3
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	18ba      	adds	r2, r7, r2
 8006dfe:	8812      	ldrh	r2, [r2, #0]
 8006e00:	9201      	str	r2, [sp, #4]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	0033      	movs	r3, r6
 8006e06:	002a      	movs	r2, r5
 8006e08:	0021      	movs	r1, r4
 8006e0a:	f7fe fe8c 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>
	//	}

	//Draw Segment Lines

	//	tftDisplay.writeFillRect(tftDisplay.width()/2, tftDisplay.height(), lineThickness, tftDisplay.height(), lineColor);
}
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b005      	add	sp, #20
 8006e14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e16 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>:
//Public Function Prototypes

//Private Function Definitions

//Public Function Definitions
TFT_TEXT_BOX::TFT_TEXT_BOX(TFT_GFX* display, uint16_t bg_color, uint16_t x_pos, uint16_t y_pos, int16_t x_edge, bool is_centered):
 8006e16:	b590      	push	{r4, r7, lr}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	0019      	movs	r1, r3
 8006e22:	1dbb      	adds	r3, r7, #6
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	1d3b      	adds	r3, r7, #4
 8006e28:	1c0a      	adds	r2, r1, #0
 8006e2a:	801a      	strh	r2, [r3, #0]
main_display{display}, xPos{x_pos}, yPos{y_pos}, prevMaxX{x_pos}, prevMaxY{y_pos}, bgColor{bg_color}, isCentered{is_centered}
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1d3a      	adds	r2, r7, #4
 8006e36:	8812      	ldrh	r2, [r2, #0]
 8006e38:	809a      	strh	r2, [r3, #4]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2120      	movs	r1, #32
 8006e3e:	187a      	adds	r2, r7, r1
 8006e40:	8812      	ldrh	r2, [r2, #0]
 8006e42:	80da      	strh	r2, [r3, #6]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	1d3a      	adds	r2, r7, #4
 8006e48:	8812      	ldrh	r2, [r2, #0]
 8006e4a:	811a      	strh	r2, [r3, #8]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	187a      	adds	r2, r7, r1
 8006e50:	8812      	ldrh	r2, [r2, #0]
 8006e52:	815a      	strh	r2, [r3, #10]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	1dba      	adds	r2, r7, #6
 8006e58:	8812      	ldrh	r2, [r2, #0]
 8006e5a:	819a      	strh	r2, [r3, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2228      	movs	r2, #40	; 0x28
 8006e60:	18ba      	adds	r2, r7, r2
 8006e62:	7812      	ldrb	r2, [r2, #0]
 8006e64:	741a      	strb	r2, [r3, #16]
{
	if(x_edge <= x_pos || x_edge > display->width())
 8006e66:	2324      	movs	r3, #36	; 0x24
 8006e68:	18fb      	adds	r3, r7, r3
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	5e9a      	ldrsh	r2, [r3, r2]
 8006e6e:	1d3b      	adds	r3, r7, #4
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	dd0a      	ble.n	8006e8c <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x76>
 8006e76:	2324      	movs	r3, #36	; 0x24
 8006e78:	18fb      	adds	r3, r7, r3
 8006e7a:	2400      	movs	r4, #0
 8006e7c:	5f1c      	ldrsh	r4, [r3, r4]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7ff fc1e 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006e86:	0003      	movs	r3, r0
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	dd01      	ble.n	8006e90 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x7a>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x7c>
 8006e90:	2300      	movs	r3, #0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d008      	beq.n	8006ea8 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x92>
	{
		this->wrapXEdge = display->width();
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7ff fc12 	bl	80066c2 <_ZN7TFT_GFX5widthEv>
 8006e9e:	0003      	movs	r3, r0
 8006ea0:	001a      	movs	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	81da      	strh	r2, [r3, #14]
 8006ea6:	e004      	b.n	8006eb2 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x9c>
	}else{
		this->wrapXEdge = x_edge;
 8006ea8:	2324      	movs	r3, #36	; 0x24
 8006eaa:	18fb      	adds	r3, r7, r3
 8006eac:	881a      	ldrh	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	81da      	strh	r2, [r3, #14]
	}
}
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b005      	add	sp, #20
 8006eba:	bd90      	pop	{r4, r7, pc}

08006ebc <_ZN12TFT_TEXT_BOX5writeEPKcth>:
TFT_TEXT_BOX::TFT_TEXT_BOX(void):
main_display{nullptr}, xPos{0}, yPos{0}, prevMaxX{0}, prevMaxY{0}, bgColor{0},wrapXEdge{0}, isCentered{0}
{}

uint16_t TFT_TEXT_BOX::write(const char* string, uint16_t font_color, uint8_t font_size)
{
 8006ebc:	b5b0      	push	{r4, r5, r7, lr}
 8006ebe:	b08c      	sub	sp, #48	; 0x30
 8006ec0:	af06      	add	r7, sp, #24
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	1dbb      	adds	r3, r7, #6
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	1d7b      	adds	r3, r7, #5
 8006ece:	1c0a      	adds	r2, r1, #0
 8006ed0:	701a      	strb	r2, [r3, #0]
    //First clear previous text
    this->clear();
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f000 f832 	bl	8006f3e <_ZN12TFT_TEXT_BOX5clearEv>
    //Then draw new text
	std::pair<uint16_t, uint16_t> drawStringRet = this->main_display->drawString(this->xPos, this->yPos, string, font_color, font_color, font_size, font_size, this->wrapXEdge, this->isCentered);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	889b      	ldrh	r3, [r3, #4]
 8006ee2:	b219      	sxth	r1, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	88db      	ldrh	r3, [r3, #6]
 8006ee8:	b21c      	sxth	r4, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	89db      	ldrh	r3, [r3, #14]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	7c12      	ldrb	r2, [r2, #16]
 8006ef2:	68bd      	ldr	r5, [r7, #8]
 8006ef4:	9205      	str	r2, [sp, #20]
 8006ef6:	9304      	str	r3, [sp, #16]
 8006ef8:	1d7b      	adds	r3, r7, #5
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	9303      	str	r3, [sp, #12]
 8006efe:	1d7b      	adds	r3, r7, #5
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	9302      	str	r3, [sp, #8]
 8006f04:	1dbb      	adds	r3, r7, #6
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	1dbb      	adds	r3, r7, #6
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	002b      	movs	r3, r5
 8006f12:	0022      	movs	r2, r4
 8006f14:	f7ff fa01 	bl	800631a <_ZN7TFT_GFX10drawStringEssPKctthhtb>
 8006f18:	0003      	movs	r3, r0
 8006f1a:	001a      	movs	r2, r3
 8006f1c:	2114      	movs	r1, #20
 8006f1e:	187b      	adds	r3, r7, r1
 8006f20:	601a      	str	r2, [r3, #0]
	this->prevMaxX = drawStringRet.first;
 8006f22:	187b      	adds	r3, r7, r1
 8006f24:	881a      	ldrh	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	811a      	strh	r2, [r3, #8]
	this->prevMaxY = drawStringRet.second;
 8006f2a:	187b      	adds	r3, r7, r1
 8006f2c:	885a      	ldrh	r2, [r3, #2]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	815a      	strh	r2, [r3, #10]
	return this->prevMaxY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	895b      	ldrh	r3, [r3, #10]
}
 8006f36:	0018      	movs	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b006      	add	sp, #24
 8006f3c:	bdb0      	pop	{r4, r5, r7, pc}

08006f3e <_ZN12TFT_TEXT_BOX5clearEv>:

void TFT_TEXT_BOX::clear(void)
{
 8006f3e:	b5b0      	push	{r4, r5, r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af02      	add	r7, sp, #8
 8006f44:	6078      	str	r0, [r7, #4]
    this->main_display->writeFillRect(this->xPos, this->yPos, this->prevMaxX - this->xPos, this->prevMaxY - this->yPos, this->bgColor);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	889b      	ldrh	r3, [r3, #4]
 8006f4e:	b219      	sxth	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	88db      	ldrh	r3, [r3, #6]
 8006f54:	b21c      	sxth	r4, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	891a      	ldrh	r2, [r3, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	889b      	ldrh	r3, [r3, #4]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	b21d      	sxth	r5, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	895a      	ldrh	r2, [r3, #10]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	88db      	ldrh	r3, [r3, #6]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	b21b      	sxth	r3, r3
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	8992      	ldrh	r2, [r2, #12]
 8006f76:	9201      	str	r2, [sp, #4]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	002b      	movs	r3, r5
 8006f7c:	0022      	movs	r2, r4
 8006f7e:	f7fe fdd2 	bl	8005b26 <_ZN7TFT_GFX13writeFillRectEsssst>
}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b002      	add	sp, #8
 8006f88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006f8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006f8c:	480d      	ldr	r0, [pc, #52]	; (8006fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f90:	480d      	ldr	r0, [pc, #52]	; (8006fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006f92:	490e      	ldr	r1, [pc, #56]	; (8006fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8006f94:	4a0e      	ldr	r2, [pc, #56]	; (8006fd0 <LoopForever+0xe>)
  movs r3, #0
 8006f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f98:	e002      	b.n	8006fa0 <LoopCopyDataInit>

08006f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f9e:	3304      	adds	r3, #4

08006fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fa4:	d3f9      	bcc.n	8006f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fa6:	4a0b      	ldr	r2, [pc, #44]	; (8006fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006fa8:	4c0b      	ldr	r4, [pc, #44]	; (8006fd8 <LoopForever+0x16>)
  movs r3, #0
 8006faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fac:	e001      	b.n	8006fb2 <LoopFillZerobss>

08006fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fb0:	3204      	adds	r2, #4

08006fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fb4:	d3fb      	bcc.n	8006fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006fb6:	f7fe fb35 	bl	8005624 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006fba:	f001 fb91 	bl	80086e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006fbe:	f7fd f9b7 	bl	8004330 <main>

08006fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8006fc2:	e7fe      	b.n	8006fc2 <LoopForever>
  ldr   r0, =_estack
 8006fc4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006fcc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8006fd0:	080091e0 	.word	0x080091e0
  ldr r2, =_sbss
 8006fd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8006fd8:	20000154 	.word	0x20000154

08006fdc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006fdc:	e7fe      	b.n	8006fdc <ADC1_COMP_IRQHandler>
	...

08006fe0 <floor>:
 8006fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe2:	004b      	lsls	r3, r1, #1
 8006fe4:	4a39      	ldr	r2, [pc, #228]	; (80070cc <floor+0xec>)
 8006fe6:	0d5b      	lsrs	r3, r3, #21
 8006fe8:	b085      	sub	sp, #20
 8006fea:	189e      	adds	r6, r3, r2
 8006fec:	000c      	movs	r4, r1
 8006fee:	0005      	movs	r5, r0
 8006ff0:	9003      	str	r0, [sp, #12]
 8006ff2:	2e13      	cmp	r6, #19
 8006ff4:	dc34      	bgt.n	8007060 <floor+0x80>
 8006ff6:	2e00      	cmp	r6, #0
 8006ff8:	da15      	bge.n	8007026 <floor+0x46>
 8006ffa:	4a35      	ldr	r2, [pc, #212]	; (80070d0 <floor+0xf0>)
 8006ffc:	4b35      	ldr	r3, [pc, #212]	; (80070d4 <floor+0xf4>)
 8006ffe:	f7f9 fe95 	bl	8000d2c <__aeabi_dadd>
 8007002:	2200      	movs	r2, #0
 8007004:	2300      	movs	r3, #0
 8007006:	f7f9 fa1f 	bl	8000448 <__aeabi_dcmpgt>
 800700a:	2800      	cmp	r0, #0
 800700c:	d008      	beq.n	8007020 <floor+0x40>
 800700e:	2c00      	cmp	r4, #0
 8007010:	da59      	bge.n	80070c6 <floor+0xe6>
 8007012:	0063      	lsls	r3, r4, #1
 8007014:	085b      	lsrs	r3, r3, #1
 8007016:	432b      	orrs	r3, r5
 8007018:	2500      	movs	r5, #0
 800701a:	42ab      	cmp	r3, r5
 800701c:	d000      	beq.n	8007020 <floor+0x40>
 800701e:	4c2e      	ldr	r4, [pc, #184]	; (80070d8 <floor+0xf8>)
 8007020:	0028      	movs	r0, r5
 8007022:	0021      	movs	r1, r4
 8007024:	e026      	b.n	8007074 <floor+0x94>
 8007026:	4f2d      	ldr	r7, [pc, #180]	; (80070dc <floor+0xfc>)
 8007028:	4137      	asrs	r7, r6
 800702a:	003b      	movs	r3, r7
 800702c:	400b      	ands	r3, r1
 800702e:	4303      	orrs	r3, r0
 8007030:	d020      	beq.n	8007074 <floor+0x94>
 8007032:	9000      	str	r0, [sp, #0]
 8007034:	9101      	str	r1, [sp, #4]
 8007036:	4a26      	ldr	r2, [pc, #152]	; (80070d0 <floor+0xf0>)
 8007038:	4b26      	ldr	r3, [pc, #152]	; (80070d4 <floor+0xf4>)
 800703a:	9800      	ldr	r0, [sp, #0]
 800703c:	9901      	ldr	r1, [sp, #4]
 800703e:	f7f9 fe75 	bl	8000d2c <__aeabi_dadd>
 8007042:	2200      	movs	r2, #0
 8007044:	2300      	movs	r3, #0
 8007046:	f7f9 f9ff 	bl	8000448 <__aeabi_dcmpgt>
 800704a:	2800      	cmp	r0, #0
 800704c:	d0e8      	beq.n	8007020 <floor+0x40>
 800704e:	2c00      	cmp	r4, #0
 8007050:	da03      	bge.n	800705a <floor+0x7a>
 8007052:	2380      	movs	r3, #128	; 0x80
 8007054:	035b      	lsls	r3, r3, #13
 8007056:	4133      	asrs	r3, r6
 8007058:	18e4      	adds	r4, r4, r3
 800705a:	43bc      	bics	r4, r7
 800705c:	2500      	movs	r5, #0
 800705e:	e7df      	b.n	8007020 <floor+0x40>
 8007060:	2e33      	cmp	r6, #51	; 0x33
 8007062:	dd09      	ble.n	8007078 <floor+0x98>
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	429e      	cmp	r6, r3
 800706a:	d103      	bne.n	8007074 <floor+0x94>
 800706c:	0002      	movs	r2, r0
 800706e:	000b      	movs	r3, r1
 8007070:	f7f9 fe5c 	bl	8000d2c <__aeabi_dadd>
 8007074:	b005      	add	sp, #20
 8007076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007078:	2701      	movs	r7, #1
 800707a:	4a19      	ldr	r2, [pc, #100]	; (80070e0 <floor+0x100>)
 800707c:	427f      	negs	r7, r7
 800707e:	189b      	adds	r3, r3, r2
 8007080:	40df      	lsrs	r7, r3
 8007082:	4238      	tst	r0, r7
 8007084:	d0f6      	beq.n	8007074 <floor+0x94>
 8007086:	9000      	str	r0, [sp, #0]
 8007088:	9101      	str	r1, [sp, #4]
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <floor+0xf0>)
 800708c:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <floor+0xf4>)
 800708e:	9800      	ldr	r0, [sp, #0]
 8007090:	9901      	ldr	r1, [sp, #4]
 8007092:	f7f9 fe4b 	bl	8000d2c <__aeabi_dadd>
 8007096:	2200      	movs	r2, #0
 8007098:	2300      	movs	r3, #0
 800709a:	f7f9 f9d5 	bl	8000448 <__aeabi_dcmpgt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d0be      	beq.n	8007020 <floor+0x40>
 80070a2:	2c00      	cmp	r4, #0
 80070a4:	da02      	bge.n	80070ac <floor+0xcc>
 80070a6:	2e14      	cmp	r6, #20
 80070a8:	d102      	bne.n	80070b0 <floor+0xd0>
 80070aa:	3401      	adds	r4, #1
 80070ac:	43bd      	bics	r5, r7
 80070ae:	e7b7      	b.n	8007020 <floor+0x40>
 80070b0:	2334      	movs	r3, #52	; 0x34
 80070b2:	1b9e      	subs	r6, r3, r6
 80070b4:	3b33      	subs	r3, #51	; 0x33
 80070b6:	40b3      	lsls	r3, r6
 80070b8:	18ed      	adds	r5, r5, r3
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	429d      	cmp	r5, r3
 80070be:	419b      	sbcs	r3, r3
 80070c0:	425b      	negs	r3, r3
 80070c2:	18e4      	adds	r4, r4, r3
 80070c4:	e7f2      	b.n	80070ac <floor+0xcc>
 80070c6:	2500      	movs	r5, #0
 80070c8:	002c      	movs	r4, r5
 80070ca:	e7a9      	b.n	8007020 <floor+0x40>
 80070cc:	fffffc01 	.word	0xfffffc01
 80070d0:	8800759c 	.word	0x8800759c
 80070d4:	7e37e43c 	.word	0x7e37e43c
 80070d8:	bff00000 	.word	0xbff00000
 80070dc:	000fffff 	.word	0x000fffff
 80070e0:	fffffbed 	.word	0xfffffbed

080070e4 <log10>:
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e6:	2600      	movs	r6, #0
 80070e8:	b08d      	sub	sp, #52	; 0x34
 80070ea:	0004      	movs	r4, r0
 80070ec:	000d      	movs	r5, r1
 80070ee:	f000 fa0d 	bl	800750c <__ieee754_log10>
 80070f2:	4b36      	ldr	r3, [pc, #216]	; (80071cc <log10+0xe8>)
 80070f4:	9000      	str	r0, [sp, #0]
 80070f6:	9101      	str	r1, [sp, #4]
 80070f8:	579e      	ldrsb	r6, [r3, r6]
 80070fa:	1c73      	adds	r3, r6, #1
 80070fc:	d062      	beq.n	80071c4 <log10+0xe0>
 80070fe:	0022      	movs	r2, r4
 8007100:	002b      	movs	r3, r5
 8007102:	0020      	movs	r0, r4
 8007104:	0029      	movs	r1, r5
 8007106:	f7fb faf1 	bl	80026ec <__aeabi_dcmpun>
 800710a:	1e07      	subs	r7, r0, #0
 800710c:	d15a      	bne.n	80071c4 <log10+0xe0>
 800710e:	2200      	movs	r2, #0
 8007110:	2300      	movs	r3, #0
 8007112:	0020      	movs	r0, r4
 8007114:	0029      	movs	r1, r5
 8007116:	f7f9 f98d 	bl	8000434 <__aeabi_dcmple>
 800711a:	2800      	cmp	r0, #0
 800711c:	d052      	beq.n	80071c4 <log10+0xe0>
 800711e:	4b2c      	ldr	r3, [pc, #176]	; (80071d0 <log10+0xec>)
 8007120:	970a      	str	r7, [sp, #40]	; 0x28
 8007122:	9303      	str	r3, [sp, #12]
 8007124:	9404      	str	r4, [sp, #16]
 8007126:	9505      	str	r5, [sp, #20]
 8007128:	9406      	str	r4, [sp, #24]
 800712a:	9507      	str	r5, [sp, #28]
 800712c:	2e00      	cmp	r6, #0
 800712e:	d115      	bne.n	800715c <log10+0x78>
 8007130:	22e0      	movs	r2, #224	; 0xe0
 8007132:	4b28      	ldr	r3, [pc, #160]	; (80071d4 <log10+0xf0>)
 8007134:	0612      	lsls	r2, r2, #24
 8007136:	9208      	str	r2, [sp, #32]
 8007138:	9309      	str	r3, [sp, #36]	; 0x24
 800713a:	0020      	movs	r0, r4
 800713c:	2200      	movs	r2, #0
 800713e:	2300      	movs	r3, #0
 8007140:	0029      	movs	r1, r5
 8007142:	f7f9 f967 	bl	8000414 <__aeabi_dcmpeq>
 8007146:	2800      	cmp	r0, #0
 8007148:	d128      	bne.n	800719c <log10+0xb8>
 800714a:	2301      	movs	r3, #1
 800714c:	9302      	str	r3, [sp, #8]
 800714e:	2e02      	cmp	r6, #2
 8007150:	d119      	bne.n	8007186 <log10+0xa2>
 8007152:	f001 fabf 	bl	80086d4 <__errno>
 8007156:	2321      	movs	r3, #33	; 0x21
 8007158:	6003      	str	r3, [r0, #0]
 800715a:	e019      	b.n	8007190 <log10+0xac>
 800715c:	2200      	movs	r2, #0
 800715e:	4b1e      	ldr	r3, [pc, #120]	; (80071d8 <log10+0xf4>)
 8007160:	0020      	movs	r0, r4
 8007162:	9208      	str	r2, [sp, #32]
 8007164:	9309      	str	r3, [sp, #36]	; 0x24
 8007166:	0029      	movs	r1, r5
 8007168:	2200      	movs	r2, #0
 800716a:	2300      	movs	r3, #0
 800716c:	f7f9 f952 	bl	8000414 <__aeabi_dcmpeq>
 8007170:	2800      	cmp	r0, #0
 8007172:	d0ea      	beq.n	800714a <log10+0x66>
 8007174:	2302      	movs	r3, #2
 8007176:	9302      	str	r3, [sp, #8]
 8007178:	429e      	cmp	r6, r3
 800717a:	d111      	bne.n	80071a0 <log10+0xbc>
 800717c:	f001 faaa 	bl	80086d4 <__errno>
 8007180:	2322      	movs	r3, #34	; 0x22
 8007182:	6003      	str	r3, [r0, #0]
 8007184:	e011      	b.n	80071aa <log10+0xc6>
 8007186:	a802      	add	r0, sp, #8
 8007188:	f000 fff6 	bl	8008178 <matherr>
 800718c:	2800      	cmp	r0, #0
 800718e:	d0e0      	beq.n	8007152 <log10+0x6e>
 8007190:	4812      	ldr	r0, [pc, #72]	; (80071dc <log10+0xf8>)
 8007192:	f000 fff3 	bl	800817c <nan>
 8007196:	9008      	str	r0, [sp, #32]
 8007198:	9109      	str	r1, [sp, #36]	; 0x24
 800719a:	e006      	b.n	80071aa <log10+0xc6>
 800719c:	2302      	movs	r3, #2
 800719e:	9302      	str	r3, [sp, #8]
 80071a0:	a802      	add	r0, sp, #8
 80071a2:	f000 ffe9 	bl	8008178 <matherr>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d0e8      	beq.n	800717c <log10+0x98>
 80071aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <log10+0xd8>
 80071b2:	f001 fa8f 	bl	80086d4 <__errno>
 80071b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	6003      	str	r3, [r0, #0]
 80071bc:	9b08      	ldr	r3, [sp, #32]
 80071be:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	9401      	str	r4, [sp, #4]
 80071c4:	9800      	ldr	r0, [sp, #0]
 80071c6:	9901      	ldr	r1, [sp, #4]
 80071c8:	b00d      	add	sp, #52	; 0x34
 80071ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071cc:	2000000c 	.word	0x2000000c
 80071d0:	08009188 	.word	0x08009188
 80071d4:	c7efffff 	.word	0xc7efffff
 80071d8:	fff00000 	.word	0xfff00000
 80071dc:	0800918d 	.word	0x0800918d

080071e0 <pow>:
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	2400      	movs	r4, #0
 80071e4:	b091      	sub	sp, #68	; 0x44
 80071e6:	001f      	movs	r7, r3
 80071e8:	9000      	str	r0, [sp, #0]
 80071ea:	9101      	str	r1, [sp, #4]
 80071ec:	0016      	movs	r6, r2
 80071ee:	f000 fa0f 	bl	8007610 <__ieee754_pow>
 80071f2:	4bbe      	ldr	r3, [pc, #760]	; (80074ec <pow+0x30c>)
 80071f4:	9002      	str	r0, [sp, #8]
 80071f6:	9103      	str	r1, [sp, #12]
 80071f8:	571c      	ldrsb	r4, [r3, r4]
 80071fa:	1c63      	adds	r3, r4, #1
 80071fc:	d100      	bne.n	8007200 <pow+0x20>
 80071fe:	e0d4      	b.n	80073aa <pow+0x1ca>
 8007200:	0032      	movs	r2, r6
 8007202:	003b      	movs	r3, r7
 8007204:	0030      	movs	r0, r6
 8007206:	0039      	movs	r1, r7
 8007208:	f7fb fa70 	bl	80026ec <__aeabi_dcmpun>
 800720c:	1e05      	subs	r5, r0, #0
 800720e:	d000      	beq.n	8007212 <pow+0x32>
 8007210:	e0cb      	b.n	80073aa <pow+0x1ca>
 8007212:	9a00      	ldr	r2, [sp, #0]
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	0010      	movs	r0, r2
 8007218:	0019      	movs	r1, r3
 800721a:	f7fb fa67 	bl	80026ec <__aeabi_dcmpun>
 800721e:	2200      	movs	r2, #0
 8007220:	9005      	str	r0, [sp, #20]
 8007222:	2800      	cmp	r0, #0
 8007224:	d01e      	beq.n	8007264 <pow+0x84>
 8007226:	2300      	movs	r3, #0
 8007228:	0030      	movs	r0, r6
 800722a:	0039      	movs	r1, r7
 800722c:	f7f9 f8f2 	bl	8000414 <__aeabi_dcmpeq>
 8007230:	2800      	cmp	r0, #0
 8007232:	d100      	bne.n	8007236 <pow+0x56>
 8007234:	e0b9      	b.n	80073aa <pow+0x1ca>
 8007236:	2301      	movs	r3, #1
 8007238:	9306      	str	r3, [sp, #24]
 800723a:	4bad      	ldr	r3, [pc, #692]	; (80074f0 <pow+0x310>)
 800723c:	950e      	str	r5, [sp, #56]	; 0x38
 800723e:	9307      	str	r3, [sp, #28]
 8007240:	9a00      	ldr	r2, [sp, #0]
 8007242:	9b01      	ldr	r3, [sp, #4]
 8007244:	9208      	str	r2, [sp, #32]
 8007246:	9309      	str	r3, [sp, #36]	; 0x24
 8007248:	2200      	movs	r2, #0
 800724a:	4baa      	ldr	r3, [pc, #680]	; (80074f4 <pow+0x314>)
 800724c:	960a      	str	r6, [sp, #40]	; 0x28
 800724e:	970b      	str	r7, [sp, #44]	; 0x2c
 8007250:	920c      	str	r2, [sp, #48]	; 0x30
 8007252:	930d      	str	r3, [sp, #52]	; 0x34
 8007254:	2c02      	cmp	r4, #2
 8007256:	d033      	beq.n	80072c0 <pow+0xe0>
 8007258:	a806      	add	r0, sp, #24
 800725a:	f000 ff8d 	bl	8008178 <matherr>
 800725e:	2800      	cmp	r0, #0
 8007260:	d125      	bne.n	80072ae <pow+0xce>
 8007262:	e059      	b.n	8007318 <pow+0x138>
 8007264:	2300      	movs	r3, #0
 8007266:	9800      	ldr	r0, [sp, #0]
 8007268:	9901      	ldr	r1, [sp, #4]
 800726a:	f7f9 f8d3 	bl	8000414 <__aeabi_dcmpeq>
 800726e:	2800      	cmp	r0, #0
 8007270:	d057      	beq.n	8007322 <pow+0x142>
 8007272:	2200      	movs	r2, #0
 8007274:	2300      	movs	r3, #0
 8007276:	0030      	movs	r0, r6
 8007278:	0039      	movs	r1, r7
 800727a:	f7f9 f8cb 	bl	8000414 <__aeabi_dcmpeq>
 800727e:	1e05      	subs	r5, r0, #0
 8007280:	d021      	beq.n	80072c6 <pow+0xe6>
 8007282:	2301      	movs	r3, #1
 8007284:	9306      	str	r3, [sp, #24]
 8007286:	4b9a      	ldr	r3, [pc, #616]	; (80074f0 <pow+0x310>)
 8007288:	960a      	str	r6, [sp, #40]	; 0x28
 800728a:	970b      	str	r7, [sp, #44]	; 0x2c
 800728c:	9307      	str	r3, [sp, #28]
 800728e:	9b05      	ldr	r3, [sp, #20]
 8007290:	930e      	str	r3, [sp, #56]	; 0x38
 8007292:	9a00      	ldr	r2, [sp, #0]
 8007294:	9b01      	ldr	r3, [sp, #4]
 8007296:	9208      	str	r2, [sp, #32]
 8007298:	9309      	str	r3, [sp, #36]	; 0x24
 800729a:	2200      	movs	r2, #0
 800729c:	2300      	movs	r3, #0
 800729e:	920c      	str	r2, [sp, #48]	; 0x30
 80072a0:	930d      	str	r3, [sp, #52]	; 0x34
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	d0d8      	beq.n	8007258 <pow+0x78>
 80072a6:	2200      	movs	r2, #0
 80072a8:	4b92      	ldr	r3, [pc, #584]	; (80074f4 <pow+0x314>)
 80072aa:	920c      	str	r2, [sp, #48]	; 0x30
 80072ac:	930d      	str	r3, [sp, #52]	; 0x34
 80072ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <pow+0xe0>
 80072b6:	f001 fa0d 	bl	80086d4 <__errno>
 80072ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	6003      	str	r3, [r0, #0]
 80072c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80072c4:	e06f      	b.n	80073a6 <pow+0x1c6>
 80072c6:	0030      	movs	r0, r6
 80072c8:	0039      	movs	r1, r7
 80072ca:	f000 ff4d 	bl	8008168 <finite>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d06b      	beq.n	80073aa <pow+0x1ca>
 80072d2:	2200      	movs	r2, #0
 80072d4:	2300      	movs	r3, #0
 80072d6:	0030      	movs	r0, r6
 80072d8:	0039      	movs	r1, r7
 80072da:	f7f9 f8a1 	bl	8000420 <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d063      	beq.n	80073aa <pow+0x1ca>
 80072e2:	2301      	movs	r3, #1
 80072e4:	9306      	str	r3, [sp, #24]
 80072e6:	4b82      	ldr	r3, [pc, #520]	; (80074f0 <pow+0x310>)
 80072e8:	950e      	str	r5, [sp, #56]	; 0x38
 80072ea:	9307      	str	r3, [sp, #28]
 80072ec:	9b00      	ldr	r3, [sp, #0]
 80072ee:	9c01      	ldr	r4, [sp, #4]
 80072f0:	9308      	str	r3, [sp, #32]
 80072f2:	9409      	str	r4, [sp, #36]	; 0x24
 80072f4:	4b7d      	ldr	r3, [pc, #500]	; (80074ec <pow+0x30c>)
 80072f6:	960a      	str	r6, [sp, #40]	; 0x28
 80072f8:	970b      	str	r7, [sp, #44]	; 0x2c
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b25b      	sxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d104      	bne.n	800730c <pow+0x12c>
 8007302:	2300      	movs	r3, #0
 8007304:	2400      	movs	r4, #0
 8007306:	930c      	str	r3, [sp, #48]	; 0x30
 8007308:	940d      	str	r4, [sp, #52]	; 0x34
 800730a:	e7a5      	b.n	8007258 <pow+0x78>
 800730c:	2000      	movs	r0, #0
 800730e:	497a      	ldr	r1, [pc, #488]	; (80074f8 <pow+0x318>)
 8007310:	900c      	str	r0, [sp, #48]	; 0x30
 8007312:	910d      	str	r1, [sp, #52]	; 0x34
 8007314:	2b02      	cmp	r3, #2
 8007316:	d19f      	bne.n	8007258 <pow+0x78>
 8007318:	f001 f9dc 	bl	80086d4 <__errno>
 800731c:	2321      	movs	r3, #33	; 0x21
 800731e:	6003      	str	r3, [r0, #0]
 8007320:	e7c5      	b.n	80072ae <pow+0xce>
 8007322:	9802      	ldr	r0, [sp, #8]
 8007324:	9903      	ldr	r1, [sp, #12]
 8007326:	f000 ff1f 	bl	8008168 <finite>
 800732a:	9005      	str	r0, [sp, #20]
 800732c:	2800      	cmp	r0, #0
 800732e:	d000      	beq.n	8007332 <pow+0x152>
 8007330:	e0a5      	b.n	800747e <pow+0x29e>
 8007332:	9800      	ldr	r0, [sp, #0]
 8007334:	9901      	ldr	r1, [sp, #4]
 8007336:	f000 ff17 	bl	8008168 <finite>
 800733a:	2800      	cmp	r0, #0
 800733c:	d100      	bne.n	8007340 <pow+0x160>
 800733e:	e09e      	b.n	800747e <pow+0x29e>
 8007340:	0030      	movs	r0, r6
 8007342:	0039      	movs	r1, r7
 8007344:	f000 ff10 	bl	8008168 <finite>
 8007348:	2800      	cmp	r0, #0
 800734a:	d100      	bne.n	800734e <pow+0x16e>
 800734c:	e097      	b.n	800747e <pow+0x29e>
 800734e:	2500      	movs	r5, #0
 8007350:	4b66      	ldr	r3, [pc, #408]	; (80074ec <pow+0x30c>)
 8007352:	ac06      	add	r4, sp, #24
 8007354:	575d      	ldrsb	r5, [r3, r5]
 8007356:	9a02      	ldr	r2, [sp, #8]
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	0019      	movs	r1, r3
 800735c:	0010      	movs	r0, r2
 800735e:	f7fb f9c5 	bl	80026ec <__aeabi_dcmpun>
 8007362:	4b63      	ldr	r3, [pc, #396]	; (80074f0 <pow+0x310>)
 8007364:	2800      	cmp	r0, #0
 8007366:	d031      	beq.n	80073cc <pow+0x1ec>
 8007368:	2201      	movs	r2, #1
 800736a:	6063      	str	r3, [r4, #4]
 800736c:	9b05      	ldr	r3, [sp, #20]
 800736e:	9206      	str	r2, [sp, #24]
 8007370:	6223      	str	r3, [r4, #32]
 8007372:	6126      	str	r6, [r4, #16]
 8007374:	6167      	str	r7, [r4, #20]
 8007376:	9a00      	ldr	r2, [sp, #0]
 8007378:	9b01      	ldr	r3, [sp, #4]
 800737a:	60a2      	str	r2, [r4, #8]
 800737c:	60e3      	str	r3, [r4, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	2300      	movs	r3, #0
 8007382:	2d00      	cmp	r5, #0
 8007384:	d115      	bne.n	80073b2 <pow+0x1d2>
 8007386:	61a2      	str	r2, [r4, #24]
 8007388:	61e3      	str	r3, [r4, #28]
 800738a:	0020      	movs	r0, r4
 800738c:	f000 fef4 	bl	8008178 <matherr>
 8007390:	2800      	cmp	r0, #0
 8007392:	d016      	beq.n	80073c2 <pow+0x1e2>
 8007394:	6a23      	ldr	r3, [r4, #32]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <pow+0x1c2>
 800739a:	f001 f99b 	bl	80086d4 <__errno>
 800739e:	6a23      	ldr	r3, [r4, #32]
 80073a0:	6003      	str	r3, [r0, #0]
 80073a2:	69a3      	ldr	r3, [r4, #24]
 80073a4:	69e4      	ldr	r4, [r4, #28]
 80073a6:	9302      	str	r3, [sp, #8]
 80073a8:	9403      	str	r4, [sp, #12]
 80073aa:	9802      	ldr	r0, [sp, #8]
 80073ac:	9903      	ldr	r1, [sp, #12]
 80073ae:	b011      	add	sp, #68	; 0x44
 80073b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b2:	0010      	movs	r0, r2
 80073b4:	0019      	movs	r1, r3
 80073b6:	f7f9 ffd5 	bl	8001364 <__aeabi_ddiv>
 80073ba:	61a0      	str	r0, [r4, #24]
 80073bc:	61e1      	str	r1, [r4, #28]
 80073be:	2d02      	cmp	r5, #2
 80073c0:	d1e3      	bne.n	800738a <pow+0x1aa>
 80073c2:	f001 f987 	bl	80086d4 <__errno>
 80073c6:	2321      	movs	r3, #33	; 0x21
 80073c8:	6003      	str	r3, [r0, #0]
 80073ca:	e7e3      	b.n	8007394 <pow+0x1b4>
 80073cc:	2203      	movs	r2, #3
 80073ce:	6126      	str	r6, [r4, #16]
 80073d0:	6167      	str	r7, [r4, #20]
 80073d2:	9206      	str	r2, [sp, #24]
 80073d4:	6063      	str	r3, [r4, #4]
 80073d6:	6220      	str	r0, [r4, #32]
 80073d8:	9a00      	ldr	r2, [sp, #0]
 80073da:	9b01      	ldr	r3, [sp, #4]
 80073dc:	0030      	movs	r0, r6
 80073de:	60a2      	str	r2, [r4, #8]
 80073e0:	60e3      	str	r3, [r4, #12]
 80073e2:	0039      	movs	r1, r7
 80073e4:	2200      	movs	r2, #0
 80073e6:	4b45      	ldr	r3, [pc, #276]	; (80074fc <pow+0x31c>)
 80073e8:	f7fa fbc6 	bl	8001b78 <__aeabi_dmul>
 80073ec:	0006      	movs	r6, r0
 80073ee:	000f      	movs	r7, r1
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	d124      	bne.n	800743e <pow+0x25e>
 80073f4:	9800      	ldr	r0, [sp, #0]
 80073f6:	9901      	ldr	r1, [sp, #4]
 80073f8:	22e0      	movs	r2, #224	; 0xe0
 80073fa:	4b41      	ldr	r3, [pc, #260]	; (8007500 <pow+0x320>)
 80073fc:	0612      	lsls	r2, r2, #24
 80073fe:	61a2      	str	r2, [r4, #24]
 8007400:	61e3      	str	r3, [r4, #28]
 8007402:	2200      	movs	r2, #0
 8007404:	2300      	movs	r3, #0
 8007406:	f7f9 f80b 	bl	8000420 <__aeabi_dcmplt>
 800740a:	2800      	cmp	r0, #0
 800740c:	d030      	beq.n	8007470 <pow+0x290>
 800740e:	0030      	movs	r0, r6
 8007410:	0039      	movs	r1, r7
 8007412:	f000 feb9 	bl	8008188 <rint>
 8007416:	0032      	movs	r2, r6
 8007418:	003b      	movs	r3, r7
 800741a:	f7f8 fffb 	bl	8000414 <__aeabi_dcmpeq>
 800741e:	2800      	cmp	r0, #0
 8007420:	d104      	bne.n	800742c <pow+0x24c>
 8007422:	22e0      	movs	r2, #224	; 0xe0
 8007424:	4b37      	ldr	r3, [pc, #220]	; (8007504 <pow+0x324>)
 8007426:	0612      	lsls	r2, r2, #24
 8007428:	61a2      	str	r2, [r4, #24]
 800742a:	61e3      	str	r3, [r4, #28]
 800742c:	4b2f      	ldr	r3, [pc, #188]	; (80074ec <pow+0x30c>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	b25b      	sxtb	r3, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d11c      	bne.n	8007470 <pow+0x290>
 8007436:	f001 f94d 	bl	80086d4 <__errno>
 800743a:	2322      	movs	r3, #34	; 0x22
 800743c:	e7c4      	b.n	80073c8 <pow+0x1e8>
 800743e:	2200      	movs	r2, #0
 8007440:	9800      	ldr	r0, [sp, #0]
 8007442:	9901      	ldr	r1, [sp, #4]
 8007444:	4b30      	ldr	r3, [pc, #192]	; (8007508 <pow+0x328>)
 8007446:	61a2      	str	r2, [r4, #24]
 8007448:	61e3      	str	r3, [r4, #28]
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	f7f8 ffe7 	bl	8000420 <__aeabi_dcmplt>
 8007452:	2800      	cmp	r0, #0
 8007454:	d0ea      	beq.n	800742c <pow+0x24c>
 8007456:	0030      	movs	r0, r6
 8007458:	0039      	movs	r1, r7
 800745a:	f000 fe95 	bl	8008188 <rint>
 800745e:	0032      	movs	r2, r6
 8007460:	003b      	movs	r3, r7
 8007462:	f7f8 ffd7 	bl	8000414 <__aeabi_dcmpeq>
 8007466:	2800      	cmp	r0, #0
 8007468:	d1e0      	bne.n	800742c <pow+0x24c>
 800746a:	2200      	movs	r2, #0
 800746c:	4b22      	ldr	r3, [pc, #136]	; (80074f8 <pow+0x318>)
 800746e:	e7db      	b.n	8007428 <pow+0x248>
 8007470:	0020      	movs	r0, r4
 8007472:	f000 fe81 	bl	8008178 <matherr>
 8007476:	2800      	cmp	r0, #0
 8007478:	d000      	beq.n	800747c <pow+0x29c>
 800747a:	e78b      	b.n	8007394 <pow+0x1b4>
 800747c:	e7db      	b.n	8007436 <pow+0x256>
 800747e:	2200      	movs	r2, #0
 8007480:	9802      	ldr	r0, [sp, #8]
 8007482:	9903      	ldr	r1, [sp, #12]
 8007484:	2300      	movs	r3, #0
 8007486:	f7f8 ffc5 	bl	8000414 <__aeabi_dcmpeq>
 800748a:	2800      	cmp	r0, #0
 800748c:	d100      	bne.n	8007490 <pow+0x2b0>
 800748e:	e78c      	b.n	80073aa <pow+0x1ca>
 8007490:	9800      	ldr	r0, [sp, #0]
 8007492:	9901      	ldr	r1, [sp, #4]
 8007494:	f000 fe68 	bl	8008168 <finite>
 8007498:	2800      	cmp	r0, #0
 800749a:	d100      	bne.n	800749e <pow+0x2be>
 800749c:	e785      	b.n	80073aa <pow+0x1ca>
 800749e:	0030      	movs	r0, r6
 80074a0:	0039      	movs	r1, r7
 80074a2:	f000 fe61 	bl	8008168 <finite>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d100      	bne.n	80074ac <pow+0x2cc>
 80074aa:	e77e      	b.n	80073aa <pow+0x1ca>
 80074ac:	2304      	movs	r3, #4
 80074ae:	9306      	str	r3, [sp, #24]
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <pow+0x310>)
 80074b2:	960a      	str	r6, [sp, #40]	; 0x28
 80074b4:	970b      	str	r7, [sp, #44]	; 0x2c
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	2300      	movs	r3, #0
 80074ba:	930e      	str	r3, [sp, #56]	; 0x38
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	9c01      	ldr	r4, [sp, #4]
 80074c0:	9308      	str	r3, [sp, #32]
 80074c2:	9409      	str	r4, [sp, #36]	; 0x24
 80074c4:	2300      	movs	r3, #0
 80074c6:	2400      	movs	r4, #0
 80074c8:	930c      	str	r3, [sp, #48]	; 0x30
 80074ca:	940d      	str	r4, [sp, #52]	; 0x34
 80074cc:	4b07      	ldr	r3, [pc, #28]	; (80074ec <pow+0x30c>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	b25b      	sxtb	r3, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d103      	bne.n	80074de <pow+0x2fe>
 80074d6:	f001 f8fd 	bl	80086d4 <__errno>
 80074da:	2322      	movs	r3, #34	; 0x22
 80074dc:	e71f      	b.n	800731e <pow+0x13e>
 80074de:	a806      	add	r0, sp, #24
 80074e0:	f000 fe4a 	bl	8008178 <matherr>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d000      	beq.n	80074ea <pow+0x30a>
 80074e8:	e6e1      	b.n	80072ae <pow+0xce>
 80074ea:	e7f4      	b.n	80074d6 <pow+0x2f6>
 80074ec:	2000000c 	.word	0x2000000c
 80074f0:	0800918e 	.word	0x0800918e
 80074f4:	3ff00000 	.word	0x3ff00000
 80074f8:	fff00000 	.word	0xfff00000
 80074fc:	3fe00000 	.word	0x3fe00000
 8007500:	47efffff 	.word	0x47efffff
 8007504:	c7efffff 	.word	0xc7efffff
 8007508:	7ff00000 	.word	0x7ff00000

0800750c <__ieee754_log10>:
 800750c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750e:	4a34      	ldr	r2, [pc, #208]	; (80075e0 <__ieee754_log10+0xd4>)
 8007510:	b085      	sub	sp, #20
 8007512:	0004      	movs	r4, r0
 8007514:	000d      	movs	r5, r1
 8007516:	000b      	movs	r3, r1
 8007518:	4291      	cmp	r1, r2
 800751a:	dc26      	bgt.n	800756a <__ieee754_log10+0x5e>
 800751c:	004a      	lsls	r2, r1, #1
 800751e:	0852      	lsrs	r2, r2, #1
 8007520:	4302      	orrs	r2, r0
 8007522:	d107      	bne.n	8007534 <__ieee754_log10+0x28>
 8007524:	2200      	movs	r2, #0
 8007526:	2300      	movs	r3, #0
 8007528:	2000      	movs	r0, #0
 800752a:	492e      	ldr	r1, [pc, #184]	; (80075e4 <__ieee754_log10+0xd8>)
 800752c:	f7f9 ff1a 	bl	8001364 <__aeabi_ddiv>
 8007530:	b005      	add	sp, #20
 8007532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007534:	2900      	cmp	r1, #0
 8007536:	da05      	bge.n	8007544 <__ieee754_log10+0x38>
 8007538:	0002      	movs	r2, r0
 800753a:	f7fa fd8f 	bl	800205c <__aeabi_dsub>
 800753e:	2200      	movs	r2, #0
 8007540:	2300      	movs	r3, #0
 8007542:	e7f3      	b.n	800752c <__ieee754_log10+0x20>
 8007544:	2200      	movs	r2, #0
 8007546:	4b28      	ldr	r3, [pc, #160]	; (80075e8 <__ieee754_log10+0xdc>)
 8007548:	f7fa fb16 	bl	8001b78 <__aeabi_dmul>
 800754c:	2236      	movs	r2, #54	; 0x36
 800754e:	0004      	movs	r4, r0
 8007550:	000d      	movs	r5, r1
 8007552:	000b      	movs	r3, r1
 8007554:	4252      	negs	r2, r2
 8007556:	4925      	ldr	r1, [pc, #148]	; (80075ec <__ieee754_log10+0xe0>)
 8007558:	428b      	cmp	r3, r1
 800755a:	dd08      	ble.n	800756e <__ieee754_log10+0x62>
 800755c:	0022      	movs	r2, r4
 800755e:	002b      	movs	r3, r5
 8007560:	0020      	movs	r0, r4
 8007562:	0029      	movs	r1, r5
 8007564:	f7f9 fbe2 	bl	8000d2c <__aeabi_dadd>
 8007568:	e7e2      	b.n	8007530 <__ieee754_log10+0x24>
 800756a:	2200      	movs	r2, #0
 800756c:	e7f3      	b.n	8007556 <__ieee754_log10+0x4a>
 800756e:	4920      	ldr	r1, [pc, #128]	; (80075f0 <__ieee754_log10+0xe4>)
 8007570:	1518      	asrs	r0, r3, #20
 8007572:	1840      	adds	r0, r0, r1
 8007574:	1880      	adds	r0, r0, r2
 8007576:	0fc2      	lsrs	r2, r0, #31
 8007578:	031b      	lsls	r3, r3, #12
 800757a:	0b1b      	lsrs	r3, r3, #12
 800757c:	1880      	adds	r0, r0, r2
 800757e:	9203      	str	r2, [sp, #12]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	f7fb f905 	bl	8002790 <__aeabi_i2d>
 8007586:	9a03      	ldr	r2, [sp, #12]
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <__ieee754_log10+0xe8>)
 800758a:	0006      	movs	r6, r0
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	9a00      	ldr	r2, [sp, #0]
 8007590:	051b      	lsls	r3, r3, #20
 8007592:	431a      	orrs	r2, r3
 8007594:	000f      	movs	r7, r1
 8007596:	0020      	movs	r0, r4
 8007598:	0011      	movs	r1, r2
 800759a:	f000 fee1 	bl	8008360 <__ieee754_log>
 800759e:	4a16      	ldr	r2, [pc, #88]	; (80075f8 <__ieee754_log10+0xec>)
 80075a0:	0004      	movs	r4, r0
 80075a2:	000d      	movs	r5, r1
 80075a4:	4b15      	ldr	r3, [pc, #84]	; (80075fc <__ieee754_log10+0xf0>)
 80075a6:	0030      	movs	r0, r6
 80075a8:	0039      	movs	r1, r7
 80075aa:	f7fa fae5 	bl	8001b78 <__aeabi_dmul>
 80075ae:	4a14      	ldr	r2, [pc, #80]	; (8007600 <__ieee754_log10+0xf4>)
 80075b0:	9000      	str	r0, [sp, #0]
 80075b2:	9101      	str	r1, [sp, #4]
 80075b4:	4b13      	ldr	r3, [pc, #76]	; (8007604 <__ieee754_log10+0xf8>)
 80075b6:	0020      	movs	r0, r4
 80075b8:	0029      	movs	r1, r5
 80075ba:	f7fa fadd 	bl	8001b78 <__aeabi_dmul>
 80075be:	0002      	movs	r2, r0
 80075c0:	000b      	movs	r3, r1
 80075c2:	9800      	ldr	r0, [sp, #0]
 80075c4:	9901      	ldr	r1, [sp, #4]
 80075c6:	f7f9 fbb1 	bl	8000d2c <__aeabi_dadd>
 80075ca:	4a0f      	ldr	r2, [pc, #60]	; (8007608 <__ieee754_log10+0xfc>)
 80075cc:	4b0f      	ldr	r3, [pc, #60]	; (800760c <__ieee754_log10+0x100>)
 80075ce:	0004      	movs	r4, r0
 80075d0:	000d      	movs	r5, r1
 80075d2:	0030      	movs	r0, r6
 80075d4:	0039      	movs	r1, r7
 80075d6:	f7fa facf 	bl	8001b78 <__aeabi_dmul>
 80075da:	0002      	movs	r2, r0
 80075dc:	000b      	movs	r3, r1
 80075de:	e7bf      	b.n	8007560 <__ieee754_log10+0x54>
 80075e0:	000fffff 	.word	0x000fffff
 80075e4:	c3500000 	.word	0xc3500000
 80075e8:	43500000 	.word	0x43500000
 80075ec:	7fefffff 	.word	0x7fefffff
 80075f0:	fffffc01 	.word	0xfffffc01
 80075f4:	000003ff 	.word	0x000003ff
 80075f8:	11f12b36 	.word	0x11f12b36
 80075fc:	3d59fef3 	.word	0x3d59fef3
 8007600:	1526e50e 	.word	0x1526e50e
 8007604:	3fdbcb7b 	.word	0x3fdbcb7b
 8007608:	509f6000 	.word	0x509f6000
 800760c:	3fd34413 	.word	0x3fd34413

08007610 <__ieee754_pow>:
 8007610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007612:	b095      	sub	sp, #84	; 0x54
 8007614:	9202      	str	r2, [sp, #8]
 8007616:	9303      	str	r3, [sp, #12]
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	000e      	movs	r6, r1
 800761c:	9902      	ldr	r1, [sp, #8]
 800761e:	005d      	lsls	r5, r3, #1
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	000b      	movs	r3, r1
 8007624:	086d      	lsrs	r5, r5, #1
 8007626:	0007      	movs	r7, r0
 8007628:	432b      	orrs	r3, r5
 800762a:	d101      	bne.n	8007630 <__ieee754_pow+0x20>
 800762c:	f000 fcad 	bl	8007f8a <__ieee754_pow+0x97a>
 8007630:	4b7e      	ldr	r3, [pc, #504]	; (800782c <__ieee754_pow+0x21c>)
 8007632:	0074      	lsls	r4, r6, #1
 8007634:	9608      	str	r6, [sp, #32]
 8007636:	9000      	str	r0, [sp, #0]
 8007638:	0864      	lsrs	r4, r4, #1
 800763a:	469c      	mov	ip, r3
 800763c:	429c      	cmp	r4, r3
 800763e:	dc0b      	bgt.n	8007658 <__ieee754_pow+0x48>
 8007640:	d104      	bne.n	800764c <__ieee754_pow+0x3c>
 8007642:	2800      	cmp	r0, #0
 8007644:	d108      	bne.n	8007658 <__ieee754_pow+0x48>
 8007646:	42a5      	cmp	r5, r4
 8007648:	dc0c      	bgt.n	8007664 <__ieee754_pow+0x54>
 800764a:	e001      	b.n	8007650 <__ieee754_pow+0x40>
 800764c:	429d      	cmp	r5, r3
 800764e:	dc03      	bgt.n	8007658 <__ieee754_pow+0x48>
 8007650:	4565      	cmp	r5, ip
 8007652:	d10d      	bne.n	8007670 <__ieee754_pow+0x60>
 8007654:	2900      	cmp	r1, #0
 8007656:	d00b      	beq.n	8007670 <__ieee754_pow+0x60>
 8007658:	4b75      	ldr	r3, [pc, #468]	; (8007830 <__ieee754_pow+0x220>)
 800765a:	18e4      	adds	r4, r4, r3
 800765c:	4327      	orrs	r7, r4
 800765e:	d101      	bne.n	8007664 <__ieee754_pow+0x54>
 8007660:	f000 fc93 	bl	8007f8a <__ieee754_pow+0x97a>
 8007664:	4873      	ldr	r0, [pc, #460]	; (8007834 <__ieee754_pow+0x224>)
 8007666:	f000 fd89 	bl	800817c <nan>
 800766a:	9000      	str	r0, [sp, #0]
 800766c:	9101      	str	r1, [sp, #4]
 800766e:	e061      	b.n	8007734 <__ieee754_pow+0x124>
 8007670:	2300      	movs	r3, #0
 8007672:	9306      	str	r3, [sp, #24]
 8007674:	2e00      	cmp	r6, #0
 8007676:	da17      	bge.n	80076a8 <__ieee754_pow+0x98>
 8007678:	4a6f      	ldr	r2, [pc, #444]	; (8007838 <__ieee754_pow+0x228>)
 800767a:	4295      	cmp	r5, r2
 800767c:	dc4d      	bgt.n	800771a <__ieee754_pow+0x10a>
 800767e:	4a6f      	ldr	r2, [pc, #444]	; (800783c <__ieee754_pow+0x22c>)
 8007680:	4295      	cmp	r5, r2
 8007682:	dd11      	ble.n	80076a8 <__ieee754_pow+0x98>
 8007684:	4b6e      	ldr	r3, [pc, #440]	; (8007840 <__ieee754_pow+0x230>)
 8007686:	152a      	asrs	r2, r5, #20
 8007688:	18d2      	adds	r2, r2, r3
 800768a:	2a14      	cmp	r2, #20
 800768c:	dd25      	ble.n	80076da <__ieee754_pow+0xca>
 800768e:	2034      	movs	r0, #52	; 0x34
 8007690:	1a82      	subs	r2, r0, r2
 8007692:	9802      	ldr	r0, [sp, #8]
 8007694:	40d0      	lsrs	r0, r2
 8007696:	0003      	movs	r3, r0
 8007698:	4093      	lsls	r3, r2
 800769a:	428b      	cmp	r3, r1
 800769c:	d104      	bne.n	80076a8 <__ieee754_pow+0x98>
 800769e:	2201      	movs	r2, #1
 80076a0:	4010      	ands	r0, r2
 80076a2:	1892      	adds	r2, r2, r2
 80076a4:	1a13      	subs	r3, r2, r0
 80076a6:	9306      	str	r3, [sp, #24]
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d15e      	bne.n	800776a <__ieee754_pow+0x15a>
 80076ac:	4565      	cmp	r5, ip
 80076ae:	d123      	bne.n	80076f8 <__ieee754_pow+0xe8>
 80076b0:	4b5f      	ldr	r3, [pc, #380]	; (8007830 <__ieee754_pow+0x220>)
 80076b2:	18e3      	adds	r3, r4, r3
 80076b4:	431f      	orrs	r7, r3
 80076b6:	d101      	bne.n	80076bc <__ieee754_pow+0xac>
 80076b8:	f000 fc67 	bl	8007f8a <__ieee754_pow+0x97a>
 80076bc:	4b5f      	ldr	r3, [pc, #380]	; (800783c <__ieee754_pow+0x22c>)
 80076be:	429c      	cmp	r4, r3
 80076c0:	dd2d      	ble.n	800771e <__ieee754_pow+0x10e>
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	9c03      	ldr	r4, [sp, #12]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	9401      	str	r4, [sp, #4]
 80076ca:	9b04      	ldr	r3, [sp, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	da31      	bge.n	8007734 <__ieee754_pow+0x124>
 80076d0:	2300      	movs	r3, #0
 80076d2:	2400      	movs	r4, #0
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	9401      	str	r4, [sp, #4]
 80076d8:	e02c      	b.n	8007734 <__ieee754_pow+0x124>
 80076da:	2900      	cmp	r1, #0
 80076dc:	d145      	bne.n	800776a <__ieee754_pow+0x15a>
 80076de:	2314      	movs	r3, #20
 80076e0:	1a9a      	subs	r2, r3, r2
 80076e2:	002b      	movs	r3, r5
 80076e4:	4113      	asrs	r3, r2
 80076e6:	0019      	movs	r1, r3
 80076e8:	4091      	lsls	r1, r2
 80076ea:	42a9      	cmp	r1, r5
 80076ec:	d104      	bne.n	80076f8 <__ieee754_pow+0xe8>
 80076ee:	2201      	movs	r2, #1
 80076f0:	4013      	ands	r3, r2
 80076f2:	1892      	adds	r2, r2, r2
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	9306      	str	r3, [sp, #24]
 80076f8:	4b52      	ldr	r3, [pc, #328]	; (8007844 <__ieee754_pow+0x234>)
 80076fa:	429d      	cmp	r5, r3
 80076fc:	d11e      	bne.n	800773c <__ieee754_pow+0x12c>
 80076fe:	0038      	movs	r0, r7
 8007700:	0031      	movs	r1, r6
 8007702:	9b04      	ldr	r3, [sp, #16]
 8007704:	9000      	str	r0, [sp, #0]
 8007706:	9101      	str	r1, [sp, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	da13      	bge.n	8007734 <__ieee754_pow+0x124>
 800770c:	003a      	movs	r2, r7
 800770e:	0033      	movs	r3, r6
 8007710:	2000      	movs	r0, #0
 8007712:	494c      	ldr	r1, [pc, #304]	; (8007844 <__ieee754_pow+0x234>)
 8007714:	f7f9 fe26 	bl	8001364 <__aeabi_ddiv>
 8007718:	e7a7      	b.n	800766a <__ieee754_pow+0x5a>
 800771a:	2302      	movs	r3, #2
 800771c:	e7c3      	b.n	80076a6 <__ieee754_pow+0x96>
 800771e:	9b04      	ldr	r3, [sp, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	dad5      	bge.n	80076d0 <__ieee754_pow+0xc0>
 8007724:	2280      	movs	r2, #128	; 0x80
 8007726:	0612      	lsls	r2, r2, #24
 8007728:	4694      	mov	ip, r2
 800772a:	9b02      	ldr	r3, [sp, #8]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	4463      	add	r3, ip
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	9800      	ldr	r0, [sp, #0]
 8007736:	9901      	ldr	r1, [sp, #4]
 8007738:	b015      	add	sp, #84	; 0x54
 800773a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773c:	2380      	movs	r3, #128	; 0x80
 800773e:	9a04      	ldr	r2, [sp, #16]
 8007740:	05db      	lsls	r3, r3, #23
 8007742:	429a      	cmp	r2, r3
 8007744:	d106      	bne.n	8007754 <__ieee754_pow+0x144>
 8007746:	003a      	movs	r2, r7
 8007748:	0033      	movs	r3, r6
 800774a:	0038      	movs	r0, r7
 800774c:	0031      	movs	r1, r6
 800774e:	f7fa fa13 	bl	8001b78 <__aeabi_dmul>
 8007752:	e78a      	b.n	800766a <__ieee754_pow+0x5a>
 8007754:	4b3c      	ldr	r3, [pc, #240]	; (8007848 <__ieee754_pow+0x238>)
 8007756:	9a04      	ldr	r2, [sp, #16]
 8007758:	429a      	cmp	r2, r3
 800775a:	d106      	bne.n	800776a <__ieee754_pow+0x15a>
 800775c:	2e00      	cmp	r6, #0
 800775e:	db04      	blt.n	800776a <__ieee754_pow+0x15a>
 8007760:	0038      	movs	r0, r7
 8007762:	0031      	movs	r1, r6
 8007764:	f000 fc4a 	bl	8007ffc <__ieee754_sqrt>
 8007768:	e77f      	b.n	800766a <__ieee754_pow+0x5a>
 800776a:	0038      	movs	r0, r7
 800776c:	0031      	movs	r1, r6
 800776e:	f000 fcf7 	bl	8008160 <fabs>
 8007772:	9000      	str	r0, [sp, #0]
 8007774:	9101      	str	r1, [sp, #4]
 8007776:	2f00      	cmp	r7, #0
 8007778:	d12e      	bne.n	80077d8 <__ieee754_pow+0x1c8>
 800777a:	2c00      	cmp	r4, #0
 800777c:	d004      	beq.n	8007788 <__ieee754_pow+0x178>
 800777e:	4a31      	ldr	r2, [pc, #196]	; (8007844 <__ieee754_pow+0x234>)
 8007780:	00b3      	lsls	r3, r6, #2
 8007782:	089b      	lsrs	r3, r3, #2
 8007784:	4293      	cmp	r3, r2
 8007786:	d127      	bne.n	80077d8 <__ieee754_pow+0x1c8>
 8007788:	9b04      	ldr	r3, [sp, #16]
 800778a:	2b00      	cmp	r3, #0
 800778c:	da07      	bge.n	800779e <__ieee754_pow+0x18e>
 800778e:	9a00      	ldr	r2, [sp, #0]
 8007790:	9b01      	ldr	r3, [sp, #4]
 8007792:	2000      	movs	r0, #0
 8007794:	492b      	ldr	r1, [pc, #172]	; (8007844 <__ieee754_pow+0x234>)
 8007796:	f7f9 fde5 	bl	8001364 <__aeabi_ddiv>
 800779a:	9000      	str	r0, [sp, #0]
 800779c:	9101      	str	r1, [sp, #4]
 800779e:	9b08      	ldr	r3, [sp, #32]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	dac7      	bge.n	8007734 <__ieee754_pow+0x124>
 80077a4:	4b22      	ldr	r3, [pc, #136]	; (8007830 <__ieee754_pow+0x220>)
 80077a6:	18e4      	adds	r4, r4, r3
 80077a8:	9b06      	ldr	r3, [sp, #24]
 80077aa:	431c      	orrs	r4, r3
 80077ac:	d108      	bne.n	80077c0 <__ieee754_pow+0x1b0>
 80077ae:	9a00      	ldr	r2, [sp, #0]
 80077b0:	9b01      	ldr	r3, [sp, #4]
 80077b2:	0010      	movs	r0, r2
 80077b4:	0019      	movs	r1, r3
 80077b6:	f7fa fc51 	bl	800205c <__aeabi_dsub>
 80077ba:	0002      	movs	r2, r0
 80077bc:	000b      	movs	r3, r1
 80077be:	e7a9      	b.n	8007714 <__ieee754_pow+0x104>
 80077c0:	9b06      	ldr	r3, [sp, #24]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d1b6      	bne.n	8007734 <__ieee754_pow+0x124>
 80077c6:	9800      	ldr	r0, [sp, #0]
 80077c8:	2180      	movs	r1, #128	; 0x80
 80077ca:	0002      	movs	r2, r0
 80077cc:	9801      	ldr	r0, [sp, #4]
 80077ce:	0609      	lsls	r1, r1, #24
 80077d0:	1843      	adds	r3, r0, r1
 80077d2:	9200      	str	r2, [sp, #0]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	e7ad      	b.n	8007734 <__ieee754_pow+0x124>
 80077d8:	0ff3      	lsrs	r3, r6, #31
 80077da:	3b01      	subs	r3, #1
 80077dc:	9310      	str	r3, [sp, #64]	; 0x40
 80077de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077e0:	9b06      	ldr	r3, [sp, #24]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	d104      	bne.n	80077f0 <__ieee754_pow+0x1e0>
 80077e6:	003a      	movs	r2, r7
 80077e8:	0033      	movs	r3, r6
 80077ea:	0038      	movs	r0, r7
 80077ec:	0031      	movs	r1, r6
 80077ee:	e7e2      	b.n	80077b6 <__ieee754_pow+0x1a6>
 80077f0:	4b16      	ldr	r3, [pc, #88]	; (800784c <__ieee754_pow+0x23c>)
 80077f2:	429d      	cmp	r5, r3
 80077f4:	dc00      	bgt.n	80077f8 <__ieee754_pow+0x1e8>
 80077f6:	e0f7      	b.n	80079e8 <__ieee754_pow+0x3d8>
 80077f8:	4b15      	ldr	r3, [pc, #84]	; (8007850 <__ieee754_pow+0x240>)
 80077fa:	429d      	cmp	r5, r3
 80077fc:	dd0b      	ble.n	8007816 <__ieee754_pow+0x206>
 80077fe:	4b0f      	ldr	r3, [pc, #60]	; (800783c <__ieee754_pow+0x22c>)
 8007800:	429c      	cmp	r4, r3
 8007802:	dc0e      	bgt.n	8007822 <__ieee754_pow+0x212>
 8007804:	9b04      	ldr	r3, [sp, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	db00      	blt.n	800780c <__ieee754_pow+0x1fc>
 800780a:	e761      	b.n	80076d0 <__ieee754_pow+0xc0>
 800780c:	4a11      	ldr	r2, [pc, #68]	; (8007854 <__ieee754_pow+0x244>)
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <__ieee754_pow+0x248>)
 8007810:	0010      	movs	r0, r2
 8007812:	0019      	movs	r1, r3
 8007814:	e79b      	b.n	800774e <__ieee754_pow+0x13e>
 8007816:	4b11      	ldr	r3, [pc, #68]	; (800785c <__ieee754_pow+0x24c>)
 8007818:	429c      	cmp	r4, r3
 800781a:	ddf3      	ble.n	8007804 <__ieee754_pow+0x1f4>
 800781c:	4b09      	ldr	r3, [pc, #36]	; (8007844 <__ieee754_pow+0x234>)
 800781e:	429c      	cmp	r4, r3
 8007820:	dd1e      	ble.n	8007860 <__ieee754_pow+0x250>
 8007822:	9b04      	ldr	r3, [sp, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	dcf1      	bgt.n	800780c <__ieee754_pow+0x1fc>
 8007828:	e752      	b.n	80076d0 <__ieee754_pow+0xc0>
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	7ff00000 	.word	0x7ff00000
 8007830:	c0100000 	.word	0xc0100000
 8007834:	0800918d 	.word	0x0800918d
 8007838:	433fffff 	.word	0x433fffff
 800783c:	3fefffff 	.word	0x3fefffff
 8007840:	fffffc01 	.word	0xfffffc01
 8007844:	3ff00000 	.word	0x3ff00000
 8007848:	3fe00000 	.word	0x3fe00000
 800784c:	41e00000 	.word	0x41e00000
 8007850:	43f00000 	.word	0x43f00000
 8007854:	8800759c 	.word	0x8800759c
 8007858:	7e37e43c 	.word	0x7e37e43c
 800785c:	3feffffe 	.word	0x3feffffe
 8007860:	2200      	movs	r2, #0
 8007862:	9800      	ldr	r0, [sp, #0]
 8007864:	9901      	ldr	r1, [sp, #4]
 8007866:	4b52      	ldr	r3, [pc, #328]	; (80079b0 <__ieee754_pow+0x3a0>)
 8007868:	f7fa fbf8 	bl	800205c <__aeabi_dsub>
 800786c:	22c0      	movs	r2, #192	; 0xc0
 800786e:	4b51      	ldr	r3, [pc, #324]	; (80079b4 <__ieee754_pow+0x3a4>)
 8007870:	05d2      	lsls	r2, r2, #23
 8007872:	0006      	movs	r6, r0
 8007874:	000f      	movs	r7, r1
 8007876:	f7fa f97f 	bl	8001b78 <__aeabi_dmul>
 800787a:	4a4f      	ldr	r2, [pc, #316]	; (80079b8 <__ieee754_pow+0x3a8>)
 800787c:	9000      	str	r0, [sp, #0]
 800787e:	9101      	str	r1, [sp, #4]
 8007880:	4b4e      	ldr	r3, [pc, #312]	; (80079bc <__ieee754_pow+0x3ac>)
 8007882:	0030      	movs	r0, r6
 8007884:	0039      	movs	r1, r7
 8007886:	f7fa f977 	bl	8001b78 <__aeabi_dmul>
 800788a:	2200      	movs	r2, #0
 800788c:	9004      	str	r0, [sp, #16]
 800788e:	9105      	str	r1, [sp, #20]
 8007890:	4b4b      	ldr	r3, [pc, #300]	; (80079c0 <__ieee754_pow+0x3b0>)
 8007892:	0030      	movs	r0, r6
 8007894:	0039      	movs	r1, r7
 8007896:	f7fa f96f 	bl	8001b78 <__aeabi_dmul>
 800789a:	0002      	movs	r2, r0
 800789c:	000b      	movs	r3, r1
 800789e:	4849      	ldr	r0, [pc, #292]	; (80079c4 <__ieee754_pow+0x3b4>)
 80078a0:	4949      	ldr	r1, [pc, #292]	; (80079c8 <__ieee754_pow+0x3b8>)
 80078a2:	f7fa fbdb 	bl	800205c <__aeabi_dsub>
 80078a6:	0032      	movs	r2, r6
 80078a8:	003b      	movs	r3, r7
 80078aa:	f7fa f965 	bl	8001b78 <__aeabi_dmul>
 80078ae:	0002      	movs	r2, r0
 80078b0:	000b      	movs	r3, r1
 80078b2:	2000      	movs	r0, #0
 80078b4:	4945      	ldr	r1, [pc, #276]	; (80079cc <__ieee754_pow+0x3bc>)
 80078b6:	f7fa fbd1 	bl	800205c <__aeabi_dsub>
 80078ba:	0032      	movs	r2, r6
 80078bc:	0004      	movs	r4, r0
 80078be:	000d      	movs	r5, r1
 80078c0:	003b      	movs	r3, r7
 80078c2:	0030      	movs	r0, r6
 80078c4:	0039      	movs	r1, r7
 80078c6:	f7fa f957 	bl	8001b78 <__aeabi_dmul>
 80078ca:	0002      	movs	r2, r0
 80078cc:	000b      	movs	r3, r1
 80078ce:	0020      	movs	r0, r4
 80078d0:	0029      	movs	r1, r5
 80078d2:	f7fa f951 	bl	8001b78 <__aeabi_dmul>
 80078d6:	4a3e      	ldr	r2, [pc, #248]	; (80079d0 <__ieee754_pow+0x3c0>)
 80078d8:	4b36      	ldr	r3, [pc, #216]	; (80079b4 <__ieee754_pow+0x3a4>)
 80078da:	f7fa f94d 	bl	8001b78 <__aeabi_dmul>
 80078de:	0002      	movs	r2, r0
 80078e0:	000b      	movs	r3, r1
 80078e2:	9804      	ldr	r0, [sp, #16]
 80078e4:	9905      	ldr	r1, [sp, #20]
 80078e6:	f7fa fbb9 	bl	800205c <__aeabi_dsub>
 80078ea:	0002      	movs	r2, r0
 80078ec:	000b      	movs	r3, r1
 80078ee:	0004      	movs	r4, r0
 80078f0:	000d      	movs	r5, r1
 80078f2:	9800      	ldr	r0, [sp, #0]
 80078f4:	9901      	ldr	r1, [sp, #4]
 80078f6:	f7f9 fa19 	bl	8000d2c <__aeabi_dadd>
 80078fa:	9a00      	ldr	r2, [sp, #0]
 80078fc:	9b01      	ldr	r3, [sp, #4]
 80078fe:	2000      	movs	r0, #0
 8007900:	9004      	str	r0, [sp, #16]
 8007902:	9105      	str	r1, [sp, #20]
 8007904:	f7fa fbaa 	bl	800205c <__aeabi_dsub>
 8007908:	0002      	movs	r2, r0
 800790a:	000b      	movs	r3, r1
 800790c:	0020      	movs	r0, r4
 800790e:	0029      	movs	r1, r5
 8007910:	f7fa fba4 	bl	800205c <__aeabi_dsub>
 8007914:	9b06      	ldr	r3, [sp, #24]
 8007916:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007918:	3b01      	subs	r3, #1
 800791a:	0006      	movs	r6, r0
 800791c:	000f      	movs	r7, r1
 800791e:	4313      	orrs	r3, r2
 8007920:	d000      	beq.n	8007924 <__ieee754_pow+0x314>
 8007922:	e1de      	b.n	8007ce2 <__ieee754_pow+0x6d2>
 8007924:	2300      	movs	r3, #0
 8007926:	4c2b      	ldr	r4, [pc, #172]	; (80079d4 <__ieee754_pow+0x3c4>)
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	9401      	str	r4, [sp, #4]
 800792c:	9c02      	ldr	r4, [sp, #8]
 800792e:	9d03      	ldr	r5, [sp, #12]
 8007930:	9802      	ldr	r0, [sp, #8]
 8007932:	9903      	ldr	r1, [sp, #12]
 8007934:	2400      	movs	r4, #0
 8007936:	002b      	movs	r3, r5
 8007938:	0022      	movs	r2, r4
 800793a:	f7fa fb8f 	bl	800205c <__aeabi_dsub>
 800793e:	9a04      	ldr	r2, [sp, #16]
 8007940:	9b05      	ldr	r3, [sp, #20]
 8007942:	f7fa f919 	bl	8001b78 <__aeabi_dmul>
 8007946:	9a02      	ldr	r2, [sp, #8]
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	9006      	str	r0, [sp, #24]
 800794c:	9107      	str	r1, [sp, #28]
 800794e:	0030      	movs	r0, r6
 8007950:	0039      	movs	r1, r7
 8007952:	f7fa f911 	bl	8001b78 <__aeabi_dmul>
 8007956:	0002      	movs	r2, r0
 8007958:	000b      	movs	r3, r1
 800795a:	9806      	ldr	r0, [sp, #24]
 800795c:	9907      	ldr	r1, [sp, #28]
 800795e:	f7f9 f9e5 	bl	8000d2c <__aeabi_dadd>
 8007962:	0022      	movs	r2, r4
 8007964:	002b      	movs	r3, r5
 8007966:	9006      	str	r0, [sp, #24]
 8007968:	9107      	str	r1, [sp, #28]
 800796a:	9804      	ldr	r0, [sp, #16]
 800796c:	9905      	ldr	r1, [sp, #20]
 800796e:	f7fa f903 	bl	8001b78 <__aeabi_dmul>
 8007972:	0006      	movs	r6, r0
 8007974:	000f      	movs	r7, r1
 8007976:	000b      	movs	r3, r1
 8007978:	0002      	movs	r2, r0
 800797a:	9806      	ldr	r0, [sp, #24]
 800797c:	9907      	ldr	r1, [sp, #28]
 800797e:	9604      	str	r6, [sp, #16]
 8007980:	9705      	str	r7, [sp, #20]
 8007982:	f7f9 f9d3 	bl	8000d2c <__aeabi_dadd>
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <__ieee754_pow+0x3c8>)
 8007988:	0005      	movs	r5, r0
 800798a:	000c      	movs	r4, r1
 800798c:	9108      	str	r1, [sp, #32]
 800798e:	4299      	cmp	r1, r3
 8007990:	dc00      	bgt.n	8007994 <__ieee754_pow+0x384>
 8007992:	e2d8      	b.n	8007f46 <__ieee754_pow+0x936>
 8007994:	4b11      	ldr	r3, [pc, #68]	; (80079dc <__ieee754_pow+0x3cc>)
 8007996:	18cb      	adds	r3, r1, r3
 8007998:	4303      	orrs	r3, r0
 800799a:	d100      	bne.n	800799e <__ieee754_pow+0x38e>
 800799c:	e1da      	b.n	8007d54 <__ieee754_pow+0x744>
 800799e:	9800      	ldr	r0, [sp, #0]
 80079a0:	9901      	ldr	r1, [sp, #4]
 80079a2:	4a0f      	ldr	r2, [pc, #60]	; (80079e0 <__ieee754_pow+0x3d0>)
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <__ieee754_pow+0x3d4>)
 80079a6:	f7fa f8e7 	bl	8001b78 <__aeabi_dmul>
 80079aa:	4a0d      	ldr	r2, [pc, #52]	; (80079e0 <__ieee754_pow+0x3d0>)
 80079ac:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <__ieee754_pow+0x3d4>)
 80079ae:	e6ce      	b.n	800774e <__ieee754_pow+0x13e>
 80079b0:	3ff00000 	.word	0x3ff00000
 80079b4:	3ff71547 	.word	0x3ff71547
 80079b8:	f85ddf44 	.word	0xf85ddf44
 80079bc:	3e54ae0b 	.word	0x3e54ae0b
 80079c0:	3fd00000 	.word	0x3fd00000
 80079c4:	55555555 	.word	0x55555555
 80079c8:	3fd55555 	.word	0x3fd55555
 80079cc:	3fe00000 	.word	0x3fe00000
 80079d0:	652b82fe 	.word	0x652b82fe
 80079d4:	bff00000 	.word	0xbff00000
 80079d8:	408fffff 	.word	0x408fffff
 80079dc:	bf700000 	.word	0xbf700000
 80079e0:	8800759c 	.word	0x8800759c
 80079e4:	7e37e43c 	.word	0x7e37e43c
 80079e8:	4bbf      	ldr	r3, [pc, #764]	; (8007ce8 <__ieee754_pow+0x6d8>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	429c      	cmp	r4, r3
 80079ee:	dc0a      	bgt.n	8007a06 <__ieee754_pow+0x3f6>
 80079f0:	9800      	ldr	r0, [sp, #0]
 80079f2:	9901      	ldr	r1, [sp, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	4bbd      	ldr	r3, [pc, #756]	; (8007cec <__ieee754_pow+0x6dc>)
 80079f8:	f7fa f8be 	bl	8001b78 <__aeabi_dmul>
 80079fc:	2235      	movs	r2, #53	; 0x35
 80079fe:	9000      	str	r0, [sp, #0]
 8007a00:	9101      	str	r1, [sp, #4]
 8007a02:	9c01      	ldr	r4, [sp, #4]
 8007a04:	4252      	negs	r2, r2
 8007a06:	49ba      	ldr	r1, [pc, #744]	; (8007cf0 <__ieee754_pow+0x6e0>)
 8007a08:	1523      	asrs	r3, r4, #20
 8007a0a:	185b      	adds	r3, r3, r1
 8007a0c:	189b      	adds	r3, r3, r2
 8007a0e:	0324      	lsls	r4, r4, #12
 8007a10:	4db8      	ldr	r5, [pc, #736]	; (8007cf4 <__ieee754_pow+0x6e4>)
 8007a12:	4ab9      	ldr	r2, [pc, #740]	; (8007cf8 <__ieee754_pow+0x6e8>)
 8007a14:	930d      	str	r3, [sp, #52]	; 0x34
 8007a16:	0b23      	lsrs	r3, r4, #12
 8007a18:	431d      	orrs	r5, r3
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	dd09      	ble.n	8007a34 <__ieee754_pow+0x424>
 8007a20:	4ab6      	ldr	r2, [pc, #728]	; (8007cfc <__ieee754_pow+0x6ec>)
 8007a22:	3401      	adds	r4, #1
 8007a24:	4293      	cmp	r3, r2
 8007a26:	dd05      	ble.n	8007a34 <__ieee754_pow+0x424>
 8007a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2a:	191b      	adds	r3, r3, r4
 8007a2c:	2400      	movs	r4, #0
 8007a2e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a30:	4bb3      	ldr	r3, [pc, #716]	; (8007d00 <__ieee754_pow+0x6f0>)
 8007a32:	18ed      	adds	r5, r5, r3
 8007a34:	9800      	ldr	r0, [sp, #0]
 8007a36:	9901      	ldr	r1, [sp, #4]
 8007a38:	0029      	movs	r1, r5
 8007a3a:	00e3      	lsls	r3, r4, #3
 8007a3c:	9311      	str	r3, [sp, #68]	; 0x44
 8007a3e:	4bb1      	ldr	r3, [pc, #708]	; (8007d04 <__ieee754_pow+0x6f4>)
 8007a40:	00e2      	lsls	r2, r4, #3
 8007a42:	189b      	adds	r3, r3, r2
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	900e      	str	r0, [sp, #56]	; 0x38
 8007a4a:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a4c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a50:	f7fa fb04 	bl	800205c <__aeabi_dsub>
 8007a54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a58:	0006      	movs	r6, r0
 8007a5a:	000f      	movs	r7, r1
 8007a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a60:	f7f9 f964 	bl	8000d2c <__aeabi_dadd>
 8007a64:	0002      	movs	r2, r0
 8007a66:	000b      	movs	r3, r1
 8007a68:	2000      	movs	r0, #0
 8007a6a:	49a2      	ldr	r1, [pc, #648]	; (8007cf4 <__ieee754_pow+0x6e4>)
 8007a6c:	f7f9 fc7a 	bl	8001364 <__aeabi_ddiv>
 8007a70:	9012      	str	r0, [sp, #72]	; 0x48
 8007a72:	9113      	str	r1, [sp, #76]	; 0x4c
 8007a74:	0002      	movs	r2, r0
 8007a76:	000b      	movs	r3, r1
 8007a78:	0030      	movs	r0, r6
 8007a7a:	0039      	movs	r1, r7
 8007a7c:	f7fa f87c 	bl	8001b78 <__aeabi_dmul>
 8007a80:	9008      	str	r0, [sp, #32]
 8007a82:	9109      	str	r1, [sp, #36]	; 0x24
 8007a84:	9a08      	ldr	r2, [sp, #32]
 8007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a88:	2180      	movs	r1, #128	; 0x80
 8007a8a:	9204      	str	r2, [sp, #16]
 8007a8c:	9305      	str	r3, [sp, #20]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	0589      	lsls	r1, r1, #22
 8007a92:	106d      	asrs	r5, r5, #1
 8007a94:	430d      	orrs	r5, r1
 8007a96:	2180      	movs	r1, #128	; 0x80
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	9a04      	ldr	r2, [sp, #16]
 8007a9c:	9b05      	ldr	r3, [sp, #20]
 8007a9e:	9200      	str	r2, [sp, #0]
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	0309      	lsls	r1, r1, #12
 8007aa6:	186d      	adds	r5, r5, r1
 8007aa8:	04a4      	lsls	r4, r4, #18
 8007aaa:	192b      	adds	r3, r5, r4
 8007aac:	9800      	ldr	r0, [sp, #0]
 8007aae:	9901      	ldr	r1, [sp, #4]
 8007ab0:	0014      	movs	r4, r2
 8007ab2:	001d      	movs	r5, r3
 8007ab4:	f7fa f860 	bl	8001b78 <__aeabi_dmul>
 8007ab8:	0002      	movs	r2, r0
 8007aba:	000b      	movs	r3, r1
 8007abc:	0030      	movs	r0, r6
 8007abe:	0039      	movs	r1, r7
 8007ac0:	f7fa facc 	bl	800205c <__aeabi_dsub>
 8007ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ac8:	0006      	movs	r6, r0
 8007aca:	000f      	movs	r7, r1
 8007acc:	0020      	movs	r0, r4
 8007ace:	0029      	movs	r1, r5
 8007ad0:	f7fa fac4 	bl	800205c <__aeabi_dsub>
 8007ad4:	0002      	movs	r2, r0
 8007ad6:	000b      	movs	r3, r1
 8007ad8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007ada:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007adc:	f7fa fabe 	bl	800205c <__aeabi_dsub>
 8007ae0:	9a00      	ldr	r2, [sp, #0]
 8007ae2:	9b01      	ldr	r3, [sp, #4]
 8007ae4:	f7fa f848 	bl	8001b78 <__aeabi_dmul>
 8007ae8:	0002      	movs	r2, r0
 8007aea:	000b      	movs	r3, r1
 8007aec:	0030      	movs	r0, r6
 8007aee:	0039      	movs	r1, r7
 8007af0:	f7fa fab4 	bl	800205c <__aeabi_dsub>
 8007af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007af6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007af8:	f7fa f83e 	bl	8001b78 <__aeabi_dmul>
 8007afc:	9a08      	ldr	r2, [sp, #32]
 8007afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b00:	900a      	str	r0, [sp, #40]	; 0x28
 8007b02:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b04:	0010      	movs	r0, r2
 8007b06:	0019      	movs	r1, r3
 8007b08:	f7fa f836 	bl	8001b78 <__aeabi_dmul>
 8007b0c:	0006      	movs	r6, r0
 8007b0e:	000f      	movs	r7, r1
 8007b10:	4a7d      	ldr	r2, [pc, #500]	; (8007d08 <__ieee754_pow+0x6f8>)
 8007b12:	4b7e      	ldr	r3, [pc, #504]	; (8007d0c <__ieee754_pow+0x6fc>)
 8007b14:	f7fa f830 	bl	8001b78 <__aeabi_dmul>
 8007b18:	4a7d      	ldr	r2, [pc, #500]	; (8007d10 <__ieee754_pow+0x700>)
 8007b1a:	4b7e      	ldr	r3, [pc, #504]	; (8007d14 <__ieee754_pow+0x704>)
 8007b1c:	f7f9 f906 	bl	8000d2c <__aeabi_dadd>
 8007b20:	0032      	movs	r2, r6
 8007b22:	003b      	movs	r3, r7
 8007b24:	f7fa f828 	bl	8001b78 <__aeabi_dmul>
 8007b28:	4a7b      	ldr	r2, [pc, #492]	; (8007d18 <__ieee754_pow+0x708>)
 8007b2a:	4b7c      	ldr	r3, [pc, #496]	; (8007d1c <__ieee754_pow+0x70c>)
 8007b2c:	f7f9 f8fe 	bl	8000d2c <__aeabi_dadd>
 8007b30:	0032      	movs	r2, r6
 8007b32:	003b      	movs	r3, r7
 8007b34:	f7fa f820 	bl	8001b78 <__aeabi_dmul>
 8007b38:	4a79      	ldr	r2, [pc, #484]	; (8007d20 <__ieee754_pow+0x710>)
 8007b3a:	4b7a      	ldr	r3, [pc, #488]	; (8007d24 <__ieee754_pow+0x714>)
 8007b3c:	f7f9 f8f6 	bl	8000d2c <__aeabi_dadd>
 8007b40:	0032      	movs	r2, r6
 8007b42:	003b      	movs	r3, r7
 8007b44:	f7fa f818 	bl	8001b78 <__aeabi_dmul>
 8007b48:	4a77      	ldr	r2, [pc, #476]	; (8007d28 <__ieee754_pow+0x718>)
 8007b4a:	4b78      	ldr	r3, [pc, #480]	; (8007d2c <__ieee754_pow+0x71c>)
 8007b4c:	f7f9 f8ee 	bl	8000d2c <__aeabi_dadd>
 8007b50:	0032      	movs	r2, r6
 8007b52:	003b      	movs	r3, r7
 8007b54:	f7fa f810 	bl	8001b78 <__aeabi_dmul>
 8007b58:	4a75      	ldr	r2, [pc, #468]	; (8007d30 <__ieee754_pow+0x720>)
 8007b5a:	4b76      	ldr	r3, [pc, #472]	; (8007d34 <__ieee754_pow+0x724>)
 8007b5c:	f7f9 f8e6 	bl	8000d2c <__aeabi_dadd>
 8007b60:	0032      	movs	r2, r6
 8007b62:	0004      	movs	r4, r0
 8007b64:	000d      	movs	r5, r1
 8007b66:	003b      	movs	r3, r7
 8007b68:	0030      	movs	r0, r6
 8007b6a:	0039      	movs	r1, r7
 8007b6c:	f7fa f804 	bl	8001b78 <__aeabi_dmul>
 8007b70:	0002      	movs	r2, r0
 8007b72:	000b      	movs	r3, r1
 8007b74:	0020      	movs	r0, r4
 8007b76:	0029      	movs	r1, r5
 8007b78:	f7f9 fffe 	bl	8001b78 <__aeabi_dmul>
 8007b7c:	9a00      	ldr	r2, [sp, #0]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	0004      	movs	r4, r0
 8007b82:	000d      	movs	r5, r1
 8007b84:	9808      	ldr	r0, [sp, #32]
 8007b86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b88:	f7f9 f8d0 	bl	8000d2c <__aeabi_dadd>
 8007b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b90:	f7f9 fff2 	bl	8001b78 <__aeabi_dmul>
 8007b94:	0022      	movs	r2, r4
 8007b96:	002b      	movs	r3, r5
 8007b98:	f7f9 f8c8 	bl	8000d2c <__aeabi_dadd>
 8007b9c:	9a00      	ldr	r2, [sp, #0]
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	900e      	str	r0, [sp, #56]	; 0x38
 8007ba2:	910f      	str	r1, [sp, #60]	; 0x3c
 8007ba4:	0010      	movs	r0, r2
 8007ba6:	0019      	movs	r1, r3
 8007ba8:	f7f9 ffe6 	bl	8001b78 <__aeabi_dmul>
 8007bac:	2200      	movs	r2, #0
 8007bae:	4b62      	ldr	r3, [pc, #392]	; (8007d38 <__ieee754_pow+0x728>)
 8007bb0:	0004      	movs	r4, r0
 8007bb2:	000d      	movs	r5, r1
 8007bb4:	f7f9 f8ba 	bl	8000d2c <__aeabi_dadd>
 8007bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bbc:	f7f9 f8b6 	bl	8000d2c <__aeabi_dadd>
 8007bc0:	9e04      	ldr	r6, [sp, #16]
 8007bc2:	000f      	movs	r7, r1
 8007bc4:	0032      	movs	r2, r6
 8007bc6:	000b      	movs	r3, r1
 8007bc8:	9800      	ldr	r0, [sp, #0]
 8007bca:	9901      	ldr	r1, [sp, #4]
 8007bcc:	f7f9 ffd4 	bl	8001b78 <__aeabi_dmul>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	9000      	str	r0, [sp, #0]
 8007bd4:	9101      	str	r1, [sp, #4]
 8007bd6:	4b58      	ldr	r3, [pc, #352]	; (8007d38 <__ieee754_pow+0x728>)
 8007bd8:	0030      	movs	r0, r6
 8007bda:	0039      	movs	r1, r7
 8007bdc:	f7fa fa3e 	bl	800205c <__aeabi_dsub>
 8007be0:	0022      	movs	r2, r4
 8007be2:	002b      	movs	r3, r5
 8007be4:	f7fa fa3a 	bl	800205c <__aeabi_dsub>
 8007be8:	0002      	movs	r2, r0
 8007bea:	000b      	movs	r3, r1
 8007bec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007bee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bf0:	f7fa fa34 	bl	800205c <__aeabi_dsub>
 8007bf4:	9a08      	ldr	r2, [sp, #32]
 8007bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf8:	f7f9 ffbe 	bl	8001b78 <__aeabi_dmul>
 8007bfc:	0032      	movs	r2, r6
 8007bfe:	0004      	movs	r4, r0
 8007c00:	000d      	movs	r5, r1
 8007c02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c06:	003b      	movs	r3, r7
 8007c08:	f7f9 ffb6 	bl	8001b78 <__aeabi_dmul>
 8007c0c:	0002      	movs	r2, r0
 8007c0e:	000b      	movs	r3, r1
 8007c10:	0020      	movs	r0, r4
 8007c12:	0029      	movs	r1, r5
 8007c14:	f7f9 f88a 	bl	8000d2c <__aeabi_dadd>
 8007c18:	0004      	movs	r4, r0
 8007c1a:	000d      	movs	r5, r1
 8007c1c:	0002      	movs	r2, r0
 8007c1e:	000b      	movs	r3, r1
 8007c20:	9800      	ldr	r0, [sp, #0]
 8007c22:	9901      	ldr	r1, [sp, #4]
 8007c24:	f7f9 f882 	bl	8000d2c <__aeabi_dadd>
 8007c28:	22e0      	movs	r2, #224	; 0xe0
 8007c2a:	9e04      	ldr	r6, [sp, #16]
 8007c2c:	0612      	lsls	r2, r2, #24
 8007c2e:	4b43      	ldr	r3, [pc, #268]	; (8007d3c <__ieee754_pow+0x72c>)
 8007c30:	0030      	movs	r0, r6
 8007c32:	000f      	movs	r7, r1
 8007c34:	f7f9 ffa0 	bl	8001b78 <__aeabi_dmul>
 8007c38:	9008      	str	r0, [sp, #32]
 8007c3a:	9109      	str	r1, [sp, #36]	; 0x24
 8007c3c:	9a00      	ldr	r2, [sp, #0]
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	0030      	movs	r0, r6
 8007c42:	0039      	movs	r1, r7
 8007c44:	f7fa fa0a 	bl	800205c <__aeabi_dsub>
 8007c48:	0002      	movs	r2, r0
 8007c4a:	000b      	movs	r3, r1
 8007c4c:	0020      	movs	r0, r4
 8007c4e:	0029      	movs	r1, r5
 8007c50:	f7fa fa04 	bl	800205c <__aeabi_dsub>
 8007c54:	4a3a      	ldr	r2, [pc, #232]	; (8007d40 <__ieee754_pow+0x730>)
 8007c56:	4b39      	ldr	r3, [pc, #228]	; (8007d3c <__ieee754_pow+0x72c>)
 8007c58:	f7f9 ff8e 	bl	8001b78 <__aeabi_dmul>
 8007c5c:	4a39      	ldr	r2, [pc, #228]	; (8007d44 <__ieee754_pow+0x734>)
 8007c5e:	0004      	movs	r4, r0
 8007c60:	000d      	movs	r5, r1
 8007c62:	4b39      	ldr	r3, [pc, #228]	; (8007d48 <__ieee754_pow+0x738>)
 8007c64:	0030      	movs	r0, r6
 8007c66:	0039      	movs	r1, r7
 8007c68:	f7f9 ff86 	bl	8001b78 <__aeabi_dmul>
 8007c6c:	0002      	movs	r2, r0
 8007c6e:	000b      	movs	r3, r1
 8007c70:	0020      	movs	r0, r4
 8007c72:	0029      	movs	r1, r5
 8007c74:	f7f9 f85a 	bl	8000d2c <__aeabi_dadd>
 8007c78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007c7a:	4b34      	ldr	r3, [pc, #208]	; (8007d4c <__ieee754_pow+0x73c>)
 8007c7c:	189b      	adds	r3, r3, r2
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f7f9 f853 	bl	8000d2c <__aeabi_dadd>
 8007c86:	9000      	str	r0, [sp, #0]
 8007c88:	9101      	str	r1, [sp, #4]
 8007c8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007c8c:	f7fa fd80 	bl	8002790 <__aeabi_i2d>
 8007c90:	0004      	movs	r4, r0
 8007c92:	000d      	movs	r5, r1
 8007c94:	9808      	ldr	r0, [sp, #32]
 8007c96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007c9a:	4b2d      	ldr	r3, [pc, #180]	; (8007d50 <__ieee754_pow+0x740>)
 8007c9c:	189b      	adds	r3, r3, r2
 8007c9e:	681e      	ldr	r6, [r3, #0]
 8007ca0:	685f      	ldr	r7, [r3, #4]
 8007ca2:	9a00      	ldr	r2, [sp, #0]
 8007ca4:	9b01      	ldr	r3, [sp, #4]
 8007ca6:	f7f9 f841 	bl	8000d2c <__aeabi_dadd>
 8007caa:	0032      	movs	r2, r6
 8007cac:	003b      	movs	r3, r7
 8007cae:	f7f9 f83d 	bl	8000d2c <__aeabi_dadd>
 8007cb2:	0022      	movs	r2, r4
 8007cb4:	002b      	movs	r3, r5
 8007cb6:	f7f9 f839 	bl	8000d2c <__aeabi_dadd>
 8007cba:	9804      	ldr	r0, [sp, #16]
 8007cbc:	0022      	movs	r2, r4
 8007cbe:	002b      	movs	r3, r5
 8007cc0:	9004      	str	r0, [sp, #16]
 8007cc2:	9105      	str	r1, [sp, #20]
 8007cc4:	f7fa f9ca 	bl	800205c <__aeabi_dsub>
 8007cc8:	0032      	movs	r2, r6
 8007cca:	003b      	movs	r3, r7
 8007ccc:	f7fa f9c6 	bl	800205c <__aeabi_dsub>
 8007cd0:	9a08      	ldr	r2, [sp, #32]
 8007cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd4:	f7fa f9c2 	bl	800205c <__aeabi_dsub>
 8007cd8:	0002      	movs	r2, r0
 8007cda:	000b      	movs	r3, r1
 8007cdc:	9800      	ldr	r0, [sp, #0]
 8007cde:	9901      	ldr	r1, [sp, #4]
 8007ce0:	e616      	b.n	8007910 <__ieee754_pow+0x300>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4c03      	ldr	r4, [pc, #12]	; (8007cf4 <__ieee754_pow+0x6e4>)
 8007ce6:	e61f      	b.n	8007928 <__ieee754_pow+0x318>
 8007ce8:	000fffff 	.word	0x000fffff
 8007cec:	43400000 	.word	0x43400000
 8007cf0:	fffffc01 	.word	0xfffffc01
 8007cf4:	3ff00000 	.word	0x3ff00000
 8007cf8:	0003988e 	.word	0x0003988e
 8007cfc:	000bb679 	.word	0x000bb679
 8007d00:	fff00000 	.word	0xfff00000
 8007d04:	08009198 	.word	0x08009198
 8007d08:	4a454eef 	.word	0x4a454eef
 8007d0c:	3fca7e28 	.word	0x3fca7e28
 8007d10:	93c9db65 	.word	0x93c9db65
 8007d14:	3fcd864a 	.word	0x3fcd864a
 8007d18:	a91d4101 	.word	0xa91d4101
 8007d1c:	3fd17460 	.word	0x3fd17460
 8007d20:	518f264d 	.word	0x518f264d
 8007d24:	3fd55555 	.word	0x3fd55555
 8007d28:	db6fabff 	.word	0xdb6fabff
 8007d2c:	3fdb6db6 	.word	0x3fdb6db6
 8007d30:	33333303 	.word	0x33333303
 8007d34:	3fe33333 	.word	0x3fe33333
 8007d38:	40080000 	.word	0x40080000
 8007d3c:	3feec709 	.word	0x3feec709
 8007d40:	dc3a03fd 	.word	0xdc3a03fd
 8007d44:	145b01f5 	.word	0x145b01f5
 8007d48:	be3e2fe0 	.word	0xbe3e2fe0
 8007d4c:	080091b8 	.word	0x080091b8
 8007d50:	080091a8 	.word	0x080091a8
 8007d54:	4a8f      	ldr	r2, [pc, #572]	; (8007f94 <__ieee754_pow+0x984>)
 8007d56:	4b90      	ldr	r3, [pc, #576]	; (8007f98 <__ieee754_pow+0x988>)
 8007d58:	9806      	ldr	r0, [sp, #24]
 8007d5a:	9907      	ldr	r1, [sp, #28]
 8007d5c:	f7f8 ffe6 	bl	8000d2c <__aeabi_dadd>
 8007d60:	0032      	movs	r2, r6
 8007d62:	9002      	str	r0, [sp, #8]
 8007d64:	9103      	str	r1, [sp, #12]
 8007d66:	003b      	movs	r3, r7
 8007d68:	0028      	movs	r0, r5
 8007d6a:	0021      	movs	r1, r4
 8007d6c:	f7fa f976 	bl	800205c <__aeabi_dsub>
 8007d70:	0002      	movs	r2, r0
 8007d72:	000b      	movs	r3, r1
 8007d74:	9802      	ldr	r0, [sp, #8]
 8007d76:	9903      	ldr	r1, [sp, #12]
 8007d78:	f7f8 fb66 	bl	8000448 <__aeabi_dcmpgt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d000      	beq.n	8007d82 <__ieee754_pow+0x772>
 8007d80:	e60d      	b.n	800799e <__ieee754_pow+0x38e>
 8007d82:	2100      	movs	r1, #0
 8007d84:	4a85      	ldr	r2, [pc, #532]	; (8007f9c <__ieee754_pow+0x98c>)
 8007d86:	0063      	lsls	r3, r4, #1
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	9102      	str	r1, [sp, #8]
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	dd25      	ble.n	8007ddc <__ieee754_pow+0x7cc>
 8007d90:	4a83      	ldr	r2, [pc, #524]	; (8007fa0 <__ieee754_pow+0x990>)
 8007d92:	151b      	asrs	r3, r3, #20
 8007d94:	189b      	adds	r3, r3, r2
 8007d96:	2280      	movs	r2, #128	; 0x80
 8007d98:	0352      	lsls	r2, r2, #13
 8007d9a:	4694      	mov	ip, r2
 8007d9c:	411a      	asrs	r2, r3
 8007d9e:	1914      	adds	r4, r2, r4
 8007da0:	0060      	lsls	r0, r4, #1
 8007da2:	4b80      	ldr	r3, [pc, #512]	; (8007fa4 <__ieee754_pow+0x994>)
 8007da4:	0d40      	lsrs	r0, r0, #21
 8007da6:	4d80      	ldr	r5, [pc, #512]	; (8007fa8 <__ieee754_pow+0x998>)
 8007da8:	18c0      	adds	r0, r0, r3
 8007daa:	4105      	asrs	r5, r0
 8007dac:	0021      	movs	r1, r4
 8007dae:	43a9      	bics	r1, r5
 8007db0:	000b      	movs	r3, r1
 8007db2:	4661      	mov	r1, ip
 8007db4:	0324      	lsls	r4, r4, #12
 8007db6:	0b24      	lsrs	r4, r4, #12
 8007db8:	4321      	orrs	r1, r4
 8007dba:	2414      	movs	r4, #20
 8007dbc:	1a20      	subs	r0, r4, r0
 8007dbe:	4101      	asrs	r1, r0
 8007dc0:	9102      	str	r1, [sp, #8]
 8007dc2:	9908      	ldr	r1, [sp, #32]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2900      	cmp	r1, #0
 8007dc8:	da02      	bge.n	8007dd0 <__ieee754_pow+0x7c0>
 8007dca:	9902      	ldr	r1, [sp, #8]
 8007dcc:	4249      	negs	r1, r1
 8007dce:	9102      	str	r1, [sp, #8]
 8007dd0:	0030      	movs	r0, r6
 8007dd2:	0039      	movs	r1, r7
 8007dd4:	f7fa f942 	bl	800205c <__aeabi_dsub>
 8007dd8:	9004      	str	r0, [sp, #16]
 8007dda:	9105      	str	r1, [sp, #20]
 8007ddc:	9a06      	ldr	r2, [sp, #24]
 8007dde:	9b07      	ldr	r3, [sp, #28]
 8007de0:	9804      	ldr	r0, [sp, #16]
 8007de2:	9905      	ldr	r1, [sp, #20]
 8007de4:	2600      	movs	r6, #0
 8007de6:	f7f8 ffa1 	bl	8000d2c <__aeabi_dadd>
 8007dea:	2200      	movs	r2, #0
 8007dec:	4b6f      	ldr	r3, [pc, #444]	; (8007fac <__ieee754_pow+0x99c>)
 8007dee:	0030      	movs	r0, r6
 8007df0:	000f      	movs	r7, r1
 8007df2:	f7f9 fec1 	bl	8001b78 <__aeabi_dmul>
 8007df6:	9a04      	ldr	r2, [sp, #16]
 8007df8:	9b05      	ldr	r3, [sp, #20]
 8007dfa:	9008      	str	r0, [sp, #32]
 8007dfc:	9109      	str	r1, [sp, #36]	; 0x24
 8007dfe:	0030      	movs	r0, r6
 8007e00:	0039      	movs	r1, r7
 8007e02:	f7fa f92b 	bl	800205c <__aeabi_dsub>
 8007e06:	0002      	movs	r2, r0
 8007e08:	000b      	movs	r3, r1
 8007e0a:	9806      	ldr	r0, [sp, #24]
 8007e0c:	9907      	ldr	r1, [sp, #28]
 8007e0e:	f7fa f925 	bl	800205c <__aeabi_dsub>
 8007e12:	4a67      	ldr	r2, [pc, #412]	; (8007fb0 <__ieee754_pow+0x9a0>)
 8007e14:	4b67      	ldr	r3, [pc, #412]	; (8007fb4 <__ieee754_pow+0x9a4>)
 8007e16:	f7f9 feaf 	bl	8001b78 <__aeabi_dmul>
 8007e1a:	4a67      	ldr	r2, [pc, #412]	; (8007fb8 <__ieee754_pow+0x9a8>)
 8007e1c:	0004      	movs	r4, r0
 8007e1e:	000d      	movs	r5, r1
 8007e20:	4b66      	ldr	r3, [pc, #408]	; (8007fbc <__ieee754_pow+0x9ac>)
 8007e22:	0030      	movs	r0, r6
 8007e24:	0039      	movs	r1, r7
 8007e26:	f7f9 fea7 	bl	8001b78 <__aeabi_dmul>
 8007e2a:	0002      	movs	r2, r0
 8007e2c:	000b      	movs	r3, r1
 8007e2e:	0020      	movs	r0, r4
 8007e30:	0029      	movs	r1, r5
 8007e32:	f7f8 ff7b 	bl	8000d2c <__aeabi_dadd>
 8007e36:	0004      	movs	r4, r0
 8007e38:	000d      	movs	r5, r1
 8007e3a:	0002      	movs	r2, r0
 8007e3c:	000b      	movs	r3, r1
 8007e3e:	9808      	ldr	r0, [sp, #32]
 8007e40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e42:	f7f8 ff73 	bl	8000d2c <__aeabi_dadd>
 8007e46:	9a08      	ldr	r2, [sp, #32]
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	0006      	movs	r6, r0
 8007e4c:	000f      	movs	r7, r1
 8007e4e:	f7fa f905 	bl	800205c <__aeabi_dsub>
 8007e52:	0002      	movs	r2, r0
 8007e54:	000b      	movs	r3, r1
 8007e56:	0020      	movs	r0, r4
 8007e58:	0029      	movs	r1, r5
 8007e5a:	f7fa f8ff 	bl	800205c <__aeabi_dsub>
 8007e5e:	0032      	movs	r2, r6
 8007e60:	9004      	str	r0, [sp, #16]
 8007e62:	9105      	str	r1, [sp, #20]
 8007e64:	003b      	movs	r3, r7
 8007e66:	0030      	movs	r0, r6
 8007e68:	0039      	movs	r1, r7
 8007e6a:	f7f9 fe85 	bl	8001b78 <__aeabi_dmul>
 8007e6e:	0004      	movs	r4, r0
 8007e70:	000d      	movs	r5, r1
 8007e72:	4a53      	ldr	r2, [pc, #332]	; (8007fc0 <__ieee754_pow+0x9b0>)
 8007e74:	4b53      	ldr	r3, [pc, #332]	; (8007fc4 <__ieee754_pow+0x9b4>)
 8007e76:	f7f9 fe7f 	bl	8001b78 <__aeabi_dmul>
 8007e7a:	4a53      	ldr	r2, [pc, #332]	; (8007fc8 <__ieee754_pow+0x9b8>)
 8007e7c:	4b53      	ldr	r3, [pc, #332]	; (8007fcc <__ieee754_pow+0x9bc>)
 8007e7e:	f7fa f8ed 	bl	800205c <__aeabi_dsub>
 8007e82:	0022      	movs	r2, r4
 8007e84:	002b      	movs	r3, r5
 8007e86:	f7f9 fe77 	bl	8001b78 <__aeabi_dmul>
 8007e8a:	4a51      	ldr	r2, [pc, #324]	; (8007fd0 <__ieee754_pow+0x9c0>)
 8007e8c:	4b51      	ldr	r3, [pc, #324]	; (8007fd4 <__ieee754_pow+0x9c4>)
 8007e8e:	f7f8 ff4d 	bl	8000d2c <__aeabi_dadd>
 8007e92:	0022      	movs	r2, r4
 8007e94:	002b      	movs	r3, r5
 8007e96:	f7f9 fe6f 	bl	8001b78 <__aeabi_dmul>
 8007e9a:	4a4f      	ldr	r2, [pc, #316]	; (8007fd8 <__ieee754_pow+0x9c8>)
 8007e9c:	4b4f      	ldr	r3, [pc, #316]	; (8007fdc <__ieee754_pow+0x9cc>)
 8007e9e:	f7fa f8dd 	bl	800205c <__aeabi_dsub>
 8007ea2:	0022      	movs	r2, r4
 8007ea4:	002b      	movs	r3, r5
 8007ea6:	f7f9 fe67 	bl	8001b78 <__aeabi_dmul>
 8007eaa:	4a4d      	ldr	r2, [pc, #308]	; (8007fe0 <__ieee754_pow+0x9d0>)
 8007eac:	4b4d      	ldr	r3, [pc, #308]	; (8007fe4 <__ieee754_pow+0x9d4>)
 8007eae:	f7f8 ff3d 	bl	8000d2c <__aeabi_dadd>
 8007eb2:	0022      	movs	r2, r4
 8007eb4:	002b      	movs	r3, r5
 8007eb6:	f7f9 fe5f 	bl	8001b78 <__aeabi_dmul>
 8007eba:	0002      	movs	r2, r0
 8007ebc:	000b      	movs	r3, r1
 8007ebe:	0030      	movs	r0, r6
 8007ec0:	0039      	movs	r1, r7
 8007ec2:	f7fa f8cb 	bl	800205c <__aeabi_dsub>
 8007ec6:	0004      	movs	r4, r0
 8007ec8:	000d      	movs	r5, r1
 8007eca:	0002      	movs	r2, r0
 8007ecc:	000b      	movs	r3, r1
 8007ece:	0030      	movs	r0, r6
 8007ed0:	0039      	movs	r1, r7
 8007ed2:	f7f9 fe51 	bl	8001b78 <__aeabi_dmul>
 8007ed6:	2380      	movs	r3, #128	; 0x80
 8007ed8:	9006      	str	r0, [sp, #24]
 8007eda:	9107      	str	r1, [sp, #28]
 8007edc:	2200      	movs	r2, #0
 8007ede:	05db      	lsls	r3, r3, #23
 8007ee0:	0020      	movs	r0, r4
 8007ee2:	0029      	movs	r1, r5
 8007ee4:	f7fa f8ba 	bl	800205c <__aeabi_dsub>
 8007ee8:	0002      	movs	r2, r0
 8007eea:	000b      	movs	r3, r1
 8007eec:	9806      	ldr	r0, [sp, #24]
 8007eee:	9907      	ldr	r1, [sp, #28]
 8007ef0:	f7f9 fa38 	bl	8001364 <__aeabi_ddiv>
 8007ef4:	9a04      	ldr	r2, [sp, #16]
 8007ef6:	9b05      	ldr	r3, [sp, #20]
 8007ef8:	0004      	movs	r4, r0
 8007efa:	000d      	movs	r5, r1
 8007efc:	0030      	movs	r0, r6
 8007efe:	0039      	movs	r1, r7
 8007f00:	f7f9 fe3a 	bl	8001b78 <__aeabi_dmul>
 8007f04:	9a04      	ldr	r2, [sp, #16]
 8007f06:	9b05      	ldr	r3, [sp, #20]
 8007f08:	f7f8 ff10 	bl	8000d2c <__aeabi_dadd>
 8007f0c:	0002      	movs	r2, r0
 8007f0e:	000b      	movs	r3, r1
 8007f10:	0020      	movs	r0, r4
 8007f12:	0029      	movs	r1, r5
 8007f14:	f7fa f8a2 	bl	800205c <__aeabi_dsub>
 8007f18:	0032      	movs	r2, r6
 8007f1a:	003b      	movs	r3, r7
 8007f1c:	f7fa f89e 	bl	800205c <__aeabi_dsub>
 8007f20:	0002      	movs	r2, r0
 8007f22:	000b      	movs	r3, r1
 8007f24:	2000      	movs	r0, #0
 8007f26:	4930      	ldr	r1, [pc, #192]	; (8007fe8 <__ieee754_pow+0x9d8>)
 8007f28:	f7fa f898 	bl	800205c <__aeabi_dsub>
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	051b      	lsls	r3, r3, #20
 8007f30:	185b      	adds	r3, r3, r1
 8007f32:	151a      	asrs	r2, r3, #20
 8007f34:	2a00      	cmp	r2, #0
 8007f36:	dc26      	bgt.n	8007f86 <__ieee754_pow+0x976>
 8007f38:	9a02      	ldr	r2, [sp, #8]
 8007f3a:	f000 f9ad 	bl	8008298 <scalbn>
 8007f3e:	9a00      	ldr	r2, [sp, #0]
 8007f40:	9b01      	ldr	r3, [sp, #4]
 8007f42:	f7ff fc04 	bl	800774e <__ieee754_pow+0x13e>
 8007f46:	4a29      	ldr	r2, [pc, #164]	; (8007fec <__ieee754_pow+0x9dc>)
 8007f48:	004b      	lsls	r3, r1, #1
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	dc00      	bgt.n	8007f52 <__ieee754_pow+0x942>
 8007f50:	e717      	b.n	8007d82 <__ieee754_pow+0x772>
 8007f52:	4b27      	ldr	r3, [pc, #156]	; (8007ff0 <__ieee754_pow+0x9e0>)
 8007f54:	18cb      	adds	r3, r1, r3
 8007f56:	4303      	orrs	r3, r0
 8007f58:	d009      	beq.n	8007f6e <__ieee754_pow+0x95e>
 8007f5a:	9800      	ldr	r0, [sp, #0]
 8007f5c:	9901      	ldr	r1, [sp, #4]
 8007f5e:	4a25      	ldr	r2, [pc, #148]	; (8007ff4 <__ieee754_pow+0x9e4>)
 8007f60:	4b25      	ldr	r3, [pc, #148]	; (8007ff8 <__ieee754_pow+0x9e8>)
 8007f62:	f7f9 fe09 	bl	8001b78 <__aeabi_dmul>
 8007f66:	4a23      	ldr	r2, [pc, #140]	; (8007ff4 <__ieee754_pow+0x9e4>)
 8007f68:	4b23      	ldr	r3, [pc, #140]	; (8007ff8 <__ieee754_pow+0x9e8>)
 8007f6a:	f7ff fbf0 	bl	800774e <__ieee754_pow+0x13e>
 8007f6e:	0032      	movs	r2, r6
 8007f70:	003b      	movs	r3, r7
 8007f72:	f7fa f873 	bl	800205c <__aeabi_dsub>
 8007f76:	9a06      	ldr	r2, [sp, #24]
 8007f78:	9b07      	ldr	r3, [sp, #28]
 8007f7a:	f7f8 fa6f 	bl	800045c <__aeabi_dcmpge>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d100      	bne.n	8007f84 <__ieee754_pow+0x974>
 8007f82:	e6fe      	b.n	8007d82 <__ieee754_pow+0x772>
 8007f84:	e7e9      	b.n	8007f5a <__ieee754_pow+0x94a>
 8007f86:	0019      	movs	r1, r3
 8007f88:	e7d9      	b.n	8007f3e <__ieee754_pow+0x92e>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4c16      	ldr	r4, [pc, #88]	; (8007fe8 <__ieee754_pow+0x9d8>)
 8007f8e:	f7ff fba1 	bl	80076d4 <__ieee754_pow+0xc4>
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	652b82fe 	.word	0x652b82fe
 8007f98:	3c971547 	.word	0x3c971547
 8007f9c:	3fe00000 	.word	0x3fe00000
 8007fa0:	fffffc02 	.word	0xfffffc02
 8007fa4:	fffffc01 	.word	0xfffffc01
 8007fa8:	000fffff 	.word	0x000fffff
 8007fac:	3fe62e43 	.word	0x3fe62e43
 8007fb0:	fefa39ef 	.word	0xfefa39ef
 8007fb4:	3fe62e42 	.word	0x3fe62e42
 8007fb8:	0ca86c39 	.word	0x0ca86c39
 8007fbc:	be205c61 	.word	0xbe205c61
 8007fc0:	72bea4d0 	.word	0x72bea4d0
 8007fc4:	3e663769 	.word	0x3e663769
 8007fc8:	c5d26bf1 	.word	0xc5d26bf1
 8007fcc:	3ebbbd41 	.word	0x3ebbbd41
 8007fd0:	af25de2c 	.word	0xaf25de2c
 8007fd4:	3f11566a 	.word	0x3f11566a
 8007fd8:	16bebd93 	.word	0x16bebd93
 8007fdc:	3f66c16c 	.word	0x3f66c16c
 8007fe0:	5555553e 	.word	0x5555553e
 8007fe4:	3fc55555 	.word	0x3fc55555
 8007fe8:	3ff00000 	.word	0x3ff00000
 8007fec:	4090cbff 	.word	0x4090cbff
 8007ff0:	3f6f3400 	.word	0x3f6f3400
 8007ff4:	c2f8f359 	.word	0xc2f8f359
 8007ff8:	01a56e1f 	.word	0x01a56e1f

08007ffc <__ieee754_sqrt>:
 8007ffc:	4b55      	ldr	r3, [pc, #340]	; (8008154 <__ieee754_sqrt+0x158>)
 8007ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008000:	001a      	movs	r2, r3
 8008002:	0005      	movs	r5, r0
 8008004:	000c      	movs	r4, r1
 8008006:	400a      	ands	r2, r1
 8008008:	429a      	cmp	r2, r3
 800800a:	d10f      	bne.n	800802c <__ieee754_sqrt+0x30>
 800800c:	0002      	movs	r2, r0
 800800e:	000b      	movs	r3, r1
 8008010:	f7f9 fdb2 	bl	8001b78 <__aeabi_dmul>
 8008014:	0002      	movs	r2, r0
 8008016:	000b      	movs	r3, r1
 8008018:	0028      	movs	r0, r5
 800801a:	0021      	movs	r1, r4
 800801c:	f7f8 fe86 	bl	8000d2c <__aeabi_dadd>
 8008020:	0005      	movs	r5, r0
 8008022:	000c      	movs	r4, r1
 8008024:	0028      	movs	r0, r5
 8008026:	0021      	movs	r1, r4
 8008028:	b003      	add	sp, #12
 800802a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802c:	0002      	movs	r2, r0
 800802e:	2900      	cmp	r1, #0
 8008030:	dc10      	bgt.n	8008054 <__ieee754_sqrt+0x58>
 8008032:	004b      	lsls	r3, r1, #1
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	4303      	orrs	r3, r0
 8008038:	d0f4      	beq.n	8008024 <__ieee754_sqrt+0x28>
 800803a:	2000      	movs	r0, #0
 800803c:	4281      	cmp	r1, r0
 800803e:	d100      	bne.n	8008042 <__ieee754_sqrt+0x46>
 8008040:	e07f      	b.n	8008142 <__ieee754_sqrt+0x146>
 8008042:	000b      	movs	r3, r1
 8008044:	0028      	movs	r0, r5
 8008046:	f7fa f809 	bl	800205c <__aeabi_dsub>
 800804a:	0002      	movs	r2, r0
 800804c:	000b      	movs	r3, r1
 800804e:	f7f9 f989 	bl	8001364 <__aeabi_ddiv>
 8008052:	e7e5      	b.n	8008020 <__ieee754_sqrt+0x24>
 8008054:	1508      	asrs	r0, r1, #20
 8008056:	d074      	beq.n	8008142 <__ieee754_sqrt+0x146>
 8008058:	4b3f      	ldr	r3, [pc, #252]	; (8008158 <__ieee754_sqrt+0x15c>)
 800805a:	0309      	lsls	r1, r1, #12
 800805c:	18c0      	adds	r0, r0, r3
 800805e:	2380      	movs	r3, #128	; 0x80
 8008060:	0b09      	lsrs	r1, r1, #12
 8008062:	035b      	lsls	r3, r3, #13
 8008064:	4319      	orrs	r1, r3
 8008066:	07c3      	lsls	r3, r0, #31
 8008068:	d503      	bpl.n	8008072 <__ieee754_sqrt+0x76>
 800806a:	0fd3      	lsrs	r3, r2, #31
 800806c:	0049      	lsls	r1, r1, #1
 800806e:	18c9      	adds	r1, r1, r3
 8008070:	0052      	lsls	r2, r2, #1
 8008072:	2400      	movs	r4, #0
 8008074:	1043      	asrs	r3, r0, #1
 8008076:	0049      	lsls	r1, r1, #1
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	2580      	movs	r5, #128	; 0x80
 800807c:	0fd3      	lsrs	r3, r2, #31
 800807e:	18cb      	adds	r3, r1, r3
 8008080:	0020      	movs	r0, r4
 8008082:	2116      	movs	r1, #22
 8008084:	0052      	lsls	r2, r2, #1
 8008086:	03ad      	lsls	r5, r5, #14
 8008088:	1946      	adds	r6, r0, r5
 800808a:	429e      	cmp	r6, r3
 800808c:	dc02      	bgt.n	8008094 <__ieee754_sqrt+0x98>
 800808e:	1970      	adds	r0, r6, r5
 8008090:	1b9b      	subs	r3, r3, r6
 8008092:	1964      	adds	r4, r4, r5
 8008094:	0fd6      	lsrs	r6, r2, #31
 8008096:	005b      	lsls	r3, r3, #1
 8008098:	3901      	subs	r1, #1
 800809a:	199b      	adds	r3, r3, r6
 800809c:	0052      	lsls	r2, r2, #1
 800809e:	086d      	lsrs	r5, r5, #1
 80080a0:	2900      	cmp	r1, #0
 80080a2:	d1f1      	bne.n	8008088 <__ieee754_sqrt+0x8c>
 80080a4:	2520      	movs	r5, #32
 80080a6:	2680      	movs	r6, #128	; 0x80
 80080a8:	46ac      	mov	ip, r5
 80080aa:	9100      	str	r1, [sp, #0]
 80080ac:	0636      	lsls	r6, r6, #24
 80080ae:	9d00      	ldr	r5, [sp, #0]
 80080b0:	1977      	adds	r7, r6, r5
 80080b2:	4283      	cmp	r3, r0
 80080b4:	dc02      	bgt.n	80080bc <__ieee754_sqrt+0xc0>
 80080b6:	d112      	bne.n	80080de <__ieee754_sqrt+0xe2>
 80080b8:	4297      	cmp	r7, r2
 80080ba:	d810      	bhi.n	80080de <__ieee754_sqrt+0xe2>
 80080bc:	19bd      	adds	r5, r7, r6
 80080be:	9500      	str	r5, [sp, #0]
 80080c0:	0005      	movs	r5, r0
 80080c2:	2f00      	cmp	r7, #0
 80080c4:	da03      	bge.n	80080ce <__ieee754_sqrt+0xd2>
 80080c6:	9d00      	ldr	r5, [sp, #0]
 80080c8:	43ed      	mvns	r5, r5
 80080ca:	0fed      	lsrs	r5, r5, #31
 80080cc:	1945      	adds	r5, r0, r5
 80080ce:	1a1b      	subs	r3, r3, r0
 80080d0:	42ba      	cmp	r2, r7
 80080d2:	4180      	sbcs	r0, r0
 80080d4:	4240      	negs	r0, r0
 80080d6:	1a1b      	subs	r3, r3, r0
 80080d8:	0028      	movs	r0, r5
 80080da:	1bd2      	subs	r2, r2, r7
 80080dc:	1989      	adds	r1, r1, r6
 80080de:	0fd5      	lsrs	r5, r2, #31
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	18eb      	adds	r3, r5, r3
 80080e4:	2501      	movs	r5, #1
 80080e6:	426d      	negs	r5, r5
 80080e8:	44ac      	add	ip, r5
 80080ea:	4665      	mov	r5, ip
 80080ec:	0052      	lsls	r2, r2, #1
 80080ee:	0876      	lsrs	r6, r6, #1
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	d1dc      	bne.n	80080ae <__ieee754_sqrt+0xb2>
 80080f4:	4313      	orrs	r3, r2
 80080f6:	d003      	beq.n	8008100 <__ieee754_sqrt+0x104>
 80080f8:	1c4b      	adds	r3, r1, #1
 80080fa:	d127      	bne.n	800814c <__ieee754_sqrt+0x150>
 80080fc:	4661      	mov	r1, ip
 80080fe:	3401      	adds	r4, #1
 8008100:	4b16      	ldr	r3, [pc, #88]	; (800815c <__ieee754_sqrt+0x160>)
 8008102:	1060      	asrs	r0, r4, #1
 8008104:	18c0      	adds	r0, r0, r3
 8008106:	0849      	lsrs	r1, r1, #1
 8008108:	07e3      	lsls	r3, r4, #31
 800810a:	d502      	bpl.n	8008112 <__ieee754_sqrt+0x116>
 800810c:	2380      	movs	r3, #128	; 0x80
 800810e:	061b      	lsls	r3, r3, #24
 8008110:	4319      	orrs	r1, r3
 8008112:	9b01      	ldr	r3, [sp, #4]
 8008114:	000d      	movs	r5, r1
 8008116:	051c      	lsls	r4, r3, #20
 8008118:	1823      	adds	r3, r4, r0
 800811a:	001c      	movs	r4, r3
 800811c:	e782      	b.n	8008024 <__ieee754_sqrt+0x28>
 800811e:	0ad1      	lsrs	r1, r2, #11
 8008120:	3b15      	subs	r3, #21
 8008122:	0552      	lsls	r2, r2, #21
 8008124:	2900      	cmp	r1, #0
 8008126:	d0fa      	beq.n	800811e <__ieee754_sqrt+0x122>
 8008128:	2480      	movs	r4, #128	; 0x80
 800812a:	0364      	lsls	r4, r4, #13
 800812c:	4221      	tst	r1, r4
 800812e:	d00a      	beq.n	8008146 <__ieee754_sqrt+0x14a>
 8008130:	2420      	movs	r4, #32
 8008132:	0016      	movs	r6, r2
 8008134:	1a24      	subs	r4, r4, r0
 8008136:	40e6      	lsrs	r6, r4
 8008138:	1e45      	subs	r5, r0, #1
 800813a:	4082      	lsls	r2, r0
 800813c:	4331      	orrs	r1, r6
 800813e:	1b58      	subs	r0, r3, r5
 8008140:	e78a      	b.n	8008058 <__ieee754_sqrt+0x5c>
 8008142:	2300      	movs	r3, #0
 8008144:	e7ee      	b.n	8008124 <__ieee754_sqrt+0x128>
 8008146:	0049      	lsls	r1, r1, #1
 8008148:	3001      	adds	r0, #1
 800814a:	e7ef      	b.n	800812c <__ieee754_sqrt+0x130>
 800814c:	2301      	movs	r3, #1
 800814e:	3101      	adds	r1, #1
 8008150:	4399      	bics	r1, r3
 8008152:	e7d5      	b.n	8008100 <__ieee754_sqrt+0x104>
 8008154:	7ff00000 	.word	0x7ff00000
 8008158:	fffffc01 	.word	0xfffffc01
 800815c:	3fe00000 	.word	0x3fe00000

08008160 <fabs>:
 8008160:	0049      	lsls	r1, r1, #1
 8008162:	084b      	lsrs	r3, r1, #1
 8008164:	0019      	movs	r1, r3
 8008166:	4770      	bx	lr

08008168 <finite>:
 8008168:	0048      	lsls	r0, r1, #1
 800816a:	4b02      	ldr	r3, [pc, #8]	; (8008174 <finite+0xc>)
 800816c:	0840      	lsrs	r0, r0, #1
 800816e:	18c0      	adds	r0, r0, r3
 8008170:	0fc0      	lsrs	r0, r0, #31
 8008172:	4770      	bx	lr
 8008174:	80100000 	.word	0x80100000

08008178 <matherr>:
 8008178:	2000      	movs	r0, #0
 800817a:	4770      	bx	lr

0800817c <nan>:
 800817c:	2000      	movs	r0, #0
 800817e:	4901      	ldr	r1, [pc, #4]	; (8008184 <nan+0x8>)
 8008180:	4770      	bx	lr
 8008182:	46c0      	nop			; (mov r8, r8)
 8008184:	7ff80000 	.word	0x7ff80000

08008188 <rint>:
 8008188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800818a:	004a      	lsls	r2, r1, #1
 800818c:	4e3e      	ldr	r6, [pc, #248]	; (8008288 <rint+0x100>)
 800818e:	0d52      	lsrs	r2, r2, #21
 8008190:	b085      	sub	sp, #20
 8008192:	1996      	adds	r6, r2, r6
 8008194:	000d      	movs	r5, r1
 8008196:	9101      	str	r1, [sp, #4]
 8008198:	0003      	movs	r3, r0
 800819a:	0fcc      	lsrs	r4, r1, #31
 800819c:	2e13      	cmp	r6, #19
 800819e:	dc57      	bgt.n	8008250 <rint+0xc8>
 80081a0:	2e00      	cmp	r6, #0
 80081a2:	da2a      	bge.n	80081fa <rint+0x72>
 80081a4:	004a      	lsls	r2, r1, #1
 80081a6:	0852      	lsrs	r2, r2, #1
 80081a8:	4302      	orrs	r2, r0
 80081aa:	d024      	beq.n	80081f6 <rint+0x6e>
 80081ac:	030a      	lsls	r2, r1, #12
 80081ae:	0b12      	lsrs	r2, r2, #12
 80081b0:	4302      	orrs	r2, r0
 80081b2:	4253      	negs	r3, r2
 80081b4:	4313      	orrs	r3, r2
 80081b6:	2280      	movs	r2, #128	; 0x80
 80081b8:	0c4d      	lsrs	r5, r1, #17
 80081ba:	0312      	lsls	r2, r2, #12
 80081bc:	0b1b      	lsrs	r3, r3, #12
 80081be:	4013      	ands	r3, r2
 80081c0:	046d      	lsls	r5, r5, #17
 80081c2:	432b      	orrs	r3, r5
 80081c4:	0019      	movs	r1, r3
 80081c6:	4b31      	ldr	r3, [pc, #196]	; (800828c <rint+0x104>)
 80081c8:	00e2      	lsls	r2, r4, #3
 80081ca:	189b      	adds	r3, r3, r2
 80081cc:	681e      	ldr	r6, [r3, #0]
 80081ce:	685f      	ldr	r7, [r3, #4]
 80081d0:	0002      	movs	r2, r0
 80081d2:	000b      	movs	r3, r1
 80081d4:	0030      	movs	r0, r6
 80081d6:	0039      	movs	r1, r7
 80081d8:	f7f8 fda8 	bl	8000d2c <__aeabi_dadd>
 80081dc:	9002      	str	r0, [sp, #8]
 80081de:	9103      	str	r1, [sp, #12]
 80081e0:	9802      	ldr	r0, [sp, #8]
 80081e2:	9903      	ldr	r1, [sp, #12]
 80081e4:	003b      	movs	r3, r7
 80081e6:	0032      	movs	r2, r6
 80081e8:	f7f9 ff38 	bl	800205c <__aeabi_dsub>
 80081ec:	004b      	lsls	r3, r1, #1
 80081ee:	085b      	lsrs	r3, r3, #1
 80081f0:	07e4      	lsls	r4, r4, #31
 80081f2:	4323      	orrs	r3, r4
 80081f4:	0019      	movs	r1, r3
 80081f6:	b005      	add	sp, #20
 80081f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fa:	4a25      	ldr	r2, [pc, #148]	; (8008290 <rint+0x108>)
 80081fc:	4132      	asrs	r2, r6
 80081fe:	0017      	movs	r7, r2
 8008200:	400f      	ands	r7, r1
 8008202:	4307      	orrs	r7, r0
 8008204:	d0f7      	beq.n	80081f6 <rint+0x6e>
 8008206:	0852      	lsrs	r2, r2, #1
 8008208:	0011      	movs	r1, r2
 800820a:	4029      	ands	r1, r5
 800820c:	430b      	orrs	r3, r1
 800820e:	d00a      	beq.n	8008226 <rint+0x9e>
 8008210:	2300      	movs	r3, #0
 8008212:	2e13      	cmp	r6, #19
 8008214:	d101      	bne.n	800821a <rint+0x92>
 8008216:	2380      	movs	r3, #128	; 0x80
 8008218:	061b      	lsls	r3, r3, #24
 800821a:	2780      	movs	r7, #128	; 0x80
 800821c:	02ff      	lsls	r7, r7, #11
 800821e:	4137      	asrs	r7, r6
 8008220:	4395      	bics	r5, r2
 8008222:	432f      	orrs	r7, r5
 8008224:	9701      	str	r7, [sp, #4]
 8008226:	9901      	ldr	r1, [sp, #4]
 8008228:	001a      	movs	r2, r3
 800822a:	000b      	movs	r3, r1
 800822c:	4917      	ldr	r1, [pc, #92]	; (800828c <rint+0x104>)
 800822e:	00e4      	lsls	r4, r4, #3
 8008230:	190c      	adds	r4, r1, r4
 8008232:	6865      	ldr	r5, [r4, #4]
 8008234:	6824      	ldr	r4, [r4, #0]
 8008236:	0020      	movs	r0, r4
 8008238:	0029      	movs	r1, r5
 800823a:	f7f8 fd77 	bl	8000d2c <__aeabi_dadd>
 800823e:	9002      	str	r0, [sp, #8]
 8008240:	9103      	str	r1, [sp, #12]
 8008242:	9802      	ldr	r0, [sp, #8]
 8008244:	9903      	ldr	r1, [sp, #12]
 8008246:	0022      	movs	r2, r4
 8008248:	002b      	movs	r3, r5
 800824a:	f7f9 ff07 	bl	800205c <__aeabi_dsub>
 800824e:	e7d2      	b.n	80081f6 <rint+0x6e>
 8008250:	2e33      	cmp	r6, #51	; 0x33
 8008252:	dd08      	ble.n	8008266 <rint+0xde>
 8008254:	2380      	movs	r3, #128	; 0x80
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	429e      	cmp	r6, r3
 800825a:	d1cc      	bne.n	80081f6 <rint+0x6e>
 800825c:	0002      	movs	r2, r0
 800825e:	000b      	movs	r3, r1
 8008260:	f7f8 fd64 	bl	8000d2c <__aeabi_dadd>
 8008264:	e7c7      	b.n	80081f6 <rint+0x6e>
 8008266:	2601      	movs	r6, #1
 8008268:	4d0a      	ldr	r5, [pc, #40]	; (8008294 <rint+0x10c>)
 800826a:	4276      	negs	r6, r6
 800826c:	1952      	adds	r2, r2, r5
 800826e:	40d6      	lsrs	r6, r2
 8008270:	4206      	tst	r6, r0
 8008272:	d0c0      	beq.n	80081f6 <rint+0x6e>
 8008274:	0876      	lsrs	r6, r6, #1
 8008276:	4206      	tst	r6, r0
 8008278:	d0d5      	beq.n	8008226 <rint+0x9e>
 800827a:	2180      	movs	r1, #128	; 0x80
 800827c:	05c9      	lsls	r1, r1, #23
 800827e:	4111      	asrs	r1, r2
 8008280:	43b3      	bics	r3, r6
 8008282:	430b      	orrs	r3, r1
 8008284:	e7cf      	b.n	8008226 <rint+0x9e>
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	fffffc01 	.word	0xfffffc01
 800828c:	080091c8 	.word	0x080091c8
 8008290:	000fffff 	.word	0x000fffff
 8008294:	fffffbed 	.word	0xfffffbed

08008298 <scalbn>:
 8008298:	004b      	lsls	r3, r1, #1
 800829a:	b570      	push	{r4, r5, r6, lr}
 800829c:	0d5b      	lsrs	r3, r3, #21
 800829e:	0014      	movs	r4, r2
 80082a0:	000a      	movs	r2, r1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10d      	bne.n	80082c2 <scalbn+0x2a>
 80082a6:	004b      	lsls	r3, r1, #1
 80082a8:	085b      	lsrs	r3, r3, #1
 80082aa:	4303      	orrs	r3, r0
 80082ac:	d010      	beq.n	80082d0 <scalbn+0x38>
 80082ae:	4b21      	ldr	r3, [pc, #132]	; (8008334 <scalbn+0x9c>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	f7f9 fc61 	bl	8001b78 <__aeabi_dmul>
 80082b6:	4b20      	ldr	r3, [pc, #128]	; (8008338 <scalbn+0xa0>)
 80082b8:	429c      	cmp	r4, r3
 80082ba:	da0a      	bge.n	80082d2 <scalbn+0x3a>
 80082bc:	4a1f      	ldr	r2, [pc, #124]	; (800833c <scalbn+0xa4>)
 80082be:	4b20      	ldr	r3, [pc, #128]	; (8008340 <scalbn+0xa8>)
 80082c0:	e017      	b.n	80082f2 <scalbn+0x5a>
 80082c2:	4d20      	ldr	r5, [pc, #128]	; (8008344 <scalbn+0xac>)
 80082c4:	42ab      	cmp	r3, r5
 80082c6:	d108      	bne.n	80082da <scalbn+0x42>
 80082c8:	0002      	movs	r2, r0
 80082ca:	000b      	movs	r3, r1
 80082cc:	f7f8 fd2e 	bl	8000d2c <__aeabi_dadd>
 80082d0:	bd70      	pop	{r4, r5, r6, pc}
 80082d2:	000a      	movs	r2, r1
 80082d4:	004b      	lsls	r3, r1, #1
 80082d6:	0d5b      	lsrs	r3, r3, #21
 80082d8:	3b36      	subs	r3, #54	; 0x36
 80082da:	4d1b      	ldr	r5, [pc, #108]	; (8008348 <scalbn+0xb0>)
 80082dc:	18e3      	adds	r3, r4, r3
 80082de:	42ab      	cmp	r3, r5
 80082e0:	dd0a      	ble.n	80082f8 <scalbn+0x60>
 80082e2:	0002      	movs	r2, r0
 80082e4:	000b      	movs	r3, r1
 80082e6:	4819      	ldr	r0, [pc, #100]	; (800834c <scalbn+0xb4>)
 80082e8:	4919      	ldr	r1, [pc, #100]	; (8008350 <scalbn+0xb8>)
 80082ea:	f000 f9eb 	bl	80086c4 <copysign>
 80082ee:	4a17      	ldr	r2, [pc, #92]	; (800834c <scalbn+0xb4>)
 80082f0:	4b17      	ldr	r3, [pc, #92]	; (8008350 <scalbn+0xb8>)
 80082f2:	f7f9 fc41 	bl	8001b78 <__aeabi_dmul>
 80082f6:	e7eb      	b.n	80082d0 <scalbn+0x38>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	dd05      	ble.n	8008308 <scalbn+0x70>
 80082fc:	4c15      	ldr	r4, [pc, #84]	; (8008354 <scalbn+0xbc>)
 80082fe:	051b      	lsls	r3, r3, #20
 8008300:	4022      	ands	r2, r4
 8008302:	431a      	orrs	r2, r3
 8008304:	0011      	movs	r1, r2
 8008306:	e7e3      	b.n	80082d0 <scalbn+0x38>
 8008308:	001d      	movs	r5, r3
 800830a:	3535      	adds	r5, #53	; 0x35
 800830c:	da09      	bge.n	8008322 <scalbn+0x8a>
 800830e:	4b12      	ldr	r3, [pc, #72]	; (8008358 <scalbn+0xc0>)
 8008310:	0002      	movs	r2, r0
 8008312:	429c      	cmp	r4, r3
 8008314:	dce6      	bgt.n	80082e4 <scalbn+0x4c>
 8008316:	000b      	movs	r3, r1
 8008318:	4808      	ldr	r0, [pc, #32]	; (800833c <scalbn+0xa4>)
 800831a:	4909      	ldr	r1, [pc, #36]	; (8008340 <scalbn+0xa8>)
 800831c:	f000 f9d2 	bl	80086c4 <copysign>
 8008320:	e7cc      	b.n	80082bc <scalbn+0x24>
 8008322:	4c0c      	ldr	r4, [pc, #48]	; (8008354 <scalbn+0xbc>)
 8008324:	3336      	adds	r3, #54	; 0x36
 8008326:	4022      	ands	r2, r4
 8008328:	051b      	lsls	r3, r3, #20
 800832a:	4313      	orrs	r3, r2
 800832c:	0019      	movs	r1, r3
 800832e:	2200      	movs	r2, #0
 8008330:	4b0a      	ldr	r3, [pc, #40]	; (800835c <scalbn+0xc4>)
 8008332:	e7de      	b.n	80082f2 <scalbn+0x5a>
 8008334:	43500000 	.word	0x43500000
 8008338:	ffff3cb0 	.word	0xffff3cb0
 800833c:	c2f8f359 	.word	0xc2f8f359
 8008340:	01a56e1f 	.word	0x01a56e1f
 8008344:	000007ff 	.word	0x000007ff
 8008348:	000007fe 	.word	0x000007fe
 800834c:	8800759c 	.word	0x8800759c
 8008350:	7e37e43c 	.word	0x7e37e43c
 8008354:	800fffff 	.word	0x800fffff
 8008358:	0000c350 	.word	0x0000c350
 800835c:	3c900000 	.word	0x3c900000

08008360 <__ieee754_log>:
 8008360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008362:	4bba      	ldr	r3, [pc, #744]	; (800864c <__ieee754_log+0x2ec>)
 8008364:	b08d      	sub	sp, #52	; 0x34
 8008366:	000e      	movs	r6, r1
 8008368:	4299      	cmp	r1, r3
 800836a:	dc23      	bgt.n	80083b4 <__ieee754_log+0x54>
 800836c:	004b      	lsls	r3, r1, #1
 800836e:	085b      	lsrs	r3, r3, #1
 8008370:	4303      	orrs	r3, r0
 8008372:	d107      	bne.n	8008384 <__ieee754_log+0x24>
 8008374:	2200      	movs	r2, #0
 8008376:	2300      	movs	r3, #0
 8008378:	2000      	movs	r0, #0
 800837a:	49b5      	ldr	r1, [pc, #724]	; (8008650 <__ieee754_log+0x2f0>)
 800837c:	f7f8 fff2 	bl	8001364 <__aeabi_ddiv>
 8008380:	b00d      	add	sp, #52	; 0x34
 8008382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008384:	2900      	cmp	r1, #0
 8008386:	da06      	bge.n	8008396 <__ieee754_log+0x36>
 8008388:	0002      	movs	r2, r0
 800838a:	000b      	movs	r3, r1
 800838c:	f7f9 fe66 	bl	800205c <__aeabi_dsub>
 8008390:	2200      	movs	r2, #0
 8008392:	2300      	movs	r3, #0
 8008394:	e7f2      	b.n	800837c <__ieee754_log+0x1c>
 8008396:	4baf      	ldr	r3, [pc, #700]	; (8008654 <__ieee754_log+0x2f4>)
 8008398:	2200      	movs	r2, #0
 800839a:	f7f9 fbed 	bl	8001b78 <__aeabi_dmul>
 800839e:	2336      	movs	r3, #54	; 0x36
 80083a0:	000e      	movs	r6, r1
 80083a2:	425b      	negs	r3, r3
 80083a4:	4aac      	ldr	r2, [pc, #688]	; (8008658 <__ieee754_log+0x2f8>)
 80083a6:	4296      	cmp	r6, r2
 80083a8:	dd06      	ble.n	80083b8 <__ieee754_log+0x58>
 80083aa:	0002      	movs	r2, r0
 80083ac:	000b      	movs	r3, r1
 80083ae:	f7f8 fcbd 	bl	8000d2c <__aeabi_dadd>
 80083b2:	e7e5      	b.n	8008380 <__ieee754_log+0x20>
 80083b4:	2300      	movs	r3, #0
 80083b6:	e7f5      	b.n	80083a4 <__ieee754_log+0x44>
 80083b8:	4ca8      	ldr	r4, [pc, #672]	; (800865c <__ieee754_log+0x2fc>)
 80083ba:	1532      	asrs	r2, r6, #20
 80083bc:	1912      	adds	r2, r2, r4
 80083be:	0336      	lsls	r6, r6, #12
 80083c0:	4ca7      	ldr	r4, [pc, #668]	; (8008660 <__ieee754_log+0x300>)
 80083c2:	18d2      	adds	r2, r2, r3
 80083c4:	0b33      	lsrs	r3, r6, #12
 80083c6:	9302      	str	r3, [sp, #8]
 80083c8:	191c      	adds	r4, r3, r4
 80083ca:	2380      	movs	r3, #128	; 0x80
 80083cc:	035b      	lsls	r3, r3, #13
 80083ce:	4023      	ands	r3, r4
 80083d0:	4ca4      	ldr	r4, [pc, #656]	; (8008664 <__ieee754_log+0x304>)
 80083d2:	9d02      	ldr	r5, [sp, #8]
 80083d4:	405c      	eors	r4, r3
 80083d6:	151b      	asrs	r3, r3, #20
 80083d8:	189b      	adds	r3, r3, r2
 80083da:	4325      	orrs	r5, r4
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2200      	movs	r2, #0
 80083e0:	4ba0      	ldr	r3, [pc, #640]	; (8008664 <__ieee754_log+0x304>)
 80083e2:	0029      	movs	r1, r5
 80083e4:	f7f9 fe3a 	bl	800205c <__aeabi_dsub>
 80083e8:	9b02      	ldr	r3, [sp, #8]
 80083ea:	0006      	movs	r6, r0
 80083ec:	3302      	adds	r3, #2
 80083ee:	031b      	lsls	r3, r3, #12
 80083f0:	000f      	movs	r7, r1
 80083f2:	0b1b      	lsrs	r3, r3, #12
 80083f4:	2200      	movs	r2, #0
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	dc64      	bgt.n	80084c4 <__ieee754_log+0x164>
 80083fa:	2300      	movs	r3, #0
 80083fc:	f7f8 f80a 	bl	8000414 <__aeabi_dcmpeq>
 8008400:	2800      	cmp	r0, #0
 8008402:	d019      	beq.n	8008438 <__ieee754_log+0xd8>
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d100      	bne.n	800840c <__ieee754_log+0xac>
 800840a:	e11c      	b.n	8008646 <__ieee754_log+0x2e6>
 800840c:	0018      	movs	r0, r3
 800840e:	f7fa f9bf 	bl	8002790 <__aeabi_i2d>
 8008412:	4a95      	ldr	r2, [pc, #596]	; (8008668 <__ieee754_log+0x308>)
 8008414:	4b95      	ldr	r3, [pc, #596]	; (800866c <__ieee754_log+0x30c>)
 8008416:	0004      	movs	r4, r0
 8008418:	000d      	movs	r5, r1
 800841a:	f7f9 fbad 	bl	8001b78 <__aeabi_dmul>
 800841e:	4a94      	ldr	r2, [pc, #592]	; (8008670 <__ieee754_log+0x310>)
 8008420:	0006      	movs	r6, r0
 8008422:	000f      	movs	r7, r1
 8008424:	4b93      	ldr	r3, [pc, #588]	; (8008674 <__ieee754_log+0x314>)
 8008426:	0020      	movs	r0, r4
 8008428:	0029      	movs	r1, r5
 800842a:	f7f9 fba5 	bl	8001b78 <__aeabi_dmul>
 800842e:	0002      	movs	r2, r0
 8008430:	000b      	movs	r3, r1
 8008432:	0030      	movs	r0, r6
 8008434:	0039      	movs	r1, r7
 8008436:	e7ba      	b.n	80083ae <__ieee754_log+0x4e>
 8008438:	4a8f      	ldr	r2, [pc, #572]	; (8008678 <__ieee754_log+0x318>)
 800843a:	4b90      	ldr	r3, [pc, #576]	; (800867c <__ieee754_log+0x31c>)
 800843c:	0030      	movs	r0, r6
 800843e:	0039      	movs	r1, r7
 8008440:	f7f9 fb9a 	bl	8001b78 <__aeabi_dmul>
 8008444:	0002      	movs	r2, r0
 8008446:	000b      	movs	r3, r1
 8008448:	2000      	movs	r0, #0
 800844a:	498d      	ldr	r1, [pc, #564]	; (8008680 <__ieee754_log+0x320>)
 800844c:	f7f9 fe06 	bl	800205c <__aeabi_dsub>
 8008450:	0032      	movs	r2, r6
 8008452:	0004      	movs	r4, r0
 8008454:	000d      	movs	r5, r1
 8008456:	003b      	movs	r3, r7
 8008458:	0030      	movs	r0, r6
 800845a:	0039      	movs	r1, r7
 800845c:	f7f9 fb8c 	bl	8001b78 <__aeabi_dmul>
 8008460:	000b      	movs	r3, r1
 8008462:	0002      	movs	r2, r0
 8008464:	0029      	movs	r1, r5
 8008466:	0020      	movs	r0, r4
 8008468:	f7f9 fb86 	bl	8001b78 <__aeabi_dmul>
 800846c:	9b00      	ldr	r3, [sp, #0]
 800846e:	9002      	str	r0, [sp, #8]
 8008470:	9103      	str	r1, [sp, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <__ieee754_log+0x124>
 8008476:	0002      	movs	r2, r0
 8008478:	000b      	movs	r3, r1
 800847a:	0030      	movs	r0, r6
 800847c:	0039      	movs	r1, r7
 800847e:	f7f9 fded 	bl	800205c <__aeabi_dsub>
 8008482:	e77d      	b.n	8008380 <__ieee754_log+0x20>
 8008484:	9800      	ldr	r0, [sp, #0]
 8008486:	f7fa f983 	bl	8002790 <__aeabi_i2d>
 800848a:	4a77      	ldr	r2, [pc, #476]	; (8008668 <__ieee754_log+0x308>)
 800848c:	4b77      	ldr	r3, [pc, #476]	; (800866c <__ieee754_log+0x30c>)
 800848e:	0004      	movs	r4, r0
 8008490:	000d      	movs	r5, r1
 8008492:	f7f9 fb71 	bl	8001b78 <__aeabi_dmul>
 8008496:	4a76      	ldr	r2, [pc, #472]	; (8008670 <__ieee754_log+0x310>)
 8008498:	9000      	str	r0, [sp, #0]
 800849a:	9101      	str	r1, [sp, #4]
 800849c:	4b75      	ldr	r3, [pc, #468]	; (8008674 <__ieee754_log+0x314>)
 800849e:	0020      	movs	r0, r4
 80084a0:	0029      	movs	r1, r5
 80084a2:	f7f9 fb69 	bl	8001b78 <__aeabi_dmul>
 80084a6:	0002      	movs	r2, r0
 80084a8:	000b      	movs	r3, r1
 80084aa:	9802      	ldr	r0, [sp, #8]
 80084ac:	9903      	ldr	r1, [sp, #12]
 80084ae:	f7f9 fdd5 	bl	800205c <__aeabi_dsub>
 80084b2:	0032      	movs	r2, r6
 80084b4:	003b      	movs	r3, r7
 80084b6:	f7f9 fdd1 	bl	800205c <__aeabi_dsub>
 80084ba:	0002      	movs	r2, r0
 80084bc:	000b      	movs	r3, r1
 80084be:	9800      	ldr	r0, [sp, #0]
 80084c0:	9901      	ldr	r1, [sp, #4]
 80084c2:	e7dc      	b.n	800847e <__ieee754_log+0x11e>
 80084c4:	2380      	movs	r3, #128	; 0x80
 80084c6:	05db      	lsls	r3, r3, #23
 80084c8:	f7f8 fc30 	bl	8000d2c <__aeabi_dadd>
 80084cc:	0002      	movs	r2, r0
 80084ce:	000b      	movs	r3, r1
 80084d0:	0030      	movs	r0, r6
 80084d2:	0039      	movs	r1, r7
 80084d4:	f7f8 ff46 	bl	8001364 <__aeabi_ddiv>
 80084d8:	9004      	str	r0, [sp, #16]
 80084da:	9105      	str	r1, [sp, #20]
 80084dc:	9800      	ldr	r0, [sp, #0]
 80084de:	f7fa f957 	bl	8002790 <__aeabi_i2d>
 80084e2:	9a04      	ldr	r2, [sp, #16]
 80084e4:	9b05      	ldr	r3, [sp, #20]
 80084e6:	9006      	str	r0, [sp, #24]
 80084e8:	9107      	str	r1, [sp, #28]
 80084ea:	0010      	movs	r0, r2
 80084ec:	0019      	movs	r1, r3
 80084ee:	f7f9 fb43 	bl	8001b78 <__aeabi_dmul>
 80084f2:	4a64      	ldr	r2, [pc, #400]	; (8008684 <__ieee754_log+0x324>)
 80084f4:	9b02      	ldr	r3, [sp, #8]
 80084f6:	4694      	mov	ip, r2
 80084f8:	4463      	add	r3, ip
 80084fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80084fc:	0002      	movs	r2, r0
 80084fe:	000b      	movs	r3, r1
 8008500:	9008      	str	r0, [sp, #32]
 8008502:	9109      	str	r1, [sp, #36]	; 0x24
 8008504:	f7f9 fb38 	bl	8001b78 <__aeabi_dmul>
 8008508:	0004      	movs	r4, r0
 800850a:	000d      	movs	r5, r1
 800850c:	4a5e      	ldr	r2, [pc, #376]	; (8008688 <__ieee754_log+0x328>)
 800850e:	4b5f      	ldr	r3, [pc, #380]	; (800868c <__ieee754_log+0x32c>)
 8008510:	f7f9 fb32 	bl	8001b78 <__aeabi_dmul>
 8008514:	4a5e      	ldr	r2, [pc, #376]	; (8008690 <__ieee754_log+0x330>)
 8008516:	4b5f      	ldr	r3, [pc, #380]	; (8008694 <__ieee754_log+0x334>)
 8008518:	f7f8 fc08 	bl	8000d2c <__aeabi_dadd>
 800851c:	0022      	movs	r2, r4
 800851e:	002b      	movs	r3, r5
 8008520:	f7f9 fb2a 	bl	8001b78 <__aeabi_dmul>
 8008524:	4a5c      	ldr	r2, [pc, #368]	; (8008698 <__ieee754_log+0x338>)
 8008526:	4b5d      	ldr	r3, [pc, #372]	; (800869c <__ieee754_log+0x33c>)
 8008528:	f7f8 fc00 	bl	8000d2c <__aeabi_dadd>
 800852c:	0022      	movs	r2, r4
 800852e:	002b      	movs	r3, r5
 8008530:	f7f9 fb22 	bl	8001b78 <__aeabi_dmul>
 8008534:	4a5a      	ldr	r2, [pc, #360]	; (80086a0 <__ieee754_log+0x340>)
 8008536:	4b5b      	ldr	r3, [pc, #364]	; (80086a4 <__ieee754_log+0x344>)
 8008538:	f7f8 fbf8 	bl	8000d2c <__aeabi_dadd>
 800853c:	9a08      	ldr	r2, [sp, #32]
 800853e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008540:	f7f9 fb1a 	bl	8001b78 <__aeabi_dmul>
 8008544:	4a58      	ldr	r2, [pc, #352]	; (80086a8 <__ieee754_log+0x348>)
 8008546:	9008      	str	r0, [sp, #32]
 8008548:	9109      	str	r1, [sp, #36]	; 0x24
 800854a:	4b58      	ldr	r3, [pc, #352]	; (80086ac <__ieee754_log+0x34c>)
 800854c:	0020      	movs	r0, r4
 800854e:	0029      	movs	r1, r5
 8008550:	f7f9 fb12 	bl	8001b78 <__aeabi_dmul>
 8008554:	4a56      	ldr	r2, [pc, #344]	; (80086b0 <__ieee754_log+0x350>)
 8008556:	4b57      	ldr	r3, [pc, #348]	; (80086b4 <__ieee754_log+0x354>)
 8008558:	f7f8 fbe8 	bl	8000d2c <__aeabi_dadd>
 800855c:	0022      	movs	r2, r4
 800855e:	002b      	movs	r3, r5
 8008560:	f7f9 fb0a 	bl	8001b78 <__aeabi_dmul>
 8008564:	4a54      	ldr	r2, [pc, #336]	; (80086b8 <__ieee754_log+0x358>)
 8008566:	4b55      	ldr	r3, [pc, #340]	; (80086bc <__ieee754_log+0x35c>)
 8008568:	f7f8 fbe0 	bl	8000d2c <__aeabi_dadd>
 800856c:	0022      	movs	r2, r4
 800856e:	002b      	movs	r3, r5
 8008570:	f7f9 fb02 	bl	8001b78 <__aeabi_dmul>
 8008574:	0002      	movs	r2, r0
 8008576:	000b      	movs	r3, r1
 8008578:	9808      	ldr	r0, [sp, #32]
 800857a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800857c:	f7f8 fbd6 	bl	8000d2c <__aeabi_dadd>
 8008580:	9a02      	ldr	r2, [sp, #8]
 8008582:	4b4f      	ldr	r3, [pc, #316]	; (80086c0 <__ieee754_log+0x360>)
 8008584:	0004      	movs	r4, r0
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800858a:	000d      	movs	r5, r1
 800858c:	4313      	orrs	r3, r2
 800858e:	2b00      	cmp	r3, #0
 8008590:	dd34      	ble.n	80085fc <__ieee754_log+0x29c>
 8008592:	2200      	movs	r2, #0
 8008594:	4b3a      	ldr	r3, [pc, #232]	; (8008680 <__ieee754_log+0x320>)
 8008596:	0030      	movs	r0, r6
 8008598:	0039      	movs	r1, r7
 800859a:	f7f9 faed 	bl	8001b78 <__aeabi_dmul>
 800859e:	0032      	movs	r2, r6
 80085a0:	003b      	movs	r3, r7
 80085a2:	f7f9 fae9 	bl	8001b78 <__aeabi_dmul>
 80085a6:	9002      	str	r0, [sp, #8]
 80085a8:	9103      	str	r1, [sp, #12]
 80085aa:	0002      	movs	r2, r0
 80085ac:	000b      	movs	r3, r1
 80085ae:	0020      	movs	r0, r4
 80085b0:	0029      	movs	r1, r5
 80085b2:	f7f8 fbbb 	bl	8000d2c <__aeabi_dadd>
 80085b6:	9a04      	ldr	r2, [sp, #16]
 80085b8:	9b05      	ldr	r3, [sp, #20]
 80085ba:	f7f9 fadd 	bl	8001b78 <__aeabi_dmul>
 80085be:	9b00      	ldr	r3, [sp, #0]
 80085c0:	0004      	movs	r4, r0
 80085c2:	000d      	movs	r5, r1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d106      	bne.n	80085d6 <__ieee754_log+0x276>
 80085c8:	0002      	movs	r2, r0
 80085ca:	000b      	movs	r3, r1
 80085cc:	9802      	ldr	r0, [sp, #8]
 80085ce:	9903      	ldr	r1, [sp, #12]
 80085d0:	f7f9 fd44 	bl	800205c <__aeabi_dsub>
 80085d4:	e74f      	b.n	8008476 <__ieee754_log+0x116>
 80085d6:	4a24      	ldr	r2, [pc, #144]	; (8008668 <__ieee754_log+0x308>)
 80085d8:	4b24      	ldr	r3, [pc, #144]	; (800866c <__ieee754_log+0x30c>)
 80085da:	9806      	ldr	r0, [sp, #24]
 80085dc:	9907      	ldr	r1, [sp, #28]
 80085de:	f7f9 facb 	bl	8001b78 <__aeabi_dmul>
 80085e2:	4a23      	ldr	r2, [pc, #140]	; (8008670 <__ieee754_log+0x310>)
 80085e4:	9000      	str	r0, [sp, #0]
 80085e6:	9101      	str	r1, [sp, #4]
 80085e8:	9806      	ldr	r0, [sp, #24]
 80085ea:	9907      	ldr	r1, [sp, #28]
 80085ec:	4b21      	ldr	r3, [pc, #132]	; (8008674 <__ieee754_log+0x314>)
 80085ee:	f7f9 fac3 	bl	8001b78 <__aeabi_dmul>
 80085f2:	0022      	movs	r2, r4
 80085f4:	002b      	movs	r3, r5
 80085f6:	f7f8 fb99 	bl	8000d2c <__aeabi_dadd>
 80085fa:	e754      	b.n	80084a6 <__ieee754_log+0x146>
 80085fc:	0002      	movs	r2, r0
 80085fe:	000b      	movs	r3, r1
 8008600:	0030      	movs	r0, r6
 8008602:	0039      	movs	r1, r7
 8008604:	f7f9 fd2a 	bl	800205c <__aeabi_dsub>
 8008608:	9a04      	ldr	r2, [sp, #16]
 800860a:	9b05      	ldr	r3, [sp, #20]
 800860c:	f7f9 fab4 	bl	8001b78 <__aeabi_dmul>
 8008610:	9b00      	ldr	r3, [sp, #0]
 8008612:	0004      	movs	r4, r0
 8008614:	000d      	movs	r5, r1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <__ieee754_log+0x2c0>
 800861a:	0002      	movs	r2, r0
 800861c:	000b      	movs	r3, r1
 800861e:	e72c      	b.n	800847a <__ieee754_log+0x11a>
 8008620:	4a11      	ldr	r2, [pc, #68]	; (8008668 <__ieee754_log+0x308>)
 8008622:	4b12      	ldr	r3, [pc, #72]	; (800866c <__ieee754_log+0x30c>)
 8008624:	9806      	ldr	r0, [sp, #24]
 8008626:	9907      	ldr	r1, [sp, #28]
 8008628:	f7f9 faa6 	bl	8001b78 <__aeabi_dmul>
 800862c:	4a10      	ldr	r2, [pc, #64]	; (8008670 <__ieee754_log+0x310>)
 800862e:	9000      	str	r0, [sp, #0]
 8008630:	9101      	str	r1, [sp, #4]
 8008632:	9806      	ldr	r0, [sp, #24]
 8008634:	9907      	ldr	r1, [sp, #28]
 8008636:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <__ieee754_log+0x314>)
 8008638:	f7f9 fa9e 	bl	8001b78 <__aeabi_dmul>
 800863c:	0002      	movs	r2, r0
 800863e:	000b      	movs	r3, r1
 8008640:	0020      	movs	r0, r4
 8008642:	0029      	movs	r1, r5
 8008644:	e733      	b.n	80084ae <__ieee754_log+0x14e>
 8008646:	2000      	movs	r0, #0
 8008648:	2100      	movs	r1, #0
 800864a:	e699      	b.n	8008380 <__ieee754_log+0x20>
 800864c:	000fffff 	.word	0x000fffff
 8008650:	c3500000 	.word	0xc3500000
 8008654:	43500000 	.word	0x43500000
 8008658:	7fefffff 	.word	0x7fefffff
 800865c:	fffffc01 	.word	0xfffffc01
 8008660:	00095f64 	.word	0x00095f64
 8008664:	3ff00000 	.word	0x3ff00000
 8008668:	fee00000 	.word	0xfee00000
 800866c:	3fe62e42 	.word	0x3fe62e42
 8008670:	35793c76 	.word	0x35793c76
 8008674:	3dea39ef 	.word	0x3dea39ef
 8008678:	55555555 	.word	0x55555555
 800867c:	3fd55555 	.word	0x3fd55555
 8008680:	3fe00000 	.word	0x3fe00000
 8008684:	fff9eb86 	.word	0xfff9eb86
 8008688:	df3e5244 	.word	0xdf3e5244
 800868c:	3fc2f112 	.word	0x3fc2f112
 8008690:	96cb03de 	.word	0x96cb03de
 8008694:	3fc74664 	.word	0x3fc74664
 8008698:	94229359 	.word	0x94229359
 800869c:	3fd24924 	.word	0x3fd24924
 80086a0:	55555593 	.word	0x55555593
 80086a4:	3fe55555 	.word	0x3fe55555
 80086a8:	d078c69f 	.word	0xd078c69f
 80086ac:	3fc39a09 	.word	0x3fc39a09
 80086b0:	1d8e78af 	.word	0x1d8e78af
 80086b4:	3fcc71c5 	.word	0x3fcc71c5
 80086b8:	9997fa04 	.word	0x9997fa04
 80086bc:	3fd99999 	.word	0x3fd99999
 80086c0:	0006b851 	.word	0x0006b851

080086c4 <copysign>:
 80086c4:	b530      	push	{r4, r5, lr}
 80086c6:	004a      	lsls	r2, r1, #1
 80086c8:	0fdb      	lsrs	r3, r3, #31
 80086ca:	07db      	lsls	r3, r3, #31
 80086cc:	0852      	lsrs	r2, r2, #1
 80086ce:	431a      	orrs	r2, r3
 80086d0:	0011      	movs	r1, r2
 80086d2:	bd30      	pop	{r4, r5, pc}

080086d4 <__errno>:
 80086d4:	4b01      	ldr	r3, [pc, #4]	; (80086dc <__errno+0x8>)
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	4770      	bx	lr
 80086da:	46c0      	nop			; (mov r8, r8)
 80086dc:	20000010 	.word	0x20000010

080086e0 <__libc_init_array>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	2600      	movs	r6, #0
 80086e4:	4d0c      	ldr	r5, [pc, #48]	; (8008718 <__libc_init_array+0x38>)
 80086e6:	4c0d      	ldr	r4, [pc, #52]	; (800871c <__libc_init_array+0x3c>)
 80086e8:	1b64      	subs	r4, r4, r5
 80086ea:	10a4      	asrs	r4, r4, #2
 80086ec:	42a6      	cmp	r6, r4
 80086ee:	d109      	bne.n	8008704 <__libc_init_array+0x24>
 80086f0:	2600      	movs	r6, #0
 80086f2:	f000 f8d9 	bl	80088a8 <_init>
 80086f6:	4d0a      	ldr	r5, [pc, #40]	; (8008720 <__libc_init_array+0x40>)
 80086f8:	4c0a      	ldr	r4, [pc, #40]	; (8008724 <__libc_init_array+0x44>)
 80086fa:	1b64      	subs	r4, r4, r5
 80086fc:	10a4      	asrs	r4, r4, #2
 80086fe:	42a6      	cmp	r6, r4
 8008700:	d105      	bne.n	800870e <__libc_init_array+0x2e>
 8008702:	bd70      	pop	{r4, r5, r6, pc}
 8008704:	00b3      	lsls	r3, r6, #2
 8008706:	58eb      	ldr	r3, [r5, r3]
 8008708:	4798      	blx	r3
 800870a:	3601      	adds	r6, #1
 800870c:	e7ee      	b.n	80086ec <__libc_init_array+0xc>
 800870e:	00b3      	lsls	r3, r6, #2
 8008710:	58eb      	ldr	r3, [r5, r3]
 8008712:	4798      	blx	r3
 8008714:	3601      	adds	r6, #1
 8008716:	e7f2      	b.n	80086fe <__libc_init_array+0x1e>
 8008718:	080091d8 	.word	0x080091d8
 800871c:	080091d8 	.word	0x080091d8
 8008720:	080091d8 	.word	0x080091d8
 8008724:	080091dc 	.word	0x080091dc

08008728 <memcpy>:
 8008728:	2300      	movs	r3, #0
 800872a:	b510      	push	{r4, lr}
 800872c:	429a      	cmp	r2, r3
 800872e:	d100      	bne.n	8008732 <memcpy+0xa>
 8008730:	bd10      	pop	{r4, pc}
 8008732:	5ccc      	ldrb	r4, [r1, r3]
 8008734:	54c4      	strb	r4, [r0, r3]
 8008736:	3301      	adds	r3, #1
 8008738:	e7f8      	b.n	800872c <memcpy+0x4>

0800873a <memset>:
 800873a:	0003      	movs	r3, r0
 800873c:	1812      	adds	r2, r2, r0
 800873e:	4293      	cmp	r3, r2
 8008740:	d100      	bne.n	8008744 <memset+0xa>
 8008742:	4770      	bx	lr
 8008744:	7019      	strb	r1, [r3, #0]
 8008746:	3301      	adds	r3, #1
 8008748:	e7f9      	b.n	800873e <memset+0x4>
	...

0800874c <rand>:
 800874c:	4b12      	ldr	r3, [pc, #72]	; (8008798 <rand+0x4c>)
 800874e:	b510      	push	{r4, lr}
 8008750:	681c      	ldr	r4, [r3, #0]
 8008752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10f      	bne.n	8008778 <rand+0x2c>
 8008758:	2018      	movs	r0, #24
 800875a:	f000 f829 	bl	80087b0 <malloc>
 800875e:	4b0f      	ldr	r3, [pc, #60]	; (800879c <rand+0x50>)
 8008760:	63a0      	str	r0, [r4, #56]	; 0x38
 8008762:	6003      	str	r3, [r0, #0]
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <rand+0x54>)
 8008766:	2201      	movs	r2, #1
 8008768:	6043      	str	r3, [r0, #4]
 800876a:	4b0e      	ldr	r3, [pc, #56]	; (80087a4 <rand+0x58>)
 800876c:	6083      	str	r3, [r0, #8]
 800876e:	230b      	movs	r3, #11
 8008770:	8183      	strh	r3, [r0, #12]
 8008772:	2300      	movs	r3, #0
 8008774:	6102      	str	r2, [r0, #16]
 8008776:	6143      	str	r3, [r0, #20]
 8008778:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800877a:	4a0b      	ldr	r2, [pc, #44]	; (80087a8 <rand+0x5c>)
 800877c:	6920      	ldr	r0, [r4, #16]
 800877e:	6961      	ldr	r1, [r4, #20]
 8008780:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <rand+0x60>)
 8008782:	f7f7 feaf 	bl	80004e4 <__aeabi_lmul>
 8008786:	2201      	movs	r2, #1
 8008788:	2300      	movs	r3, #0
 800878a:	1880      	adds	r0, r0, r2
 800878c:	4159      	adcs	r1, r3
 800878e:	6120      	str	r0, [r4, #16]
 8008790:	6161      	str	r1, [r4, #20]
 8008792:	0048      	lsls	r0, r1, #1
 8008794:	0840      	lsrs	r0, r0, #1
 8008796:	bd10      	pop	{r4, pc}
 8008798:	20000010 	.word	0x20000010
 800879c:	abcd330e 	.word	0xabcd330e
 80087a0:	e66d1234 	.word	0xe66d1234
 80087a4:	0005deec 	.word	0x0005deec
 80087a8:	4c957f2d 	.word	0x4c957f2d
 80087ac:	5851f42d 	.word	0x5851f42d

080087b0 <malloc>:
 80087b0:	b510      	push	{r4, lr}
 80087b2:	4b03      	ldr	r3, [pc, #12]	; (80087c0 <malloc+0x10>)
 80087b4:	0001      	movs	r1, r0
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	f000 f804 	bl	80087c4 <_malloc_r>
 80087bc:	bd10      	pop	{r4, pc}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	20000010 	.word	0x20000010

080087c4 <_malloc_r>:
 80087c4:	2303      	movs	r3, #3
 80087c6:	b570      	push	{r4, r5, r6, lr}
 80087c8:	1ccd      	adds	r5, r1, #3
 80087ca:	439d      	bics	r5, r3
 80087cc:	3508      	adds	r5, #8
 80087ce:	0006      	movs	r6, r0
 80087d0:	2d0c      	cmp	r5, #12
 80087d2:	d21e      	bcs.n	8008812 <_malloc_r+0x4e>
 80087d4:	250c      	movs	r5, #12
 80087d6:	42a9      	cmp	r1, r5
 80087d8:	d81d      	bhi.n	8008816 <_malloc_r+0x52>
 80087da:	0030      	movs	r0, r6
 80087dc:	f000 f862 	bl	80088a4 <__malloc_lock>
 80087e0:	4a25      	ldr	r2, [pc, #148]	; (8008878 <_malloc_r+0xb4>)
 80087e2:	6814      	ldr	r4, [r2, #0]
 80087e4:	0021      	movs	r1, r4
 80087e6:	2900      	cmp	r1, #0
 80087e8:	d119      	bne.n	800881e <_malloc_r+0x5a>
 80087ea:	4c24      	ldr	r4, [pc, #144]	; (800887c <_malloc_r+0xb8>)
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d103      	bne.n	80087fa <_malloc_r+0x36>
 80087f2:	0030      	movs	r0, r6
 80087f4:	f000 f844 	bl	8008880 <_sbrk_r>
 80087f8:	6020      	str	r0, [r4, #0]
 80087fa:	0029      	movs	r1, r5
 80087fc:	0030      	movs	r0, r6
 80087fe:	f000 f83f 	bl	8008880 <_sbrk_r>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	d12b      	bne.n	800885e <_malloc_r+0x9a>
 8008806:	230c      	movs	r3, #12
 8008808:	0030      	movs	r0, r6
 800880a:	6033      	str	r3, [r6, #0]
 800880c:	f000 f84b 	bl	80088a6 <__malloc_unlock>
 8008810:	e003      	b.n	800881a <_malloc_r+0x56>
 8008812:	2d00      	cmp	r5, #0
 8008814:	dadf      	bge.n	80087d6 <_malloc_r+0x12>
 8008816:	230c      	movs	r3, #12
 8008818:	6033      	str	r3, [r6, #0]
 800881a:	2000      	movs	r0, #0
 800881c:	bd70      	pop	{r4, r5, r6, pc}
 800881e:	680b      	ldr	r3, [r1, #0]
 8008820:	1b5b      	subs	r3, r3, r5
 8008822:	d419      	bmi.n	8008858 <_malloc_r+0x94>
 8008824:	2b0b      	cmp	r3, #11
 8008826:	d903      	bls.n	8008830 <_malloc_r+0x6c>
 8008828:	600b      	str	r3, [r1, #0]
 800882a:	18cc      	adds	r4, r1, r3
 800882c:	6025      	str	r5, [r4, #0]
 800882e:	e003      	b.n	8008838 <_malloc_r+0x74>
 8008830:	684b      	ldr	r3, [r1, #4]
 8008832:	428c      	cmp	r4, r1
 8008834:	d10d      	bne.n	8008852 <_malloc_r+0x8e>
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	0030      	movs	r0, r6
 800883a:	f000 f834 	bl	80088a6 <__malloc_unlock>
 800883e:	0020      	movs	r0, r4
 8008840:	2207      	movs	r2, #7
 8008842:	300b      	adds	r0, #11
 8008844:	1d23      	adds	r3, r4, #4
 8008846:	4390      	bics	r0, r2
 8008848:	1ac3      	subs	r3, r0, r3
 800884a:	d0e7      	beq.n	800881c <_malloc_r+0x58>
 800884c:	425a      	negs	r2, r3
 800884e:	50e2      	str	r2, [r4, r3]
 8008850:	e7e4      	b.n	800881c <_malloc_r+0x58>
 8008852:	6063      	str	r3, [r4, #4]
 8008854:	000c      	movs	r4, r1
 8008856:	e7ef      	b.n	8008838 <_malloc_r+0x74>
 8008858:	000c      	movs	r4, r1
 800885a:	6849      	ldr	r1, [r1, #4]
 800885c:	e7c3      	b.n	80087e6 <_malloc_r+0x22>
 800885e:	2303      	movs	r3, #3
 8008860:	1cc4      	adds	r4, r0, #3
 8008862:	439c      	bics	r4, r3
 8008864:	42a0      	cmp	r0, r4
 8008866:	d0e1      	beq.n	800882c <_malloc_r+0x68>
 8008868:	1a21      	subs	r1, r4, r0
 800886a:	0030      	movs	r0, r6
 800886c:	f000 f808 	bl	8008880 <_sbrk_r>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d1db      	bne.n	800882c <_malloc_r+0x68>
 8008874:	e7c7      	b.n	8008806 <_malloc_r+0x42>
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	20000144 	.word	0x20000144
 800887c:	20000148 	.word	0x20000148

08008880 <_sbrk_r>:
 8008880:	2300      	movs	r3, #0
 8008882:	b570      	push	{r4, r5, r6, lr}
 8008884:	4c06      	ldr	r4, [pc, #24]	; (80088a0 <_sbrk_r+0x20>)
 8008886:	0005      	movs	r5, r0
 8008888:	0008      	movs	r0, r1
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	f7fc fe9e 	bl	80055cc <_sbrk>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d103      	bne.n	800889c <_sbrk_r+0x1c>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d000      	beq.n	800889c <_sbrk_r+0x1c>
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	bd70      	pop	{r4, r5, r6, pc}
 800889e:	46c0      	nop			; (mov r8, r8)
 80088a0:	20000150 	.word	0x20000150

080088a4 <__malloc_lock>:
 80088a4:	4770      	bx	lr

080088a6 <__malloc_unlock>:
 80088a6:	4770      	bx	lr

080088a8 <_init>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr

080088b4 <_fini>:
 80088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b6:	46c0      	nop			; (mov r8, r8)
 80088b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ba:	bc08      	pop	{r3}
 80088bc:	469e      	mov	lr, r3
 80088be:	4770      	bx	lr
