
TFT_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008740  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  08008800  08008800  00018800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009118  08009118  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009118  08009118  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009118  08009118  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009118  08009118  00019118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800911c  0800911c  0001911c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009120  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000074  08009194  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08009194  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181ba  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000386b  00000000  00000000  00038256  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  0003bac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  0003c7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b1fe  00000000  00000000  0003d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea72  00000000  00000000  000585be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083b4c  00000000  00000000  00067030  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eab7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035cc  00000000  00000000  000eabf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080087e8 	.word	0x080087e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080087e8 	.word	0x080087e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fb2f 	bl	8001a68 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fa87 	bl	8001928 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fb21 	bl	8001a68 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fb17 	bl	8001a68 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 faa9 	bl	80019a0 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fa9f 	bl	80019a0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fb9d 	bl	8000bb8 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fb1f 	bl	8000acc <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb8f 	bl	8000bb8 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb85 	bl	8000bb8 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb2d 	bl	8000b1c <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb23 	bl	8000b1c <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4647      	mov	r7, r8
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	002e      	movs	r6, r5
 80004f0:	b580      	push	{r7, lr}
 80004f2:	0407      	lsls	r7, r0, #16
 80004f4:	0c14      	lsrs	r4, r2, #16
 80004f6:	0c3f      	lsrs	r7, r7, #16
 80004f8:	4699      	mov	r9, r3
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	437e      	muls	r6, r7
 80004fe:	435d      	muls	r5, r3
 8000500:	4367      	muls	r7, r4
 8000502:	4363      	muls	r3, r4
 8000504:	197f      	adds	r7, r7, r5
 8000506:	0c34      	lsrs	r4, r6, #16
 8000508:	19e4      	adds	r4, r4, r7
 800050a:	469c      	mov	ip, r3
 800050c:	42a5      	cmp	r5, r4
 800050e:	d903      	bls.n	8000518 <__aeabi_lmul+0x34>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	025b      	lsls	r3, r3, #9
 8000514:	4698      	mov	r8, r3
 8000516:	44c4      	add	ip, r8
 8000518:	464b      	mov	r3, r9
 800051a:	4343      	muls	r3, r0
 800051c:	4351      	muls	r1, r2
 800051e:	0c25      	lsrs	r5, r4, #16
 8000520:	0436      	lsls	r6, r6, #16
 8000522:	4465      	add	r5, ip
 8000524:	0c36      	lsrs	r6, r6, #16
 8000526:	0424      	lsls	r4, r4, #16
 8000528:	19a4      	adds	r4, r4, r6
 800052a:	195b      	adds	r3, r3, r5
 800052c:	1859      	adds	r1, r3, r1
 800052e:	0020      	movs	r0, r4
 8000530:	bc0c      	pop	{r2, r3}
 8000532:	4690      	mov	r8, r2
 8000534:	4699      	mov	r9, r3
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__aeabi_d2uiz>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	2200      	movs	r2, #0
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <__aeabi_d2uiz+0x38>)
 800053e:	0004      	movs	r4, r0
 8000540:	000d      	movs	r5, r1
 8000542:	f7ff ff8b 	bl	800045c <__aeabi_dcmpge>
 8000546:	2800      	cmp	r0, #0
 8000548:	d104      	bne.n	8000554 <__aeabi_d2uiz+0x1c>
 800054a:	0020      	movs	r0, r4
 800054c:	0029      	movs	r1, r5
 800054e:	f002 f8c9 	bl	80026e4 <__aeabi_d2iz>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <__aeabi_d2uiz+0x38>)
 8000556:	2200      	movs	r2, #0
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 fd5e 	bl	800201c <__aeabi_dsub>
 8000560:	f002 f8c0 	bl	80026e4 <__aeabi_d2iz>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	061b      	lsls	r3, r3, #24
 8000568:	469c      	mov	ip, r3
 800056a:	4460      	add	r0, ip
 800056c:	e7f1      	b.n	8000552 <__aeabi_d2uiz+0x1a>
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	41e00000 	.word	0x41e00000

08000574 <__aeabi_fadd>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	4647      	mov	r7, r8
 8000578:	46ce      	mov	lr, r9
 800057a:	0243      	lsls	r3, r0, #9
 800057c:	0a5b      	lsrs	r3, r3, #9
 800057e:	0044      	lsls	r4, r0, #1
 8000580:	0fc2      	lsrs	r2, r0, #31
 8000582:	469c      	mov	ip, r3
 8000584:	0048      	lsls	r0, r1, #1
 8000586:	00dd      	lsls	r5, r3, #3
 8000588:	024b      	lsls	r3, r1, #9
 800058a:	0e24      	lsrs	r4, r4, #24
 800058c:	0a5b      	lsrs	r3, r3, #9
 800058e:	0e00      	lsrs	r0, r0, #24
 8000590:	b580      	push	{r7, lr}
 8000592:	4698      	mov	r8, r3
 8000594:	0026      	movs	r6, r4
 8000596:	4691      	mov	r9, r2
 8000598:	0fc9      	lsrs	r1, r1, #31
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	1a27      	subs	r7, r4, r0
 800059e:	428a      	cmp	r2, r1
 80005a0:	d029      	beq.n	80005f6 <__aeabi_fadd+0x82>
 80005a2:	2f00      	cmp	r7, #0
 80005a4:	dd15      	ble.n	80005d2 <__aeabi_fadd+0x5e>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d14a      	bne.n	8000640 <__aeabi_fadd+0xcc>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0x3c>
 80005ae:	e095      	b.n	80006dc <__aeabi_fadd+0x168>
 80005b0:	08ed      	lsrs	r5, r5, #3
 80005b2:	2cff      	cmp	r4, #255	; 0xff
 80005b4:	d100      	bne.n	80005b8 <__aeabi_fadd+0x44>
 80005b6:	e088      	b.n	80006ca <__aeabi_fadd+0x156>
 80005b8:	026b      	lsls	r3, r5, #9
 80005ba:	0a5b      	lsrs	r3, r3, #9
 80005bc:	b2e6      	uxtb	r6, r4
 80005be:	025b      	lsls	r3, r3, #9
 80005c0:	05f6      	lsls	r6, r6, #23
 80005c2:	0a58      	lsrs	r0, r3, #9
 80005c4:	4330      	orrs	r0, r6
 80005c6:	07d2      	lsls	r2, r2, #31
 80005c8:	4310      	orrs	r0, r2
 80005ca:	bc0c      	pop	{r2, r3}
 80005cc:	4690      	mov	r8, r2
 80005ce:	4699      	mov	r9, r3
 80005d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005d2:	2f00      	cmp	r7, #0
 80005d4:	d000      	beq.n	80005d8 <__aeabi_fadd+0x64>
 80005d6:	e087      	b.n	80006e8 <__aeabi_fadd+0x174>
 80005d8:	1c60      	adds	r0, r4, #1
 80005da:	b2c0      	uxtb	r0, r0
 80005dc:	2801      	cmp	r0, #1
 80005de:	dc00      	bgt.n	80005e2 <__aeabi_fadd+0x6e>
 80005e0:	e0b6      	b.n	8000750 <__aeabi_fadd+0x1dc>
 80005e2:	1aee      	subs	r6, r5, r3
 80005e4:	0172      	lsls	r2, r6, #5
 80005e6:	d500      	bpl.n	80005ea <__aeabi_fadd+0x76>
 80005e8:	e0c5      	b.n	8000776 <__aeabi_fadd+0x202>
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d13d      	bne.n	800066a <__aeabi_fadd+0xf6>
 80005ee:	2200      	movs	r2, #0
 80005f0:	2600      	movs	r6, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	e7e3      	b.n	80005be <__aeabi_fadd+0x4a>
 80005f6:	2f00      	cmp	r7, #0
 80005f8:	dc00      	bgt.n	80005fc <__aeabi_fadd+0x88>
 80005fa:	e096      	b.n	800072a <__aeabi_fadd+0x1b6>
 80005fc:	2800      	cmp	r0, #0
 80005fe:	d05d      	beq.n	80006bc <__aeabi_fadd+0x148>
 8000600:	2cff      	cmp	r4, #255	; 0xff
 8000602:	d060      	beq.n	80006c6 <__aeabi_fadd+0x152>
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	04d2      	lsls	r2, r2, #19
 8000608:	4313      	orrs	r3, r2
 800060a:	2f1b      	cmp	r7, #27
 800060c:	dd00      	ble.n	8000610 <__aeabi_fadd+0x9c>
 800060e:	e0ec      	b.n	80007ea <__aeabi_fadd+0x276>
 8000610:	2220      	movs	r2, #32
 8000612:	1bd2      	subs	r2, r2, r7
 8000614:	0018      	movs	r0, r3
 8000616:	4093      	lsls	r3, r2
 8000618:	40f8      	lsrs	r0, r7
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	4193      	sbcs	r3, r2
 800061e:	4303      	orrs	r3, r0
 8000620:	18ed      	adds	r5, r5, r3
 8000622:	016b      	lsls	r3, r5, #5
 8000624:	d57b      	bpl.n	800071e <__aeabi_fadd+0x1aa>
 8000626:	3401      	adds	r4, #1
 8000628:	2cff      	cmp	r4, #255	; 0xff
 800062a:	d100      	bne.n	800062e <__aeabi_fadd+0xba>
 800062c:	e0b7      	b.n	800079e <__aeabi_fadd+0x22a>
 800062e:	2201      	movs	r2, #1
 8000630:	2607      	movs	r6, #7
 8000632:	402a      	ands	r2, r5
 8000634:	086b      	lsrs	r3, r5, #1
 8000636:	4d9a      	ldr	r5, [pc, #616]	; (80008a0 <__aeabi_fadd+0x32c>)
 8000638:	401d      	ands	r5, r3
 800063a:	4315      	orrs	r5, r2
 800063c:	402e      	ands	r6, r5
 800063e:	e029      	b.n	8000694 <__aeabi_fadd+0x120>
 8000640:	2cff      	cmp	r4, #255	; 0xff
 8000642:	d0b5      	beq.n	80005b0 <__aeabi_fadd+0x3c>
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	04d2      	lsls	r2, r2, #19
 8000648:	4313      	orrs	r3, r2
 800064a:	2f1b      	cmp	r7, #27
 800064c:	dd00      	ble.n	8000650 <__aeabi_fadd+0xdc>
 800064e:	e0b2      	b.n	80007b6 <__aeabi_fadd+0x242>
 8000650:	2220      	movs	r2, #32
 8000652:	1bd2      	subs	r2, r2, r7
 8000654:	0019      	movs	r1, r3
 8000656:	4093      	lsls	r3, r2
 8000658:	40f9      	lsrs	r1, r7
 800065a:	1e5a      	subs	r2, r3, #1
 800065c:	4193      	sbcs	r3, r2
 800065e:	430b      	orrs	r3, r1
 8000660:	1aed      	subs	r5, r5, r3
 8000662:	016b      	lsls	r3, r5, #5
 8000664:	d55b      	bpl.n	800071e <__aeabi_fadd+0x1aa>
 8000666:	01ad      	lsls	r5, r5, #6
 8000668:	09ae      	lsrs	r6, r5, #6
 800066a:	0030      	movs	r0, r6
 800066c:	f002 f8fc 	bl	8002868 <__clzsi2>
 8000670:	3805      	subs	r0, #5
 8000672:	4086      	lsls	r6, r0
 8000674:	4284      	cmp	r4, r0
 8000676:	dc65      	bgt.n	8000744 <__aeabi_fadd+0x1d0>
 8000678:	1b04      	subs	r4, r0, r4
 800067a:	0033      	movs	r3, r6
 800067c:	2020      	movs	r0, #32
 800067e:	3401      	adds	r4, #1
 8000680:	40e3      	lsrs	r3, r4
 8000682:	1b04      	subs	r4, r0, r4
 8000684:	40a6      	lsls	r6, r4
 8000686:	1e75      	subs	r5, r6, #1
 8000688:	41ae      	sbcs	r6, r5
 800068a:	4333      	orrs	r3, r6
 800068c:	2607      	movs	r6, #7
 800068e:	001d      	movs	r5, r3
 8000690:	2400      	movs	r4, #0
 8000692:	401e      	ands	r6, r3
 8000694:	2201      	movs	r2, #1
 8000696:	464b      	mov	r3, r9
 8000698:	401a      	ands	r2, r3
 800069a:	2e00      	cmp	r6, #0
 800069c:	d004      	beq.n	80006a8 <__aeabi_fadd+0x134>
 800069e:	230f      	movs	r3, #15
 80006a0:	402b      	ands	r3, r5
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d000      	beq.n	80006a8 <__aeabi_fadd+0x134>
 80006a6:	3504      	adds	r5, #4
 80006a8:	016b      	lsls	r3, r5, #5
 80006aa:	d400      	bmi.n	80006ae <__aeabi_fadd+0x13a>
 80006ac:	e780      	b.n	80005b0 <__aeabi_fadd+0x3c>
 80006ae:	3401      	adds	r4, #1
 80006b0:	b2e6      	uxtb	r6, r4
 80006b2:	2cff      	cmp	r4, #255	; 0xff
 80006b4:	d12f      	bne.n	8000716 <__aeabi_fadd+0x1a2>
 80006b6:	26ff      	movs	r6, #255	; 0xff
 80006b8:	2300      	movs	r3, #0
 80006ba:	e780      	b.n	80005be <__aeabi_fadd+0x4a>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d152      	bne.n	8000766 <__aeabi_fadd+0x1f2>
 80006c0:	2cff      	cmp	r4, #255	; 0xff
 80006c2:	d000      	beq.n	80006c6 <__aeabi_fadd+0x152>
 80006c4:	e774      	b.n	80005b0 <__aeabi_fadd+0x3c>
 80006c6:	000a      	movs	r2, r1
 80006c8:	08ed      	lsrs	r5, r5, #3
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d0f3      	beq.n	80006b6 <__aeabi_fadd+0x142>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	03db      	lsls	r3, r3, #15
 80006d2:	432b      	orrs	r3, r5
 80006d4:	025b      	lsls	r3, r3, #9
 80006d6:	0a5b      	lsrs	r3, r3, #9
 80006d8:	26ff      	movs	r6, #255	; 0xff
 80006da:	e770      	b.n	80005be <__aeabi_fadd+0x4a>
 80006dc:	3f01      	subs	r7, #1
 80006de:	2f00      	cmp	r7, #0
 80006e0:	d0be      	beq.n	8000660 <__aeabi_fadd+0xec>
 80006e2:	2cff      	cmp	r4, #255	; 0xff
 80006e4:	d1b1      	bne.n	800064a <__aeabi_fadd+0xd6>
 80006e6:	e763      	b.n	80005b0 <__aeabi_fadd+0x3c>
 80006e8:	2c00      	cmp	r4, #0
 80006ea:	d047      	beq.n	800077c <__aeabi_fadd+0x208>
 80006ec:	28ff      	cmp	r0, #255	; 0xff
 80006ee:	d069      	beq.n	80007c4 <__aeabi_fadd+0x250>
 80006f0:	2480      	movs	r4, #128	; 0x80
 80006f2:	04e4      	lsls	r4, r4, #19
 80006f4:	427a      	negs	r2, r7
 80006f6:	4325      	orrs	r5, r4
 80006f8:	2a1b      	cmp	r2, #27
 80006fa:	dd00      	ble.n	80006fe <__aeabi_fadd+0x18a>
 80006fc:	e0c5      	b.n	800088a <__aeabi_fadd+0x316>
 80006fe:	002c      	movs	r4, r5
 8000700:	2620      	movs	r6, #32
 8000702:	40d4      	lsrs	r4, r2
 8000704:	1ab2      	subs	r2, r6, r2
 8000706:	4095      	lsls	r5, r2
 8000708:	1e6a      	subs	r2, r5, #1
 800070a:	4195      	sbcs	r5, r2
 800070c:	4325      	orrs	r5, r4
 800070e:	1b5d      	subs	r5, r3, r5
 8000710:	0004      	movs	r4, r0
 8000712:	4689      	mov	r9, r1
 8000714:	e7a5      	b.n	8000662 <__aeabi_fadd+0xee>
 8000716:	01ab      	lsls	r3, r5, #6
 8000718:	0a5b      	lsrs	r3, r3, #9
 800071a:	e750      	b.n	80005be <__aeabi_fadd+0x4a>
 800071c:	2400      	movs	r4, #0
 800071e:	2201      	movs	r2, #1
 8000720:	464b      	mov	r3, r9
 8000722:	401a      	ands	r2, r3
 8000724:	076b      	lsls	r3, r5, #29
 8000726:	d1ba      	bne.n	800069e <__aeabi_fadd+0x12a>
 8000728:	e742      	b.n	80005b0 <__aeabi_fadd+0x3c>
 800072a:	2f00      	cmp	r7, #0
 800072c:	d13b      	bne.n	80007a6 <__aeabi_fadd+0x232>
 800072e:	3401      	adds	r4, #1
 8000730:	b2e0      	uxtb	r0, r4
 8000732:	2801      	cmp	r0, #1
 8000734:	dd4a      	ble.n	80007cc <__aeabi_fadd+0x258>
 8000736:	2cff      	cmp	r4, #255	; 0xff
 8000738:	d0bd      	beq.n	80006b6 <__aeabi_fadd+0x142>
 800073a:	2607      	movs	r6, #7
 800073c:	18ed      	adds	r5, r5, r3
 800073e:	086d      	lsrs	r5, r5, #1
 8000740:	402e      	ands	r6, r5
 8000742:	e7a7      	b.n	8000694 <__aeabi_fadd+0x120>
 8000744:	2307      	movs	r3, #7
 8000746:	4d57      	ldr	r5, [pc, #348]	; (80008a4 <__aeabi_fadd+0x330>)
 8000748:	1a24      	subs	r4, r4, r0
 800074a:	4035      	ands	r5, r6
 800074c:	401e      	ands	r6, r3
 800074e:	e7a1      	b.n	8000694 <__aeabi_fadd+0x120>
 8000750:	2c00      	cmp	r4, #0
 8000752:	d11b      	bne.n	800078c <__aeabi_fadd+0x218>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d16e      	bne.n	8000836 <__aeabi_fadd+0x2c2>
 8000758:	2b00      	cmp	r3, #0
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x1ea>
 800075c:	e09a      	b.n	8000894 <__aeabi_fadd+0x320>
 800075e:	000a      	movs	r2, r1
 8000760:	001d      	movs	r5, r3
 8000762:	003c      	movs	r4, r7
 8000764:	e724      	b.n	80005b0 <__aeabi_fadd+0x3c>
 8000766:	3f01      	subs	r7, #1
 8000768:	2f00      	cmp	r7, #0
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x1fa>
 800076c:	e758      	b.n	8000620 <__aeabi_fadd+0xac>
 800076e:	2cff      	cmp	r4, #255	; 0xff
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x200>
 8000772:	e74a      	b.n	800060a <__aeabi_fadd+0x96>
 8000774:	e7a7      	b.n	80006c6 <__aeabi_fadd+0x152>
 8000776:	1b5e      	subs	r6, r3, r5
 8000778:	4689      	mov	r9, r1
 800077a:	e776      	b.n	800066a <__aeabi_fadd+0xf6>
 800077c:	2d00      	cmp	r5, #0
 800077e:	d11c      	bne.n	80007ba <__aeabi_fadd+0x246>
 8000780:	000a      	movs	r2, r1
 8000782:	28ff      	cmp	r0, #255	; 0xff
 8000784:	d01f      	beq.n	80007c6 <__aeabi_fadd+0x252>
 8000786:	0004      	movs	r4, r0
 8000788:	001d      	movs	r5, r3
 800078a:	e711      	b.n	80005b0 <__aeabi_fadd+0x3c>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d15d      	bne.n	800084c <__aeabi_fadd+0x2d8>
 8000790:	2b00      	cmp	r3, #0
 8000792:	d117      	bne.n	80007c4 <__aeabi_fadd+0x250>
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	2200      	movs	r2, #0
 8000798:	03db      	lsls	r3, r3, #15
 800079a:	26ff      	movs	r6, #255	; 0xff
 800079c:	e70f      	b.n	80005be <__aeabi_fadd+0x4a>
 800079e:	000a      	movs	r2, r1
 80007a0:	26ff      	movs	r6, #255	; 0xff
 80007a2:	2300      	movs	r3, #0
 80007a4:	e70b      	b.n	80005be <__aeabi_fadd+0x4a>
 80007a6:	2c00      	cmp	r4, #0
 80007a8:	d121      	bne.n	80007ee <__aeabi_fadd+0x27a>
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d166      	bne.n	800087c <__aeabi_fadd+0x308>
 80007ae:	28ff      	cmp	r0, #255	; 0xff
 80007b0:	d1e9      	bne.n	8000786 <__aeabi_fadd+0x212>
 80007b2:	001d      	movs	r5, r3
 80007b4:	e787      	b.n	80006c6 <__aeabi_fadd+0x152>
 80007b6:	2301      	movs	r3, #1
 80007b8:	e752      	b.n	8000660 <__aeabi_fadd+0xec>
 80007ba:	1c7a      	adds	r2, r7, #1
 80007bc:	d0a7      	beq.n	800070e <__aeabi_fadd+0x19a>
 80007be:	43fa      	mvns	r2, r7
 80007c0:	28ff      	cmp	r0, #255	; 0xff
 80007c2:	d199      	bne.n	80006f8 <__aeabi_fadd+0x184>
 80007c4:	000a      	movs	r2, r1
 80007c6:	001d      	movs	r5, r3
 80007c8:	24ff      	movs	r4, #255	; 0xff
 80007ca:	e6f1      	b.n	80005b0 <__aeabi_fadd+0x3c>
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d121      	bne.n	8000814 <__aeabi_fadd+0x2a0>
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d04f      	beq.n	8000874 <__aeabi_fadd+0x300>
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d04c      	beq.n	8000872 <__aeabi_fadd+0x2fe>
 80007d8:	18ed      	adds	r5, r5, r3
 80007da:	016b      	lsls	r3, r5, #5
 80007dc:	d59e      	bpl.n	800071c <__aeabi_fadd+0x1a8>
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <__aeabi_fadd+0x330>)
 80007e0:	3607      	adds	r6, #7
 80007e2:	402e      	ands	r6, r5
 80007e4:	2401      	movs	r4, #1
 80007e6:	401d      	ands	r5, r3
 80007e8:	e754      	b.n	8000694 <__aeabi_fadd+0x120>
 80007ea:	2301      	movs	r3, #1
 80007ec:	e718      	b.n	8000620 <__aeabi_fadd+0xac>
 80007ee:	28ff      	cmp	r0, #255	; 0xff
 80007f0:	d0df      	beq.n	80007b2 <__aeabi_fadd+0x23e>
 80007f2:	2480      	movs	r4, #128	; 0x80
 80007f4:	04e4      	lsls	r4, r4, #19
 80007f6:	427f      	negs	r7, r7
 80007f8:	4325      	orrs	r5, r4
 80007fa:	2f1b      	cmp	r7, #27
 80007fc:	dc4d      	bgt.n	800089a <__aeabi_fadd+0x326>
 80007fe:	2620      	movs	r6, #32
 8000800:	1bf6      	subs	r6, r6, r7
 8000802:	002c      	movs	r4, r5
 8000804:	40b5      	lsls	r5, r6
 8000806:	40fc      	lsrs	r4, r7
 8000808:	1e6a      	subs	r2, r5, #1
 800080a:	4195      	sbcs	r5, r2
 800080c:	4325      	orrs	r5, r4
 800080e:	18ed      	adds	r5, r5, r3
 8000810:	0004      	movs	r4, r0
 8000812:	e706      	b.n	8000622 <__aeabi_fadd+0xae>
 8000814:	2d00      	cmp	r5, #0
 8000816:	d0cc      	beq.n	80007b2 <__aeabi_fadd+0x23e>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x2aa>
 800081c:	e753      	b.n	80006c6 <__aeabi_fadd+0x152>
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	4660      	mov	r0, ip
 8000822:	03c9      	lsls	r1, r1, #15
 8000824:	4208      	tst	r0, r1
 8000826:	d003      	beq.n	8000830 <__aeabi_fadd+0x2bc>
 8000828:	4640      	mov	r0, r8
 800082a:	4208      	tst	r0, r1
 800082c:	d100      	bne.n	8000830 <__aeabi_fadd+0x2bc>
 800082e:	001d      	movs	r5, r3
 8000830:	2101      	movs	r1, #1
 8000832:	4011      	ands	r1, r2
 8000834:	e747      	b.n	80006c6 <__aeabi_fadd+0x152>
 8000836:	2b00      	cmp	r3, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x2c8>
 800083a:	e6b9      	b.n	80005b0 <__aeabi_fadd+0x3c>
 800083c:	1aea      	subs	r2, r5, r3
 800083e:	0150      	lsls	r0, r2, #5
 8000840:	d525      	bpl.n	800088e <__aeabi_fadd+0x31a>
 8000842:	2607      	movs	r6, #7
 8000844:	1b5d      	subs	r5, r3, r5
 8000846:	402e      	ands	r6, r5
 8000848:	4689      	mov	r9, r1
 800084a:	e723      	b.n	8000694 <__aeabi_fadd+0x120>
 800084c:	24ff      	movs	r4, #255	; 0xff
 800084e:	2b00      	cmp	r3, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_fadd+0x2e0>
 8000852:	e6ad      	b.n	80005b0 <__aeabi_fadd+0x3c>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	4660      	mov	r0, ip
 8000858:	03d2      	lsls	r2, r2, #15
 800085a:	4210      	tst	r0, r2
 800085c:	d004      	beq.n	8000868 <__aeabi_fadd+0x2f4>
 800085e:	4640      	mov	r0, r8
 8000860:	4210      	tst	r0, r2
 8000862:	d101      	bne.n	8000868 <__aeabi_fadd+0x2f4>
 8000864:	001d      	movs	r5, r3
 8000866:	4689      	mov	r9, r1
 8000868:	2201      	movs	r2, #1
 800086a:	464b      	mov	r3, r9
 800086c:	24ff      	movs	r4, #255	; 0xff
 800086e:	401a      	ands	r2, r3
 8000870:	e69e      	b.n	80005b0 <__aeabi_fadd+0x3c>
 8000872:	002b      	movs	r3, r5
 8000874:	08dd      	lsrs	r5, r3, #3
 8000876:	000a      	movs	r2, r1
 8000878:	2400      	movs	r4, #0
 800087a:	e69d      	b.n	80005b8 <__aeabi_fadd+0x44>
 800087c:	1c7a      	adds	r2, r7, #1
 800087e:	d0c6      	beq.n	800080e <__aeabi_fadd+0x29a>
 8000880:	43ff      	mvns	r7, r7
 8000882:	28ff      	cmp	r0, #255	; 0xff
 8000884:	d1b9      	bne.n	80007fa <__aeabi_fadd+0x286>
 8000886:	001d      	movs	r5, r3
 8000888:	e71d      	b.n	80006c6 <__aeabi_fadd+0x152>
 800088a:	2501      	movs	r5, #1
 800088c:	e73f      	b.n	800070e <__aeabi_fadd+0x19a>
 800088e:	1e15      	subs	r5, r2, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x320>
 8000892:	e744      	b.n	800071e <__aeabi_fadd+0x1aa>
 8000894:	2200      	movs	r2, #0
 8000896:	2300      	movs	r3, #0
 8000898:	e691      	b.n	80005be <__aeabi_fadd+0x4a>
 800089a:	2501      	movs	r5, #1
 800089c:	e7b7      	b.n	800080e <__aeabi_fadd+0x29a>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	7dffffff 	.word	0x7dffffff
 80008a4:	fbffffff 	.word	0xfbffffff

080008a8 <__aeabi_fdiv>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	4657      	mov	r7, sl
 80008ac:	464e      	mov	r6, r9
 80008ae:	4645      	mov	r5, r8
 80008b0:	46de      	mov	lr, fp
 80008b2:	0244      	lsls	r4, r0, #9
 80008b4:	b5e0      	push	{r5, r6, r7, lr}
 80008b6:	0046      	lsls	r6, r0, #1
 80008b8:	4688      	mov	r8, r1
 80008ba:	0a64      	lsrs	r4, r4, #9
 80008bc:	0e36      	lsrs	r6, r6, #24
 80008be:	0fc7      	lsrs	r7, r0, #31
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d063      	beq.n	800098c <__aeabi_fdiv+0xe4>
 80008c4:	2eff      	cmp	r6, #255	; 0xff
 80008c6:	d024      	beq.n	8000912 <__aeabi_fdiv+0x6a>
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	00e4      	lsls	r4, r4, #3
 80008cc:	04db      	lsls	r3, r3, #19
 80008ce:	431c      	orrs	r4, r3
 80008d0:	2300      	movs	r3, #0
 80008d2:	4699      	mov	r9, r3
 80008d4:	469b      	mov	fp, r3
 80008d6:	3e7f      	subs	r6, #127	; 0x7f
 80008d8:	4643      	mov	r3, r8
 80008da:	4642      	mov	r2, r8
 80008dc:	025d      	lsls	r5, r3, #9
 80008de:	0fd2      	lsrs	r2, r2, #31
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	0a6d      	lsrs	r5, r5, #9
 80008e4:	0e1b      	lsrs	r3, r3, #24
 80008e6:	4690      	mov	r8, r2
 80008e8:	4692      	mov	sl, r2
 80008ea:	d065      	beq.n	80009b8 <__aeabi_fdiv+0x110>
 80008ec:	2bff      	cmp	r3, #255	; 0xff
 80008ee:	d055      	beq.n	800099c <__aeabi_fdiv+0xf4>
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	2100      	movs	r1, #0
 80008f4:	00ed      	lsls	r5, r5, #3
 80008f6:	04d2      	lsls	r2, r2, #19
 80008f8:	3b7f      	subs	r3, #127	; 0x7f
 80008fa:	4315      	orrs	r5, r2
 80008fc:	1af6      	subs	r6, r6, r3
 80008fe:	4643      	mov	r3, r8
 8000900:	464a      	mov	r2, r9
 8000902:	407b      	eors	r3, r7
 8000904:	2a0f      	cmp	r2, #15
 8000906:	d900      	bls.n	800090a <__aeabi_fdiv+0x62>
 8000908:	e08d      	b.n	8000a26 <__aeabi_fdiv+0x17e>
 800090a:	486d      	ldr	r0, [pc, #436]	; (8000ac0 <__aeabi_fdiv+0x218>)
 800090c:	0092      	lsls	r2, r2, #2
 800090e:	5882      	ldr	r2, [r0, r2]
 8000910:	4697      	mov	pc, r2
 8000912:	2c00      	cmp	r4, #0
 8000914:	d154      	bne.n	80009c0 <__aeabi_fdiv+0x118>
 8000916:	2308      	movs	r3, #8
 8000918:	4699      	mov	r9, r3
 800091a:	3b06      	subs	r3, #6
 800091c:	26ff      	movs	r6, #255	; 0xff
 800091e:	469b      	mov	fp, r3
 8000920:	e7da      	b.n	80008d8 <__aeabi_fdiv+0x30>
 8000922:	2500      	movs	r5, #0
 8000924:	4653      	mov	r3, sl
 8000926:	2902      	cmp	r1, #2
 8000928:	d01b      	beq.n	8000962 <__aeabi_fdiv+0xba>
 800092a:	2903      	cmp	r1, #3
 800092c:	d100      	bne.n	8000930 <__aeabi_fdiv+0x88>
 800092e:	e0bf      	b.n	8000ab0 <__aeabi_fdiv+0x208>
 8000930:	2901      	cmp	r1, #1
 8000932:	d028      	beq.n	8000986 <__aeabi_fdiv+0xde>
 8000934:	0030      	movs	r0, r6
 8000936:	307f      	adds	r0, #127	; 0x7f
 8000938:	2800      	cmp	r0, #0
 800093a:	dd20      	ble.n	800097e <__aeabi_fdiv+0xd6>
 800093c:	076a      	lsls	r2, r5, #29
 800093e:	d004      	beq.n	800094a <__aeabi_fdiv+0xa2>
 8000940:	220f      	movs	r2, #15
 8000942:	402a      	ands	r2, r5
 8000944:	2a04      	cmp	r2, #4
 8000946:	d000      	beq.n	800094a <__aeabi_fdiv+0xa2>
 8000948:	3504      	adds	r5, #4
 800094a:	012a      	lsls	r2, r5, #4
 800094c:	d503      	bpl.n	8000956 <__aeabi_fdiv+0xae>
 800094e:	0030      	movs	r0, r6
 8000950:	4a5c      	ldr	r2, [pc, #368]	; (8000ac4 <__aeabi_fdiv+0x21c>)
 8000952:	3080      	adds	r0, #128	; 0x80
 8000954:	4015      	ands	r5, r2
 8000956:	28fe      	cmp	r0, #254	; 0xfe
 8000958:	dc03      	bgt.n	8000962 <__aeabi_fdiv+0xba>
 800095a:	01ac      	lsls	r4, r5, #6
 800095c:	0a64      	lsrs	r4, r4, #9
 800095e:	b2c2      	uxtb	r2, r0
 8000960:	e001      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000962:	22ff      	movs	r2, #255	; 0xff
 8000964:	2400      	movs	r4, #0
 8000966:	0264      	lsls	r4, r4, #9
 8000968:	05d2      	lsls	r2, r2, #23
 800096a:	0a60      	lsrs	r0, r4, #9
 800096c:	07db      	lsls	r3, r3, #31
 800096e:	4310      	orrs	r0, r2
 8000970:	4318      	orrs	r0, r3
 8000972:	bc3c      	pop	{r2, r3, r4, r5}
 8000974:	4690      	mov	r8, r2
 8000976:	4699      	mov	r9, r3
 8000978:	46a2      	mov	sl, r4
 800097a:	46ab      	mov	fp, r5
 800097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800097e:	2201      	movs	r2, #1
 8000980:	1a10      	subs	r0, r2, r0
 8000982:	281b      	cmp	r0, #27
 8000984:	dd7c      	ble.n	8000a80 <__aeabi_fdiv+0x1d8>
 8000986:	2200      	movs	r2, #0
 8000988:	2400      	movs	r4, #0
 800098a:	e7ec      	b.n	8000966 <__aeabi_fdiv+0xbe>
 800098c:	2c00      	cmp	r4, #0
 800098e:	d11d      	bne.n	80009cc <__aeabi_fdiv+0x124>
 8000990:	2304      	movs	r3, #4
 8000992:	4699      	mov	r9, r3
 8000994:	3b03      	subs	r3, #3
 8000996:	2600      	movs	r6, #0
 8000998:	469b      	mov	fp, r3
 800099a:	e79d      	b.n	80008d8 <__aeabi_fdiv+0x30>
 800099c:	3eff      	subs	r6, #255	; 0xff
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d120      	bne.n	80009e4 <__aeabi_fdiv+0x13c>
 80009a2:	2102      	movs	r1, #2
 80009a4:	4643      	mov	r3, r8
 80009a6:	464a      	mov	r2, r9
 80009a8:	407b      	eors	r3, r7
 80009aa:	430a      	orrs	r2, r1
 80009ac:	2a0f      	cmp	r2, #15
 80009ae:	d8d8      	bhi.n	8000962 <__aeabi_fdiv+0xba>
 80009b0:	4845      	ldr	r0, [pc, #276]	; (8000ac8 <__aeabi_fdiv+0x220>)
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	5882      	ldr	r2, [r0, r2]
 80009b6:	4697      	mov	pc, r2
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d119      	bne.n	80009f0 <__aeabi_fdiv+0x148>
 80009bc:	2101      	movs	r1, #1
 80009be:	e7f1      	b.n	80009a4 <__aeabi_fdiv+0xfc>
 80009c0:	230c      	movs	r3, #12
 80009c2:	4699      	mov	r9, r3
 80009c4:	3b09      	subs	r3, #9
 80009c6:	26ff      	movs	r6, #255	; 0xff
 80009c8:	469b      	mov	fp, r3
 80009ca:	e785      	b.n	80008d8 <__aeabi_fdiv+0x30>
 80009cc:	0020      	movs	r0, r4
 80009ce:	f001 ff4b 	bl	8002868 <__clzsi2>
 80009d2:	2676      	movs	r6, #118	; 0x76
 80009d4:	1f43      	subs	r3, r0, #5
 80009d6:	409c      	lsls	r4, r3
 80009d8:	2300      	movs	r3, #0
 80009da:	4276      	negs	r6, r6
 80009dc:	1a36      	subs	r6, r6, r0
 80009de:	4699      	mov	r9, r3
 80009e0:	469b      	mov	fp, r3
 80009e2:	e779      	b.n	80008d8 <__aeabi_fdiv+0x30>
 80009e4:	464a      	mov	r2, r9
 80009e6:	2303      	movs	r3, #3
 80009e8:	431a      	orrs	r2, r3
 80009ea:	4691      	mov	r9, r2
 80009ec:	2103      	movs	r1, #3
 80009ee:	e786      	b.n	80008fe <__aeabi_fdiv+0x56>
 80009f0:	0028      	movs	r0, r5
 80009f2:	f001 ff39 	bl	8002868 <__clzsi2>
 80009f6:	1f43      	subs	r3, r0, #5
 80009f8:	1836      	adds	r6, r6, r0
 80009fa:	409d      	lsls	r5, r3
 80009fc:	3676      	adds	r6, #118	; 0x76
 80009fe:	2100      	movs	r1, #0
 8000a00:	e77d      	b.n	80008fe <__aeabi_fdiv+0x56>
 8000a02:	2480      	movs	r4, #128	; 0x80
 8000a04:	2300      	movs	r3, #0
 8000a06:	03e4      	lsls	r4, r4, #15
 8000a08:	22ff      	movs	r2, #255	; 0xff
 8000a0a:	e7ac      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	03db      	lsls	r3, r3, #15
 8000a12:	421c      	tst	r4, r3
 8000a14:	d028      	beq.n	8000a68 <__aeabi_fdiv+0x1c0>
 8000a16:	421d      	tst	r5, r3
 8000a18:	d126      	bne.n	8000a68 <__aeabi_fdiv+0x1c0>
 8000a1a:	432b      	orrs	r3, r5
 8000a1c:	025c      	lsls	r4, r3, #9
 8000a1e:	0a64      	lsrs	r4, r4, #9
 8000a20:	4643      	mov	r3, r8
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	e79f      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000a26:	0162      	lsls	r2, r4, #5
 8000a28:	016c      	lsls	r4, r5, #5
 8000a2a:	42a2      	cmp	r2, r4
 8000a2c:	d224      	bcs.n	8000a78 <__aeabi_fdiv+0x1d0>
 8000a2e:	211b      	movs	r1, #27
 8000a30:	2500      	movs	r5, #0
 8000a32:	3e01      	subs	r6, #1
 8000a34:	2701      	movs	r7, #1
 8000a36:	0010      	movs	r0, r2
 8000a38:	006d      	lsls	r5, r5, #1
 8000a3a:	0052      	lsls	r2, r2, #1
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	db01      	blt.n	8000a44 <__aeabi_fdiv+0x19c>
 8000a40:	4294      	cmp	r4, r2
 8000a42:	d801      	bhi.n	8000a48 <__aeabi_fdiv+0x1a0>
 8000a44:	1b12      	subs	r2, r2, r4
 8000a46:	433d      	orrs	r5, r7
 8000a48:	3901      	subs	r1, #1
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d1f3      	bne.n	8000a36 <__aeabi_fdiv+0x18e>
 8000a4e:	0014      	movs	r4, r2
 8000a50:	1e62      	subs	r2, r4, #1
 8000a52:	4194      	sbcs	r4, r2
 8000a54:	4325      	orrs	r5, r4
 8000a56:	e76d      	b.n	8000934 <__aeabi_fdiv+0x8c>
 8000a58:	46ba      	mov	sl, r7
 8000a5a:	4659      	mov	r1, fp
 8000a5c:	0025      	movs	r5, r4
 8000a5e:	4653      	mov	r3, sl
 8000a60:	2902      	cmp	r1, #2
 8000a62:	d000      	beq.n	8000a66 <__aeabi_fdiv+0x1be>
 8000a64:	e761      	b.n	800092a <__aeabi_fdiv+0x82>
 8000a66:	e77c      	b.n	8000962 <__aeabi_fdiv+0xba>
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	03db      	lsls	r3, r3, #15
 8000a6c:	431c      	orrs	r4, r3
 8000a6e:	0264      	lsls	r4, r4, #9
 8000a70:	0a64      	lsrs	r4, r4, #9
 8000a72:	003b      	movs	r3, r7
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	e776      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000a78:	1b12      	subs	r2, r2, r4
 8000a7a:	211a      	movs	r1, #26
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	e7d9      	b.n	8000a34 <__aeabi_fdiv+0x18c>
 8000a80:	369e      	adds	r6, #158	; 0x9e
 8000a82:	002a      	movs	r2, r5
 8000a84:	40b5      	lsls	r5, r6
 8000a86:	002c      	movs	r4, r5
 8000a88:	40c2      	lsrs	r2, r0
 8000a8a:	1e65      	subs	r5, r4, #1
 8000a8c:	41ac      	sbcs	r4, r5
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	0762      	lsls	r2, r4, #29
 8000a92:	d004      	beq.n	8000a9e <__aeabi_fdiv+0x1f6>
 8000a94:	220f      	movs	r2, #15
 8000a96:	4022      	ands	r2, r4
 8000a98:	2a04      	cmp	r2, #4
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fdiv+0x1f6>
 8000a9c:	3404      	adds	r4, #4
 8000a9e:	0162      	lsls	r2, r4, #5
 8000aa0:	d403      	bmi.n	8000aaa <__aeabi_fdiv+0x202>
 8000aa2:	01a4      	lsls	r4, r4, #6
 8000aa4:	0a64      	lsrs	r4, r4, #9
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e75d      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2400      	movs	r4, #0
 8000aae:	e75a      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000ab0:	2480      	movs	r4, #128	; 0x80
 8000ab2:	03e4      	lsls	r4, r4, #15
 8000ab4:	432c      	orrs	r4, r5
 8000ab6:	0264      	lsls	r4, r4, #9
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	22ff      	movs	r2, #255	; 0xff
 8000abc:	e753      	b.n	8000966 <__aeabi_fdiv+0xbe>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	08008a9c 	.word	0x08008a9c
 8000ac4:	f7ffffff 	.word	0xf7ffffff
 8000ac8:	08008adc 	.word	0x08008adc

08000acc <__eqsf2>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	0042      	lsls	r2, r0, #1
 8000ad0:	024e      	lsls	r6, r1, #9
 8000ad2:	004c      	lsls	r4, r1, #1
 8000ad4:	0245      	lsls	r5, r0, #9
 8000ad6:	0a6d      	lsrs	r5, r5, #9
 8000ad8:	0e12      	lsrs	r2, r2, #24
 8000ada:	0fc3      	lsrs	r3, r0, #31
 8000adc:	0a76      	lsrs	r6, r6, #9
 8000ade:	0e24      	lsrs	r4, r4, #24
 8000ae0:	0fc9      	lsrs	r1, r1, #31
 8000ae2:	2aff      	cmp	r2, #255	; 0xff
 8000ae4:	d00f      	beq.n	8000b06 <__eqsf2+0x3a>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d011      	beq.n	8000b0e <__eqsf2+0x42>
 8000aea:	2001      	movs	r0, #1
 8000aec:	42a2      	cmp	r2, r4
 8000aee:	d000      	beq.n	8000af2 <__eqsf2+0x26>
 8000af0:	bd70      	pop	{r4, r5, r6, pc}
 8000af2:	42b5      	cmp	r5, r6
 8000af4:	d1fc      	bne.n	8000af0 <__eqsf2+0x24>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d00d      	beq.n	8000b16 <__eqsf2+0x4a>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d1f8      	bne.n	8000af0 <__eqsf2+0x24>
 8000afe:	0028      	movs	r0, r5
 8000b00:	1e45      	subs	r5, r0, #1
 8000b02:	41a8      	sbcs	r0, r5
 8000b04:	e7f4      	b.n	8000af0 <__eqsf2+0x24>
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d1f1      	bne.n	8000af0 <__eqsf2+0x24>
 8000b0c:	e7eb      	b.n	8000ae6 <__eqsf2+0x1a>
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d1ed      	bne.n	8000af0 <__eqsf2+0x24>
 8000b14:	e7e9      	b.n	8000aea <__eqsf2+0x1e>
 8000b16:	2000      	movs	r0, #0
 8000b18:	e7ea      	b.n	8000af0 <__eqsf2+0x24>
 8000b1a:	46c0      	nop			; (mov r8, r8)

08000b1c <__gesf2>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	004a      	lsls	r2, r1, #1
 8000b20:	024e      	lsls	r6, r1, #9
 8000b22:	0245      	lsls	r5, r0, #9
 8000b24:	0044      	lsls	r4, r0, #1
 8000b26:	0a6d      	lsrs	r5, r5, #9
 8000b28:	0e24      	lsrs	r4, r4, #24
 8000b2a:	0fc3      	lsrs	r3, r0, #31
 8000b2c:	0a76      	lsrs	r6, r6, #9
 8000b2e:	0e12      	lsrs	r2, r2, #24
 8000b30:	0fc9      	lsrs	r1, r1, #31
 8000b32:	2cff      	cmp	r4, #255	; 0xff
 8000b34:	d015      	beq.n	8000b62 <__gesf2+0x46>
 8000b36:	2aff      	cmp	r2, #255	; 0xff
 8000b38:	d00e      	beq.n	8000b58 <__gesf2+0x3c>
 8000b3a:	2c00      	cmp	r4, #0
 8000b3c:	d115      	bne.n	8000b6a <__gesf2+0x4e>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d101      	bne.n	8000b46 <__gesf2+0x2a>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d01c      	beq.n	8000b80 <__gesf2+0x64>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d014      	beq.n	8000b74 <__gesf2+0x58>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d027      	beq.n	8000b9e <__gesf2+0x82>
 8000b4e:	2002      	movs	r0, #2
 8000b50:	3b01      	subs	r3, #1
 8000b52:	4018      	ands	r0, r3
 8000b54:	3801      	subs	r0, #1
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
 8000b58:	2e00      	cmp	r6, #0
 8000b5a:	d0ee      	beq.n	8000b3a <__gesf2+0x1e>
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	4240      	negs	r0, r0
 8000b60:	e7f9      	b.n	8000b56 <__gesf2+0x3a>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d1fa      	bne.n	8000b5c <__gesf2+0x40>
 8000b66:	2aff      	cmp	r2, #255	; 0xff
 8000b68:	d00e      	beq.n	8000b88 <__gesf2+0x6c>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d10e      	bne.n	8000b8c <__gesf2+0x70>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d0ed      	beq.n	8000b4e <__gesf2+0x32>
 8000b72:	e00b      	b.n	8000b8c <__gesf2+0x70>
 8000b74:	2301      	movs	r3, #1
 8000b76:	3901      	subs	r1, #1
 8000b78:	4399      	bics	r1, r3
 8000b7a:	0008      	movs	r0, r1
 8000b7c:	3001      	adds	r0, #1
 8000b7e:	e7ea      	b.n	8000b56 <__gesf2+0x3a>
 8000b80:	2000      	movs	r0, #0
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d0e7      	beq.n	8000b56 <__gesf2+0x3a>
 8000b86:	e7e2      	b.n	8000b4e <__gesf2+0x32>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d1e7      	bne.n	8000b5c <__gesf2+0x40>
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d1de      	bne.n	8000b4e <__gesf2+0x32>
 8000b90:	4294      	cmp	r4, r2
 8000b92:	dd05      	ble.n	8000ba0 <__gesf2+0x84>
 8000b94:	2102      	movs	r1, #2
 8000b96:	1e58      	subs	r0, r3, #1
 8000b98:	4008      	ands	r0, r1
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	e7db      	b.n	8000b56 <__gesf2+0x3a>
 8000b9e:	2400      	movs	r4, #0
 8000ba0:	42a2      	cmp	r2, r4
 8000ba2:	dc04      	bgt.n	8000bae <__gesf2+0x92>
 8000ba4:	42b5      	cmp	r5, r6
 8000ba6:	d8d2      	bhi.n	8000b4e <__gesf2+0x32>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	42b5      	cmp	r5, r6
 8000bac:	d2d3      	bcs.n	8000b56 <__gesf2+0x3a>
 8000bae:	1e58      	subs	r0, r3, #1
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4398      	bics	r0, r3
 8000bb4:	3001      	adds	r0, #1
 8000bb6:	e7ce      	b.n	8000b56 <__gesf2+0x3a>

08000bb8 <__lesf2>:
 8000bb8:	b530      	push	{r4, r5, lr}
 8000bba:	0042      	lsls	r2, r0, #1
 8000bbc:	0244      	lsls	r4, r0, #9
 8000bbe:	024d      	lsls	r5, r1, #9
 8000bc0:	0fc3      	lsrs	r3, r0, #31
 8000bc2:	0048      	lsls	r0, r1, #1
 8000bc4:	0a64      	lsrs	r4, r4, #9
 8000bc6:	0e12      	lsrs	r2, r2, #24
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e00      	lsrs	r0, r0, #24
 8000bcc:	0fc9      	lsrs	r1, r1, #31
 8000bce:	2aff      	cmp	r2, #255	; 0xff
 8000bd0:	d012      	beq.n	8000bf8 <__lesf2+0x40>
 8000bd2:	28ff      	cmp	r0, #255	; 0xff
 8000bd4:	d00c      	beq.n	8000bf0 <__lesf2+0x38>
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d112      	bne.n	8000c00 <__lesf2+0x48>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d119      	bne.n	8000c12 <__lesf2+0x5a>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d117      	bne.n	8000c12 <__lesf2+0x5a>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d02b      	beq.n	8000c3e <__lesf2+0x86>
 8000be6:	2002      	movs	r0, #2
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4018      	ands	r0, r3
 8000bec:	3801      	subs	r0, #1
 8000bee:	e026      	b.n	8000c3e <__lesf2+0x86>
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0f0      	beq.n	8000bd6 <__lesf2+0x1e>
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	e022      	b.n	8000c3e <__lesf2+0x86>
 8000bf8:	2c00      	cmp	r4, #0
 8000bfa:	d1fb      	bne.n	8000bf4 <__lesf2+0x3c>
 8000bfc:	28ff      	cmp	r0, #255	; 0xff
 8000bfe:	d01f      	beq.n	8000c40 <__lesf2+0x88>
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d11f      	bne.n	8000c44 <__lesf2+0x8c>
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d11d      	bne.n	8000c44 <__lesf2+0x8c>
 8000c08:	2002      	movs	r0, #2
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	4018      	ands	r0, r3
 8000c0e:	3801      	subs	r0, #1
 8000c10:	e015      	b.n	8000c3e <__lesf2+0x86>
 8000c12:	2c00      	cmp	r4, #0
 8000c14:	d00e      	beq.n	8000c34 <__lesf2+0x7c>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d1e5      	bne.n	8000be6 <__lesf2+0x2e>
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	dc04      	bgt.n	8000c2a <__lesf2+0x72>
 8000c20:	42ac      	cmp	r4, r5
 8000c22:	d8e0      	bhi.n	8000be6 <__lesf2+0x2e>
 8000c24:	2000      	movs	r0, #0
 8000c26:	42ac      	cmp	r4, r5
 8000c28:	d209      	bcs.n	8000c3e <__lesf2+0x86>
 8000c2a:	1e58      	subs	r0, r3, #1
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	4398      	bics	r0, r3
 8000c30:	3001      	adds	r0, #1
 8000c32:	e004      	b.n	8000c3e <__lesf2+0x86>
 8000c34:	2301      	movs	r3, #1
 8000c36:	3901      	subs	r1, #1
 8000c38:	4399      	bics	r1, r3
 8000c3a:	0008      	movs	r0, r1
 8000c3c:	3001      	adds	r0, #1
 8000c3e:	bd30      	pop	{r4, r5, pc}
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d1d7      	bne.n	8000bf4 <__lesf2+0x3c>
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d1ce      	bne.n	8000be6 <__lesf2+0x2e>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	dde7      	ble.n	8000c1c <__lesf2+0x64>
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	1e58      	subs	r0, r3, #1
 8000c50:	4008      	ands	r0, r1
 8000c52:	3801      	subs	r0, #1
 8000c54:	e7f3      	b.n	8000c3e <__lesf2+0x86>
 8000c56:	46c0      	nop			; (mov r8, r8)

08000c58 <__aeabi_i2f>:
 8000c58:	b570      	push	{r4, r5, r6, lr}
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d03d      	beq.n	8000cda <__aeabi_i2f+0x82>
 8000c5e:	17c3      	asrs	r3, r0, #31
 8000c60:	18c5      	adds	r5, r0, r3
 8000c62:	405d      	eors	r5, r3
 8000c64:	0fc4      	lsrs	r4, r0, #31
 8000c66:	0028      	movs	r0, r5
 8000c68:	f001 fdfe 	bl	8002868 <__clzsi2>
 8000c6c:	229e      	movs	r2, #158	; 0x9e
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	2a96      	cmp	r2, #150	; 0x96
 8000c72:	dc07      	bgt.n	8000c84 <__aeabi_i2f+0x2c>
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	2808      	cmp	r0, #8
 8000c78:	dd33      	ble.n	8000ce2 <__aeabi_i2f+0x8a>
 8000c7a:	3808      	subs	r0, #8
 8000c7c:	4085      	lsls	r5, r0
 8000c7e:	0268      	lsls	r0, r5, #9
 8000c80:	0a40      	lsrs	r0, r0, #9
 8000c82:	e023      	b.n	8000ccc <__aeabi_i2f+0x74>
 8000c84:	2a99      	cmp	r2, #153	; 0x99
 8000c86:	dd0b      	ble.n	8000ca0 <__aeabi_i2f+0x48>
 8000c88:	2305      	movs	r3, #5
 8000c8a:	0029      	movs	r1, r5
 8000c8c:	1a1b      	subs	r3, r3, r0
 8000c8e:	40d9      	lsrs	r1, r3
 8000c90:	0003      	movs	r3, r0
 8000c92:	331b      	adds	r3, #27
 8000c94:	409d      	lsls	r5, r3
 8000c96:	002b      	movs	r3, r5
 8000c98:	1e5d      	subs	r5, r3, #1
 8000c9a:	41ab      	sbcs	r3, r5
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	000d      	movs	r5, r1
 8000ca0:	2805      	cmp	r0, #5
 8000ca2:	dd01      	ble.n	8000ca8 <__aeabi_i2f+0x50>
 8000ca4:	1f43      	subs	r3, r0, #5
 8000ca6:	409d      	lsls	r5, r3
 8000ca8:	002b      	movs	r3, r5
 8000caa:	490f      	ldr	r1, [pc, #60]	; (8000ce8 <__aeabi_i2f+0x90>)
 8000cac:	400b      	ands	r3, r1
 8000cae:	076e      	lsls	r6, r5, #29
 8000cb0:	d009      	beq.n	8000cc6 <__aeabi_i2f+0x6e>
 8000cb2:	260f      	movs	r6, #15
 8000cb4:	4035      	ands	r5, r6
 8000cb6:	2d04      	cmp	r5, #4
 8000cb8:	d005      	beq.n	8000cc6 <__aeabi_i2f+0x6e>
 8000cba:	3304      	adds	r3, #4
 8000cbc:	015d      	lsls	r5, r3, #5
 8000cbe:	d502      	bpl.n	8000cc6 <__aeabi_i2f+0x6e>
 8000cc0:	229f      	movs	r2, #159	; 0x9f
 8000cc2:	400b      	ands	r3, r1
 8000cc4:	1a12      	subs	r2, r2, r0
 8000cc6:	019b      	lsls	r3, r3, #6
 8000cc8:	0a58      	lsrs	r0, r3, #9
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	0240      	lsls	r0, r0, #9
 8000cce:	05d2      	lsls	r2, r2, #23
 8000cd0:	0a40      	lsrs	r0, r0, #9
 8000cd2:	07e4      	lsls	r4, r4, #31
 8000cd4:	4310      	orrs	r0, r2
 8000cd6:	4320      	orrs	r0, r4
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
 8000cda:	2400      	movs	r4, #0
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e7f4      	b.n	8000ccc <__aeabi_i2f+0x74>
 8000ce2:	0268      	lsls	r0, r5, #9
 8000ce4:	0a40      	lsrs	r0, r0, #9
 8000ce6:	e7f1      	b.n	8000ccc <__aeabi_i2f+0x74>
 8000ce8:	fbffffff 	.word	0xfbffffff

08000cec <__aeabi_dadd>:
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	464f      	mov	r7, r9
 8000cf0:	4646      	mov	r6, r8
 8000cf2:	46d6      	mov	lr, sl
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0309      	lsls	r1, r1, #12
 8000cf8:	b5c0      	push	{r6, r7, lr}
 8000cfa:	0a49      	lsrs	r1, r1, #9
 8000cfc:	0f47      	lsrs	r7, r0, #29
 8000cfe:	005e      	lsls	r6, r3, #1
 8000d00:	4339      	orrs	r1, r7
 8000d02:	031f      	lsls	r7, r3, #12
 8000d04:	0fdb      	lsrs	r3, r3, #31
 8000d06:	469c      	mov	ip, r3
 8000d08:	0065      	lsls	r5, r4, #1
 8000d0a:	0a7b      	lsrs	r3, r7, #9
 8000d0c:	0f57      	lsrs	r7, r2, #29
 8000d0e:	431f      	orrs	r7, r3
 8000d10:	0d6d      	lsrs	r5, r5, #21
 8000d12:	0fe4      	lsrs	r4, r4, #31
 8000d14:	0d76      	lsrs	r6, r6, #21
 8000d16:	46a1      	mov	r9, r4
 8000d18:	00c0      	lsls	r0, r0, #3
 8000d1a:	46b8      	mov	r8, r7
 8000d1c:	00d2      	lsls	r2, r2, #3
 8000d1e:	1bab      	subs	r3, r5, r6
 8000d20:	4564      	cmp	r4, ip
 8000d22:	d07b      	beq.n	8000e1c <__aeabi_dadd+0x130>
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dd5f      	ble.n	8000de8 <__aeabi_dadd+0xfc>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_dadd+0x42>
 8000d2c:	e0a4      	b.n	8000e78 <__aeabi_dadd+0x18c>
 8000d2e:	003e      	movs	r6, r7
 8000d30:	4316      	orrs	r6, r2
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x4a>
 8000d34:	e112      	b.n	8000f5c <__aeabi_dadd+0x270>
 8000d36:	1e5e      	subs	r6, r3, #1
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d000      	beq.n	8000d3e <__aeabi_dadd+0x52>
 8000d3c:	e19e      	b.n	800107c <__aeabi_dadd+0x390>
 8000d3e:	1a87      	subs	r7, r0, r2
 8000d40:	4643      	mov	r3, r8
 8000d42:	42b8      	cmp	r0, r7
 8000d44:	4180      	sbcs	r0, r0
 8000d46:	2501      	movs	r5, #1
 8000d48:	1ac9      	subs	r1, r1, r3
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	1a09      	subs	r1, r1, r0
 8000d4e:	020b      	lsls	r3, r1, #8
 8000d50:	d400      	bmi.n	8000d54 <__aeabi_dadd+0x68>
 8000d52:	e131      	b.n	8000fb8 <__aeabi_dadd+0x2cc>
 8000d54:	0249      	lsls	r1, r1, #9
 8000d56:	0a4e      	lsrs	r6, r1, #9
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0x72>
 8000d5c:	e16e      	b.n	800103c <__aeabi_dadd+0x350>
 8000d5e:	0030      	movs	r0, r6
 8000d60:	f001 fd82 	bl	8002868 <__clzsi2>
 8000d64:	0003      	movs	r3, r0
 8000d66:	3b08      	subs	r3, #8
 8000d68:	2b1f      	cmp	r3, #31
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_dadd+0x82>
 8000d6c:	e161      	b.n	8001032 <__aeabi_dadd+0x346>
 8000d6e:	2220      	movs	r2, #32
 8000d70:	0039      	movs	r1, r7
 8000d72:	1ad2      	subs	r2, r2, r3
 8000d74:	409e      	lsls	r6, r3
 8000d76:	40d1      	lsrs	r1, r2
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	430e      	orrs	r6, r1
 8000d7c:	429d      	cmp	r5, r3
 8000d7e:	dd00      	ble.n	8000d82 <__aeabi_dadd+0x96>
 8000d80:	e151      	b.n	8001026 <__aeabi_dadd+0x33a>
 8000d82:	1b5d      	subs	r5, r3, r5
 8000d84:	1c6b      	adds	r3, r5, #1
 8000d86:	2b1f      	cmp	r3, #31
 8000d88:	dd00      	ble.n	8000d8c <__aeabi_dadd+0xa0>
 8000d8a:	e17c      	b.n	8001086 <__aeabi_dadd+0x39a>
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	1ac9      	subs	r1, r1, r3
 8000d90:	003d      	movs	r5, r7
 8000d92:	0030      	movs	r0, r6
 8000d94:	408f      	lsls	r7, r1
 8000d96:	4088      	lsls	r0, r1
 8000d98:	40dd      	lsrs	r5, r3
 8000d9a:	1e79      	subs	r1, r7, #1
 8000d9c:	418f      	sbcs	r7, r1
 8000d9e:	0031      	movs	r1, r6
 8000da0:	2207      	movs	r2, #7
 8000da2:	4328      	orrs	r0, r5
 8000da4:	40d9      	lsrs	r1, r3
 8000da6:	2500      	movs	r5, #0
 8000da8:	4307      	orrs	r7, r0
 8000daa:	403a      	ands	r2, r7
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d009      	beq.n	8000dc4 <__aeabi_dadd+0xd8>
 8000db0:	230f      	movs	r3, #15
 8000db2:	403b      	ands	r3, r7
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d005      	beq.n	8000dc4 <__aeabi_dadd+0xd8>
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	42bb      	cmp	r3, r7
 8000dbc:	41bf      	sbcs	r7, r7
 8000dbe:	427f      	negs	r7, r7
 8000dc0:	19c9      	adds	r1, r1, r7
 8000dc2:	001f      	movs	r7, r3
 8000dc4:	020b      	lsls	r3, r1, #8
 8000dc6:	d400      	bmi.n	8000dca <__aeabi_dadd+0xde>
 8000dc8:	e226      	b.n	8001218 <__aeabi_dadd+0x52c>
 8000dca:	1c6a      	adds	r2, r5, #1
 8000dcc:	4bc6      	ldr	r3, [pc, #792]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8000dce:	0555      	lsls	r5, r2, #21
 8000dd0:	0d6d      	lsrs	r5, r5, #21
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0xec>
 8000dd6:	e106      	b.n	8000fe6 <__aeabi_dadd+0x2fa>
 8000dd8:	4ac4      	ldr	r2, [pc, #784]	; (80010ec <__aeabi_dadd+0x400>)
 8000dda:	08ff      	lsrs	r7, r7, #3
 8000ddc:	400a      	ands	r2, r1
 8000dde:	0753      	lsls	r3, r2, #29
 8000de0:	0252      	lsls	r2, r2, #9
 8000de2:	433b      	orrs	r3, r7
 8000de4:	0b12      	lsrs	r2, r2, #12
 8000de6:	e08e      	b.n	8000f06 <__aeabi_dadd+0x21a>
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d000      	beq.n	8000dee <__aeabi_dadd+0x102>
 8000dec:	e0b8      	b.n	8000f60 <__aeabi_dadd+0x274>
 8000dee:	1c6b      	adds	r3, r5, #1
 8000df0:	055b      	lsls	r3, r3, #21
 8000df2:	0d5b      	lsrs	r3, r3, #21
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_dadd+0x10e>
 8000df8:	e130      	b.n	800105c <__aeabi_dadd+0x370>
 8000dfa:	1a87      	subs	r7, r0, r2
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	42b8      	cmp	r0, r7
 8000e00:	41b6      	sbcs	r6, r6
 8000e02:	1acb      	subs	r3, r1, r3
 8000e04:	4276      	negs	r6, r6
 8000e06:	1b9e      	subs	r6, r3, r6
 8000e08:	0233      	lsls	r3, r6, #8
 8000e0a:	d500      	bpl.n	8000e0e <__aeabi_dadd+0x122>
 8000e0c:	e14c      	b.n	80010a8 <__aeabi_dadd+0x3bc>
 8000e0e:	003b      	movs	r3, r7
 8000e10:	4333      	orrs	r3, r6
 8000e12:	d1a1      	bne.n	8000d58 <__aeabi_dadd+0x6c>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2400      	movs	r4, #0
 8000e18:	2500      	movs	r5, #0
 8000e1a:	e070      	b.n	8000efe <__aeabi_dadd+0x212>
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	dc00      	bgt.n	8000e22 <__aeabi_dadd+0x136>
 8000e20:	e0e5      	b.n	8000fee <__aeabi_dadd+0x302>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_dadd+0x13c>
 8000e26:	e083      	b.n	8000f30 <__aeabi_dadd+0x244>
 8000e28:	4eaf      	ldr	r6, [pc, #700]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8000e2a:	42b5      	cmp	r5, r6
 8000e2c:	d060      	beq.n	8000ef0 <__aeabi_dadd+0x204>
 8000e2e:	2680      	movs	r6, #128	; 0x80
 8000e30:	0436      	lsls	r6, r6, #16
 8000e32:	4337      	orrs	r7, r6
 8000e34:	46b8      	mov	r8, r7
 8000e36:	2b38      	cmp	r3, #56	; 0x38
 8000e38:	dc00      	bgt.n	8000e3c <__aeabi_dadd+0x150>
 8000e3a:	e13e      	b.n	80010ba <__aeabi_dadd+0x3ce>
 8000e3c:	4643      	mov	r3, r8
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	001f      	movs	r7, r3
 8000e42:	1e7a      	subs	r2, r7, #1
 8000e44:	4197      	sbcs	r7, r2
 8000e46:	183f      	adds	r7, r7, r0
 8000e48:	4287      	cmp	r7, r0
 8000e4a:	4180      	sbcs	r0, r0
 8000e4c:	4240      	negs	r0, r0
 8000e4e:	1809      	adds	r1, r1, r0
 8000e50:	020b      	lsls	r3, r1, #8
 8000e52:	d400      	bmi.n	8000e56 <__aeabi_dadd+0x16a>
 8000e54:	e0b0      	b.n	8000fb8 <__aeabi_dadd+0x2cc>
 8000e56:	4ba4      	ldr	r3, [pc, #656]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8000e58:	3501      	adds	r5, #1
 8000e5a:	429d      	cmp	r5, r3
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dadd+0x174>
 8000e5e:	e0c3      	b.n	8000fe8 <__aeabi_dadd+0x2fc>
 8000e60:	4aa2      	ldr	r2, [pc, #648]	; (80010ec <__aeabi_dadd+0x400>)
 8000e62:	087b      	lsrs	r3, r7, #1
 8000e64:	400a      	ands	r2, r1
 8000e66:	2101      	movs	r1, #1
 8000e68:	400f      	ands	r7, r1
 8000e6a:	431f      	orrs	r7, r3
 8000e6c:	0851      	lsrs	r1, r2, #1
 8000e6e:	07d3      	lsls	r3, r2, #31
 8000e70:	2207      	movs	r2, #7
 8000e72:	431f      	orrs	r7, r3
 8000e74:	403a      	ands	r2, r7
 8000e76:	e799      	b.n	8000dac <__aeabi_dadd+0xc0>
 8000e78:	4e9b      	ldr	r6, [pc, #620]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8000e7a:	42b5      	cmp	r5, r6
 8000e7c:	d038      	beq.n	8000ef0 <__aeabi_dadd+0x204>
 8000e7e:	2680      	movs	r6, #128	; 0x80
 8000e80:	0436      	lsls	r6, r6, #16
 8000e82:	4337      	orrs	r7, r6
 8000e84:	46b8      	mov	r8, r7
 8000e86:	2b38      	cmp	r3, #56	; 0x38
 8000e88:	dd00      	ble.n	8000e8c <__aeabi_dadd+0x1a0>
 8000e8a:	e0dc      	b.n	8001046 <__aeabi_dadd+0x35a>
 8000e8c:	2b1f      	cmp	r3, #31
 8000e8e:	dc00      	bgt.n	8000e92 <__aeabi_dadd+0x1a6>
 8000e90:	e130      	b.n	80010f4 <__aeabi_dadd+0x408>
 8000e92:	001e      	movs	r6, r3
 8000e94:	4647      	mov	r7, r8
 8000e96:	3e20      	subs	r6, #32
 8000e98:	40f7      	lsrs	r7, r6
 8000e9a:	46bc      	mov	ip, r7
 8000e9c:	2b20      	cmp	r3, #32
 8000e9e:	d004      	beq.n	8000eaa <__aeabi_dadd+0x1be>
 8000ea0:	2640      	movs	r6, #64	; 0x40
 8000ea2:	1af3      	subs	r3, r6, r3
 8000ea4:	4646      	mov	r6, r8
 8000ea6:	409e      	lsls	r6, r3
 8000ea8:	4332      	orrs	r2, r6
 8000eaa:	0017      	movs	r7, r2
 8000eac:	4663      	mov	r3, ip
 8000eae:	1e7a      	subs	r2, r7, #1
 8000eb0:	4197      	sbcs	r7, r2
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	e0cc      	b.n	8001050 <__aeabi_dadd+0x364>
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_dadd+0x1d0>
 8000eba:	e204      	b.n	80012c6 <__aeabi_dadd+0x5da>
 8000ebc:	4643      	mov	r3, r8
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dadd+0x1d8>
 8000ec2:	e159      	b.n	8001178 <__aeabi_dadd+0x48c>
 8000ec4:	074b      	lsls	r3, r1, #29
 8000ec6:	08c0      	lsrs	r0, r0, #3
 8000ec8:	4318      	orrs	r0, r3
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	08c9      	lsrs	r1, r1, #3
 8000ece:	031b      	lsls	r3, r3, #12
 8000ed0:	4219      	tst	r1, r3
 8000ed2:	d008      	beq.n	8000ee6 <__aeabi_dadd+0x1fa>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	08ed      	lsrs	r5, r5, #3
 8000ed8:	421d      	tst	r5, r3
 8000eda:	d104      	bne.n	8000ee6 <__aeabi_dadd+0x1fa>
 8000edc:	4643      	mov	r3, r8
 8000ede:	08d0      	lsrs	r0, r2, #3
 8000ee0:	0759      	lsls	r1, r3, #29
 8000ee2:	4308      	orrs	r0, r1
 8000ee4:	0029      	movs	r1, r5
 8000ee6:	0f42      	lsrs	r2, r0, #29
 8000ee8:	00c9      	lsls	r1, r1, #3
 8000eea:	4d7f      	ldr	r5, [pc, #508]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8000eec:	4311      	orrs	r1, r2
 8000eee:	00c0      	lsls	r0, r0, #3
 8000ef0:	074b      	lsls	r3, r1, #29
 8000ef2:	08ca      	lsrs	r2, r1, #3
 8000ef4:	497c      	ldr	r1, [pc, #496]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8000ef6:	08c0      	lsrs	r0, r0, #3
 8000ef8:	4303      	orrs	r3, r0
 8000efa:	428d      	cmp	r5, r1
 8000efc:	d068      	beq.n	8000fd0 <__aeabi_dadd+0x2e4>
 8000efe:	0312      	lsls	r2, r2, #12
 8000f00:	056d      	lsls	r5, r5, #21
 8000f02:	0b12      	lsrs	r2, r2, #12
 8000f04:	0d6d      	lsrs	r5, r5, #21
 8000f06:	2100      	movs	r1, #0
 8000f08:	0312      	lsls	r2, r2, #12
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	0b13      	lsrs	r3, r2, #12
 8000f0e:	0d0a      	lsrs	r2, r1, #20
 8000f10:	0512      	lsls	r2, r2, #20
 8000f12:	431a      	orrs	r2, r3
 8000f14:	4b76      	ldr	r3, [pc, #472]	; (80010f0 <__aeabi_dadd+0x404>)
 8000f16:	052d      	lsls	r5, r5, #20
 8000f18:	4013      	ands	r3, r2
 8000f1a:	432b      	orrs	r3, r5
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	07e4      	lsls	r4, r4, #31
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	4323      	orrs	r3, r4
 8000f24:	0019      	movs	r1, r3
 8000f26:	bc1c      	pop	{r2, r3, r4}
 8000f28:	4690      	mov	r8, r2
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	46a2      	mov	sl, r4
 8000f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f30:	003e      	movs	r6, r7
 8000f32:	4316      	orrs	r6, r2
 8000f34:	d012      	beq.n	8000f5c <__aeabi_dadd+0x270>
 8000f36:	1e5e      	subs	r6, r3, #1
 8000f38:	2e00      	cmp	r6, #0
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_dadd+0x252>
 8000f3c:	e100      	b.n	8001140 <__aeabi_dadd+0x454>
 8000f3e:	1887      	adds	r7, r0, r2
 8000f40:	4287      	cmp	r7, r0
 8000f42:	4180      	sbcs	r0, r0
 8000f44:	4441      	add	r1, r8
 8000f46:	4240      	negs	r0, r0
 8000f48:	1809      	adds	r1, r1, r0
 8000f4a:	2501      	movs	r5, #1
 8000f4c:	020b      	lsls	r3, r1, #8
 8000f4e:	d533      	bpl.n	8000fb8 <__aeabi_dadd+0x2cc>
 8000f50:	2502      	movs	r5, #2
 8000f52:	e785      	b.n	8000e60 <__aeabi_dadd+0x174>
 8000f54:	4664      	mov	r4, ip
 8000f56:	0033      	movs	r3, r6
 8000f58:	4641      	mov	r1, r8
 8000f5a:	0010      	movs	r0, r2
 8000f5c:	001d      	movs	r5, r3
 8000f5e:	e7c7      	b.n	8000ef0 <__aeabi_dadd+0x204>
 8000f60:	2d00      	cmp	r5, #0
 8000f62:	d000      	beq.n	8000f66 <__aeabi_dadd+0x27a>
 8000f64:	e0da      	b.n	800111c <__aeabi_dadd+0x430>
 8000f66:	000c      	movs	r4, r1
 8000f68:	4304      	orrs	r4, r0
 8000f6a:	d0f3      	beq.n	8000f54 <__aeabi_dadd+0x268>
 8000f6c:	1c5c      	adds	r4, r3, #1
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_dadd+0x286>
 8000f70:	e19f      	b.n	80012b2 <__aeabi_dadd+0x5c6>
 8000f72:	4c5d      	ldr	r4, [pc, #372]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x28e>
 8000f78:	e12f      	b.n	80011da <__aeabi_dadd+0x4ee>
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	2b38      	cmp	r3, #56	; 0x38
 8000f7e:	dd00      	ble.n	8000f82 <__aeabi_dadd+0x296>
 8000f80:	e166      	b.n	8001250 <__aeabi_dadd+0x564>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dd00      	ble.n	8000f88 <__aeabi_dadd+0x29c>
 8000f86:	e183      	b.n	8001290 <__aeabi_dadd+0x5a4>
 8000f88:	2420      	movs	r4, #32
 8000f8a:	0005      	movs	r5, r0
 8000f8c:	1ae4      	subs	r4, r4, r3
 8000f8e:	000f      	movs	r7, r1
 8000f90:	40dd      	lsrs	r5, r3
 8000f92:	40d9      	lsrs	r1, r3
 8000f94:	40a0      	lsls	r0, r4
 8000f96:	4643      	mov	r3, r8
 8000f98:	40a7      	lsls	r7, r4
 8000f9a:	1a5b      	subs	r3, r3, r1
 8000f9c:	1e44      	subs	r4, r0, #1
 8000f9e:	41a0      	sbcs	r0, r4
 8000fa0:	4698      	mov	r8, r3
 8000fa2:	432f      	orrs	r7, r5
 8000fa4:	4338      	orrs	r0, r7
 8000fa6:	1a17      	subs	r7, r2, r0
 8000fa8:	42ba      	cmp	r2, r7
 8000faa:	4192      	sbcs	r2, r2
 8000fac:	4643      	mov	r3, r8
 8000fae:	4252      	negs	r2, r2
 8000fb0:	1a99      	subs	r1, r3, r2
 8000fb2:	4664      	mov	r4, ip
 8000fb4:	0035      	movs	r5, r6
 8000fb6:	e6ca      	b.n	8000d4e <__aeabi_dadd+0x62>
 8000fb8:	2207      	movs	r2, #7
 8000fba:	403a      	ands	r2, r7
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d000      	beq.n	8000fc2 <__aeabi_dadd+0x2d6>
 8000fc0:	e6f6      	b.n	8000db0 <__aeabi_dadd+0xc4>
 8000fc2:	074b      	lsls	r3, r1, #29
 8000fc4:	08ca      	lsrs	r2, r1, #3
 8000fc6:	4948      	ldr	r1, [pc, #288]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8000fc8:	08ff      	lsrs	r7, r7, #3
 8000fca:	433b      	orrs	r3, r7
 8000fcc:	428d      	cmp	r5, r1
 8000fce:	d196      	bne.n	8000efe <__aeabi_dadd+0x212>
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	4311      	orrs	r1, r2
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dadd+0x2ec>
 8000fd6:	e19e      	b.n	8001316 <__aeabi_dadd+0x62a>
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0309      	lsls	r1, r1, #12
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	0312      	lsls	r2, r2, #12
 8000fe0:	0b12      	lsrs	r2, r2, #12
 8000fe2:	4d41      	ldr	r5, [pc, #260]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8000fe4:	e78f      	b.n	8000f06 <__aeabi_dadd+0x21a>
 8000fe6:	0015      	movs	r5, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2300      	movs	r3, #0
 8000fec:	e78b      	b.n	8000f06 <__aeabi_dadd+0x21a>
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_dadd+0x308>
 8000ff2:	e0c7      	b.n	8001184 <__aeabi_dadd+0x498>
 8000ff4:	1c6b      	adds	r3, r5, #1
 8000ff6:	055f      	lsls	r7, r3, #21
 8000ff8:	0d7f      	lsrs	r7, r7, #21
 8000ffa:	2f01      	cmp	r7, #1
 8000ffc:	dc00      	bgt.n	8001000 <__aeabi_dadd+0x314>
 8000ffe:	e0f1      	b.n	80011e4 <__aeabi_dadd+0x4f8>
 8001000:	4d39      	ldr	r5, [pc, #228]	; (80010e8 <__aeabi_dadd+0x3fc>)
 8001002:	42ab      	cmp	r3, r5
 8001004:	d100      	bne.n	8001008 <__aeabi_dadd+0x31c>
 8001006:	e0b9      	b.n	800117c <__aeabi_dadd+0x490>
 8001008:	1885      	adds	r5, r0, r2
 800100a:	000a      	movs	r2, r1
 800100c:	4285      	cmp	r5, r0
 800100e:	4189      	sbcs	r1, r1
 8001010:	4442      	add	r2, r8
 8001012:	4249      	negs	r1, r1
 8001014:	1851      	adds	r1, r2, r1
 8001016:	2207      	movs	r2, #7
 8001018:	07cf      	lsls	r7, r1, #31
 800101a:	086d      	lsrs	r5, r5, #1
 800101c:	432f      	orrs	r7, r5
 800101e:	0849      	lsrs	r1, r1, #1
 8001020:	403a      	ands	r2, r7
 8001022:	001d      	movs	r5, r3
 8001024:	e6c2      	b.n	8000dac <__aeabi_dadd+0xc0>
 8001026:	2207      	movs	r2, #7
 8001028:	4930      	ldr	r1, [pc, #192]	; (80010ec <__aeabi_dadd+0x400>)
 800102a:	1aed      	subs	r5, r5, r3
 800102c:	4031      	ands	r1, r6
 800102e:	403a      	ands	r2, r7
 8001030:	e6bc      	b.n	8000dac <__aeabi_dadd+0xc0>
 8001032:	003e      	movs	r6, r7
 8001034:	3828      	subs	r0, #40	; 0x28
 8001036:	4086      	lsls	r6, r0
 8001038:	2700      	movs	r7, #0
 800103a:	e69f      	b.n	8000d7c <__aeabi_dadd+0x90>
 800103c:	0038      	movs	r0, r7
 800103e:	f001 fc13 	bl	8002868 <__clzsi2>
 8001042:	3020      	adds	r0, #32
 8001044:	e68e      	b.n	8000d64 <__aeabi_dadd+0x78>
 8001046:	4643      	mov	r3, r8
 8001048:	4313      	orrs	r3, r2
 800104a:	001f      	movs	r7, r3
 800104c:	1e7a      	subs	r2, r7, #1
 800104e:	4197      	sbcs	r7, r2
 8001050:	1bc7      	subs	r7, r0, r7
 8001052:	42b8      	cmp	r0, r7
 8001054:	4180      	sbcs	r0, r0
 8001056:	4240      	negs	r0, r0
 8001058:	1a09      	subs	r1, r1, r0
 800105a:	e678      	b.n	8000d4e <__aeabi_dadd+0x62>
 800105c:	000e      	movs	r6, r1
 800105e:	003b      	movs	r3, r7
 8001060:	4306      	orrs	r6, r0
 8001062:	4313      	orrs	r3, r2
 8001064:	2d00      	cmp	r5, #0
 8001066:	d161      	bne.n	800112c <__aeabi_dadd+0x440>
 8001068:	2e00      	cmp	r6, #0
 800106a:	d000      	beq.n	800106e <__aeabi_dadd+0x382>
 800106c:	e0f4      	b.n	8001258 <__aeabi_dadd+0x56c>
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_dadd+0x388>
 8001072:	e11b      	b.n	80012ac <__aeabi_dadd+0x5c0>
 8001074:	4664      	mov	r4, ip
 8001076:	0039      	movs	r1, r7
 8001078:	0010      	movs	r0, r2
 800107a:	e739      	b.n	8000ef0 <__aeabi_dadd+0x204>
 800107c:	4f1a      	ldr	r7, [pc, #104]	; (80010e8 <__aeabi_dadd+0x3fc>)
 800107e:	42bb      	cmp	r3, r7
 8001080:	d07a      	beq.n	8001178 <__aeabi_dadd+0x48c>
 8001082:	0033      	movs	r3, r6
 8001084:	e6ff      	b.n	8000e86 <__aeabi_dadd+0x19a>
 8001086:	0030      	movs	r0, r6
 8001088:	3d1f      	subs	r5, #31
 800108a:	40e8      	lsrs	r0, r5
 800108c:	2b20      	cmp	r3, #32
 800108e:	d003      	beq.n	8001098 <__aeabi_dadd+0x3ac>
 8001090:	2140      	movs	r1, #64	; 0x40
 8001092:	1acb      	subs	r3, r1, r3
 8001094:	409e      	lsls	r6, r3
 8001096:	4337      	orrs	r7, r6
 8001098:	1e7b      	subs	r3, r7, #1
 800109a:	419f      	sbcs	r7, r3
 800109c:	2207      	movs	r2, #7
 800109e:	4307      	orrs	r7, r0
 80010a0:	403a      	ands	r2, r7
 80010a2:	2100      	movs	r1, #0
 80010a4:	2500      	movs	r5, #0
 80010a6:	e789      	b.n	8000fbc <__aeabi_dadd+0x2d0>
 80010a8:	1a17      	subs	r7, r2, r0
 80010aa:	4643      	mov	r3, r8
 80010ac:	42ba      	cmp	r2, r7
 80010ae:	41b6      	sbcs	r6, r6
 80010b0:	1a59      	subs	r1, r3, r1
 80010b2:	4276      	negs	r6, r6
 80010b4:	1b8e      	subs	r6, r1, r6
 80010b6:	4664      	mov	r4, ip
 80010b8:	e64e      	b.n	8000d58 <__aeabi_dadd+0x6c>
 80010ba:	2b1f      	cmp	r3, #31
 80010bc:	dd00      	ble.n	80010c0 <__aeabi_dadd+0x3d4>
 80010be:	e0ad      	b.n	800121c <__aeabi_dadd+0x530>
 80010c0:	2620      	movs	r6, #32
 80010c2:	4647      	mov	r7, r8
 80010c4:	1af6      	subs	r6, r6, r3
 80010c6:	40b7      	lsls	r7, r6
 80010c8:	46b9      	mov	r9, r7
 80010ca:	0017      	movs	r7, r2
 80010cc:	46b2      	mov	sl, r6
 80010ce:	40df      	lsrs	r7, r3
 80010d0:	464e      	mov	r6, r9
 80010d2:	433e      	orrs	r6, r7
 80010d4:	0037      	movs	r7, r6
 80010d6:	4656      	mov	r6, sl
 80010d8:	40b2      	lsls	r2, r6
 80010da:	1e56      	subs	r6, r2, #1
 80010dc:	41b2      	sbcs	r2, r6
 80010de:	4317      	orrs	r7, r2
 80010e0:	4642      	mov	r2, r8
 80010e2:	40da      	lsrs	r2, r3
 80010e4:	1889      	adds	r1, r1, r2
 80010e6:	e6ae      	b.n	8000e46 <__aeabi_dadd+0x15a>
 80010e8:	000007ff 	.word	0x000007ff
 80010ec:	ff7fffff 	.word	0xff7fffff
 80010f0:	800fffff 	.word	0x800fffff
 80010f4:	2620      	movs	r6, #32
 80010f6:	4647      	mov	r7, r8
 80010f8:	1af6      	subs	r6, r6, r3
 80010fa:	40b7      	lsls	r7, r6
 80010fc:	46b9      	mov	r9, r7
 80010fe:	0017      	movs	r7, r2
 8001100:	46b2      	mov	sl, r6
 8001102:	40df      	lsrs	r7, r3
 8001104:	464e      	mov	r6, r9
 8001106:	433e      	orrs	r6, r7
 8001108:	0037      	movs	r7, r6
 800110a:	4656      	mov	r6, sl
 800110c:	40b2      	lsls	r2, r6
 800110e:	1e56      	subs	r6, r2, #1
 8001110:	41b2      	sbcs	r2, r6
 8001112:	4317      	orrs	r7, r2
 8001114:	4642      	mov	r2, r8
 8001116:	40da      	lsrs	r2, r3
 8001118:	1a89      	subs	r1, r1, r2
 800111a:	e799      	b.n	8001050 <__aeabi_dadd+0x364>
 800111c:	4c7f      	ldr	r4, [pc, #508]	; (800131c <__aeabi_dadd+0x630>)
 800111e:	42a6      	cmp	r6, r4
 8001120:	d05b      	beq.n	80011da <__aeabi_dadd+0x4ee>
 8001122:	2480      	movs	r4, #128	; 0x80
 8001124:	0424      	lsls	r4, r4, #16
 8001126:	425b      	negs	r3, r3
 8001128:	4321      	orrs	r1, r4
 800112a:	e727      	b.n	8000f7c <__aeabi_dadd+0x290>
 800112c:	2e00      	cmp	r6, #0
 800112e:	d10c      	bne.n	800114a <__aeabi_dadd+0x45e>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x44a>
 8001134:	e0cb      	b.n	80012ce <__aeabi_dadd+0x5e2>
 8001136:	4664      	mov	r4, ip
 8001138:	0039      	movs	r1, r7
 800113a:	0010      	movs	r0, r2
 800113c:	4d77      	ldr	r5, [pc, #476]	; (800131c <__aeabi_dadd+0x630>)
 800113e:	e6d7      	b.n	8000ef0 <__aeabi_dadd+0x204>
 8001140:	4f76      	ldr	r7, [pc, #472]	; (800131c <__aeabi_dadd+0x630>)
 8001142:	42bb      	cmp	r3, r7
 8001144:	d018      	beq.n	8001178 <__aeabi_dadd+0x48c>
 8001146:	0033      	movs	r3, r6
 8001148:	e675      	b.n	8000e36 <__aeabi_dadd+0x14a>
 800114a:	2b00      	cmp	r3, #0
 800114c:	d014      	beq.n	8001178 <__aeabi_dadd+0x48c>
 800114e:	074b      	lsls	r3, r1, #29
 8001150:	08c0      	lsrs	r0, r0, #3
 8001152:	4318      	orrs	r0, r3
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	08c9      	lsrs	r1, r1, #3
 8001158:	031b      	lsls	r3, r3, #12
 800115a:	4219      	tst	r1, r3
 800115c:	d007      	beq.n	800116e <__aeabi_dadd+0x482>
 800115e:	08fc      	lsrs	r4, r7, #3
 8001160:	421c      	tst	r4, r3
 8001162:	d104      	bne.n	800116e <__aeabi_dadd+0x482>
 8001164:	0779      	lsls	r1, r7, #29
 8001166:	08d0      	lsrs	r0, r2, #3
 8001168:	4308      	orrs	r0, r1
 800116a:	46e1      	mov	r9, ip
 800116c:	0021      	movs	r1, r4
 800116e:	464c      	mov	r4, r9
 8001170:	0f42      	lsrs	r2, r0, #29
 8001172:	00c9      	lsls	r1, r1, #3
 8001174:	4311      	orrs	r1, r2
 8001176:	00c0      	lsls	r0, r0, #3
 8001178:	4d68      	ldr	r5, [pc, #416]	; (800131c <__aeabi_dadd+0x630>)
 800117a:	e6b9      	b.n	8000ef0 <__aeabi_dadd+0x204>
 800117c:	001d      	movs	r5, r3
 800117e:	2200      	movs	r2, #0
 8001180:	2300      	movs	r3, #0
 8001182:	e6c0      	b.n	8000f06 <__aeabi_dadd+0x21a>
 8001184:	2d00      	cmp	r5, #0
 8001186:	d15b      	bne.n	8001240 <__aeabi_dadd+0x554>
 8001188:	000d      	movs	r5, r1
 800118a:	4305      	orrs	r5, r0
 800118c:	d100      	bne.n	8001190 <__aeabi_dadd+0x4a4>
 800118e:	e6e2      	b.n	8000f56 <__aeabi_dadd+0x26a>
 8001190:	1c5d      	adds	r5, r3, #1
 8001192:	d100      	bne.n	8001196 <__aeabi_dadd+0x4aa>
 8001194:	e0b0      	b.n	80012f8 <__aeabi_dadd+0x60c>
 8001196:	4d61      	ldr	r5, [pc, #388]	; (800131c <__aeabi_dadd+0x630>)
 8001198:	42ae      	cmp	r6, r5
 800119a:	d01f      	beq.n	80011dc <__aeabi_dadd+0x4f0>
 800119c:	43db      	mvns	r3, r3
 800119e:	2b38      	cmp	r3, #56	; 0x38
 80011a0:	dc71      	bgt.n	8001286 <__aeabi_dadd+0x59a>
 80011a2:	2b1f      	cmp	r3, #31
 80011a4:	dd00      	ble.n	80011a8 <__aeabi_dadd+0x4bc>
 80011a6:	e096      	b.n	80012d6 <__aeabi_dadd+0x5ea>
 80011a8:	2520      	movs	r5, #32
 80011aa:	000f      	movs	r7, r1
 80011ac:	1aed      	subs	r5, r5, r3
 80011ae:	40af      	lsls	r7, r5
 80011b0:	46b9      	mov	r9, r7
 80011b2:	0007      	movs	r7, r0
 80011b4:	46aa      	mov	sl, r5
 80011b6:	40df      	lsrs	r7, r3
 80011b8:	464d      	mov	r5, r9
 80011ba:	433d      	orrs	r5, r7
 80011bc:	002f      	movs	r7, r5
 80011be:	4655      	mov	r5, sl
 80011c0:	40a8      	lsls	r0, r5
 80011c2:	40d9      	lsrs	r1, r3
 80011c4:	1e45      	subs	r5, r0, #1
 80011c6:	41a8      	sbcs	r0, r5
 80011c8:	4488      	add	r8, r1
 80011ca:	4307      	orrs	r7, r0
 80011cc:	18bf      	adds	r7, r7, r2
 80011ce:	4297      	cmp	r7, r2
 80011d0:	4192      	sbcs	r2, r2
 80011d2:	4251      	negs	r1, r2
 80011d4:	4441      	add	r1, r8
 80011d6:	0035      	movs	r5, r6
 80011d8:	e63a      	b.n	8000e50 <__aeabi_dadd+0x164>
 80011da:	4664      	mov	r4, ip
 80011dc:	0035      	movs	r5, r6
 80011de:	4641      	mov	r1, r8
 80011e0:	0010      	movs	r0, r2
 80011e2:	e685      	b.n	8000ef0 <__aeabi_dadd+0x204>
 80011e4:	000b      	movs	r3, r1
 80011e6:	4303      	orrs	r3, r0
 80011e8:	2d00      	cmp	r5, #0
 80011ea:	d000      	beq.n	80011ee <__aeabi_dadd+0x502>
 80011ec:	e663      	b.n	8000eb6 <__aeabi_dadd+0x1ca>
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f5      	beq.n	80011de <__aeabi_dadd+0x4f2>
 80011f2:	4643      	mov	r3, r8
 80011f4:	4313      	orrs	r3, r2
 80011f6:	d100      	bne.n	80011fa <__aeabi_dadd+0x50e>
 80011f8:	e67a      	b.n	8000ef0 <__aeabi_dadd+0x204>
 80011fa:	1887      	adds	r7, r0, r2
 80011fc:	4287      	cmp	r7, r0
 80011fe:	4180      	sbcs	r0, r0
 8001200:	2207      	movs	r2, #7
 8001202:	4441      	add	r1, r8
 8001204:	4240      	negs	r0, r0
 8001206:	1809      	adds	r1, r1, r0
 8001208:	403a      	ands	r2, r7
 800120a:	020b      	lsls	r3, r1, #8
 800120c:	d400      	bmi.n	8001210 <__aeabi_dadd+0x524>
 800120e:	e6d5      	b.n	8000fbc <__aeabi_dadd+0x2d0>
 8001210:	4b43      	ldr	r3, [pc, #268]	; (8001320 <__aeabi_dadd+0x634>)
 8001212:	3501      	adds	r5, #1
 8001214:	4019      	ands	r1, r3
 8001216:	e5c9      	b.n	8000dac <__aeabi_dadd+0xc0>
 8001218:	0038      	movs	r0, r7
 800121a:	e669      	b.n	8000ef0 <__aeabi_dadd+0x204>
 800121c:	001e      	movs	r6, r3
 800121e:	4647      	mov	r7, r8
 8001220:	3e20      	subs	r6, #32
 8001222:	40f7      	lsrs	r7, r6
 8001224:	46bc      	mov	ip, r7
 8001226:	2b20      	cmp	r3, #32
 8001228:	d004      	beq.n	8001234 <__aeabi_dadd+0x548>
 800122a:	2640      	movs	r6, #64	; 0x40
 800122c:	1af3      	subs	r3, r6, r3
 800122e:	4646      	mov	r6, r8
 8001230:	409e      	lsls	r6, r3
 8001232:	4332      	orrs	r2, r6
 8001234:	0017      	movs	r7, r2
 8001236:	4663      	mov	r3, ip
 8001238:	1e7a      	subs	r2, r7, #1
 800123a:	4197      	sbcs	r7, r2
 800123c:	431f      	orrs	r7, r3
 800123e:	e602      	b.n	8000e46 <__aeabi_dadd+0x15a>
 8001240:	4d36      	ldr	r5, [pc, #216]	; (800131c <__aeabi_dadd+0x630>)
 8001242:	42ae      	cmp	r6, r5
 8001244:	d0ca      	beq.n	80011dc <__aeabi_dadd+0x4f0>
 8001246:	2580      	movs	r5, #128	; 0x80
 8001248:	042d      	lsls	r5, r5, #16
 800124a:	425b      	negs	r3, r3
 800124c:	4329      	orrs	r1, r5
 800124e:	e7a6      	b.n	800119e <__aeabi_dadd+0x4b2>
 8001250:	4308      	orrs	r0, r1
 8001252:	1e41      	subs	r1, r0, #1
 8001254:	4188      	sbcs	r0, r1
 8001256:	e6a6      	b.n	8000fa6 <__aeabi_dadd+0x2ba>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_dadd+0x572>
 800125c:	e648      	b.n	8000ef0 <__aeabi_dadd+0x204>
 800125e:	1a87      	subs	r7, r0, r2
 8001260:	4643      	mov	r3, r8
 8001262:	42b8      	cmp	r0, r7
 8001264:	41b6      	sbcs	r6, r6
 8001266:	1acb      	subs	r3, r1, r3
 8001268:	4276      	negs	r6, r6
 800126a:	1b9e      	subs	r6, r3, r6
 800126c:	0233      	lsls	r3, r6, #8
 800126e:	d54b      	bpl.n	8001308 <__aeabi_dadd+0x61c>
 8001270:	1a17      	subs	r7, r2, r0
 8001272:	4643      	mov	r3, r8
 8001274:	42ba      	cmp	r2, r7
 8001276:	4192      	sbcs	r2, r2
 8001278:	1a59      	subs	r1, r3, r1
 800127a:	4252      	negs	r2, r2
 800127c:	1a89      	subs	r1, r1, r2
 800127e:	2207      	movs	r2, #7
 8001280:	4664      	mov	r4, ip
 8001282:	403a      	ands	r2, r7
 8001284:	e592      	b.n	8000dac <__aeabi_dadd+0xc0>
 8001286:	4301      	orrs	r1, r0
 8001288:	000f      	movs	r7, r1
 800128a:	1e79      	subs	r1, r7, #1
 800128c:	418f      	sbcs	r7, r1
 800128e:	e79d      	b.n	80011cc <__aeabi_dadd+0x4e0>
 8001290:	001c      	movs	r4, r3
 8001292:	000f      	movs	r7, r1
 8001294:	3c20      	subs	r4, #32
 8001296:	40e7      	lsrs	r7, r4
 8001298:	2b20      	cmp	r3, #32
 800129a:	d003      	beq.n	80012a4 <__aeabi_dadd+0x5b8>
 800129c:	2440      	movs	r4, #64	; 0x40
 800129e:	1ae3      	subs	r3, r4, r3
 80012a0:	4099      	lsls	r1, r3
 80012a2:	4308      	orrs	r0, r1
 80012a4:	1e41      	subs	r1, r0, #1
 80012a6:	4188      	sbcs	r0, r1
 80012a8:	4338      	orrs	r0, r7
 80012aa:	e67c      	b.n	8000fa6 <__aeabi_dadd+0x2ba>
 80012ac:	2200      	movs	r2, #0
 80012ae:	2400      	movs	r4, #0
 80012b0:	e625      	b.n	8000efe <__aeabi_dadd+0x212>
 80012b2:	1a17      	subs	r7, r2, r0
 80012b4:	4643      	mov	r3, r8
 80012b6:	42ba      	cmp	r2, r7
 80012b8:	4192      	sbcs	r2, r2
 80012ba:	1a59      	subs	r1, r3, r1
 80012bc:	4252      	negs	r2, r2
 80012be:	1a89      	subs	r1, r1, r2
 80012c0:	4664      	mov	r4, ip
 80012c2:	0035      	movs	r5, r6
 80012c4:	e543      	b.n	8000d4e <__aeabi_dadd+0x62>
 80012c6:	4641      	mov	r1, r8
 80012c8:	0010      	movs	r0, r2
 80012ca:	4d14      	ldr	r5, [pc, #80]	; (800131c <__aeabi_dadd+0x630>)
 80012cc:	e610      	b.n	8000ef0 <__aeabi_dadd+0x204>
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	2400      	movs	r4, #0
 80012d2:	0312      	lsls	r2, r2, #12
 80012d4:	e680      	b.n	8000fd8 <__aeabi_dadd+0x2ec>
 80012d6:	001d      	movs	r5, r3
 80012d8:	000f      	movs	r7, r1
 80012da:	3d20      	subs	r5, #32
 80012dc:	40ef      	lsrs	r7, r5
 80012de:	46bc      	mov	ip, r7
 80012e0:	2b20      	cmp	r3, #32
 80012e2:	d003      	beq.n	80012ec <__aeabi_dadd+0x600>
 80012e4:	2540      	movs	r5, #64	; 0x40
 80012e6:	1aeb      	subs	r3, r5, r3
 80012e8:	4099      	lsls	r1, r3
 80012ea:	4308      	orrs	r0, r1
 80012ec:	0007      	movs	r7, r0
 80012ee:	4663      	mov	r3, ip
 80012f0:	1e78      	subs	r0, r7, #1
 80012f2:	4187      	sbcs	r7, r0
 80012f4:	431f      	orrs	r7, r3
 80012f6:	e769      	b.n	80011cc <__aeabi_dadd+0x4e0>
 80012f8:	1887      	adds	r7, r0, r2
 80012fa:	4297      	cmp	r7, r2
 80012fc:	419b      	sbcs	r3, r3
 80012fe:	4441      	add	r1, r8
 8001300:	425b      	negs	r3, r3
 8001302:	18c9      	adds	r1, r1, r3
 8001304:	0035      	movs	r5, r6
 8001306:	e5a3      	b.n	8000e50 <__aeabi_dadd+0x164>
 8001308:	003b      	movs	r3, r7
 800130a:	4333      	orrs	r3, r6
 800130c:	d0ce      	beq.n	80012ac <__aeabi_dadd+0x5c0>
 800130e:	2207      	movs	r2, #7
 8001310:	0031      	movs	r1, r6
 8001312:	403a      	ands	r2, r7
 8001314:	e652      	b.n	8000fbc <__aeabi_dadd+0x2d0>
 8001316:	2300      	movs	r3, #0
 8001318:	001a      	movs	r2, r3
 800131a:	e5f4      	b.n	8000f06 <__aeabi_dadd+0x21a>
 800131c:	000007ff 	.word	0x000007ff
 8001320:	ff7fffff 	.word	0xff7fffff

08001324 <__aeabi_ddiv>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	46de      	mov	lr, fp
 800132a:	464e      	mov	r6, r9
 800132c:	4645      	mov	r5, r8
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	4683      	mov	fp, r0
 8001332:	0007      	movs	r7, r0
 8001334:	030e      	lsls	r6, r1, #12
 8001336:	0048      	lsls	r0, r1, #1
 8001338:	b085      	sub	sp, #20
 800133a:	4692      	mov	sl, r2
 800133c:	001c      	movs	r4, r3
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0d40      	lsrs	r0, r0, #21
 8001342:	0fcd      	lsrs	r5, r1, #31
 8001344:	2800      	cmp	r0, #0
 8001346:	d100      	bne.n	800134a <__aeabi_ddiv+0x26>
 8001348:	e09d      	b.n	8001486 <__aeabi_ddiv+0x162>
 800134a:	4b95      	ldr	r3, [pc, #596]	; (80015a0 <__aeabi_ddiv+0x27c>)
 800134c:	4298      	cmp	r0, r3
 800134e:	d039      	beq.n	80013c4 <__aeabi_ddiv+0xa0>
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	00f6      	lsls	r6, r6, #3
 8001354:	041b      	lsls	r3, r3, #16
 8001356:	431e      	orrs	r6, r3
 8001358:	4a92      	ldr	r2, [pc, #584]	; (80015a4 <__aeabi_ddiv+0x280>)
 800135a:	0f7b      	lsrs	r3, r7, #29
 800135c:	4333      	orrs	r3, r6
 800135e:	4699      	mov	r9, r3
 8001360:	4694      	mov	ip, r2
 8001362:	0003      	movs	r3, r0
 8001364:	4463      	add	r3, ip
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2300      	movs	r3, #0
 800136a:	2600      	movs	r6, #0
 800136c:	00ff      	lsls	r7, r7, #3
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	0323      	lsls	r3, r4, #12
 8001372:	0b1b      	lsrs	r3, r3, #12
 8001374:	4698      	mov	r8, r3
 8001376:	0063      	lsls	r3, r4, #1
 8001378:	0fe4      	lsrs	r4, r4, #31
 800137a:	4652      	mov	r2, sl
 800137c:	0d5b      	lsrs	r3, r3, #21
 800137e:	9401      	str	r4, [sp, #4]
 8001380:	d100      	bne.n	8001384 <__aeabi_ddiv+0x60>
 8001382:	e0b3      	b.n	80014ec <__aeabi_ddiv+0x1c8>
 8001384:	4986      	ldr	r1, [pc, #536]	; (80015a0 <__aeabi_ddiv+0x27c>)
 8001386:	428b      	cmp	r3, r1
 8001388:	d100      	bne.n	800138c <__aeabi_ddiv+0x68>
 800138a:	e09e      	b.n	80014ca <__aeabi_ddiv+0x1a6>
 800138c:	4642      	mov	r2, r8
 800138e:	00d1      	lsls	r1, r2, #3
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	0412      	lsls	r2, r2, #16
 8001394:	430a      	orrs	r2, r1
 8001396:	4651      	mov	r1, sl
 8001398:	0f49      	lsrs	r1, r1, #29
 800139a:	4311      	orrs	r1, r2
 800139c:	468b      	mov	fp, r1
 800139e:	4981      	ldr	r1, [pc, #516]	; (80015a4 <__aeabi_ddiv+0x280>)
 80013a0:	4652      	mov	r2, sl
 80013a2:	468c      	mov	ip, r1
 80013a4:	9900      	ldr	r1, [sp, #0]
 80013a6:	4463      	add	r3, ip
 80013a8:	1acb      	subs	r3, r1, r3
 80013aa:	2100      	movs	r1, #0
 80013ac:	00d2      	lsls	r2, r2, #3
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	002b      	movs	r3, r5
 80013b2:	4063      	eors	r3, r4
 80013b4:	469a      	mov	sl, r3
 80013b6:	2e0f      	cmp	r6, #15
 80013b8:	d900      	bls.n	80013bc <__aeabi_ddiv+0x98>
 80013ba:	e105      	b.n	80015c8 <__aeabi_ddiv+0x2a4>
 80013bc:	4b7a      	ldr	r3, [pc, #488]	; (80015a8 <__aeabi_ddiv+0x284>)
 80013be:	00b6      	lsls	r6, r6, #2
 80013c0:	599b      	ldr	r3, [r3, r6]
 80013c2:	469f      	mov	pc, r3
 80013c4:	465b      	mov	r3, fp
 80013c6:	4333      	orrs	r3, r6
 80013c8:	4699      	mov	r9, r3
 80013ca:	d000      	beq.n	80013ce <__aeabi_ddiv+0xaa>
 80013cc:	e0b8      	b.n	8001540 <__aeabi_ddiv+0x21c>
 80013ce:	2302      	movs	r3, #2
 80013d0:	2608      	movs	r6, #8
 80013d2:	2700      	movs	r7, #0
 80013d4:	9000      	str	r0, [sp, #0]
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	e7ca      	b.n	8001370 <__aeabi_ddiv+0x4c>
 80013da:	46cb      	mov	fp, r9
 80013dc:	003a      	movs	r2, r7
 80013de:	9902      	ldr	r1, [sp, #8]
 80013e0:	9501      	str	r5, [sp, #4]
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	469a      	mov	sl, r3
 80013e6:	2902      	cmp	r1, #2
 80013e8:	d027      	beq.n	800143a <__aeabi_ddiv+0x116>
 80013ea:	2903      	cmp	r1, #3
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0xcc>
 80013ee:	e280      	b.n	80018f2 <__aeabi_ddiv+0x5ce>
 80013f0:	2901      	cmp	r1, #1
 80013f2:	d044      	beq.n	800147e <__aeabi_ddiv+0x15a>
 80013f4:	496d      	ldr	r1, [pc, #436]	; (80015ac <__aeabi_ddiv+0x288>)
 80013f6:	9b00      	ldr	r3, [sp, #0]
 80013f8:	468c      	mov	ip, r1
 80013fa:	4463      	add	r3, ip
 80013fc:	001c      	movs	r4, r3
 80013fe:	2c00      	cmp	r4, #0
 8001400:	dd38      	ble.n	8001474 <__aeabi_ddiv+0x150>
 8001402:	0753      	lsls	r3, r2, #29
 8001404:	d000      	beq.n	8001408 <__aeabi_ddiv+0xe4>
 8001406:	e213      	b.n	8001830 <__aeabi_ddiv+0x50c>
 8001408:	08d2      	lsrs	r2, r2, #3
 800140a:	465b      	mov	r3, fp
 800140c:	01db      	lsls	r3, r3, #7
 800140e:	d509      	bpl.n	8001424 <__aeabi_ddiv+0x100>
 8001410:	4659      	mov	r1, fp
 8001412:	4b67      	ldr	r3, [pc, #412]	; (80015b0 <__aeabi_ddiv+0x28c>)
 8001414:	4019      	ands	r1, r3
 8001416:	468b      	mov	fp, r1
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	00c9      	lsls	r1, r1, #3
 800141c:	468c      	mov	ip, r1
 800141e:	9b00      	ldr	r3, [sp, #0]
 8001420:	4463      	add	r3, ip
 8001422:	001c      	movs	r4, r3
 8001424:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <__aeabi_ddiv+0x290>)
 8001426:	429c      	cmp	r4, r3
 8001428:	dc07      	bgt.n	800143a <__aeabi_ddiv+0x116>
 800142a:	465b      	mov	r3, fp
 800142c:	0564      	lsls	r4, r4, #21
 800142e:	075f      	lsls	r7, r3, #29
 8001430:	025b      	lsls	r3, r3, #9
 8001432:	4317      	orrs	r7, r2
 8001434:	0b1b      	lsrs	r3, r3, #12
 8001436:	0d62      	lsrs	r2, r4, #21
 8001438:	e002      	b.n	8001440 <__aeabi_ddiv+0x11c>
 800143a:	2300      	movs	r3, #0
 800143c:	2700      	movs	r7, #0
 800143e:	4a58      	ldr	r2, [pc, #352]	; (80015a0 <__aeabi_ddiv+0x27c>)
 8001440:	2100      	movs	r1, #0
 8001442:	031b      	lsls	r3, r3, #12
 8001444:	0b1c      	lsrs	r4, r3, #12
 8001446:	0d0b      	lsrs	r3, r1, #20
 8001448:	051b      	lsls	r3, r3, #20
 800144a:	4323      	orrs	r3, r4
 800144c:	0514      	lsls	r4, r2, #20
 800144e:	4a5a      	ldr	r2, [pc, #360]	; (80015b8 <__aeabi_ddiv+0x294>)
 8001450:	0038      	movs	r0, r7
 8001452:	4013      	ands	r3, r2
 8001454:	431c      	orrs	r4, r3
 8001456:	4653      	mov	r3, sl
 8001458:	0064      	lsls	r4, r4, #1
 800145a:	07db      	lsls	r3, r3, #31
 800145c:	0864      	lsrs	r4, r4, #1
 800145e:	431c      	orrs	r4, r3
 8001460:	0021      	movs	r1, r4
 8001462:	b005      	add	sp, #20
 8001464:	bc3c      	pop	{r2, r3, r4, r5}
 8001466:	4690      	mov	r8, r2
 8001468:	4699      	mov	r9, r3
 800146a:	46a2      	mov	sl, r4
 800146c:	46ab      	mov	fp, r5
 800146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001470:	2201      	movs	r2, #1
 8001472:	4252      	negs	r2, r2
 8001474:	2301      	movs	r3, #1
 8001476:	1b1b      	subs	r3, r3, r4
 8001478:	2b38      	cmp	r3, #56	; 0x38
 800147a:	dc00      	bgt.n	800147e <__aeabi_ddiv+0x15a>
 800147c:	e1ad      	b.n	80017da <__aeabi_ddiv+0x4b6>
 800147e:	2200      	movs	r2, #0
 8001480:	2300      	movs	r3, #0
 8001482:	2700      	movs	r7, #0
 8001484:	e7dc      	b.n	8001440 <__aeabi_ddiv+0x11c>
 8001486:	465b      	mov	r3, fp
 8001488:	4333      	orrs	r3, r6
 800148a:	4699      	mov	r9, r3
 800148c:	d05e      	beq.n	800154c <__aeabi_ddiv+0x228>
 800148e:	2e00      	cmp	r6, #0
 8001490:	d100      	bne.n	8001494 <__aeabi_ddiv+0x170>
 8001492:	e18a      	b.n	80017aa <__aeabi_ddiv+0x486>
 8001494:	0030      	movs	r0, r6
 8001496:	f001 f9e7 	bl	8002868 <__clzsi2>
 800149a:	0003      	movs	r3, r0
 800149c:	3b0b      	subs	r3, #11
 800149e:	2b1c      	cmp	r3, #28
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_ddiv+0x180>
 80014a2:	e17b      	b.n	800179c <__aeabi_ddiv+0x478>
 80014a4:	221d      	movs	r2, #29
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	465a      	mov	r2, fp
 80014aa:	0001      	movs	r1, r0
 80014ac:	40da      	lsrs	r2, r3
 80014ae:	3908      	subs	r1, #8
 80014b0:	408e      	lsls	r6, r1
 80014b2:	0013      	movs	r3, r2
 80014b4:	465f      	mov	r7, fp
 80014b6:	4333      	orrs	r3, r6
 80014b8:	4699      	mov	r9, r3
 80014ba:	408f      	lsls	r7, r1
 80014bc:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <__aeabi_ddiv+0x298>)
 80014be:	2600      	movs	r6, #0
 80014c0:	1a1b      	subs	r3, r3, r0
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2300      	movs	r3, #0
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	e752      	b.n	8001370 <__aeabi_ddiv+0x4c>
 80014ca:	4641      	mov	r1, r8
 80014cc:	4653      	mov	r3, sl
 80014ce:	430b      	orrs	r3, r1
 80014d0:	493b      	ldr	r1, [pc, #236]	; (80015c0 <__aeabi_ddiv+0x29c>)
 80014d2:	469b      	mov	fp, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	9b00      	ldr	r3, [sp, #0]
 80014d8:	4463      	add	r3, ip
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	465b      	mov	r3, fp
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d13b      	bne.n	800155a <__aeabi_ddiv+0x236>
 80014e2:	2302      	movs	r3, #2
 80014e4:	2200      	movs	r2, #0
 80014e6:	431e      	orrs	r6, r3
 80014e8:	2102      	movs	r1, #2
 80014ea:	e761      	b.n	80013b0 <__aeabi_ddiv+0x8c>
 80014ec:	4643      	mov	r3, r8
 80014ee:	4313      	orrs	r3, r2
 80014f0:	469b      	mov	fp, r3
 80014f2:	d037      	beq.n	8001564 <__aeabi_ddiv+0x240>
 80014f4:	4643      	mov	r3, r8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d100      	bne.n	80014fc <__aeabi_ddiv+0x1d8>
 80014fa:	e162      	b.n	80017c2 <__aeabi_ddiv+0x49e>
 80014fc:	4640      	mov	r0, r8
 80014fe:	f001 f9b3 	bl	8002868 <__clzsi2>
 8001502:	0003      	movs	r3, r0
 8001504:	3b0b      	subs	r3, #11
 8001506:	2b1c      	cmp	r3, #28
 8001508:	dd00      	ble.n	800150c <__aeabi_ddiv+0x1e8>
 800150a:	e153      	b.n	80017b4 <__aeabi_ddiv+0x490>
 800150c:	0002      	movs	r2, r0
 800150e:	4641      	mov	r1, r8
 8001510:	3a08      	subs	r2, #8
 8001512:	4091      	lsls	r1, r2
 8001514:	4688      	mov	r8, r1
 8001516:	211d      	movs	r1, #29
 8001518:	1acb      	subs	r3, r1, r3
 800151a:	4651      	mov	r1, sl
 800151c:	40d9      	lsrs	r1, r3
 800151e:	000b      	movs	r3, r1
 8001520:	4641      	mov	r1, r8
 8001522:	430b      	orrs	r3, r1
 8001524:	469b      	mov	fp, r3
 8001526:	4653      	mov	r3, sl
 8001528:	4093      	lsls	r3, r2
 800152a:	001a      	movs	r2, r3
 800152c:	9b00      	ldr	r3, [sp, #0]
 800152e:	4925      	ldr	r1, [pc, #148]	; (80015c4 <__aeabi_ddiv+0x2a0>)
 8001530:	469c      	mov	ip, r3
 8001532:	4460      	add	r0, ip
 8001534:	0003      	movs	r3, r0
 8001536:	468c      	mov	ip, r1
 8001538:	4463      	add	r3, ip
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2100      	movs	r1, #0
 800153e:	e737      	b.n	80013b0 <__aeabi_ddiv+0x8c>
 8001540:	2303      	movs	r3, #3
 8001542:	46b1      	mov	r9, r6
 8001544:	9000      	str	r0, [sp, #0]
 8001546:	260c      	movs	r6, #12
 8001548:	9302      	str	r3, [sp, #8]
 800154a:	e711      	b.n	8001370 <__aeabi_ddiv+0x4c>
 800154c:	2300      	movs	r3, #0
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	2604      	movs	r6, #4
 8001554:	2700      	movs	r7, #0
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	e70a      	b.n	8001370 <__aeabi_ddiv+0x4c>
 800155a:	2303      	movs	r3, #3
 800155c:	46c3      	mov	fp, r8
 800155e:	431e      	orrs	r6, r3
 8001560:	2103      	movs	r1, #3
 8001562:	e725      	b.n	80013b0 <__aeabi_ddiv+0x8c>
 8001564:	3301      	adds	r3, #1
 8001566:	431e      	orrs	r6, r3
 8001568:	2200      	movs	r2, #0
 800156a:	2101      	movs	r1, #1
 800156c:	e720      	b.n	80013b0 <__aeabi_ddiv+0x8c>
 800156e:	2300      	movs	r3, #0
 8001570:	469a      	mov	sl, r3
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	2700      	movs	r7, #0
 8001576:	031b      	lsls	r3, r3, #12
 8001578:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <__aeabi_ddiv+0x27c>)
 800157a:	e761      	b.n	8001440 <__aeabi_ddiv+0x11c>
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	4649      	mov	r1, r9
 8001580:	031b      	lsls	r3, r3, #12
 8001582:	4219      	tst	r1, r3
 8001584:	d100      	bne.n	8001588 <__aeabi_ddiv+0x264>
 8001586:	e0e2      	b.n	800174e <__aeabi_ddiv+0x42a>
 8001588:	4659      	mov	r1, fp
 800158a:	4219      	tst	r1, r3
 800158c:	d000      	beq.n	8001590 <__aeabi_ddiv+0x26c>
 800158e:	e0de      	b.n	800174e <__aeabi_ddiv+0x42a>
 8001590:	430b      	orrs	r3, r1
 8001592:	031b      	lsls	r3, r3, #12
 8001594:	0017      	movs	r7, r2
 8001596:	0b1b      	lsrs	r3, r3, #12
 8001598:	46a2      	mov	sl, r4
 800159a:	4a01      	ldr	r2, [pc, #4]	; (80015a0 <__aeabi_ddiv+0x27c>)
 800159c:	e750      	b.n	8001440 <__aeabi_ddiv+0x11c>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff
 80015a4:	fffffc01 	.word	0xfffffc01
 80015a8:	08008b1c 	.word	0x08008b1c
 80015ac:	000003ff 	.word	0x000003ff
 80015b0:	feffffff 	.word	0xfeffffff
 80015b4:	000007fe 	.word	0x000007fe
 80015b8:	800fffff 	.word	0x800fffff
 80015bc:	fffffc0d 	.word	0xfffffc0d
 80015c0:	fffff801 	.word	0xfffff801
 80015c4:	000003f3 	.word	0x000003f3
 80015c8:	45d9      	cmp	r9, fp
 80015ca:	d900      	bls.n	80015ce <__aeabi_ddiv+0x2aa>
 80015cc:	e0cb      	b.n	8001766 <__aeabi_ddiv+0x442>
 80015ce:	d100      	bne.n	80015d2 <__aeabi_ddiv+0x2ae>
 80015d0:	e0c6      	b.n	8001760 <__aeabi_ddiv+0x43c>
 80015d2:	003c      	movs	r4, r7
 80015d4:	4648      	mov	r0, r9
 80015d6:	2700      	movs	r7, #0
 80015d8:	9b00      	ldr	r3, [sp, #0]
 80015da:	3b01      	subs	r3, #1
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	465b      	mov	r3, fp
 80015e0:	0e16      	lsrs	r6, r2, #24
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	431e      	orrs	r6, r3
 80015e6:	0213      	lsls	r3, r2, #8
 80015e8:	4698      	mov	r8, r3
 80015ea:	0433      	lsls	r3, r6, #16
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	4699      	mov	r9, r3
 80015f0:	0c31      	lsrs	r1, r6, #16
 80015f2:	9101      	str	r1, [sp, #4]
 80015f4:	f7fe fe0e 	bl	8000214 <__aeabi_uidivmod>
 80015f8:	464a      	mov	r2, r9
 80015fa:	4342      	muls	r2, r0
 80015fc:	040b      	lsls	r3, r1, #16
 80015fe:	0c21      	lsrs	r1, r4, #16
 8001600:	0005      	movs	r5, r0
 8001602:	4319      	orrs	r1, r3
 8001604:	428a      	cmp	r2, r1
 8001606:	d907      	bls.n	8001618 <__aeabi_ddiv+0x2f4>
 8001608:	1989      	adds	r1, r1, r6
 800160a:	3d01      	subs	r5, #1
 800160c:	428e      	cmp	r6, r1
 800160e:	d803      	bhi.n	8001618 <__aeabi_ddiv+0x2f4>
 8001610:	428a      	cmp	r2, r1
 8001612:	d901      	bls.n	8001618 <__aeabi_ddiv+0x2f4>
 8001614:	1e85      	subs	r5, r0, #2
 8001616:	1989      	adds	r1, r1, r6
 8001618:	1a88      	subs	r0, r1, r2
 800161a:	9901      	ldr	r1, [sp, #4]
 800161c:	f7fe fdfa 	bl	8000214 <__aeabi_uidivmod>
 8001620:	0409      	lsls	r1, r1, #16
 8001622:	468c      	mov	ip, r1
 8001624:	464a      	mov	r2, r9
 8001626:	0421      	lsls	r1, r4, #16
 8001628:	4664      	mov	r4, ip
 800162a:	4342      	muls	r2, r0
 800162c:	0c09      	lsrs	r1, r1, #16
 800162e:	0003      	movs	r3, r0
 8001630:	4321      	orrs	r1, r4
 8001632:	428a      	cmp	r2, r1
 8001634:	d904      	bls.n	8001640 <__aeabi_ddiv+0x31c>
 8001636:	1989      	adds	r1, r1, r6
 8001638:	3b01      	subs	r3, #1
 800163a:	428e      	cmp	r6, r1
 800163c:	d800      	bhi.n	8001640 <__aeabi_ddiv+0x31c>
 800163e:	e0f1      	b.n	8001824 <__aeabi_ddiv+0x500>
 8001640:	042d      	lsls	r5, r5, #16
 8001642:	431d      	orrs	r5, r3
 8001644:	46ab      	mov	fp, r5
 8001646:	4643      	mov	r3, r8
 8001648:	1a89      	subs	r1, r1, r2
 800164a:	4642      	mov	r2, r8
 800164c:	0c28      	lsrs	r0, r5, #16
 800164e:	0412      	lsls	r2, r2, #16
 8001650:	0c1d      	lsrs	r5, r3, #16
 8001652:	465b      	mov	r3, fp
 8001654:	0c14      	lsrs	r4, r2, #16
 8001656:	0022      	movs	r2, r4
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	435a      	muls	r2, r3
 800165e:	9403      	str	r4, [sp, #12]
 8001660:	436b      	muls	r3, r5
 8001662:	4344      	muls	r4, r0
 8001664:	9502      	str	r5, [sp, #8]
 8001666:	4368      	muls	r0, r5
 8001668:	191b      	adds	r3, r3, r4
 800166a:	0c15      	lsrs	r5, r2, #16
 800166c:	18eb      	adds	r3, r5, r3
 800166e:	429c      	cmp	r4, r3
 8001670:	d903      	bls.n	800167a <__aeabi_ddiv+0x356>
 8001672:	2480      	movs	r4, #128	; 0x80
 8001674:	0264      	lsls	r4, r4, #9
 8001676:	46a4      	mov	ip, r4
 8001678:	4460      	add	r0, ip
 800167a:	0c1c      	lsrs	r4, r3, #16
 800167c:	0415      	lsls	r5, r2, #16
 800167e:	041b      	lsls	r3, r3, #16
 8001680:	0c2d      	lsrs	r5, r5, #16
 8001682:	1820      	adds	r0, r4, r0
 8001684:	195d      	adds	r5, r3, r5
 8001686:	4281      	cmp	r1, r0
 8001688:	d377      	bcc.n	800177a <__aeabi_ddiv+0x456>
 800168a:	d073      	beq.n	8001774 <__aeabi_ddiv+0x450>
 800168c:	1a0c      	subs	r4, r1, r0
 800168e:	4aa2      	ldr	r2, [pc, #648]	; (8001918 <__aeabi_ddiv+0x5f4>)
 8001690:	1b7d      	subs	r5, r7, r5
 8001692:	42af      	cmp	r7, r5
 8001694:	41bf      	sbcs	r7, r7
 8001696:	4694      	mov	ip, r2
 8001698:	9b00      	ldr	r3, [sp, #0]
 800169a:	427f      	negs	r7, r7
 800169c:	4463      	add	r3, ip
 800169e:	1be0      	subs	r0, r4, r7
 80016a0:	001c      	movs	r4, r3
 80016a2:	4286      	cmp	r6, r0
 80016a4:	d100      	bne.n	80016a8 <__aeabi_ddiv+0x384>
 80016a6:	e0db      	b.n	8001860 <__aeabi_ddiv+0x53c>
 80016a8:	9901      	ldr	r1, [sp, #4]
 80016aa:	f7fe fdb3 	bl	8000214 <__aeabi_uidivmod>
 80016ae:	464a      	mov	r2, r9
 80016b0:	4342      	muls	r2, r0
 80016b2:	040b      	lsls	r3, r1, #16
 80016b4:	0c29      	lsrs	r1, r5, #16
 80016b6:	0007      	movs	r7, r0
 80016b8:	4319      	orrs	r1, r3
 80016ba:	428a      	cmp	r2, r1
 80016bc:	d907      	bls.n	80016ce <__aeabi_ddiv+0x3aa>
 80016be:	1989      	adds	r1, r1, r6
 80016c0:	3f01      	subs	r7, #1
 80016c2:	428e      	cmp	r6, r1
 80016c4:	d803      	bhi.n	80016ce <__aeabi_ddiv+0x3aa>
 80016c6:	428a      	cmp	r2, r1
 80016c8:	d901      	bls.n	80016ce <__aeabi_ddiv+0x3aa>
 80016ca:	1e87      	subs	r7, r0, #2
 80016cc:	1989      	adds	r1, r1, r6
 80016ce:	1a88      	subs	r0, r1, r2
 80016d0:	9901      	ldr	r1, [sp, #4]
 80016d2:	f7fe fd9f 	bl	8000214 <__aeabi_uidivmod>
 80016d6:	0409      	lsls	r1, r1, #16
 80016d8:	464a      	mov	r2, r9
 80016da:	4689      	mov	r9, r1
 80016dc:	0429      	lsls	r1, r5, #16
 80016de:	464d      	mov	r5, r9
 80016e0:	4342      	muls	r2, r0
 80016e2:	0c09      	lsrs	r1, r1, #16
 80016e4:	0003      	movs	r3, r0
 80016e6:	4329      	orrs	r1, r5
 80016e8:	428a      	cmp	r2, r1
 80016ea:	d907      	bls.n	80016fc <__aeabi_ddiv+0x3d8>
 80016ec:	1989      	adds	r1, r1, r6
 80016ee:	3b01      	subs	r3, #1
 80016f0:	428e      	cmp	r6, r1
 80016f2:	d803      	bhi.n	80016fc <__aeabi_ddiv+0x3d8>
 80016f4:	428a      	cmp	r2, r1
 80016f6:	d901      	bls.n	80016fc <__aeabi_ddiv+0x3d8>
 80016f8:	1e83      	subs	r3, r0, #2
 80016fa:	1989      	adds	r1, r1, r6
 80016fc:	043f      	lsls	r7, r7, #16
 80016fe:	1a89      	subs	r1, r1, r2
 8001700:	003a      	movs	r2, r7
 8001702:	9f03      	ldr	r7, [sp, #12]
 8001704:	431a      	orrs	r2, r3
 8001706:	0038      	movs	r0, r7
 8001708:	0413      	lsls	r3, r2, #16
 800170a:	0c1b      	lsrs	r3, r3, #16
 800170c:	4358      	muls	r0, r3
 800170e:	4681      	mov	r9, r0
 8001710:	9802      	ldr	r0, [sp, #8]
 8001712:	0c15      	lsrs	r5, r2, #16
 8001714:	436f      	muls	r7, r5
 8001716:	4343      	muls	r3, r0
 8001718:	4345      	muls	r5, r0
 800171a:	4648      	mov	r0, r9
 800171c:	0c00      	lsrs	r0, r0, #16
 800171e:	4684      	mov	ip, r0
 8001720:	19db      	adds	r3, r3, r7
 8001722:	4463      	add	r3, ip
 8001724:	429f      	cmp	r7, r3
 8001726:	d903      	bls.n	8001730 <__aeabi_ddiv+0x40c>
 8001728:	2080      	movs	r0, #128	; 0x80
 800172a:	0240      	lsls	r0, r0, #9
 800172c:	4684      	mov	ip, r0
 800172e:	4465      	add	r5, ip
 8001730:	4648      	mov	r0, r9
 8001732:	0c1f      	lsrs	r7, r3, #16
 8001734:	0400      	lsls	r0, r0, #16
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	197d      	adds	r5, r7, r5
 800173c:	1818      	adds	r0, r3, r0
 800173e:	42a9      	cmp	r1, r5
 8001740:	d200      	bcs.n	8001744 <__aeabi_ddiv+0x420>
 8001742:	e084      	b.n	800184e <__aeabi_ddiv+0x52a>
 8001744:	d100      	bne.n	8001748 <__aeabi_ddiv+0x424>
 8001746:	e07f      	b.n	8001848 <__aeabi_ddiv+0x524>
 8001748:	2301      	movs	r3, #1
 800174a:	431a      	orrs	r2, r3
 800174c:	e657      	b.n	80013fe <__aeabi_ddiv+0xda>
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	464a      	mov	r2, r9
 8001752:	031b      	lsls	r3, r3, #12
 8001754:	4313      	orrs	r3, r2
 8001756:	031b      	lsls	r3, r3, #12
 8001758:	0b1b      	lsrs	r3, r3, #12
 800175a:	46aa      	mov	sl, r5
 800175c:	4a6f      	ldr	r2, [pc, #444]	; (800191c <__aeabi_ddiv+0x5f8>)
 800175e:	e66f      	b.n	8001440 <__aeabi_ddiv+0x11c>
 8001760:	42ba      	cmp	r2, r7
 8001762:	d900      	bls.n	8001766 <__aeabi_ddiv+0x442>
 8001764:	e735      	b.n	80015d2 <__aeabi_ddiv+0x2ae>
 8001766:	464b      	mov	r3, r9
 8001768:	07dc      	lsls	r4, r3, #31
 800176a:	0858      	lsrs	r0, r3, #1
 800176c:	087b      	lsrs	r3, r7, #1
 800176e:	431c      	orrs	r4, r3
 8001770:	07ff      	lsls	r7, r7, #31
 8001772:	e734      	b.n	80015de <__aeabi_ddiv+0x2ba>
 8001774:	2400      	movs	r4, #0
 8001776:	42af      	cmp	r7, r5
 8001778:	d289      	bcs.n	800168e <__aeabi_ddiv+0x36a>
 800177a:	4447      	add	r7, r8
 800177c:	4547      	cmp	r7, r8
 800177e:	41a4      	sbcs	r4, r4
 8001780:	465b      	mov	r3, fp
 8001782:	4264      	negs	r4, r4
 8001784:	19a4      	adds	r4, r4, r6
 8001786:	1864      	adds	r4, r4, r1
 8001788:	3b01      	subs	r3, #1
 800178a:	42a6      	cmp	r6, r4
 800178c:	d21e      	bcs.n	80017cc <__aeabi_ddiv+0x4a8>
 800178e:	42a0      	cmp	r0, r4
 8001790:	d86d      	bhi.n	800186e <__aeabi_ddiv+0x54a>
 8001792:	d100      	bne.n	8001796 <__aeabi_ddiv+0x472>
 8001794:	e0b6      	b.n	8001904 <__aeabi_ddiv+0x5e0>
 8001796:	1a24      	subs	r4, r4, r0
 8001798:	469b      	mov	fp, r3
 800179a:	e778      	b.n	800168e <__aeabi_ddiv+0x36a>
 800179c:	0003      	movs	r3, r0
 800179e:	465a      	mov	r2, fp
 80017a0:	3b28      	subs	r3, #40	; 0x28
 80017a2:	409a      	lsls	r2, r3
 80017a4:	2700      	movs	r7, #0
 80017a6:	4691      	mov	r9, r2
 80017a8:	e688      	b.n	80014bc <__aeabi_ddiv+0x198>
 80017aa:	4658      	mov	r0, fp
 80017ac:	f001 f85c 	bl	8002868 <__clzsi2>
 80017b0:	3020      	adds	r0, #32
 80017b2:	e672      	b.n	800149a <__aeabi_ddiv+0x176>
 80017b4:	0003      	movs	r3, r0
 80017b6:	4652      	mov	r2, sl
 80017b8:	3b28      	subs	r3, #40	; 0x28
 80017ba:	409a      	lsls	r2, r3
 80017bc:	4693      	mov	fp, r2
 80017be:	2200      	movs	r2, #0
 80017c0:	e6b4      	b.n	800152c <__aeabi_ddiv+0x208>
 80017c2:	4650      	mov	r0, sl
 80017c4:	f001 f850 	bl	8002868 <__clzsi2>
 80017c8:	3020      	adds	r0, #32
 80017ca:	e69a      	b.n	8001502 <__aeabi_ddiv+0x1de>
 80017cc:	42a6      	cmp	r6, r4
 80017ce:	d1e2      	bne.n	8001796 <__aeabi_ddiv+0x472>
 80017d0:	45b8      	cmp	r8, r7
 80017d2:	d9dc      	bls.n	800178e <__aeabi_ddiv+0x46a>
 80017d4:	1a34      	subs	r4, r6, r0
 80017d6:	469b      	mov	fp, r3
 80017d8:	e759      	b.n	800168e <__aeabi_ddiv+0x36a>
 80017da:	2b1f      	cmp	r3, #31
 80017dc:	dc65      	bgt.n	80018aa <__aeabi_ddiv+0x586>
 80017de:	4c50      	ldr	r4, [pc, #320]	; (8001920 <__aeabi_ddiv+0x5fc>)
 80017e0:	9900      	ldr	r1, [sp, #0]
 80017e2:	46a4      	mov	ip, r4
 80017e4:	465c      	mov	r4, fp
 80017e6:	4461      	add	r1, ip
 80017e8:	0008      	movs	r0, r1
 80017ea:	408c      	lsls	r4, r1
 80017ec:	0011      	movs	r1, r2
 80017ee:	4082      	lsls	r2, r0
 80017f0:	40d9      	lsrs	r1, r3
 80017f2:	1e50      	subs	r0, r2, #1
 80017f4:	4182      	sbcs	r2, r0
 80017f6:	430c      	orrs	r4, r1
 80017f8:	4314      	orrs	r4, r2
 80017fa:	465a      	mov	r2, fp
 80017fc:	40da      	lsrs	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	0762      	lsls	r2, r4, #29
 8001802:	d009      	beq.n	8001818 <__aeabi_ddiv+0x4f4>
 8001804:	220f      	movs	r2, #15
 8001806:	4022      	ands	r2, r4
 8001808:	2a04      	cmp	r2, #4
 800180a:	d005      	beq.n	8001818 <__aeabi_ddiv+0x4f4>
 800180c:	0022      	movs	r2, r4
 800180e:	1d14      	adds	r4, r2, #4
 8001810:	4294      	cmp	r4, r2
 8001812:	4189      	sbcs	r1, r1
 8001814:	4249      	negs	r1, r1
 8001816:	185b      	adds	r3, r3, r1
 8001818:	021a      	lsls	r2, r3, #8
 800181a:	d562      	bpl.n	80018e2 <__aeabi_ddiv+0x5be>
 800181c:	2201      	movs	r2, #1
 800181e:	2300      	movs	r3, #0
 8001820:	2700      	movs	r7, #0
 8001822:	e60d      	b.n	8001440 <__aeabi_ddiv+0x11c>
 8001824:	428a      	cmp	r2, r1
 8001826:	d800      	bhi.n	800182a <__aeabi_ddiv+0x506>
 8001828:	e70a      	b.n	8001640 <__aeabi_ddiv+0x31c>
 800182a:	1e83      	subs	r3, r0, #2
 800182c:	1989      	adds	r1, r1, r6
 800182e:	e707      	b.n	8001640 <__aeabi_ddiv+0x31c>
 8001830:	230f      	movs	r3, #15
 8001832:	4013      	ands	r3, r2
 8001834:	2b04      	cmp	r3, #4
 8001836:	d100      	bne.n	800183a <__aeabi_ddiv+0x516>
 8001838:	e5e6      	b.n	8001408 <__aeabi_ddiv+0xe4>
 800183a:	1d17      	adds	r7, r2, #4
 800183c:	4297      	cmp	r7, r2
 800183e:	4192      	sbcs	r2, r2
 8001840:	4253      	negs	r3, r2
 8001842:	449b      	add	fp, r3
 8001844:	08fa      	lsrs	r2, r7, #3
 8001846:	e5e0      	b.n	800140a <__aeabi_ddiv+0xe6>
 8001848:	2800      	cmp	r0, #0
 800184a:	d100      	bne.n	800184e <__aeabi_ddiv+0x52a>
 800184c:	e5d7      	b.n	80013fe <__aeabi_ddiv+0xda>
 800184e:	1871      	adds	r1, r6, r1
 8001850:	1e53      	subs	r3, r2, #1
 8001852:	42b1      	cmp	r1, r6
 8001854:	d327      	bcc.n	80018a6 <__aeabi_ddiv+0x582>
 8001856:	42a9      	cmp	r1, r5
 8001858:	d315      	bcc.n	8001886 <__aeabi_ddiv+0x562>
 800185a:	d058      	beq.n	800190e <__aeabi_ddiv+0x5ea>
 800185c:	001a      	movs	r2, r3
 800185e:	e773      	b.n	8001748 <__aeabi_ddiv+0x424>
 8001860:	2b00      	cmp	r3, #0
 8001862:	dc00      	bgt.n	8001866 <__aeabi_ddiv+0x542>
 8001864:	e604      	b.n	8001470 <__aeabi_ddiv+0x14c>
 8001866:	2301      	movs	r3, #1
 8001868:	2200      	movs	r2, #0
 800186a:	449b      	add	fp, r3
 800186c:	e5cd      	b.n	800140a <__aeabi_ddiv+0xe6>
 800186e:	2302      	movs	r3, #2
 8001870:	4447      	add	r7, r8
 8001872:	4547      	cmp	r7, r8
 8001874:	4189      	sbcs	r1, r1
 8001876:	425b      	negs	r3, r3
 8001878:	469c      	mov	ip, r3
 800187a:	4249      	negs	r1, r1
 800187c:	1989      	adds	r1, r1, r6
 800187e:	190c      	adds	r4, r1, r4
 8001880:	44e3      	add	fp, ip
 8001882:	1a24      	subs	r4, r4, r0
 8001884:	e703      	b.n	800168e <__aeabi_ddiv+0x36a>
 8001886:	4643      	mov	r3, r8
 8001888:	005f      	lsls	r7, r3, #1
 800188a:	4547      	cmp	r7, r8
 800188c:	419b      	sbcs	r3, r3
 800188e:	46b8      	mov	r8, r7
 8001890:	425b      	negs	r3, r3
 8001892:	199e      	adds	r6, r3, r6
 8001894:	3a02      	subs	r2, #2
 8001896:	1989      	adds	r1, r1, r6
 8001898:	42a9      	cmp	r1, r5
 800189a:	d000      	beq.n	800189e <__aeabi_ddiv+0x57a>
 800189c:	e754      	b.n	8001748 <__aeabi_ddiv+0x424>
 800189e:	4540      	cmp	r0, r8
 80018a0:	d000      	beq.n	80018a4 <__aeabi_ddiv+0x580>
 80018a2:	e751      	b.n	8001748 <__aeabi_ddiv+0x424>
 80018a4:	e5ab      	b.n	80013fe <__aeabi_ddiv+0xda>
 80018a6:	001a      	movs	r2, r3
 80018a8:	e7f6      	b.n	8001898 <__aeabi_ddiv+0x574>
 80018aa:	211f      	movs	r1, #31
 80018ac:	465f      	mov	r7, fp
 80018ae:	4249      	negs	r1, r1
 80018b0:	1b0c      	subs	r4, r1, r4
 80018b2:	40e7      	lsrs	r7, r4
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	d007      	beq.n	80018c8 <__aeabi_ddiv+0x5a4>
 80018b8:	491a      	ldr	r1, [pc, #104]	; (8001924 <__aeabi_ddiv+0x600>)
 80018ba:	9b00      	ldr	r3, [sp, #0]
 80018bc:	468c      	mov	ip, r1
 80018be:	4463      	add	r3, ip
 80018c0:	0018      	movs	r0, r3
 80018c2:	465b      	mov	r3, fp
 80018c4:	4083      	lsls	r3, r0
 80018c6:	431a      	orrs	r2, r3
 80018c8:	1e50      	subs	r0, r2, #1
 80018ca:	4182      	sbcs	r2, r0
 80018cc:	433a      	orrs	r2, r7
 80018ce:	2707      	movs	r7, #7
 80018d0:	2300      	movs	r3, #0
 80018d2:	4017      	ands	r7, r2
 80018d4:	d009      	beq.n	80018ea <__aeabi_ddiv+0x5c6>
 80018d6:	210f      	movs	r1, #15
 80018d8:	2300      	movs	r3, #0
 80018da:	4011      	ands	r1, r2
 80018dc:	0014      	movs	r4, r2
 80018de:	2904      	cmp	r1, #4
 80018e0:	d195      	bne.n	800180e <__aeabi_ddiv+0x4ea>
 80018e2:	0022      	movs	r2, r4
 80018e4:	075f      	lsls	r7, r3, #29
 80018e6:	025b      	lsls	r3, r3, #9
 80018e8:	0b1b      	lsrs	r3, r3, #12
 80018ea:	08d2      	lsrs	r2, r2, #3
 80018ec:	4317      	orrs	r7, r2
 80018ee:	2200      	movs	r2, #0
 80018f0:	e5a6      	b.n	8001440 <__aeabi_ddiv+0x11c>
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	4659      	mov	r1, fp
 80018f6:	031b      	lsls	r3, r3, #12
 80018f8:	430b      	orrs	r3, r1
 80018fa:	031b      	lsls	r3, r3, #12
 80018fc:	0017      	movs	r7, r2
 80018fe:	0b1b      	lsrs	r3, r3, #12
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <__aeabi_ddiv+0x5f8>)
 8001902:	e59d      	b.n	8001440 <__aeabi_ddiv+0x11c>
 8001904:	42bd      	cmp	r5, r7
 8001906:	d8b2      	bhi.n	800186e <__aeabi_ddiv+0x54a>
 8001908:	469b      	mov	fp, r3
 800190a:	2400      	movs	r4, #0
 800190c:	e6bf      	b.n	800168e <__aeabi_ddiv+0x36a>
 800190e:	4580      	cmp	r8, r0
 8001910:	d3b9      	bcc.n	8001886 <__aeabi_ddiv+0x562>
 8001912:	001a      	movs	r2, r3
 8001914:	e7c3      	b.n	800189e <__aeabi_ddiv+0x57a>
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	000003ff 	.word	0x000003ff
 800191c:	000007ff 	.word	0x000007ff
 8001920:	0000041e 	.word	0x0000041e
 8001924:	0000043e 	.word	0x0000043e

08001928 <__eqdf2>:
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	464f      	mov	r7, r9
 800192c:	4646      	mov	r6, r8
 800192e:	46d6      	mov	lr, sl
 8001930:	4684      	mov	ip, r0
 8001932:	b5c0      	push	{r6, r7, lr}
 8001934:	4680      	mov	r8, r0
 8001936:	4e19      	ldr	r6, [pc, #100]	; (800199c <__eqdf2+0x74>)
 8001938:	0318      	lsls	r0, r3, #12
 800193a:	030f      	lsls	r7, r1, #12
 800193c:	004d      	lsls	r5, r1, #1
 800193e:	0b00      	lsrs	r0, r0, #12
 8001940:	005c      	lsls	r4, r3, #1
 8001942:	4682      	mov	sl, r0
 8001944:	0b3f      	lsrs	r7, r7, #12
 8001946:	0d6d      	lsrs	r5, r5, #21
 8001948:	0fc9      	lsrs	r1, r1, #31
 800194a:	4691      	mov	r9, r2
 800194c:	0d64      	lsrs	r4, r4, #21
 800194e:	0fdb      	lsrs	r3, r3, #31
 8001950:	2001      	movs	r0, #1
 8001952:	42b5      	cmp	r5, r6
 8001954:	d00a      	beq.n	800196c <__eqdf2+0x44>
 8001956:	42b4      	cmp	r4, r6
 8001958:	d003      	beq.n	8001962 <__eqdf2+0x3a>
 800195a:	42a5      	cmp	r5, r4
 800195c:	d101      	bne.n	8001962 <__eqdf2+0x3a>
 800195e:	4557      	cmp	r7, sl
 8001960:	d00c      	beq.n	800197c <__eqdf2+0x54>
 8001962:	bc1c      	pop	{r2, r3, r4}
 8001964:	4690      	mov	r8, r2
 8001966:	4699      	mov	r9, r3
 8001968:	46a2      	mov	sl, r4
 800196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800196c:	4666      	mov	r6, ip
 800196e:	433e      	orrs	r6, r7
 8001970:	d1f7      	bne.n	8001962 <__eqdf2+0x3a>
 8001972:	42ac      	cmp	r4, r5
 8001974:	d1f5      	bne.n	8001962 <__eqdf2+0x3a>
 8001976:	4654      	mov	r4, sl
 8001978:	4314      	orrs	r4, r2
 800197a:	d1f2      	bne.n	8001962 <__eqdf2+0x3a>
 800197c:	2001      	movs	r0, #1
 800197e:	45c8      	cmp	r8, r9
 8001980:	d1ef      	bne.n	8001962 <__eqdf2+0x3a>
 8001982:	4299      	cmp	r1, r3
 8001984:	d007      	beq.n	8001996 <__eqdf2+0x6e>
 8001986:	2d00      	cmp	r5, #0
 8001988:	d1eb      	bne.n	8001962 <__eqdf2+0x3a>
 800198a:	4663      	mov	r3, ip
 800198c:	431f      	orrs	r7, r3
 800198e:	0038      	movs	r0, r7
 8001990:	1e47      	subs	r7, r0, #1
 8001992:	41b8      	sbcs	r0, r7
 8001994:	e7e5      	b.n	8001962 <__eqdf2+0x3a>
 8001996:	2000      	movs	r0, #0
 8001998:	e7e3      	b.n	8001962 <__eqdf2+0x3a>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	000007ff 	.word	0x000007ff

080019a0 <__gedf2>:
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a2:	464f      	mov	r7, r9
 80019a4:	4646      	mov	r6, r8
 80019a6:	46d6      	mov	lr, sl
 80019a8:	004d      	lsls	r5, r1, #1
 80019aa:	b5c0      	push	{r6, r7, lr}
 80019ac:	030e      	lsls	r6, r1, #12
 80019ae:	0fc9      	lsrs	r1, r1, #31
 80019b0:	468a      	mov	sl, r1
 80019b2:	492c      	ldr	r1, [pc, #176]	; (8001a64 <__gedf2+0xc4>)
 80019b4:	031f      	lsls	r7, r3, #12
 80019b6:	005c      	lsls	r4, r3, #1
 80019b8:	4680      	mov	r8, r0
 80019ba:	0b36      	lsrs	r6, r6, #12
 80019bc:	0d6d      	lsrs	r5, r5, #21
 80019be:	4691      	mov	r9, r2
 80019c0:	0b3f      	lsrs	r7, r7, #12
 80019c2:	0d64      	lsrs	r4, r4, #21
 80019c4:	0fdb      	lsrs	r3, r3, #31
 80019c6:	428d      	cmp	r5, r1
 80019c8:	d01e      	beq.n	8001a08 <__gedf2+0x68>
 80019ca:	428c      	cmp	r4, r1
 80019cc:	d016      	beq.n	80019fc <__gedf2+0x5c>
 80019ce:	2d00      	cmp	r5, #0
 80019d0:	d11e      	bne.n	8001a10 <__gedf2+0x70>
 80019d2:	4330      	orrs	r0, r6
 80019d4:	4684      	mov	ip, r0
 80019d6:	2c00      	cmp	r4, #0
 80019d8:	d101      	bne.n	80019de <__gedf2+0x3e>
 80019da:	433a      	orrs	r2, r7
 80019dc:	d023      	beq.n	8001a26 <__gedf2+0x86>
 80019de:	4662      	mov	r2, ip
 80019e0:	2a00      	cmp	r2, #0
 80019e2:	d01a      	beq.n	8001a1a <__gedf2+0x7a>
 80019e4:	459a      	cmp	sl, r3
 80019e6:	d029      	beq.n	8001a3c <__gedf2+0x9c>
 80019e8:	4651      	mov	r1, sl
 80019ea:	2002      	movs	r0, #2
 80019ec:	3901      	subs	r1, #1
 80019ee:	4008      	ands	r0, r1
 80019f0:	3801      	subs	r0, #1
 80019f2:	bc1c      	pop	{r2, r3, r4}
 80019f4:	4690      	mov	r8, r2
 80019f6:	4699      	mov	r9, r3
 80019f8:	46a2      	mov	sl, r4
 80019fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fc:	0039      	movs	r1, r7
 80019fe:	4311      	orrs	r1, r2
 8001a00:	d0e5      	beq.n	80019ce <__gedf2+0x2e>
 8001a02:	2002      	movs	r0, #2
 8001a04:	4240      	negs	r0, r0
 8001a06:	e7f4      	b.n	80019f2 <__gedf2+0x52>
 8001a08:	4330      	orrs	r0, r6
 8001a0a:	d1fa      	bne.n	8001a02 <__gedf2+0x62>
 8001a0c:	42ac      	cmp	r4, r5
 8001a0e:	d00f      	beq.n	8001a30 <__gedf2+0x90>
 8001a10:	2c00      	cmp	r4, #0
 8001a12:	d10f      	bne.n	8001a34 <__gedf2+0x94>
 8001a14:	433a      	orrs	r2, r7
 8001a16:	d0e7      	beq.n	80019e8 <__gedf2+0x48>
 8001a18:	e00c      	b.n	8001a34 <__gedf2+0x94>
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	4393      	bics	r3, r2
 8001a20:	0018      	movs	r0, r3
 8001a22:	3001      	adds	r0, #1
 8001a24:	e7e5      	b.n	80019f2 <__gedf2+0x52>
 8001a26:	4663      	mov	r3, ip
 8001a28:	2000      	movs	r0, #0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0e1      	beq.n	80019f2 <__gedf2+0x52>
 8001a2e:	e7db      	b.n	80019e8 <__gedf2+0x48>
 8001a30:	433a      	orrs	r2, r7
 8001a32:	d1e6      	bne.n	8001a02 <__gedf2+0x62>
 8001a34:	459a      	cmp	sl, r3
 8001a36:	d1d7      	bne.n	80019e8 <__gedf2+0x48>
 8001a38:	42a5      	cmp	r5, r4
 8001a3a:	dcd5      	bgt.n	80019e8 <__gedf2+0x48>
 8001a3c:	42a5      	cmp	r5, r4
 8001a3e:	db05      	blt.n	8001a4c <__gedf2+0xac>
 8001a40:	42be      	cmp	r6, r7
 8001a42:	d8d1      	bhi.n	80019e8 <__gedf2+0x48>
 8001a44:	d008      	beq.n	8001a58 <__gedf2+0xb8>
 8001a46:	2000      	movs	r0, #0
 8001a48:	42be      	cmp	r6, r7
 8001a4a:	d2d2      	bcs.n	80019f2 <__gedf2+0x52>
 8001a4c:	4650      	mov	r0, sl
 8001a4e:	2301      	movs	r3, #1
 8001a50:	3801      	subs	r0, #1
 8001a52:	4398      	bics	r0, r3
 8001a54:	3001      	adds	r0, #1
 8001a56:	e7cc      	b.n	80019f2 <__gedf2+0x52>
 8001a58:	45c8      	cmp	r8, r9
 8001a5a:	d8c5      	bhi.n	80019e8 <__gedf2+0x48>
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	45c8      	cmp	r8, r9
 8001a60:	d3f4      	bcc.n	8001a4c <__gedf2+0xac>
 8001a62:	e7c6      	b.n	80019f2 <__gedf2+0x52>
 8001a64:	000007ff 	.word	0x000007ff

08001a68 <__ledf2>:
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	464f      	mov	r7, r9
 8001a6c:	4646      	mov	r6, r8
 8001a6e:	46d6      	mov	lr, sl
 8001a70:	004d      	lsls	r5, r1, #1
 8001a72:	b5c0      	push	{r6, r7, lr}
 8001a74:	030e      	lsls	r6, r1, #12
 8001a76:	0fc9      	lsrs	r1, r1, #31
 8001a78:	468a      	mov	sl, r1
 8001a7a:	492e      	ldr	r1, [pc, #184]	; (8001b34 <__ledf2+0xcc>)
 8001a7c:	031f      	lsls	r7, r3, #12
 8001a7e:	005c      	lsls	r4, r3, #1
 8001a80:	4680      	mov	r8, r0
 8001a82:	0b36      	lsrs	r6, r6, #12
 8001a84:	0d6d      	lsrs	r5, r5, #21
 8001a86:	4691      	mov	r9, r2
 8001a88:	0b3f      	lsrs	r7, r7, #12
 8001a8a:	0d64      	lsrs	r4, r4, #21
 8001a8c:	0fdb      	lsrs	r3, r3, #31
 8001a8e:	428d      	cmp	r5, r1
 8001a90:	d018      	beq.n	8001ac4 <__ledf2+0x5c>
 8001a92:	428c      	cmp	r4, r1
 8001a94:	d011      	beq.n	8001aba <__ledf2+0x52>
 8001a96:	2d00      	cmp	r5, #0
 8001a98:	d118      	bne.n	8001acc <__ledf2+0x64>
 8001a9a:	4330      	orrs	r0, r6
 8001a9c:	4684      	mov	ip, r0
 8001a9e:	2c00      	cmp	r4, #0
 8001aa0:	d11e      	bne.n	8001ae0 <__ledf2+0x78>
 8001aa2:	433a      	orrs	r2, r7
 8001aa4:	d11c      	bne.n	8001ae0 <__ledf2+0x78>
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d030      	beq.n	8001b10 <__ledf2+0xa8>
 8001aae:	4651      	mov	r1, sl
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	3901      	subs	r1, #1
 8001ab4:	4008      	ands	r0, r1
 8001ab6:	3801      	subs	r0, #1
 8001ab8:	e02a      	b.n	8001b10 <__ledf2+0xa8>
 8001aba:	0039      	movs	r1, r7
 8001abc:	4311      	orrs	r1, r2
 8001abe:	d0ea      	beq.n	8001a96 <__ledf2+0x2e>
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	e025      	b.n	8001b10 <__ledf2+0xa8>
 8001ac4:	4330      	orrs	r0, r6
 8001ac6:	d1fb      	bne.n	8001ac0 <__ledf2+0x58>
 8001ac8:	42ac      	cmp	r4, r5
 8001aca:	d026      	beq.n	8001b1a <__ledf2+0xb2>
 8001acc:	2c00      	cmp	r4, #0
 8001ace:	d126      	bne.n	8001b1e <__ledf2+0xb6>
 8001ad0:	433a      	orrs	r2, r7
 8001ad2:	d124      	bne.n	8001b1e <__ledf2+0xb6>
 8001ad4:	4651      	mov	r1, sl
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	3901      	subs	r1, #1
 8001ada:	4008      	ands	r0, r1
 8001adc:	3801      	subs	r0, #1
 8001ade:	e017      	b.n	8001b10 <__ledf2+0xa8>
 8001ae0:	4662      	mov	r2, ip
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d00f      	beq.n	8001b06 <__ledf2+0x9e>
 8001ae6:	459a      	cmp	sl, r3
 8001ae8:	d1e1      	bne.n	8001aae <__ledf2+0x46>
 8001aea:	42a5      	cmp	r5, r4
 8001aec:	db05      	blt.n	8001afa <__ledf2+0x92>
 8001aee:	42be      	cmp	r6, r7
 8001af0:	d8dd      	bhi.n	8001aae <__ledf2+0x46>
 8001af2:	d019      	beq.n	8001b28 <__ledf2+0xc0>
 8001af4:	2000      	movs	r0, #0
 8001af6:	42be      	cmp	r6, r7
 8001af8:	d20a      	bcs.n	8001b10 <__ledf2+0xa8>
 8001afa:	4650      	mov	r0, sl
 8001afc:	2301      	movs	r3, #1
 8001afe:	3801      	subs	r0, #1
 8001b00:	4398      	bics	r0, r3
 8001b02:	3001      	adds	r0, #1
 8001b04:	e004      	b.n	8001b10 <__ledf2+0xa8>
 8001b06:	2201      	movs	r2, #1
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	3001      	adds	r0, #1
 8001b10:	bc1c      	pop	{r2, r3, r4}
 8001b12:	4690      	mov	r8, r2
 8001b14:	4699      	mov	r9, r3
 8001b16:	46a2      	mov	sl, r4
 8001b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b1a:	433a      	orrs	r2, r7
 8001b1c:	d1d0      	bne.n	8001ac0 <__ledf2+0x58>
 8001b1e:	459a      	cmp	sl, r3
 8001b20:	d1c5      	bne.n	8001aae <__ledf2+0x46>
 8001b22:	42a5      	cmp	r5, r4
 8001b24:	dcc3      	bgt.n	8001aae <__ledf2+0x46>
 8001b26:	e7e0      	b.n	8001aea <__ledf2+0x82>
 8001b28:	45c8      	cmp	r8, r9
 8001b2a:	d8c0      	bhi.n	8001aae <__ledf2+0x46>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	45c8      	cmp	r8, r9
 8001b30:	d3e3      	bcc.n	8001afa <__ledf2+0x92>
 8001b32:	e7ed      	b.n	8001b10 <__ledf2+0xa8>
 8001b34:	000007ff 	.word	0x000007ff

08001b38 <__aeabi_dmul>:
 8001b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3a:	4657      	mov	r7, sl
 8001b3c:	46de      	mov	lr, fp
 8001b3e:	464e      	mov	r6, r9
 8001b40:	4645      	mov	r5, r8
 8001b42:	b5e0      	push	{r5, r6, r7, lr}
 8001b44:	4683      	mov	fp, r0
 8001b46:	0006      	movs	r6, r0
 8001b48:	030f      	lsls	r7, r1, #12
 8001b4a:	0048      	lsls	r0, r1, #1
 8001b4c:	b087      	sub	sp, #28
 8001b4e:	4692      	mov	sl, r2
 8001b50:	001d      	movs	r5, r3
 8001b52:	0b3f      	lsrs	r7, r7, #12
 8001b54:	0d40      	lsrs	r0, r0, #21
 8001b56:	0fcc      	lsrs	r4, r1, #31
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dmul+0x26>
 8001b5c:	e06f      	b.n	8001c3e <__aeabi_dmul+0x106>
 8001b5e:	4bde      	ldr	r3, [pc, #888]	; (8001ed8 <__aeabi_dmul+0x3a0>)
 8001b60:	4298      	cmp	r0, r3
 8001b62:	d038      	beq.n	8001bd6 <__aeabi_dmul+0x9e>
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	00ff      	lsls	r7, r7, #3
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	431f      	orrs	r7, r3
 8001b6c:	0f73      	lsrs	r3, r6, #29
 8001b6e:	433b      	orrs	r3, r7
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	4bda      	ldr	r3, [pc, #872]	; (8001edc <__aeabi_dmul+0x3a4>)
 8001b74:	2700      	movs	r7, #0
 8001b76:	4699      	mov	r9, r3
 8001b78:	2300      	movs	r3, #0
 8001b7a:	469b      	mov	fp, r3
 8001b7c:	00f6      	lsls	r6, r6, #3
 8001b7e:	4481      	add	r9, r0
 8001b80:	032b      	lsls	r3, r5, #12
 8001b82:	0069      	lsls	r1, r5, #1
 8001b84:	0b1b      	lsrs	r3, r3, #12
 8001b86:	4652      	mov	r2, sl
 8001b88:	4698      	mov	r8, r3
 8001b8a:	0d49      	lsrs	r1, r1, #21
 8001b8c:	0fed      	lsrs	r5, r5, #31
 8001b8e:	2900      	cmp	r1, #0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dmul+0x5c>
 8001b92:	e085      	b.n	8001ca0 <__aeabi_dmul+0x168>
 8001b94:	4bd0      	ldr	r3, [pc, #832]	; (8001ed8 <__aeabi_dmul+0x3a0>)
 8001b96:	4299      	cmp	r1, r3
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dmul+0x64>
 8001b9a:	e073      	b.n	8001c84 <__aeabi_dmul+0x14c>
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	00da      	lsls	r2, r3, #3
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	4652      	mov	r2, sl
 8001ba8:	48cc      	ldr	r0, [pc, #816]	; (8001edc <__aeabi_dmul+0x3a4>)
 8001baa:	0f52      	lsrs	r2, r2, #29
 8001bac:	4684      	mov	ip, r0
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	4652      	mov	r2, sl
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	4461      	add	r1, ip
 8001bb6:	00d2      	lsls	r2, r2, #3
 8001bb8:	4489      	add	r9, r1
 8001bba:	0021      	movs	r1, r4
 8001bbc:	4069      	eors	r1, r5
 8001bbe:	9100      	str	r1, [sp, #0]
 8001bc0:	468c      	mov	ip, r1
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4449      	add	r1, r9
 8001bc6:	468a      	mov	sl, r1
 8001bc8:	2f0f      	cmp	r7, #15
 8001bca:	d900      	bls.n	8001bce <__aeabi_dmul+0x96>
 8001bcc:	e090      	b.n	8001cf0 <__aeabi_dmul+0x1b8>
 8001bce:	49c4      	ldr	r1, [pc, #784]	; (8001ee0 <__aeabi_dmul+0x3a8>)
 8001bd0:	00bf      	lsls	r7, r7, #2
 8001bd2:	59cf      	ldr	r7, [r1, r7]
 8001bd4:	46bf      	mov	pc, r7
 8001bd6:	465b      	mov	r3, fp
 8001bd8:	433b      	orrs	r3, r7
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_dmul+0xa8>
 8001bde:	e16a      	b.n	8001eb6 <__aeabi_dmul+0x37e>
 8001be0:	2302      	movs	r3, #2
 8001be2:	2708      	movs	r7, #8
 8001be4:	2600      	movs	r6, #0
 8001be6:	4681      	mov	r9, r0
 8001be8:	469b      	mov	fp, r3
 8001bea:	e7c9      	b.n	8001b80 <__aeabi_dmul+0x48>
 8001bec:	0032      	movs	r2, r6
 8001bee:	4658      	mov	r0, fp
 8001bf0:	9b01      	ldr	r3, [sp, #4]
 8001bf2:	4661      	mov	r1, ip
 8001bf4:	9100      	str	r1, [sp, #0]
 8001bf6:	2802      	cmp	r0, #2
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dmul+0xc4>
 8001bfa:	e075      	b.n	8001ce8 <__aeabi_dmul+0x1b0>
 8001bfc:	2803      	cmp	r0, #3
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dmul+0xca>
 8001c00:	e1fe      	b.n	8002000 <__aeabi_dmul+0x4c8>
 8001c02:	2801      	cmp	r0, #1
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dmul+0xd0>
 8001c06:	e12c      	b.n	8001e62 <__aeabi_dmul+0x32a>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2700      	movs	r7, #0
 8001c0c:	2600      	movs	r6, #0
 8001c0e:	2500      	movs	r5, #0
 8001c10:	033f      	lsls	r7, r7, #12
 8001c12:	0d2a      	lsrs	r2, r5, #20
 8001c14:	0b3f      	lsrs	r7, r7, #12
 8001c16:	48b3      	ldr	r0, [pc, #716]	; (8001ee4 <__aeabi_dmul+0x3ac>)
 8001c18:	0512      	lsls	r2, r2, #20
 8001c1a:	433a      	orrs	r2, r7
 8001c1c:	4002      	ands	r2, r0
 8001c1e:	051b      	lsls	r3, r3, #20
 8001c20:	4313      	orrs	r3, r2
 8001c22:	9a00      	ldr	r2, [sp, #0]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	07d1      	lsls	r1, r2, #31
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	0030      	movs	r0, r6
 8001c2e:	0019      	movs	r1, r3
 8001c30:	b007      	add	sp, #28
 8001c32:	bc3c      	pop	{r2, r3, r4, r5}
 8001c34:	4690      	mov	r8, r2
 8001c36:	4699      	mov	r9, r3
 8001c38:	46a2      	mov	sl, r4
 8001c3a:	46ab      	mov	fp, r5
 8001c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3e:	465b      	mov	r3, fp
 8001c40:	433b      	orrs	r3, r7
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dmul+0x110>
 8001c46:	e12f      	b.n	8001ea8 <__aeabi_dmul+0x370>
 8001c48:	2f00      	cmp	r7, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dmul+0x116>
 8001c4c:	e1a5      	b.n	8001f9a <__aeabi_dmul+0x462>
 8001c4e:	0038      	movs	r0, r7
 8001c50:	f000 fe0a 	bl	8002868 <__clzsi2>
 8001c54:	0003      	movs	r3, r0
 8001c56:	3b0b      	subs	r3, #11
 8001c58:	2b1c      	cmp	r3, #28
 8001c5a:	dd00      	ble.n	8001c5e <__aeabi_dmul+0x126>
 8001c5c:	e196      	b.n	8001f8c <__aeabi_dmul+0x454>
 8001c5e:	221d      	movs	r2, #29
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	465a      	mov	r2, fp
 8001c64:	0001      	movs	r1, r0
 8001c66:	40da      	lsrs	r2, r3
 8001c68:	465e      	mov	r6, fp
 8001c6a:	3908      	subs	r1, #8
 8001c6c:	408f      	lsls	r7, r1
 8001c6e:	0013      	movs	r3, r2
 8001c70:	408e      	lsls	r6, r1
 8001c72:	433b      	orrs	r3, r7
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	4b9c      	ldr	r3, [pc, #624]	; (8001ee8 <__aeabi_dmul+0x3b0>)
 8001c78:	2700      	movs	r7, #0
 8001c7a:	1a1b      	subs	r3, r3, r0
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	2300      	movs	r3, #0
 8001c80:	469b      	mov	fp, r3
 8001c82:	e77d      	b.n	8001b80 <__aeabi_dmul+0x48>
 8001c84:	4641      	mov	r1, r8
 8001c86:	4653      	mov	r3, sl
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	4993      	ldr	r1, [pc, #588]	; (8001ed8 <__aeabi_dmul+0x3a0>)
 8001c8c:	468c      	mov	ip, r1
 8001c8e:	44e1      	add	r9, ip
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d000      	beq.n	8001c96 <__aeabi_dmul+0x15e>
 8001c94:	e11a      	b.n	8001ecc <__aeabi_dmul+0x394>
 8001c96:	2202      	movs	r2, #2
 8001c98:	2002      	movs	r0, #2
 8001c9a:	4317      	orrs	r7, r2
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	e78c      	b.n	8001bba <__aeabi_dmul+0x82>
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dmul+0x16e>
 8001ca4:	e10d      	b.n	8001ec2 <__aeabi_dmul+0x38a>
 8001ca6:	4643      	mov	r3, r8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d100      	bne.n	8001cae <__aeabi_dmul+0x176>
 8001cac:	e181      	b.n	8001fb2 <__aeabi_dmul+0x47a>
 8001cae:	4640      	mov	r0, r8
 8001cb0:	f000 fdda 	bl	8002868 <__clzsi2>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	3a0b      	subs	r2, #11
 8001cb8:	2a1c      	cmp	r2, #28
 8001cba:	dd00      	ble.n	8001cbe <__aeabi_dmul+0x186>
 8001cbc:	e172      	b.n	8001fa4 <__aeabi_dmul+0x46c>
 8001cbe:	0001      	movs	r1, r0
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	3908      	subs	r1, #8
 8001cc4:	408b      	lsls	r3, r1
 8001cc6:	4698      	mov	r8, r3
 8001cc8:	231d      	movs	r3, #29
 8001cca:	1a9a      	subs	r2, r3, r2
 8001ccc:	4653      	mov	r3, sl
 8001cce:	40d3      	lsrs	r3, r2
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	4643      	mov	r3, r8
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	4652      	mov	r2, sl
 8001cd8:	408a      	lsls	r2, r1
 8001cda:	4649      	mov	r1, r9
 8001cdc:	1a08      	subs	r0, r1, r0
 8001cde:	4982      	ldr	r1, [pc, #520]	; (8001ee8 <__aeabi_dmul+0x3b0>)
 8001ce0:	4689      	mov	r9, r1
 8001ce2:	4481      	add	r9, r0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	e768      	b.n	8001bba <__aeabi_dmul+0x82>
 8001ce8:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <__aeabi_dmul+0x3a0>)
 8001cea:	2700      	movs	r7, #0
 8001cec:	2600      	movs	r6, #0
 8001cee:	e78e      	b.n	8001c0e <__aeabi_dmul+0xd6>
 8001cf0:	0c14      	lsrs	r4, r2, #16
 8001cf2:	0412      	lsls	r2, r2, #16
 8001cf4:	0c12      	lsrs	r2, r2, #16
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	0c37      	lsrs	r7, r6, #16
 8001cfa:	0436      	lsls	r6, r6, #16
 8001cfc:	0c35      	lsrs	r5, r6, #16
 8001cfe:	4379      	muls	r1, r7
 8001d00:	0028      	movs	r0, r5
 8001d02:	468c      	mov	ip, r1
 8001d04:	002e      	movs	r6, r5
 8001d06:	4360      	muls	r0, r4
 8001d08:	4460      	add	r0, ip
 8001d0a:	4683      	mov	fp, r0
 8001d0c:	4356      	muls	r6, r2
 8001d0e:	0021      	movs	r1, r4
 8001d10:	0c30      	lsrs	r0, r6, #16
 8001d12:	4680      	mov	r8, r0
 8001d14:	4658      	mov	r0, fp
 8001d16:	4379      	muls	r1, r7
 8001d18:	4440      	add	r0, r8
 8001d1a:	9102      	str	r1, [sp, #8]
 8001d1c:	4584      	cmp	ip, r0
 8001d1e:	d906      	bls.n	8001d2e <__aeabi_dmul+0x1f6>
 8001d20:	4688      	mov	r8, r1
 8001d22:	2180      	movs	r1, #128	; 0x80
 8001d24:	0249      	lsls	r1, r1, #9
 8001d26:	468c      	mov	ip, r1
 8001d28:	44e0      	add	r8, ip
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	9102      	str	r1, [sp, #8]
 8001d2e:	0436      	lsls	r6, r6, #16
 8001d30:	0c01      	lsrs	r1, r0, #16
 8001d32:	0c36      	lsrs	r6, r6, #16
 8001d34:	0400      	lsls	r0, r0, #16
 8001d36:	468b      	mov	fp, r1
 8001d38:	1981      	adds	r1, r0, r6
 8001d3a:	0c1e      	lsrs	r6, r3, #16
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	9103      	str	r1, [sp, #12]
 8001d42:	0019      	movs	r1, r3
 8001d44:	4379      	muls	r1, r7
 8001d46:	468c      	mov	ip, r1
 8001d48:	0028      	movs	r0, r5
 8001d4a:	4375      	muls	r5, r6
 8001d4c:	4465      	add	r5, ip
 8001d4e:	46a8      	mov	r8, r5
 8001d50:	4358      	muls	r0, r3
 8001d52:	0c05      	lsrs	r5, r0, #16
 8001d54:	4445      	add	r5, r8
 8001d56:	4377      	muls	r7, r6
 8001d58:	42a9      	cmp	r1, r5
 8001d5a:	d903      	bls.n	8001d64 <__aeabi_dmul+0x22c>
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	0249      	lsls	r1, r1, #9
 8001d60:	468c      	mov	ip, r1
 8001d62:	4467      	add	r7, ip
 8001d64:	0c29      	lsrs	r1, r5, #16
 8001d66:	468c      	mov	ip, r1
 8001d68:	0039      	movs	r1, r7
 8001d6a:	0400      	lsls	r0, r0, #16
 8001d6c:	0c00      	lsrs	r0, r0, #16
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	182d      	adds	r5, r5, r0
 8001d72:	4461      	add	r1, ip
 8001d74:	44ab      	add	fp, r5
 8001d76:	9105      	str	r1, [sp, #20]
 8001d78:	4659      	mov	r1, fp
 8001d7a:	9104      	str	r1, [sp, #16]
 8001d7c:	9901      	ldr	r1, [sp, #4]
 8001d7e:	040f      	lsls	r7, r1, #16
 8001d80:	0c3f      	lsrs	r7, r7, #16
 8001d82:	0c08      	lsrs	r0, r1, #16
 8001d84:	0039      	movs	r1, r7
 8001d86:	4351      	muls	r1, r2
 8001d88:	4342      	muls	r2, r0
 8001d8a:	4690      	mov	r8, r2
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	468c      	mov	ip, r1
 8001d90:	0c09      	lsrs	r1, r1, #16
 8001d92:	468b      	mov	fp, r1
 8001d94:	4362      	muls	r2, r4
 8001d96:	437c      	muls	r4, r7
 8001d98:	4444      	add	r4, r8
 8001d9a:	445c      	add	r4, fp
 8001d9c:	45a0      	cmp	r8, r4
 8001d9e:	d903      	bls.n	8001da8 <__aeabi_dmul+0x270>
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0249      	lsls	r1, r1, #9
 8001da4:	4688      	mov	r8, r1
 8001da6:	4442      	add	r2, r8
 8001da8:	0c21      	lsrs	r1, r4, #16
 8001daa:	4688      	mov	r8, r1
 8001dac:	4661      	mov	r1, ip
 8001dae:	0409      	lsls	r1, r1, #16
 8001db0:	0c09      	lsrs	r1, r1, #16
 8001db2:	468c      	mov	ip, r1
 8001db4:	0039      	movs	r1, r7
 8001db6:	4359      	muls	r1, r3
 8001db8:	4343      	muls	r3, r0
 8001dba:	4370      	muls	r0, r6
 8001dbc:	437e      	muls	r6, r7
 8001dbe:	0c0f      	lsrs	r7, r1, #16
 8001dc0:	18f6      	adds	r6, r6, r3
 8001dc2:	0424      	lsls	r4, r4, #16
 8001dc4:	19be      	adds	r6, r7, r6
 8001dc6:	4464      	add	r4, ip
 8001dc8:	4442      	add	r2, r8
 8001dca:	468c      	mov	ip, r1
 8001dcc:	42b3      	cmp	r3, r6
 8001dce:	d903      	bls.n	8001dd8 <__aeabi_dmul+0x2a0>
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	025b      	lsls	r3, r3, #9
 8001dd4:	4698      	mov	r8, r3
 8001dd6:	4440      	add	r0, r8
 8001dd8:	9b02      	ldr	r3, [sp, #8]
 8001dda:	4661      	mov	r1, ip
 8001ddc:	4698      	mov	r8, r3
 8001dde:	9b04      	ldr	r3, [sp, #16]
 8001de0:	0437      	lsls	r7, r6, #16
 8001de2:	4443      	add	r3, r8
 8001de4:	469b      	mov	fp, r3
 8001de6:	45ab      	cmp	fp, r5
 8001de8:	41ad      	sbcs	r5, r5
 8001dea:	426b      	negs	r3, r5
 8001dec:	040d      	lsls	r5, r1, #16
 8001dee:	9905      	ldr	r1, [sp, #20]
 8001df0:	0c2d      	lsrs	r5, r5, #16
 8001df2:	468c      	mov	ip, r1
 8001df4:	197f      	adds	r7, r7, r5
 8001df6:	4467      	add	r7, ip
 8001df8:	18fd      	adds	r5, r7, r3
 8001dfa:	46a8      	mov	r8, r5
 8001dfc:	465d      	mov	r5, fp
 8001dfe:	192d      	adds	r5, r5, r4
 8001e00:	42a5      	cmp	r5, r4
 8001e02:	41a4      	sbcs	r4, r4
 8001e04:	4693      	mov	fp, r2
 8001e06:	4264      	negs	r4, r4
 8001e08:	46a4      	mov	ip, r4
 8001e0a:	44c3      	add	fp, r8
 8001e0c:	44dc      	add	ip, fp
 8001e0e:	428f      	cmp	r7, r1
 8001e10:	41bf      	sbcs	r7, r7
 8001e12:	4598      	cmp	r8, r3
 8001e14:	419b      	sbcs	r3, r3
 8001e16:	4593      	cmp	fp, r2
 8001e18:	4192      	sbcs	r2, r2
 8001e1a:	45a4      	cmp	ip, r4
 8001e1c:	41a4      	sbcs	r4, r4
 8001e1e:	425b      	negs	r3, r3
 8001e20:	427f      	negs	r7, r7
 8001e22:	431f      	orrs	r7, r3
 8001e24:	0c36      	lsrs	r6, r6, #16
 8001e26:	4252      	negs	r2, r2
 8001e28:	4264      	negs	r4, r4
 8001e2a:	19bf      	adds	r7, r7, r6
 8001e2c:	4322      	orrs	r2, r4
 8001e2e:	18bf      	adds	r7, r7, r2
 8001e30:	4662      	mov	r2, ip
 8001e32:	1838      	adds	r0, r7, r0
 8001e34:	0243      	lsls	r3, r0, #9
 8001e36:	0dd2      	lsrs	r2, r2, #23
 8001e38:	9903      	ldr	r1, [sp, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	026a      	lsls	r2, r5, #9
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	1e50      	subs	r0, r2, #1
 8001e42:	4182      	sbcs	r2, r0
 8001e44:	4661      	mov	r1, ip
 8001e46:	0ded      	lsrs	r5, r5, #23
 8001e48:	432a      	orrs	r2, r5
 8001e4a:	024e      	lsls	r6, r1, #9
 8001e4c:	4332      	orrs	r2, r6
 8001e4e:	01d9      	lsls	r1, r3, #7
 8001e50:	d400      	bmi.n	8001e54 <__aeabi_dmul+0x31c>
 8001e52:	e0b3      	b.n	8001fbc <__aeabi_dmul+0x484>
 8001e54:	2601      	movs	r6, #1
 8001e56:	0850      	lsrs	r0, r2, #1
 8001e58:	4032      	ands	r2, r6
 8001e5a:	4302      	orrs	r2, r0
 8001e5c:	07de      	lsls	r6, r3, #31
 8001e5e:	4332      	orrs	r2, r6
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	4c22      	ldr	r4, [pc, #136]	; (8001eec <__aeabi_dmul+0x3b4>)
 8001e64:	4454      	add	r4, sl
 8001e66:	2c00      	cmp	r4, #0
 8001e68:	dd62      	ble.n	8001f30 <__aeabi_dmul+0x3f8>
 8001e6a:	0751      	lsls	r1, r2, #29
 8001e6c:	d009      	beq.n	8001e82 <__aeabi_dmul+0x34a>
 8001e6e:	200f      	movs	r0, #15
 8001e70:	4010      	ands	r0, r2
 8001e72:	2804      	cmp	r0, #4
 8001e74:	d005      	beq.n	8001e82 <__aeabi_dmul+0x34a>
 8001e76:	1d10      	adds	r0, r2, #4
 8001e78:	4290      	cmp	r0, r2
 8001e7a:	4192      	sbcs	r2, r2
 8001e7c:	4252      	negs	r2, r2
 8001e7e:	189b      	adds	r3, r3, r2
 8001e80:	0002      	movs	r2, r0
 8001e82:	01d9      	lsls	r1, r3, #7
 8001e84:	d504      	bpl.n	8001e90 <__aeabi_dmul+0x358>
 8001e86:	2480      	movs	r4, #128	; 0x80
 8001e88:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <__aeabi_dmul+0x3b8>)
 8001e8a:	00e4      	lsls	r4, r4, #3
 8001e8c:	4003      	ands	r3, r0
 8001e8e:	4454      	add	r4, sl
 8001e90:	4818      	ldr	r0, [pc, #96]	; (8001ef4 <__aeabi_dmul+0x3bc>)
 8001e92:	4284      	cmp	r4, r0
 8001e94:	dd00      	ble.n	8001e98 <__aeabi_dmul+0x360>
 8001e96:	e727      	b.n	8001ce8 <__aeabi_dmul+0x1b0>
 8001e98:	075e      	lsls	r6, r3, #29
 8001e9a:	025b      	lsls	r3, r3, #9
 8001e9c:	08d2      	lsrs	r2, r2, #3
 8001e9e:	0b1f      	lsrs	r7, r3, #12
 8001ea0:	0563      	lsls	r3, r4, #21
 8001ea2:	4316      	orrs	r6, r2
 8001ea4:	0d5b      	lsrs	r3, r3, #21
 8001ea6:	e6b2      	b.n	8001c0e <__aeabi_dmul+0xd6>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	4699      	mov	r9, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	2704      	movs	r7, #4
 8001eb0:	2600      	movs	r6, #0
 8001eb2:	469b      	mov	fp, r3
 8001eb4:	e664      	b.n	8001b80 <__aeabi_dmul+0x48>
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	9701      	str	r7, [sp, #4]
 8001eba:	4681      	mov	r9, r0
 8001ebc:	270c      	movs	r7, #12
 8001ebe:	469b      	mov	fp, r3
 8001ec0:	e65e      	b.n	8001b80 <__aeabi_dmul+0x48>
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	4317      	orrs	r7, r2
 8001ec8:	2200      	movs	r2, #0
 8001eca:	e676      	b.n	8001bba <__aeabi_dmul+0x82>
 8001ecc:	2303      	movs	r3, #3
 8001ece:	2003      	movs	r0, #3
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	4643      	mov	r3, r8
 8001ed4:	e671      	b.n	8001bba <__aeabi_dmul+0x82>
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	000007ff 	.word	0x000007ff
 8001edc:	fffffc01 	.word	0xfffffc01
 8001ee0:	08008b5c 	.word	0x08008b5c
 8001ee4:	800fffff 	.word	0x800fffff
 8001ee8:	fffffc0d 	.word	0xfffffc0d
 8001eec:	000003ff 	.word	0x000003ff
 8001ef0:	feffffff 	.word	0xfeffffff
 8001ef4:	000007fe 	.word	0x000007fe
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2780      	movs	r7, #128	; 0x80
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	033f      	lsls	r7, r7, #12
 8001f00:	2600      	movs	r6, #0
 8001f02:	4b43      	ldr	r3, [pc, #268]	; (8002010 <__aeabi_dmul+0x4d8>)
 8001f04:	e683      	b.n	8001c0e <__aeabi_dmul+0xd6>
 8001f06:	9b01      	ldr	r3, [sp, #4]
 8001f08:	0032      	movs	r2, r6
 8001f0a:	46a4      	mov	ip, r4
 8001f0c:	4658      	mov	r0, fp
 8001f0e:	e670      	b.n	8001bf2 <__aeabi_dmul+0xba>
 8001f10:	46ac      	mov	ip, r5
 8001f12:	e66e      	b.n	8001bf2 <__aeabi_dmul+0xba>
 8001f14:	2780      	movs	r7, #128	; 0x80
 8001f16:	9901      	ldr	r1, [sp, #4]
 8001f18:	033f      	lsls	r7, r7, #12
 8001f1a:	4239      	tst	r1, r7
 8001f1c:	d02d      	beq.n	8001f7a <__aeabi_dmul+0x442>
 8001f1e:	423b      	tst	r3, r7
 8001f20:	d12b      	bne.n	8001f7a <__aeabi_dmul+0x442>
 8001f22:	431f      	orrs	r7, r3
 8001f24:	033f      	lsls	r7, r7, #12
 8001f26:	0b3f      	lsrs	r7, r7, #12
 8001f28:	9500      	str	r5, [sp, #0]
 8001f2a:	0016      	movs	r6, r2
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <__aeabi_dmul+0x4d8>)
 8001f2e:	e66e      	b.n	8001c0e <__aeabi_dmul+0xd6>
 8001f30:	2501      	movs	r5, #1
 8001f32:	1b2d      	subs	r5, r5, r4
 8001f34:	2d38      	cmp	r5, #56	; 0x38
 8001f36:	dd00      	ble.n	8001f3a <__aeabi_dmul+0x402>
 8001f38:	e666      	b.n	8001c08 <__aeabi_dmul+0xd0>
 8001f3a:	2d1f      	cmp	r5, #31
 8001f3c:	dc40      	bgt.n	8001fc0 <__aeabi_dmul+0x488>
 8001f3e:	4835      	ldr	r0, [pc, #212]	; (8002014 <__aeabi_dmul+0x4dc>)
 8001f40:	001c      	movs	r4, r3
 8001f42:	4450      	add	r0, sl
 8001f44:	0016      	movs	r6, r2
 8001f46:	4082      	lsls	r2, r0
 8001f48:	4084      	lsls	r4, r0
 8001f4a:	40ee      	lsrs	r6, r5
 8001f4c:	1e50      	subs	r0, r2, #1
 8001f4e:	4182      	sbcs	r2, r0
 8001f50:	4334      	orrs	r4, r6
 8001f52:	4314      	orrs	r4, r2
 8001f54:	40eb      	lsrs	r3, r5
 8001f56:	0762      	lsls	r2, r4, #29
 8001f58:	d009      	beq.n	8001f6e <__aeabi_dmul+0x436>
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	4022      	ands	r2, r4
 8001f5e:	2a04      	cmp	r2, #4
 8001f60:	d005      	beq.n	8001f6e <__aeabi_dmul+0x436>
 8001f62:	0022      	movs	r2, r4
 8001f64:	1d14      	adds	r4, r2, #4
 8001f66:	4294      	cmp	r4, r2
 8001f68:	4180      	sbcs	r0, r0
 8001f6a:	4240      	negs	r0, r0
 8001f6c:	181b      	adds	r3, r3, r0
 8001f6e:	021a      	lsls	r2, r3, #8
 8001f70:	d53e      	bpl.n	8001ff0 <__aeabi_dmul+0x4b8>
 8001f72:	2301      	movs	r3, #1
 8001f74:	2700      	movs	r7, #0
 8001f76:	2600      	movs	r6, #0
 8001f78:	e649      	b.n	8001c0e <__aeabi_dmul+0xd6>
 8001f7a:	2780      	movs	r7, #128	; 0x80
 8001f7c:	9b01      	ldr	r3, [sp, #4]
 8001f7e:	033f      	lsls	r7, r7, #12
 8001f80:	431f      	orrs	r7, r3
 8001f82:	033f      	lsls	r7, r7, #12
 8001f84:	0b3f      	lsrs	r7, r7, #12
 8001f86:	9400      	str	r4, [sp, #0]
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <__aeabi_dmul+0x4d8>)
 8001f8a:	e640      	b.n	8001c0e <__aeabi_dmul+0xd6>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	465a      	mov	r2, fp
 8001f90:	3b28      	subs	r3, #40	; 0x28
 8001f92:	409a      	lsls	r2, r3
 8001f94:	2600      	movs	r6, #0
 8001f96:	9201      	str	r2, [sp, #4]
 8001f98:	e66d      	b.n	8001c76 <__aeabi_dmul+0x13e>
 8001f9a:	4658      	mov	r0, fp
 8001f9c:	f000 fc64 	bl	8002868 <__clzsi2>
 8001fa0:	3020      	adds	r0, #32
 8001fa2:	e657      	b.n	8001c54 <__aeabi_dmul+0x11c>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	3b28      	subs	r3, #40	; 0x28
 8001faa:	409a      	lsls	r2, r3
 8001fac:	0013      	movs	r3, r2
 8001fae:	2200      	movs	r2, #0
 8001fb0:	e693      	b.n	8001cda <__aeabi_dmul+0x1a2>
 8001fb2:	4650      	mov	r0, sl
 8001fb4:	f000 fc58 	bl	8002868 <__clzsi2>
 8001fb8:	3020      	adds	r0, #32
 8001fba:	e67b      	b.n	8001cb4 <__aeabi_dmul+0x17c>
 8001fbc:	46ca      	mov	sl, r9
 8001fbe:	e750      	b.n	8001e62 <__aeabi_dmul+0x32a>
 8001fc0:	201f      	movs	r0, #31
 8001fc2:	001e      	movs	r6, r3
 8001fc4:	4240      	negs	r0, r0
 8001fc6:	1b04      	subs	r4, r0, r4
 8001fc8:	40e6      	lsrs	r6, r4
 8001fca:	2d20      	cmp	r5, #32
 8001fcc:	d003      	beq.n	8001fd6 <__aeabi_dmul+0x49e>
 8001fce:	4c12      	ldr	r4, [pc, #72]	; (8002018 <__aeabi_dmul+0x4e0>)
 8001fd0:	4454      	add	r4, sl
 8001fd2:	40a3      	lsls	r3, r4
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	1e50      	subs	r0, r2, #1
 8001fd8:	4182      	sbcs	r2, r0
 8001fda:	4332      	orrs	r2, r6
 8001fdc:	2607      	movs	r6, #7
 8001fde:	2700      	movs	r7, #0
 8001fe0:	4016      	ands	r6, r2
 8001fe2:	d009      	beq.n	8001ff8 <__aeabi_dmul+0x4c0>
 8001fe4:	200f      	movs	r0, #15
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	4010      	ands	r0, r2
 8001fea:	0014      	movs	r4, r2
 8001fec:	2804      	cmp	r0, #4
 8001fee:	d1b9      	bne.n	8001f64 <__aeabi_dmul+0x42c>
 8001ff0:	0022      	movs	r2, r4
 8001ff2:	075e      	lsls	r6, r3, #29
 8001ff4:	025b      	lsls	r3, r3, #9
 8001ff6:	0b1f      	lsrs	r7, r3, #12
 8001ff8:	08d2      	lsrs	r2, r2, #3
 8001ffa:	4316      	orrs	r6, r2
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e606      	b.n	8001c0e <__aeabi_dmul+0xd6>
 8002000:	2780      	movs	r7, #128	; 0x80
 8002002:	033f      	lsls	r7, r7, #12
 8002004:	431f      	orrs	r7, r3
 8002006:	033f      	lsls	r7, r7, #12
 8002008:	0b3f      	lsrs	r7, r7, #12
 800200a:	0016      	movs	r6, r2
 800200c:	4b00      	ldr	r3, [pc, #0]	; (8002010 <__aeabi_dmul+0x4d8>)
 800200e:	e5fe      	b.n	8001c0e <__aeabi_dmul+0xd6>
 8002010:	000007ff 	.word	0x000007ff
 8002014:	0000041e 	.word	0x0000041e
 8002018:	0000043e 	.word	0x0000043e

0800201c <__aeabi_dsub>:
 800201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201e:	4657      	mov	r7, sl
 8002020:	464e      	mov	r6, r9
 8002022:	4645      	mov	r5, r8
 8002024:	46de      	mov	lr, fp
 8002026:	000c      	movs	r4, r1
 8002028:	0309      	lsls	r1, r1, #12
 800202a:	b5e0      	push	{r5, r6, r7, lr}
 800202c:	0a49      	lsrs	r1, r1, #9
 800202e:	0f46      	lsrs	r6, r0, #29
 8002030:	005f      	lsls	r7, r3, #1
 8002032:	4331      	orrs	r1, r6
 8002034:	031e      	lsls	r6, r3, #12
 8002036:	0fdb      	lsrs	r3, r3, #31
 8002038:	0a76      	lsrs	r6, r6, #9
 800203a:	469b      	mov	fp, r3
 800203c:	0f53      	lsrs	r3, r2, #29
 800203e:	4333      	orrs	r3, r6
 8002040:	4ec8      	ldr	r6, [pc, #800]	; (8002364 <__aeabi_dsub+0x348>)
 8002042:	0065      	lsls	r5, r4, #1
 8002044:	00c0      	lsls	r0, r0, #3
 8002046:	0fe4      	lsrs	r4, r4, #31
 8002048:	00d2      	lsls	r2, r2, #3
 800204a:	0d6d      	lsrs	r5, r5, #21
 800204c:	46a2      	mov	sl, r4
 800204e:	4681      	mov	r9, r0
 8002050:	0d7f      	lsrs	r7, r7, #21
 8002052:	469c      	mov	ip, r3
 8002054:	4690      	mov	r8, r2
 8002056:	42b7      	cmp	r7, r6
 8002058:	d100      	bne.n	800205c <__aeabi_dsub+0x40>
 800205a:	e0b9      	b.n	80021d0 <__aeabi_dsub+0x1b4>
 800205c:	465b      	mov	r3, fp
 800205e:	2601      	movs	r6, #1
 8002060:	4073      	eors	r3, r6
 8002062:	469b      	mov	fp, r3
 8002064:	1bee      	subs	r6, r5, r7
 8002066:	45a3      	cmp	fp, r4
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0x50>
 800206a:	e083      	b.n	8002174 <__aeabi_dsub+0x158>
 800206c:	2e00      	cmp	r6, #0
 800206e:	dd63      	ble.n	8002138 <__aeabi_dsub+0x11c>
 8002070:	2f00      	cmp	r7, #0
 8002072:	d000      	beq.n	8002076 <__aeabi_dsub+0x5a>
 8002074:	e0b1      	b.n	80021da <__aeabi_dsub+0x1be>
 8002076:	4663      	mov	r3, ip
 8002078:	4313      	orrs	r3, r2
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x62>
 800207c:	e123      	b.n	80022c6 <__aeabi_dsub+0x2aa>
 800207e:	1e73      	subs	r3, r6, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d000      	beq.n	8002086 <__aeabi_dsub+0x6a>
 8002084:	e1ba      	b.n	80023fc <__aeabi_dsub+0x3e0>
 8002086:	1a86      	subs	r6, r0, r2
 8002088:	4663      	mov	r3, ip
 800208a:	42b0      	cmp	r0, r6
 800208c:	4180      	sbcs	r0, r0
 800208e:	2501      	movs	r5, #1
 8002090:	1ac9      	subs	r1, r1, r3
 8002092:	4240      	negs	r0, r0
 8002094:	1a09      	subs	r1, r1, r0
 8002096:	020b      	lsls	r3, r1, #8
 8002098:	d400      	bmi.n	800209c <__aeabi_dsub+0x80>
 800209a:	e147      	b.n	800232c <__aeabi_dsub+0x310>
 800209c:	0249      	lsls	r1, r1, #9
 800209e:	0a4b      	lsrs	r3, r1, #9
 80020a0:	4698      	mov	r8, r3
 80020a2:	4643      	mov	r3, r8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d100      	bne.n	80020aa <__aeabi_dsub+0x8e>
 80020a8:	e189      	b.n	80023be <__aeabi_dsub+0x3a2>
 80020aa:	4640      	mov	r0, r8
 80020ac:	f000 fbdc 	bl	8002868 <__clzsi2>
 80020b0:	0003      	movs	r3, r0
 80020b2:	3b08      	subs	r3, #8
 80020b4:	2b1f      	cmp	r3, #31
 80020b6:	dd00      	ble.n	80020ba <__aeabi_dsub+0x9e>
 80020b8:	e17c      	b.n	80023b4 <__aeabi_dsub+0x398>
 80020ba:	2220      	movs	r2, #32
 80020bc:	0030      	movs	r0, r6
 80020be:	1ad2      	subs	r2, r2, r3
 80020c0:	4641      	mov	r1, r8
 80020c2:	40d0      	lsrs	r0, r2
 80020c4:	4099      	lsls	r1, r3
 80020c6:	0002      	movs	r2, r0
 80020c8:	409e      	lsls	r6, r3
 80020ca:	430a      	orrs	r2, r1
 80020cc:	429d      	cmp	r5, r3
 80020ce:	dd00      	ble.n	80020d2 <__aeabi_dsub+0xb6>
 80020d0:	e16a      	b.n	80023a8 <__aeabi_dsub+0x38c>
 80020d2:	1b5d      	subs	r5, r3, r5
 80020d4:	1c6b      	adds	r3, r5, #1
 80020d6:	2b1f      	cmp	r3, #31
 80020d8:	dd00      	ble.n	80020dc <__aeabi_dsub+0xc0>
 80020da:	e194      	b.n	8002406 <__aeabi_dsub+0x3ea>
 80020dc:	2120      	movs	r1, #32
 80020de:	0010      	movs	r0, r2
 80020e0:	0035      	movs	r5, r6
 80020e2:	1ac9      	subs	r1, r1, r3
 80020e4:	408e      	lsls	r6, r1
 80020e6:	40da      	lsrs	r2, r3
 80020e8:	4088      	lsls	r0, r1
 80020ea:	40dd      	lsrs	r5, r3
 80020ec:	1e71      	subs	r1, r6, #1
 80020ee:	418e      	sbcs	r6, r1
 80020f0:	0011      	movs	r1, r2
 80020f2:	2207      	movs	r2, #7
 80020f4:	4328      	orrs	r0, r5
 80020f6:	2500      	movs	r5, #0
 80020f8:	4306      	orrs	r6, r0
 80020fa:	4032      	ands	r2, r6
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	d009      	beq.n	8002114 <__aeabi_dsub+0xf8>
 8002100:	230f      	movs	r3, #15
 8002102:	4033      	ands	r3, r6
 8002104:	2b04      	cmp	r3, #4
 8002106:	d005      	beq.n	8002114 <__aeabi_dsub+0xf8>
 8002108:	1d33      	adds	r3, r6, #4
 800210a:	42b3      	cmp	r3, r6
 800210c:	41b6      	sbcs	r6, r6
 800210e:	4276      	negs	r6, r6
 8002110:	1989      	adds	r1, r1, r6
 8002112:	001e      	movs	r6, r3
 8002114:	020b      	lsls	r3, r1, #8
 8002116:	d400      	bmi.n	800211a <__aeabi_dsub+0xfe>
 8002118:	e23d      	b.n	8002596 <__aeabi_dsub+0x57a>
 800211a:	1c6a      	adds	r2, r5, #1
 800211c:	4b91      	ldr	r3, [pc, #580]	; (8002364 <__aeabi_dsub+0x348>)
 800211e:	0555      	lsls	r5, r2, #21
 8002120:	0d6d      	lsrs	r5, r5, #21
 8002122:	429a      	cmp	r2, r3
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x10c>
 8002126:	e119      	b.n	800235c <__aeabi_dsub+0x340>
 8002128:	4a8f      	ldr	r2, [pc, #572]	; (8002368 <__aeabi_dsub+0x34c>)
 800212a:	08f6      	lsrs	r6, r6, #3
 800212c:	400a      	ands	r2, r1
 800212e:	0757      	lsls	r7, r2, #29
 8002130:	0252      	lsls	r2, r2, #9
 8002132:	4337      	orrs	r7, r6
 8002134:	0b12      	lsrs	r2, r2, #12
 8002136:	e09b      	b.n	8002270 <__aeabi_dsub+0x254>
 8002138:	2e00      	cmp	r6, #0
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x122>
 800213c:	e0c5      	b.n	80022ca <__aeabi_dsub+0x2ae>
 800213e:	1c6e      	adds	r6, r5, #1
 8002140:	0576      	lsls	r6, r6, #21
 8002142:	0d76      	lsrs	r6, r6, #21
 8002144:	2e01      	cmp	r6, #1
 8002146:	dc00      	bgt.n	800214a <__aeabi_dsub+0x12e>
 8002148:	e148      	b.n	80023dc <__aeabi_dsub+0x3c0>
 800214a:	4667      	mov	r7, ip
 800214c:	1a86      	subs	r6, r0, r2
 800214e:	1bcb      	subs	r3, r1, r7
 8002150:	42b0      	cmp	r0, r6
 8002152:	41bf      	sbcs	r7, r7
 8002154:	427f      	negs	r7, r7
 8002156:	46b8      	mov	r8, r7
 8002158:	001f      	movs	r7, r3
 800215a:	4643      	mov	r3, r8
 800215c:	1aff      	subs	r7, r7, r3
 800215e:	003b      	movs	r3, r7
 8002160:	46b8      	mov	r8, r7
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	d500      	bpl.n	8002168 <__aeabi_dsub+0x14c>
 8002166:	e15f      	b.n	8002428 <__aeabi_dsub+0x40c>
 8002168:	4337      	orrs	r7, r6
 800216a:	d19a      	bne.n	80020a2 <__aeabi_dsub+0x86>
 800216c:	2200      	movs	r2, #0
 800216e:	2400      	movs	r4, #0
 8002170:	2500      	movs	r5, #0
 8002172:	e079      	b.n	8002268 <__aeabi_dsub+0x24c>
 8002174:	2e00      	cmp	r6, #0
 8002176:	dc00      	bgt.n	800217a <__aeabi_dsub+0x15e>
 8002178:	e0fa      	b.n	8002370 <__aeabi_dsub+0x354>
 800217a:	2f00      	cmp	r7, #0
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x164>
 800217e:	e08d      	b.n	800229c <__aeabi_dsub+0x280>
 8002180:	4b78      	ldr	r3, [pc, #480]	; (8002364 <__aeabi_dsub+0x348>)
 8002182:	429d      	cmp	r5, r3
 8002184:	d067      	beq.n	8002256 <__aeabi_dsub+0x23a>
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	4667      	mov	r7, ip
 800218a:	041b      	lsls	r3, r3, #16
 800218c:	431f      	orrs	r7, r3
 800218e:	46bc      	mov	ip, r7
 8002190:	2e38      	cmp	r6, #56	; 0x38
 8002192:	dc00      	bgt.n	8002196 <__aeabi_dsub+0x17a>
 8002194:	e152      	b.n	800243c <__aeabi_dsub+0x420>
 8002196:	4663      	mov	r3, ip
 8002198:	4313      	orrs	r3, r2
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	4193      	sbcs	r3, r2
 800219e:	181e      	adds	r6, r3, r0
 80021a0:	4286      	cmp	r6, r0
 80021a2:	4180      	sbcs	r0, r0
 80021a4:	4240      	negs	r0, r0
 80021a6:	1809      	adds	r1, r1, r0
 80021a8:	020b      	lsls	r3, r1, #8
 80021aa:	d400      	bmi.n	80021ae <__aeabi_dsub+0x192>
 80021ac:	e0be      	b.n	800232c <__aeabi_dsub+0x310>
 80021ae:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <__aeabi_dsub+0x348>)
 80021b0:	3501      	adds	r5, #1
 80021b2:	429d      	cmp	r5, r3
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x19c>
 80021b6:	e0d2      	b.n	800235e <__aeabi_dsub+0x342>
 80021b8:	4a6b      	ldr	r2, [pc, #428]	; (8002368 <__aeabi_dsub+0x34c>)
 80021ba:	0873      	lsrs	r3, r6, #1
 80021bc:	400a      	ands	r2, r1
 80021be:	2101      	movs	r1, #1
 80021c0:	400e      	ands	r6, r1
 80021c2:	431e      	orrs	r6, r3
 80021c4:	0851      	lsrs	r1, r2, #1
 80021c6:	07d3      	lsls	r3, r2, #31
 80021c8:	2207      	movs	r2, #7
 80021ca:	431e      	orrs	r6, r3
 80021cc:	4032      	ands	r2, r6
 80021ce:	e795      	b.n	80020fc <__aeabi_dsub+0xe0>
 80021d0:	001e      	movs	r6, r3
 80021d2:	4316      	orrs	r6, r2
 80021d4:	d000      	beq.n	80021d8 <__aeabi_dsub+0x1bc>
 80021d6:	e745      	b.n	8002064 <__aeabi_dsub+0x48>
 80021d8:	e740      	b.n	800205c <__aeabi_dsub+0x40>
 80021da:	4b62      	ldr	r3, [pc, #392]	; (8002364 <__aeabi_dsub+0x348>)
 80021dc:	429d      	cmp	r5, r3
 80021de:	d03a      	beq.n	8002256 <__aeabi_dsub+0x23a>
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	4667      	mov	r7, ip
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	431f      	orrs	r7, r3
 80021e8:	46bc      	mov	ip, r7
 80021ea:	2e38      	cmp	r6, #56	; 0x38
 80021ec:	dd00      	ble.n	80021f0 <__aeabi_dsub+0x1d4>
 80021ee:	e0eb      	b.n	80023c8 <__aeabi_dsub+0x3ac>
 80021f0:	2e1f      	cmp	r6, #31
 80021f2:	dc00      	bgt.n	80021f6 <__aeabi_dsub+0x1da>
 80021f4:	e13a      	b.n	800246c <__aeabi_dsub+0x450>
 80021f6:	0033      	movs	r3, r6
 80021f8:	4667      	mov	r7, ip
 80021fa:	3b20      	subs	r3, #32
 80021fc:	40df      	lsrs	r7, r3
 80021fe:	003b      	movs	r3, r7
 8002200:	2e20      	cmp	r6, #32
 8002202:	d005      	beq.n	8002210 <__aeabi_dsub+0x1f4>
 8002204:	2740      	movs	r7, #64	; 0x40
 8002206:	1bbf      	subs	r7, r7, r6
 8002208:	4666      	mov	r6, ip
 800220a:	40be      	lsls	r6, r7
 800220c:	4332      	orrs	r2, r6
 800220e:	4690      	mov	r8, r2
 8002210:	4646      	mov	r6, r8
 8002212:	1e72      	subs	r2, r6, #1
 8002214:	4196      	sbcs	r6, r2
 8002216:	4333      	orrs	r3, r6
 8002218:	e0da      	b.n	80023d0 <__aeabi_dsub+0x3b4>
 800221a:	2b00      	cmp	r3, #0
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x204>
 800221e:	e214      	b.n	800264a <__aeabi_dsub+0x62e>
 8002220:	4663      	mov	r3, ip
 8002222:	4313      	orrs	r3, r2
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x20c>
 8002226:	e168      	b.n	80024fa <__aeabi_dsub+0x4de>
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	074e      	lsls	r6, r1, #29
 800222c:	08c0      	lsrs	r0, r0, #3
 800222e:	08c9      	lsrs	r1, r1, #3
 8002230:	031b      	lsls	r3, r3, #12
 8002232:	4306      	orrs	r6, r0
 8002234:	4219      	tst	r1, r3
 8002236:	d008      	beq.n	800224a <__aeabi_dsub+0x22e>
 8002238:	4660      	mov	r0, ip
 800223a:	08c0      	lsrs	r0, r0, #3
 800223c:	4218      	tst	r0, r3
 800223e:	d104      	bne.n	800224a <__aeabi_dsub+0x22e>
 8002240:	4663      	mov	r3, ip
 8002242:	0001      	movs	r1, r0
 8002244:	08d2      	lsrs	r2, r2, #3
 8002246:	075e      	lsls	r6, r3, #29
 8002248:	4316      	orrs	r6, r2
 800224a:	00f3      	lsls	r3, r6, #3
 800224c:	4699      	mov	r9, r3
 800224e:	00c9      	lsls	r1, r1, #3
 8002250:	0f72      	lsrs	r2, r6, #29
 8002252:	4d44      	ldr	r5, [pc, #272]	; (8002364 <__aeabi_dsub+0x348>)
 8002254:	4311      	orrs	r1, r2
 8002256:	464b      	mov	r3, r9
 8002258:	08de      	lsrs	r6, r3, #3
 800225a:	4b42      	ldr	r3, [pc, #264]	; (8002364 <__aeabi_dsub+0x348>)
 800225c:	074f      	lsls	r7, r1, #29
 800225e:	4337      	orrs	r7, r6
 8002260:	08ca      	lsrs	r2, r1, #3
 8002262:	429d      	cmp	r5, r3
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x24c>
 8002266:	e06e      	b.n	8002346 <__aeabi_dsub+0x32a>
 8002268:	0312      	lsls	r2, r2, #12
 800226a:	056d      	lsls	r5, r5, #21
 800226c:	0b12      	lsrs	r2, r2, #12
 800226e:	0d6d      	lsrs	r5, r5, #21
 8002270:	2100      	movs	r1, #0
 8002272:	0312      	lsls	r2, r2, #12
 8002274:	0b13      	lsrs	r3, r2, #12
 8002276:	0d0a      	lsrs	r2, r1, #20
 8002278:	0512      	lsls	r2, r2, #20
 800227a:	431a      	orrs	r2, r3
 800227c:	4b3b      	ldr	r3, [pc, #236]	; (800236c <__aeabi_dsub+0x350>)
 800227e:	052d      	lsls	r5, r5, #20
 8002280:	4013      	ands	r3, r2
 8002282:	432b      	orrs	r3, r5
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	07e4      	lsls	r4, r4, #31
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	4323      	orrs	r3, r4
 800228c:	0038      	movs	r0, r7
 800228e:	0019      	movs	r1, r3
 8002290:	bc3c      	pop	{r2, r3, r4, r5}
 8002292:	4690      	mov	r8, r2
 8002294:	4699      	mov	r9, r3
 8002296:	46a2      	mov	sl, r4
 8002298:	46ab      	mov	fp, r5
 800229a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800229c:	4663      	mov	r3, ip
 800229e:	4313      	orrs	r3, r2
 80022a0:	d011      	beq.n	80022c6 <__aeabi_dsub+0x2aa>
 80022a2:	1e73      	subs	r3, r6, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d000      	beq.n	80022aa <__aeabi_dsub+0x28e>
 80022a8:	e107      	b.n	80024ba <__aeabi_dsub+0x49e>
 80022aa:	1886      	adds	r6, r0, r2
 80022ac:	4286      	cmp	r6, r0
 80022ae:	4180      	sbcs	r0, r0
 80022b0:	4461      	add	r1, ip
 80022b2:	4240      	negs	r0, r0
 80022b4:	1809      	adds	r1, r1, r0
 80022b6:	2501      	movs	r5, #1
 80022b8:	020b      	lsls	r3, r1, #8
 80022ba:	d537      	bpl.n	800232c <__aeabi_dsub+0x310>
 80022bc:	2502      	movs	r5, #2
 80022be:	e77b      	b.n	80021b8 <__aeabi_dsub+0x19c>
 80022c0:	003e      	movs	r6, r7
 80022c2:	4661      	mov	r1, ip
 80022c4:	4691      	mov	r9, r2
 80022c6:	0035      	movs	r5, r6
 80022c8:	e7c5      	b.n	8002256 <__aeabi_dsub+0x23a>
 80022ca:	465c      	mov	r4, fp
 80022cc:	2d00      	cmp	r5, #0
 80022ce:	d000      	beq.n	80022d2 <__aeabi_dsub+0x2b6>
 80022d0:	e0e1      	b.n	8002496 <__aeabi_dsub+0x47a>
 80022d2:	000b      	movs	r3, r1
 80022d4:	4303      	orrs	r3, r0
 80022d6:	d0f3      	beq.n	80022c0 <__aeabi_dsub+0x2a4>
 80022d8:	1c73      	adds	r3, r6, #1
 80022da:	d100      	bne.n	80022de <__aeabi_dsub+0x2c2>
 80022dc:	e1ac      	b.n	8002638 <__aeabi_dsub+0x61c>
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <__aeabi_dsub+0x348>)
 80022e0:	429f      	cmp	r7, r3
 80022e2:	d100      	bne.n	80022e6 <__aeabi_dsub+0x2ca>
 80022e4:	e13a      	b.n	800255c <__aeabi_dsub+0x540>
 80022e6:	43f3      	mvns	r3, r6
 80022e8:	2b38      	cmp	r3, #56	; 0x38
 80022ea:	dd00      	ble.n	80022ee <__aeabi_dsub+0x2d2>
 80022ec:	e16f      	b.n	80025ce <__aeabi_dsub+0x5b2>
 80022ee:	2b1f      	cmp	r3, #31
 80022f0:	dd00      	ble.n	80022f4 <__aeabi_dsub+0x2d8>
 80022f2:	e18c      	b.n	800260e <__aeabi_dsub+0x5f2>
 80022f4:	2520      	movs	r5, #32
 80022f6:	000e      	movs	r6, r1
 80022f8:	1aed      	subs	r5, r5, r3
 80022fa:	40ae      	lsls	r6, r5
 80022fc:	46b0      	mov	r8, r6
 80022fe:	0006      	movs	r6, r0
 8002300:	46aa      	mov	sl, r5
 8002302:	40de      	lsrs	r6, r3
 8002304:	4645      	mov	r5, r8
 8002306:	4335      	orrs	r5, r6
 8002308:	002e      	movs	r6, r5
 800230a:	4655      	mov	r5, sl
 800230c:	40d9      	lsrs	r1, r3
 800230e:	40a8      	lsls	r0, r5
 8002310:	4663      	mov	r3, ip
 8002312:	1e45      	subs	r5, r0, #1
 8002314:	41a8      	sbcs	r0, r5
 8002316:	1a5b      	subs	r3, r3, r1
 8002318:	469c      	mov	ip, r3
 800231a:	4330      	orrs	r0, r6
 800231c:	1a16      	subs	r6, r2, r0
 800231e:	42b2      	cmp	r2, r6
 8002320:	4192      	sbcs	r2, r2
 8002322:	4663      	mov	r3, ip
 8002324:	4252      	negs	r2, r2
 8002326:	1a99      	subs	r1, r3, r2
 8002328:	003d      	movs	r5, r7
 800232a:	e6b4      	b.n	8002096 <__aeabi_dsub+0x7a>
 800232c:	2207      	movs	r2, #7
 800232e:	4032      	ands	r2, r6
 8002330:	2a00      	cmp	r2, #0
 8002332:	d000      	beq.n	8002336 <__aeabi_dsub+0x31a>
 8002334:	e6e4      	b.n	8002100 <__aeabi_dsub+0xe4>
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <__aeabi_dsub+0x348>)
 8002338:	08f6      	lsrs	r6, r6, #3
 800233a:	074f      	lsls	r7, r1, #29
 800233c:	4337      	orrs	r7, r6
 800233e:	08ca      	lsrs	r2, r1, #3
 8002340:	429d      	cmp	r5, r3
 8002342:	d000      	beq.n	8002346 <__aeabi_dsub+0x32a>
 8002344:	e790      	b.n	8002268 <__aeabi_dsub+0x24c>
 8002346:	003b      	movs	r3, r7
 8002348:	4313      	orrs	r3, r2
 800234a:	d100      	bne.n	800234e <__aeabi_dsub+0x332>
 800234c:	e1a6      	b.n	800269c <__aeabi_dsub+0x680>
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	031b      	lsls	r3, r3, #12
 8002352:	431a      	orrs	r2, r3
 8002354:	0312      	lsls	r2, r2, #12
 8002356:	0b12      	lsrs	r2, r2, #12
 8002358:	4d02      	ldr	r5, [pc, #8]	; (8002364 <__aeabi_dsub+0x348>)
 800235a:	e789      	b.n	8002270 <__aeabi_dsub+0x254>
 800235c:	0015      	movs	r5, r2
 800235e:	2200      	movs	r2, #0
 8002360:	2700      	movs	r7, #0
 8002362:	e785      	b.n	8002270 <__aeabi_dsub+0x254>
 8002364:	000007ff 	.word	0x000007ff
 8002368:	ff7fffff 	.word	0xff7fffff
 800236c:	800fffff 	.word	0x800fffff
 8002370:	2e00      	cmp	r6, #0
 8002372:	d000      	beq.n	8002376 <__aeabi_dsub+0x35a>
 8002374:	e0c7      	b.n	8002506 <__aeabi_dsub+0x4ea>
 8002376:	1c6b      	adds	r3, r5, #1
 8002378:	055e      	lsls	r6, r3, #21
 800237a:	0d76      	lsrs	r6, r6, #21
 800237c:	2e01      	cmp	r6, #1
 800237e:	dc00      	bgt.n	8002382 <__aeabi_dsub+0x366>
 8002380:	e0f0      	b.n	8002564 <__aeabi_dsub+0x548>
 8002382:	4dc8      	ldr	r5, [pc, #800]	; (80026a4 <__aeabi_dsub+0x688>)
 8002384:	42ab      	cmp	r3, r5
 8002386:	d100      	bne.n	800238a <__aeabi_dsub+0x36e>
 8002388:	e0b9      	b.n	80024fe <__aeabi_dsub+0x4e2>
 800238a:	1885      	adds	r5, r0, r2
 800238c:	000a      	movs	r2, r1
 800238e:	4285      	cmp	r5, r0
 8002390:	4189      	sbcs	r1, r1
 8002392:	4462      	add	r2, ip
 8002394:	4249      	negs	r1, r1
 8002396:	1851      	adds	r1, r2, r1
 8002398:	2207      	movs	r2, #7
 800239a:	07ce      	lsls	r6, r1, #31
 800239c:	086d      	lsrs	r5, r5, #1
 800239e:	432e      	orrs	r6, r5
 80023a0:	0849      	lsrs	r1, r1, #1
 80023a2:	4032      	ands	r2, r6
 80023a4:	001d      	movs	r5, r3
 80023a6:	e6a9      	b.n	80020fc <__aeabi_dsub+0xe0>
 80023a8:	49bf      	ldr	r1, [pc, #764]	; (80026a8 <__aeabi_dsub+0x68c>)
 80023aa:	1aed      	subs	r5, r5, r3
 80023ac:	4011      	ands	r1, r2
 80023ae:	2207      	movs	r2, #7
 80023b0:	4032      	ands	r2, r6
 80023b2:	e6a3      	b.n	80020fc <__aeabi_dsub+0xe0>
 80023b4:	0032      	movs	r2, r6
 80023b6:	3828      	subs	r0, #40	; 0x28
 80023b8:	4082      	lsls	r2, r0
 80023ba:	2600      	movs	r6, #0
 80023bc:	e686      	b.n	80020cc <__aeabi_dsub+0xb0>
 80023be:	0030      	movs	r0, r6
 80023c0:	f000 fa52 	bl	8002868 <__clzsi2>
 80023c4:	3020      	adds	r0, #32
 80023c6:	e673      	b.n	80020b0 <__aeabi_dsub+0x94>
 80023c8:	4663      	mov	r3, ip
 80023ca:	4313      	orrs	r3, r2
 80023cc:	1e5a      	subs	r2, r3, #1
 80023ce:	4193      	sbcs	r3, r2
 80023d0:	1ac6      	subs	r6, r0, r3
 80023d2:	42b0      	cmp	r0, r6
 80023d4:	4180      	sbcs	r0, r0
 80023d6:	4240      	negs	r0, r0
 80023d8:	1a09      	subs	r1, r1, r0
 80023da:	e65c      	b.n	8002096 <__aeabi_dsub+0x7a>
 80023dc:	000e      	movs	r6, r1
 80023de:	4667      	mov	r7, ip
 80023e0:	4306      	orrs	r6, r0
 80023e2:	4317      	orrs	r7, r2
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	d15e      	bne.n	80024a6 <__aeabi_dsub+0x48a>
 80023e8:	2e00      	cmp	r6, #0
 80023ea:	d000      	beq.n	80023ee <__aeabi_dsub+0x3d2>
 80023ec:	e0f3      	b.n	80025d6 <__aeabi_dsub+0x5ba>
 80023ee:	2f00      	cmp	r7, #0
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dsub+0x3d8>
 80023f2:	e11e      	b.n	8002632 <__aeabi_dsub+0x616>
 80023f4:	465c      	mov	r4, fp
 80023f6:	4661      	mov	r1, ip
 80023f8:	4691      	mov	r9, r2
 80023fa:	e72c      	b.n	8002256 <__aeabi_dsub+0x23a>
 80023fc:	4fa9      	ldr	r7, [pc, #676]	; (80026a4 <__aeabi_dsub+0x688>)
 80023fe:	42be      	cmp	r6, r7
 8002400:	d07b      	beq.n	80024fa <__aeabi_dsub+0x4de>
 8002402:	001e      	movs	r6, r3
 8002404:	e6f1      	b.n	80021ea <__aeabi_dsub+0x1ce>
 8002406:	0010      	movs	r0, r2
 8002408:	3d1f      	subs	r5, #31
 800240a:	40e8      	lsrs	r0, r5
 800240c:	2b20      	cmp	r3, #32
 800240e:	d003      	beq.n	8002418 <__aeabi_dsub+0x3fc>
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	1acb      	subs	r3, r1, r3
 8002414:	409a      	lsls	r2, r3
 8002416:	4316      	orrs	r6, r2
 8002418:	1e73      	subs	r3, r6, #1
 800241a:	419e      	sbcs	r6, r3
 800241c:	2207      	movs	r2, #7
 800241e:	4306      	orrs	r6, r0
 8002420:	4032      	ands	r2, r6
 8002422:	2100      	movs	r1, #0
 8002424:	2500      	movs	r5, #0
 8002426:	e783      	b.n	8002330 <__aeabi_dsub+0x314>
 8002428:	1a16      	subs	r6, r2, r0
 800242a:	4663      	mov	r3, ip
 800242c:	42b2      	cmp	r2, r6
 800242e:	4180      	sbcs	r0, r0
 8002430:	1a59      	subs	r1, r3, r1
 8002432:	4240      	negs	r0, r0
 8002434:	1a0b      	subs	r3, r1, r0
 8002436:	4698      	mov	r8, r3
 8002438:	465c      	mov	r4, fp
 800243a:	e632      	b.n	80020a2 <__aeabi_dsub+0x86>
 800243c:	2e1f      	cmp	r6, #31
 800243e:	dd00      	ble.n	8002442 <__aeabi_dsub+0x426>
 8002440:	e0ab      	b.n	800259a <__aeabi_dsub+0x57e>
 8002442:	2720      	movs	r7, #32
 8002444:	1bbb      	subs	r3, r7, r6
 8002446:	469a      	mov	sl, r3
 8002448:	4663      	mov	r3, ip
 800244a:	4657      	mov	r7, sl
 800244c:	40bb      	lsls	r3, r7
 800244e:	4699      	mov	r9, r3
 8002450:	0013      	movs	r3, r2
 8002452:	464f      	mov	r7, r9
 8002454:	40f3      	lsrs	r3, r6
 8002456:	431f      	orrs	r7, r3
 8002458:	003b      	movs	r3, r7
 800245a:	4657      	mov	r7, sl
 800245c:	40ba      	lsls	r2, r7
 800245e:	1e57      	subs	r7, r2, #1
 8002460:	41ba      	sbcs	r2, r7
 8002462:	4313      	orrs	r3, r2
 8002464:	4662      	mov	r2, ip
 8002466:	40f2      	lsrs	r2, r6
 8002468:	1889      	adds	r1, r1, r2
 800246a:	e698      	b.n	800219e <__aeabi_dsub+0x182>
 800246c:	2720      	movs	r7, #32
 800246e:	1bbb      	subs	r3, r7, r6
 8002470:	469a      	mov	sl, r3
 8002472:	4663      	mov	r3, ip
 8002474:	4657      	mov	r7, sl
 8002476:	40bb      	lsls	r3, r7
 8002478:	4699      	mov	r9, r3
 800247a:	0013      	movs	r3, r2
 800247c:	464f      	mov	r7, r9
 800247e:	40f3      	lsrs	r3, r6
 8002480:	431f      	orrs	r7, r3
 8002482:	003b      	movs	r3, r7
 8002484:	4657      	mov	r7, sl
 8002486:	40ba      	lsls	r2, r7
 8002488:	1e57      	subs	r7, r2, #1
 800248a:	41ba      	sbcs	r2, r7
 800248c:	4313      	orrs	r3, r2
 800248e:	4662      	mov	r2, ip
 8002490:	40f2      	lsrs	r2, r6
 8002492:	1a89      	subs	r1, r1, r2
 8002494:	e79c      	b.n	80023d0 <__aeabi_dsub+0x3b4>
 8002496:	4b83      	ldr	r3, [pc, #524]	; (80026a4 <__aeabi_dsub+0x688>)
 8002498:	429f      	cmp	r7, r3
 800249a:	d05f      	beq.n	800255c <__aeabi_dsub+0x540>
 800249c:	2580      	movs	r5, #128	; 0x80
 800249e:	042d      	lsls	r5, r5, #16
 80024a0:	4273      	negs	r3, r6
 80024a2:	4329      	orrs	r1, r5
 80024a4:	e720      	b.n	80022e8 <__aeabi_dsub+0x2cc>
 80024a6:	2e00      	cmp	r6, #0
 80024a8:	d10c      	bne.n	80024c4 <__aeabi_dsub+0x4a8>
 80024aa:	2f00      	cmp	r7, #0
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dsub+0x494>
 80024ae:	e0d0      	b.n	8002652 <__aeabi_dsub+0x636>
 80024b0:	465c      	mov	r4, fp
 80024b2:	4661      	mov	r1, ip
 80024b4:	4691      	mov	r9, r2
 80024b6:	4d7b      	ldr	r5, [pc, #492]	; (80026a4 <__aeabi_dsub+0x688>)
 80024b8:	e6cd      	b.n	8002256 <__aeabi_dsub+0x23a>
 80024ba:	4f7a      	ldr	r7, [pc, #488]	; (80026a4 <__aeabi_dsub+0x688>)
 80024bc:	42be      	cmp	r6, r7
 80024be:	d01c      	beq.n	80024fa <__aeabi_dsub+0x4de>
 80024c0:	001e      	movs	r6, r3
 80024c2:	e665      	b.n	8002190 <__aeabi_dsub+0x174>
 80024c4:	2f00      	cmp	r7, #0
 80024c6:	d018      	beq.n	80024fa <__aeabi_dsub+0x4de>
 80024c8:	08c0      	lsrs	r0, r0, #3
 80024ca:	074e      	lsls	r6, r1, #29
 80024cc:	4306      	orrs	r6, r0
 80024ce:	2080      	movs	r0, #128	; 0x80
 80024d0:	08c9      	lsrs	r1, r1, #3
 80024d2:	0300      	lsls	r0, r0, #12
 80024d4:	4201      	tst	r1, r0
 80024d6:	d008      	beq.n	80024ea <__aeabi_dsub+0x4ce>
 80024d8:	4663      	mov	r3, ip
 80024da:	08dc      	lsrs	r4, r3, #3
 80024dc:	4204      	tst	r4, r0
 80024de:	d104      	bne.n	80024ea <__aeabi_dsub+0x4ce>
 80024e0:	0021      	movs	r1, r4
 80024e2:	46da      	mov	sl, fp
 80024e4:	08d2      	lsrs	r2, r2, #3
 80024e6:	075e      	lsls	r6, r3, #29
 80024e8:	4316      	orrs	r6, r2
 80024ea:	00f3      	lsls	r3, r6, #3
 80024ec:	4699      	mov	r9, r3
 80024ee:	2401      	movs	r4, #1
 80024f0:	4653      	mov	r3, sl
 80024f2:	00c9      	lsls	r1, r1, #3
 80024f4:	0f72      	lsrs	r2, r6, #29
 80024f6:	4311      	orrs	r1, r2
 80024f8:	401c      	ands	r4, r3
 80024fa:	4d6a      	ldr	r5, [pc, #424]	; (80026a4 <__aeabi_dsub+0x688>)
 80024fc:	e6ab      	b.n	8002256 <__aeabi_dsub+0x23a>
 80024fe:	001d      	movs	r5, r3
 8002500:	2200      	movs	r2, #0
 8002502:	2700      	movs	r7, #0
 8002504:	e6b4      	b.n	8002270 <__aeabi_dsub+0x254>
 8002506:	2d00      	cmp	r5, #0
 8002508:	d159      	bne.n	80025be <__aeabi_dsub+0x5a2>
 800250a:	000b      	movs	r3, r1
 800250c:	4303      	orrs	r3, r0
 800250e:	d100      	bne.n	8002512 <__aeabi_dsub+0x4f6>
 8002510:	e6d6      	b.n	80022c0 <__aeabi_dsub+0x2a4>
 8002512:	1c73      	adds	r3, r6, #1
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x4fc>
 8002516:	e0b2      	b.n	800267e <__aeabi_dsub+0x662>
 8002518:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <__aeabi_dsub+0x688>)
 800251a:	429f      	cmp	r7, r3
 800251c:	d01e      	beq.n	800255c <__aeabi_dsub+0x540>
 800251e:	43f3      	mvns	r3, r6
 8002520:	2b38      	cmp	r3, #56	; 0x38
 8002522:	dc6f      	bgt.n	8002604 <__aeabi_dsub+0x5e8>
 8002524:	2b1f      	cmp	r3, #31
 8002526:	dd00      	ble.n	800252a <__aeabi_dsub+0x50e>
 8002528:	e097      	b.n	800265a <__aeabi_dsub+0x63e>
 800252a:	2520      	movs	r5, #32
 800252c:	000e      	movs	r6, r1
 800252e:	1aed      	subs	r5, r5, r3
 8002530:	40ae      	lsls	r6, r5
 8002532:	46b0      	mov	r8, r6
 8002534:	0006      	movs	r6, r0
 8002536:	46aa      	mov	sl, r5
 8002538:	40de      	lsrs	r6, r3
 800253a:	4645      	mov	r5, r8
 800253c:	4335      	orrs	r5, r6
 800253e:	002e      	movs	r6, r5
 8002540:	4655      	mov	r5, sl
 8002542:	40a8      	lsls	r0, r5
 8002544:	40d9      	lsrs	r1, r3
 8002546:	1e45      	subs	r5, r0, #1
 8002548:	41a8      	sbcs	r0, r5
 800254a:	448c      	add	ip, r1
 800254c:	4306      	orrs	r6, r0
 800254e:	18b6      	adds	r6, r6, r2
 8002550:	4296      	cmp	r6, r2
 8002552:	4192      	sbcs	r2, r2
 8002554:	4251      	negs	r1, r2
 8002556:	4461      	add	r1, ip
 8002558:	003d      	movs	r5, r7
 800255a:	e625      	b.n	80021a8 <__aeabi_dsub+0x18c>
 800255c:	003d      	movs	r5, r7
 800255e:	4661      	mov	r1, ip
 8002560:	4691      	mov	r9, r2
 8002562:	e678      	b.n	8002256 <__aeabi_dsub+0x23a>
 8002564:	000b      	movs	r3, r1
 8002566:	4303      	orrs	r3, r0
 8002568:	2d00      	cmp	r5, #0
 800256a:	d000      	beq.n	800256e <__aeabi_dsub+0x552>
 800256c:	e655      	b.n	800221a <__aeabi_dsub+0x1fe>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f5      	beq.n	800255e <__aeabi_dsub+0x542>
 8002572:	4663      	mov	r3, ip
 8002574:	4313      	orrs	r3, r2
 8002576:	d100      	bne.n	800257a <__aeabi_dsub+0x55e>
 8002578:	e66d      	b.n	8002256 <__aeabi_dsub+0x23a>
 800257a:	1886      	adds	r6, r0, r2
 800257c:	4286      	cmp	r6, r0
 800257e:	4180      	sbcs	r0, r0
 8002580:	4461      	add	r1, ip
 8002582:	4240      	negs	r0, r0
 8002584:	1809      	adds	r1, r1, r0
 8002586:	2200      	movs	r2, #0
 8002588:	020b      	lsls	r3, r1, #8
 800258a:	d400      	bmi.n	800258e <__aeabi_dsub+0x572>
 800258c:	e6d0      	b.n	8002330 <__aeabi_dsub+0x314>
 800258e:	4b46      	ldr	r3, [pc, #280]	; (80026a8 <__aeabi_dsub+0x68c>)
 8002590:	3501      	adds	r5, #1
 8002592:	4019      	ands	r1, r3
 8002594:	e5b2      	b.n	80020fc <__aeabi_dsub+0xe0>
 8002596:	46b1      	mov	r9, r6
 8002598:	e65d      	b.n	8002256 <__aeabi_dsub+0x23a>
 800259a:	0033      	movs	r3, r6
 800259c:	4667      	mov	r7, ip
 800259e:	3b20      	subs	r3, #32
 80025a0:	40df      	lsrs	r7, r3
 80025a2:	003b      	movs	r3, r7
 80025a4:	2e20      	cmp	r6, #32
 80025a6:	d005      	beq.n	80025b4 <__aeabi_dsub+0x598>
 80025a8:	2740      	movs	r7, #64	; 0x40
 80025aa:	1bbf      	subs	r7, r7, r6
 80025ac:	4666      	mov	r6, ip
 80025ae:	40be      	lsls	r6, r7
 80025b0:	4332      	orrs	r2, r6
 80025b2:	4690      	mov	r8, r2
 80025b4:	4646      	mov	r6, r8
 80025b6:	1e72      	subs	r2, r6, #1
 80025b8:	4196      	sbcs	r6, r2
 80025ba:	4333      	orrs	r3, r6
 80025bc:	e5ef      	b.n	800219e <__aeabi_dsub+0x182>
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <__aeabi_dsub+0x688>)
 80025c0:	429f      	cmp	r7, r3
 80025c2:	d0cb      	beq.n	800255c <__aeabi_dsub+0x540>
 80025c4:	2580      	movs	r5, #128	; 0x80
 80025c6:	042d      	lsls	r5, r5, #16
 80025c8:	4273      	negs	r3, r6
 80025ca:	4329      	orrs	r1, r5
 80025cc:	e7a8      	b.n	8002520 <__aeabi_dsub+0x504>
 80025ce:	4308      	orrs	r0, r1
 80025d0:	1e41      	subs	r1, r0, #1
 80025d2:	4188      	sbcs	r0, r1
 80025d4:	e6a2      	b.n	800231c <__aeabi_dsub+0x300>
 80025d6:	2f00      	cmp	r7, #0
 80025d8:	d100      	bne.n	80025dc <__aeabi_dsub+0x5c0>
 80025da:	e63c      	b.n	8002256 <__aeabi_dsub+0x23a>
 80025dc:	4663      	mov	r3, ip
 80025de:	1a86      	subs	r6, r0, r2
 80025e0:	1acf      	subs	r7, r1, r3
 80025e2:	42b0      	cmp	r0, r6
 80025e4:	419b      	sbcs	r3, r3
 80025e6:	425b      	negs	r3, r3
 80025e8:	1afb      	subs	r3, r7, r3
 80025ea:	4698      	mov	r8, r3
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	d54e      	bpl.n	800268e <__aeabi_dsub+0x672>
 80025f0:	1a16      	subs	r6, r2, r0
 80025f2:	4663      	mov	r3, ip
 80025f4:	42b2      	cmp	r2, r6
 80025f6:	4192      	sbcs	r2, r2
 80025f8:	1a59      	subs	r1, r3, r1
 80025fa:	4252      	negs	r2, r2
 80025fc:	1a89      	subs	r1, r1, r2
 80025fe:	465c      	mov	r4, fp
 8002600:	2200      	movs	r2, #0
 8002602:	e57b      	b.n	80020fc <__aeabi_dsub+0xe0>
 8002604:	4301      	orrs	r1, r0
 8002606:	000e      	movs	r6, r1
 8002608:	1e71      	subs	r1, r6, #1
 800260a:	418e      	sbcs	r6, r1
 800260c:	e79f      	b.n	800254e <__aeabi_dsub+0x532>
 800260e:	001d      	movs	r5, r3
 8002610:	000e      	movs	r6, r1
 8002612:	3d20      	subs	r5, #32
 8002614:	40ee      	lsrs	r6, r5
 8002616:	46b0      	mov	r8, r6
 8002618:	2b20      	cmp	r3, #32
 800261a:	d004      	beq.n	8002626 <__aeabi_dsub+0x60a>
 800261c:	2540      	movs	r5, #64	; 0x40
 800261e:	1aeb      	subs	r3, r5, r3
 8002620:	4099      	lsls	r1, r3
 8002622:	4308      	orrs	r0, r1
 8002624:	4681      	mov	r9, r0
 8002626:	4648      	mov	r0, r9
 8002628:	4643      	mov	r3, r8
 800262a:	1e41      	subs	r1, r0, #1
 800262c:	4188      	sbcs	r0, r1
 800262e:	4318      	orrs	r0, r3
 8002630:	e674      	b.n	800231c <__aeabi_dsub+0x300>
 8002632:	2200      	movs	r2, #0
 8002634:	2400      	movs	r4, #0
 8002636:	e617      	b.n	8002268 <__aeabi_dsub+0x24c>
 8002638:	1a16      	subs	r6, r2, r0
 800263a:	4663      	mov	r3, ip
 800263c:	42b2      	cmp	r2, r6
 800263e:	4192      	sbcs	r2, r2
 8002640:	1a59      	subs	r1, r3, r1
 8002642:	4252      	negs	r2, r2
 8002644:	1a89      	subs	r1, r1, r2
 8002646:	003d      	movs	r5, r7
 8002648:	e525      	b.n	8002096 <__aeabi_dsub+0x7a>
 800264a:	4661      	mov	r1, ip
 800264c:	4691      	mov	r9, r2
 800264e:	4d15      	ldr	r5, [pc, #84]	; (80026a4 <__aeabi_dsub+0x688>)
 8002650:	e601      	b.n	8002256 <__aeabi_dsub+0x23a>
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	2400      	movs	r4, #0
 8002656:	0312      	lsls	r2, r2, #12
 8002658:	e679      	b.n	800234e <__aeabi_dsub+0x332>
 800265a:	001d      	movs	r5, r3
 800265c:	000e      	movs	r6, r1
 800265e:	3d20      	subs	r5, #32
 8002660:	40ee      	lsrs	r6, r5
 8002662:	46b0      	mov	r8, r6
 8002664:	2b20      	cmp	r3, #32
 8002666:	d004      	beq.n	8002672 <__aeabi_dsub+0x656>
 8002668:	2540      	movs	r5, #64	; 0x40
 800266a:	1aeb      	subs	r3, r5, r3
 800266c:	4099      	lsls	r1, r3
 800266e:	4308      	orrs	r0, r1
 8002670:	4681      	mov	r9, r0
 8002672:	464e      	mov	r6, r9
 8002674:	4643      	mov	r3, r8
 8002676:	1e71      	subs	r1, r6, #1
 8002678:	418e      	sbcs	r6, r1
 800267a:	431e      	orrs	r6, r3
 800267c:	e767      	b.n	800254e <__aeabi_dsub+0x532>
 800267e:	1886      	adds	r6, r0, r2
 8002680:	4296      	cmp	r6, r2
 8002682:	419b      	sbcs	r3, r3
 8002684:	4461      	add	r1, ip
 8002686:	425b      	negs	r3, r3
 8002688:	18c9      	adds	r1, r1, r3
 800268a:	003d      	movs	r5, r7
 800268c:	e58c      	b.n	80021a8 <__aeabi_dsub+0x18c>
 800268e:	4647      	mov	r7, r8
 8002690:	4337      	orrs	r7, r6
 8002692:	d0ce      	beq.n	8002632 <__aeabi_dsub+0x616>
 8002694:	2207      	movs	r2, #7
 8002696:	4641      	mov	r1, r8
 8002698:	4032      	ands	r2, r6
 800269a:	e649      	b.n	8002330 <__aeabi_dsub+0x314>
 800269c:	2700      	movs	r7, #0
 800269e:	003a      	movs	r2, r7
 80026a0:	e5e6      	b.n	8002270 <__aeabi_dsub+0x254>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	000007ff 	.word	0x000007ff
 80026a8:	ff7fffff 	.word	0xff7fffff

080026ac <__aeabi_dcmpun>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	4e0c      	ldr	r6, [pc, #48]	; (80026e0 <__aeabi_dcmpun+0x34>)
 80026b0:	030d      	lsls	r5, r1, #12
 80026b2:	031c      	lsls	r4, r3, #12
 80026b4:	0049      	lsls	r1, r1, #1
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	0b2d      	lsrs	r5, r5, #12
 80026ba:	0d49      	lsrs	r1, r1, #21
 80026bc:	0b24      	lsrs	r4, r4, #12
 80026be:	0d5b      	lsrs	r3, r3, #21
 80026c0:	42b1      	cmp	r1, r6
 80026c2:	d008      	beq.n	80026d6 <__aeabi_dcmpun+0x2a>
 80026c4:	4906      	ldr	r1, [pc, #24]	; (80026e0 <__aeabi_dcmpun+0x34>)
 80026c6:	2000      	movs	r0, #0
 80026c8:	428b      	cmp	r3, r1
 80026ca:	d103      	bne.n	80026d4 <__aeabi_dcmpun+0x28>
 80026cc:	4314      	orrs	r4, r2
 80026ce:	0020      	movs	r0, r4
 80026d0:	1e44      	subs	r4, r0, #1
 80026d2:	41a0      	sbcs	r0, r4
 80026d4:	bd70      	pop	{r4, r5, r6, pc}
 80026d6:	4305      	orrs	r5, r0
 80026d8:	2001      	movs	r0, #1
 80026da:	2d00      	cmp	r5, #0
 80026dc:	d1fa      	bne.n	80026d4 <__aeabi_dcmpun+0x28>
 80026de:	e7f1      	b.n	80026c4 <__aeabi_dcmpun+0x18>
 80026e0:	000007ff 	.word	0x000007ff

080026e4 <__aeabi_d2iz>:
 80026e4:	b530      	push	{r4, r5, lr}
 80026e6:	4d14      	ldr	r5, [pc, #80]	; (8002738 <__aeabi_d2iz+0x54>)
 80026e8:	030a      	lsls	r2, r1, #12
 80026ea:	004b      	lsls	r3, r1, #1
 80026ec:	0b12      	lsrs	r2, r2, #12
 80026ee:	0d5b      	lsrs	r3, r3, #21
 80026f0:	0fc9      	lsrs	r1, r1, #31
 80026f2:	2400      	movs	r4, #0
 80026f4:	42ab      	cmp	r3, r5
 80026f6:	dd11      	ble.n	800271c <__aeabi_d2iz+0x38>
 80026f8:	4c10      	ldr	r4, [pc, #64]	; (800273c <__aeabi_d2iz+0x58>)
 80026fa:	42a3      	cmp	r3, r4
 80026fc:	dc10      	bgt.n	8002720 <__aeabi_d2iz+0x3c>
 80026fe:	2480      	movs	r4, #128	; 0x80
 8002700:	0364      	lsls	r4, r4, #13
 8002702:	4322      	orrs	r2, r4
 8002704:	4c0e      	ldr	r4, [pc, #56]	; (8002740 <__aeabi_d2iz+0x5c>)
 8002706:	1ae4      	subs	r4, r4, r3
 8002708:	2c1f      	cmp	r4, #31
 800270a:	dd0c      	ble.n	8002726 <__aeabi_d2iz+0x42>
 800270c:	480d      	ldr	r0, [pc, #52]	; (8002744 <__aeabi_d2iz+0x60>)
 800270e:	1ac3      	subs	r3, r0, r3
 8002710:	40da      	lsrs	r2, r3
 8002712:	0013      	movs	r3, r2
 8002714:	425c      	negs	r4, r3
 8002716:	2900      	cmp	r1, #0
 8002718:	d100      	bne.n	800271c <__aeabi_d2iz+0x38>
 800271a:	001c      	movs	r4, r3
 800271c:	0020      	movs	r0, r4
 800271e:	bd30      	pop	{r4, r5, pc}
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <__aeabi_d2iz+0x64>)
 8002722:	18cc      	adds	r4, r1, r3
 8002724:	e7fa      	b.n	800271c <__aeabi_d2iz+0x38>
 8002726:	4d09      	ldr	r5, [pc, #36]	; (800274c <__aeabi_d2iz+0x68>)
 8002728:	40e0      	lsrs	r0, r4
 800272a:	46ac      	mov	ip, r5
 800272c:	4463      	add	r3, ip
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	4303      	orrs	r3, r0
 8002734:	e7ee      	b.n	8002714 <__aeabi_d2iz+0x30>
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	000003fe 	.word	0x000003fe
 800273c:	0000041d 	.word	0x0000041d
 8002740:	00000433 	.word	0x00000433
 8002744:	00000413 	.word	0x00000413
 8002748:	7fffffff 	.word	0x7fffffff
 800274c:	fffffbed 	.word	0xfffffbed

08002750 <__aeabi_i2d>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2800      	cmp	r0, #0
 8002754:	d02d      	beq.n	80027b2 <__aeabi_i2d+0x62>
 8002756:	17c3      	asrs	r3, r0, #31
 8002758:	18c5      	adds	r5, r0, r3
 800275a:	405d      	eors	r5, r3
 800275c:	0fc4      	lsrs	r4, r0, #31
 800275e:	0028      	movs	r0, r5
 8002760:	f000 f882 	bl	8002868 <__clzsi2>
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <__aeabi_i2d+0x6c>)
 8002766:	1a1b      	subs	r3, r3, r0
 8002768:	055b      	lsls	r3, r3, #21
 800276a:	0d5b      	lsrs	r3, r3, #21
 800276c:	280a      	cmp	r0, #10
 800276e:	dd15      	ble.n	800279c <__aeabi_i2d+0x4c>
 8002770:	380b      	subs	r0, #11
 8002772:	4085      	lsls	r5, r0
 8002774:	2200      	movs	r2, #0
 8002776:	032d      	lsls	r5, r5, #12
 8002778:	0b2d      	lsrs	r5, r5, #12
 800277a:	2100      	movs	r1, #0
 800277c:	0010      	movs	r0, r2
 800277e:	032d      	lsls	r5, r5, #12
 8002780:	0d0a      	lsrs	r2, r1, #20
 8002782:	0b2d      	lsrs	r5, r5, #12
 8002784:	0512      	lsls	r2, r2, #20
 8002786:	432a      	orrs	r2, r5
 8002788:	4d0d      	ldr	r5, [pc, #52]	; (80027c0 <__aeabi_i2d+0x70>)
 800278a:	051b      	lsls	r3, r3, #20
 800278c:	402a      	ands	r2, r5
 800278e:	4313      	orrs	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	07e4      	lsls	r4, r4, #31
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	4323      	orrs	r3, r4
 8002798:	0019      	movs	r1, r3
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	0002      	movs	r2, r0
 800279e:	0029      	movs	r1, r5
 80027a0:	3215      	adds	r2, #21
 80027a2:	4091      	lsls	r1, r2
 80027a4:	000a      	movs	r2, r1
 80027a6:	210b      	movs	r1, #11
 80027a8:	1a08      	subs	r0, r1, r0
 80027aa:	40c5      	lsrs	r5, r0
 80027ac:	032d      	lsls	r5, r5, #12
 80027ae:	0b2d      	lsrs	r5, r5, #12
 80027b0:	e7e3      	b.n	800277a <__aeabi_i2d+0x2a>
 80027b2:	2400      	movs	r4, #0
 80027b4:	2300      	movs	r3, #0
 80027b6:	2500      	movs	r5, #0
 80027b8:	2200      	movs	r2, #0
 80027ba:	e7de      	b.n	800277a <__aeabi_i2d+0x2a>
 80027bc:	0000041e 	.word	0x0000041e
 80027c0:	800fffff 	.word	0x800fffff

080027c4 <__aeabi_f2d>:
 80027c4:	0041      	lsls	r1, r0, #1
 80027c6:	0e09      	lsrs	r1, r1, #24
 80027c8:	1c4b      	adds	r3, r1, #1
 80027ca:	b570      	push	{r4, r5, r6, lr}
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	0246      	lsls	r6, r0, #9
 80027d0:	0a75      	lsrs	r5, r6, #9
 80027d2:	0fc4      	lsrs	r4, r0, #31
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	dd14      	ble.n	8002802 <__aeabi_f2d+0x3e>
 80027d8:	23e0      	movs	r3, #224	; 0xe0
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	076d      	lsls	r5, r5, #29
 80027de:	0b36      	lsrs	r6, r6, #12
 80027e0:	18cb      	adds	r3, r1, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	0d0a      	lsrs	r2, r1, #20
 80027e6:	0028      	movs	r0, r5
 80027e8:	0512      	lsls	r2, r2, #20
 80027ea:	4d1c      	ldr	r5, [pc, #112]	; (800285c <__aeabi_f2d+0x98>)
 80027ec:	4332      	orrs	r2, r6
 80027ee:	055b      	lsls	r3, r3, #21
 80027f0:	402a      	ands	r2, r5
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	4313      	orrs	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	07e4      	lsls	r4, r4, #31
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	4323      	orrs	r3, r4
 80027fe:	0019      	movs	r1, r3
 8002800:	bd70      	pop	{r4, r5, r6, pc}
 8002802:	2900      	cmp	r1, #0
 8002804:	d114      	bne.n	8002830 <__aeabi_f2d+0x6c>
 8002806:	2d00      	cmp	r5, #0
 8002808:	d01e      	beq.n	8002848 <__aeabi_f2d+0x84>
 800280a:	0028      	movs	r0, r5
 800280c:	f000 f82c 	bl	8002868 <__clzsi2>
 8002810:	280a      	cmp	r0, #10
 8002812:	dc1c      	bgt.n	800284e <__aeabi_f2d+0x8a>
 8002814:	230b      	movs	r3, #11
 8002816:	002a      	movs	r2, r5
 8002818:	1a1b      	subs	r3, r3, r0
 800281a:	40da      	lsrs	r2, r3
 800281c:	0003      	movs	r3, r0
 800281e:	3315      	adds	r3, #21
 8002820:	409d      	lsls	r5, r3
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <__aeabi_f2d+0x9c>)
 8002824:	0312      	lsls	r2, r2, #12
 8002826:	1a1b      	subs	r3, r3, r0
 8002828:	055b      	lsls	r3, r3, #21
 800282a:	0b16      	lsrs	r6, r2, #12
 800282c:	0d5b      	lsrs	r3, r3, #21
 800282e:	e7d8      	b.n	80027e2 <__aeabi_f2d+0x1e>
 8002830:	2d00      	cmp	r5, #0
 8002832:	d006      	beq.n	8002842 <__aeabi_f2d+0x7e>
 8002834:	0b32      	lsrs	r2, r6, #12
 8002836:	2680      	movs	r6, #128	; 0x80
 8002838:	0336      	lsls	r6, r6, #12
 800283a:	076d      	lsls	r5, r5, #29
 800283c:	4316      	orrs	r6, r2
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <__aeabi_f2d+0xa0>)
 8002840:	e7cf      	b.n	80027e2 <__aeabi_f2d+0x1e>
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <__aeabi_f2d+0xa0>)
 8002844:	2600      	movs	r6, #0
 8002846:	e7cc      	b.n	80027e2 <__aeabi_f2d+0x1e>
 8002848:	2300      	movs	r3, #0
 800284a:	2600      	movs	r6, #0
 800284c:	e7c9      	b.n	80027e2 <__aeabi_f2d+0x1e>
 800284e:	0003      	movs	r3, r0
 8002850:	002a      	movs	r2, r5
 8002852:	3b0b      	subs	r3, #11
 8002854:	409a      	lsls	r2, r3
 8002856:	2500      	movs	r5, #0
 8002858:	e7e3      	b.n	8002822 <__aeabi_f2d+0x5e>
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	800fffff 	.word	0x800fffff
 8002860:	00000389 	.word	0x00000389
 8002864:	000007ff 	.word	0x000007ff

08002868 <__clzsi2>:
 8002868:	211c      	movs	r1, #28
 800286a:	2301      	movs	r3, #1
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	4298      	cmp	r0, r3
 8002870:	d301      	bcc.n	8002876 <__clzsi2+0xe>
 8002872:	0c00      	lsrs	r0, r0, #16
 8002874:	3910      	subs	r1, #16
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	4298      	cmp	r0, r3
 800287a:	d301      	bcc.n	8002880 <__clzsi2+0x18>
 800287c:	0a00      	lsrs	r0, r0, #8
 800287e:	3908      	subs	r1, #8
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	4298      	cmp	r0, r3
 8002884:	d301      	bcc.n	800288a <__clzsi2+0x22>
 8002886:	0900      	lsrs	r0, r0, #4
 8002888:	3904      	subs	r1, #4
 800288a:	a202      	add	r2, pc, #8	; (adr r2, 8002894 <__clzsi2+0x2c>)
 800288c:	5c10      	ldrb	r0, [r2, r0]
 800288e:	1840      	adds	r0, r0, r1
 8002890:	4770      	bx	lr
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	02020304 	.word	0x02020304
 8002898:	01010101 	.word	0x01010101
	...

080028a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_Init+0x24>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_Init+0x24>)
 80028ae:	2110      	movs	r1, #16
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f000 f809 	bl	80028cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ba:	f002 fcf7 	bl	80052ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	40022000 	.word	0x40022000

080028cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80028d4:	f000 ff9c 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 80028d8:	0002      	movs	r2, r0
 80028da:	23fa      	movs	r3, #250	; 0xfa
 80028dc:	0099      	lsls	r1, r3, #2
 80028de:	0010      	movs	r0, r2
 80028e0:	f7fd fc12 	bl	8000108 <__udivsi3>
 80028e4:	0003      	movs	r3, r0
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 f8e7 	bl	8002aba <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	2301      	movs	r3, #1
 80028f0:	425b      	negs	r3, r3
 80028f2:	2200      	movs	r2, #0
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 f8cb 	bl	8002a90 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  uwTick++;
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_IncTick+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	4b02      	ldr	r3, [pc, #8]	; (8002918 <HAL_IncTick+0x14>)
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2000014c 	.word	0x2000014c

0800291c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <HAL_GetTick+0x10>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	2000014c 	.word	0x2000014c

08002930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff fff0 	bl	800291c <HAL_GetTick>
 800293c:	0003      	movs	r3, r0
 800293e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3301      	adds	r3, #1
 8002948:	d002      	beq.n	8002950 <HAL_Delay+0x20>
  {
     wait++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3301      	adds	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	f7ff ffe3 	bl	800291c <HAL_GetTick>
 8002956:	0002      	movs	r2, r0
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	429a      	cmp	r2, r3
 8002960:	d8f7      	bhi.n	8002952 <HAL_Delay+0x22>
  {
  }
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	0002      	movs	r2, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b7f      	cmp	r3, #127	; 0x7f
 8002980:	d932      	bls.n	80029e8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002982:	4a2f      	ldr	r2, [pc, #188]	; (8002a40 <NVIC_SetPriority+0xd4>)
 8002984:	1dfb      	adds	r3, r7, #7
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	0019      	movs	r1, r3
 800298a:	230f      	movs	r3, #15
 800298c:	400b      	ands	r3, r1
 800298e:	3b08      	subs	r3, #8
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3306      	adds	r3, #6
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	18d3      	adds	r3, r2, r3
 8002998:	3304      	adds	r3, #4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1dfa      	adds	r2, r7, #7
 800299e:	7812      	ldrb	r2, [r2, #0]
 80029a0:	0011      	movs	r1, r2
 80029a2:	2203      	movs	r2, #3
 80029a4:	400a      	ands	r2, r1
 80029a6:	00d2      	lsls	r2, r2, #3
 80029a8:	21ff      	movs	r1, #255	; 0xff
 80029aa:	4091      	lsls	r1, r2
 80029ac:	000a      	movs	r2, r1
 80029ae:	43d2      	mvns	r2, r2
 80029b0:	401a      	ands	r2, r3
 80029b2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	22ff      	movs	r2, #255	; 0xff
 80029ba:	401a      	ands	r2, r3
 80029bc:	1dfb      	adds	r3, r7, #7
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	0018      	movs	r0, r3
 80029c2:	2303      	movs	r3, #3
 80029c4:	4003      	ands	r3, r0
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029ca:	481d      	ldr	r0, [pc, #116]	; (8002a40 <NVIC_SetPriority+0xd4>)
 80029cc:	1dfb      	adds	r3, r7, #7
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	001c      	movs	r4, r3
 80029d2:	230f      	movs	r3, #15
 80029d4:	4023      	ands	r3, r4
 80029d6:	3b08      	subs	r3, #8
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	430a      	orrs	r2, r1
 80029dc:	3306      	adds	r3, #6
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	18c3      	adds	r3, r0, r3
 80029e2:	3304      	adds	r3, #4
 80029e4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029e6:	e027      	b.n	8002a38 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029e8:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <NVIC_SetPriority+0xd8>)
 80029ea:	1dfb      	adds	r3, r7, #7
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b25b      	sxtb	r3, r3
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	33c0      	adds	r3, #192	; 0xc0
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	589b      	ldr	r3, [r3, r2]
 80029f8:	1dfa      	adds	r2, r7, #7
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	0011      	movs	r1, r2
 80029fe:	2203      	movs	r2, #3
 8002a00:	400a      	ands	r2, r1
 8002a02:	00d2      	lsls	r2, r2, #3
 8002a04:	21ff      	movs	r1, #255	; 0xff
 8002a06:	4091      	lsls	r1, r2
 8002a08:	000a      	movs	r2, r1
 8002a0a:	43d2      	mvns	r2, r2
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	019b      	lsls	r3, r3, #6
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	401a      	ands	r2, r3
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	2303      	movs	r3, #3
 8002a20:	4003      	ands	r3, r0
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a26:	4807      	ldr	r0, [pc, #28]	; (8002a44 <NVIC_SetPriority+0xd8>)
 8002a28:	1dfb      	adds	r3, r7, #7
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	430a      	orrs	r2, r1
 8002a32:	33c0      	adds	r3, #192	; 0xc0
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	501a      	str	r2, [r3, r0]
}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b003      	add	sp, #12
 8002a3e:	bd90      	pop	{r4, r7, pc}
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	e000e100 	.word	0xe000e100

08002a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <SysTick_Config+0x40>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e010      	b.n	8002a80 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <SysTick_Config+0x44>)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	3a01      	subs	r2, #1
 8002a64:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a66:	2301      	movs	r3, #1
 8002a68:	425b      	negs	r3, r3
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff ff7d 	bl	800296c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <SysTick_Config+0x44>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <SysTick_Config+0x44>)
 8002a7a:	2207      	movs	r2, #7
 8002a7c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	00ffffff 	.word	0x00ffffff
 8002a8c:	e000e010 	.word	0xe000e010

08002a90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	1c02      	adds	r2, r0, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b25b      	sxtb	r3, r3
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff ff5d 	bl	800296c <NVIC_SetPriority>
}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b004      	add	sp, #16
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff ffbf 	bl	8002a48 <SysTick_Config>
 8002aca:	0003      	movs	r3, r0
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002aea:	e155      	b.n	8002d98 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4091      	lsls	r1, r2
 8002af6:	000a      	movs	r2, r1
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d100      	bne.n	8002b04 <HAL_GPIO_Init+0x30>
 8002b02:	e146      	b.n	8002d92 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x40>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b12      	cmp	r3, #18
 8002b12:	d123      	bne.n	8002b5c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	0092      	lsls	r2, r2, #2
 8002b1e:	58d3      	ldr	r3, [r2, r3]
 8002b20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2207      	movs	r2, #7
 8002b26:	4013      	ands	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	0013      	movs	r3, r2
 8002b30:	43da      	mvns	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2107      	movs	r1, #7
 8002b40:	400b      	ands	r3, r1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	409a      	lsls	r2, r3
 8002b46:	0013      	movs	r3, r2
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	0092      	lsls	r2, r2, #2
 8002b58:	6939      	ldr	r1, [r7, #16]
 8002b5a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	0013      	movs	r3, r2
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	409a      	lsls	r2, r3
 8002b82:	0013      	movs	r3, r2
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d00b      	beq.n	8002bb0 <HAL_GPIO_Init+0xdc>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d007      	beq.n	8002bb0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ba4:	2b11      	cmp	r3, #17
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b12      	cmp	r3, #18
 8002bae:	d130      	bne.n	8002c12 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	0013      	movs	r3, r2
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002be6:	2201      	movs	r2, #1
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
 8002bec:	0013      	movs	r3, r2
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	401a      	ands	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	409a      	lsls	r2, r3
 8002c04:	0013      	movs	r3, r2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	43da      	mvns	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	055b      	lsls	r3, r3, #21
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d100      	bne.n	8002c50 <HAL_GPIO_Init+0x17c>
 8002c4e:	e0a0      	b.n	8002d92 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c50:	4b57      	ldr	r3, [pc, #348]	; (8002db0 <HAL_GPIO_Init+0x2dc>)
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <HAL_GPIO_Init+0x2dc>)
 8002c56:	2101      	movs	r1, #1
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	619a      	str	r2, [r3, #24]
 8002c5c:	4b54      	ldr	r3, [pc, #336]	; (8002db0 <HAL_GPIO_Init+0x2dc>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2201      	movs	r2, #1
 8002c62:	4013      	ands	r3, r2
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8002c68:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	589b      	ldr	r3, [r3, r2]
 8002c74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	409a      	lsls	r2, r3
 8002c82:	0013      	movs	r3, r2
 8002c84:	43da      	mvns	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	2390      	movs	r3, #144	; 0x90
 8002c90:	05db      	lsls	r3, r3, #23
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0x1f6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a47      	ldr	r2, [pc, #284]	; (8002db8 <HAL_GPIO_Init+0x2e4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x1f2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a46      	ldr	r2, [pc, #280]	; (8002dbc <HAL_GPIO_Init+0x2e8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x1ee>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a45      	ldr	r2, [pc, #276]	; (8002dc0 <HAL_GPIO_Init+0x2ec>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x1ea>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a44      	ldr	r2, [pc, #272]	; (8002dc4 <HAL_GPIO_Init+0x2f0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x1e6>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	e008      	b.n	8002ccc <HAL_GPIO_Init+0x1f8>
 8002cba:	2305      	movs	r3, #5
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x1f8>
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e004      	b.n	8002ccc <HAL_GPIO_Init+0x1f8>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_Init+0x1f8>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_GPIO_Init+0x1f8>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	2103      	movs	r1, #3
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	0092      	lsls	r2, r2, #2
 8002cd4:	4093      	lsls	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cdc:	4935      	ldr	r1, [pc, #212]	; (8002db4 <HAL_GPIO_Init+0x2e0>)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cea:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <HAL_GPIO_Init+0x2f4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	025b      	lsls	r3, r3, #9
 8002d02:	4013      	ands	r3, r2
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <HAL_GPIO_Init+0x2f4>)
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002d14:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_GPIO_Init+0x2f4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d38:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_GPIO_Init+0x2f4>)
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3e:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <HAL_GPIO_Init+0x2f4>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43da      	mvns	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	035b      	lsls	r3, r3, #13
 8002d56:	4013      	ands	r3, r2
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_GPIO_Init+0x2f4>)
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_GPIO_Init+0x2f4>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43da      	mvns	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	039b      	lsls	r3, r3, #14
 8002d80:	4013      	ands	r3, r2
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_GPIO_Init+0x2f4>)
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	40da      	lsrs	r2, r3
 8002da0:	1e13      	subs	r3, r2, #0
 8002da2:	d000      	beq.n	8002da6 <HAL_GPIO_Init+0x2d2>
 8002da4:	e6a2      	b.n	8002aec <HAL_GPIO_Init+0x18>
  } 
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b006      	add	sp, #24
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40010000 	.word	0x40010000
 8002db8:	48000400 	.word	0x48000400
 8002dbc:	48000800 	.word	0x48000800
 8002dc0:	48000c00 	.word	0x48000c00
 8002dc4:	48001000 	.word	0x48001000
 8002dc8:	40010400 	.word	0x40010400

08002dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	0008      	movs	r0, r1
 8002dd6:	0011      	movs	r1, r2
 8002dd8:	1cbb      	adds	r3, r7, #2
 8002dda:	1c02      	adds	r2, r0, #0
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	1c7b      	adds	r3, r7, #1
 8002de0:	1c0a      	adds	r2, r1, #0
 8002de2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002de4:	1c7b      	adds	r3, r7, #1
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dec:	1cbb      	adds	r3, r7, #2
 8002dee:	881a      	ldrh	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002df4:	e003      	b.n	8002dfe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002df6:	1cbb      	adds	r3, r7, #2
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b002      	add	sp, #8
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	0002      	movs	r2, r0
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	1dba      	adds	r2, r7, #6
 8002e1a:	8812      	ldrh	r2, [r2, #0]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d008      	beq.n	8002e32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e22:	1dba      	adds	r2, r7, #6
 8002e24:	8812      	ldrh	r2, [r2, #0]
 8002e26:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e28:	1dbb      	adds	r3, r7, #6
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f002 fb3b 	bl	80054a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b002      	add	sp, #8
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	4013      	ands	r3, r2
 8002e54:	d100      	bne.n	8002e58 <HAL_RCC_OscConfig+0x18>
 8002e56:	e08d      	b.n	8002f74 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e58:	4bc5      	ldr	r3, [pc, #788]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	220c      	movs	r2, #12
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d00e      	beq.n	8002e82 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e64:	4bc2      	ldr	r3, [pc, #776]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	220c      	movs	r2, #12
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d116      	bne.n	8002e9e <HAL_RCC_OscConfig+0x5e>
 8002e70:	4bbf      	ldr	r3, [pc, #764]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	23c0      	movs	r3, #192	; 0xc0
 8002e76:	025b      	lsls	r3, r3, #9
 8002e78:	401a      	ands	r2, r3
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	025b      	lsls	r3, r3, #9
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10d      	bne.n	8002e9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e82:	4bbb      	ldr	r3, [pc, #748]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	029b      	lsls	r3, r3, #10
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d100      	bne.n	8002e90 <HAL_RCC_OscConfig+0x50>
 8002e8e:	e070      	b.n	8002f72 <HAL_RCC_OscConfig+0x132>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d000      	beq.n	8002e9a <HAL_RCC_OscConfig+0x5a>
 8002e98:	e06b      	b.n	8002f72 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e329      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x76>
 8002ea6:	4bb2      	ldr	r3, [pc, #712]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4bb1      	ldr	r3, [pc, #708]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	0249      	lsls	r1, r1, #9
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	e02f      	b.n	8002f16 <HAL_RCC_OscConfig+0xd6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x98>
 8002ebe:	4bac      	ldr	r3, [pc, #688]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4bab      	ldr	r3, [pc, #684]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002ec4:	49ab      	ldr	r1, [pc, #684]	; (8003174 <HAL_RCC_OscConfig+0x334>)
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	4ba9      	ldr	r3, [pc, #676]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4ba8      	ldr	r3, [pc, #672]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002ed0:	49a9      	ldr	r1, [pc, #676]	; (8003178 <HAL_RCC_OscConfig+0x338>)
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e01e      	b.n	8002f16 <HAL_RCC_OscConfig+0xd6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d10e      	bne.n	8002efe <HAL_RCC_OscConfig+0xbe>
 8002ee0:	4ba3      	ldr	r3, [pc, #652]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4ba2      	ldr	r3, [pc, #648]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	02c9      	lsls	r1, r1, #11
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	4ba0      	ldr	r3, [pc, #640]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b9f      	ldr	r3, [pc, #636]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	0249      	lsls	r1, r1, #9
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e00b      	b.n	8002f16 <HAL_RCC_OscConfig+0xd6>
 8002efe:	4b9c      	ldr	r3, [pc, #624]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b9b      	ldr	r3, [pc, #620]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002f04:	499b      	ldr	r1, [pc, #620]	; (8003174 <HAL_RCC_OscConfig+0x334>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	4b99      	ldr	r3, [pc, #612]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b98      	ldr	r3, [pc, #608]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002f10:	4999      	ldr	r1, [pc, #612]	; (8003178 <HAL_RCC_OscConfig+0x338>)
 8002f12:	400a      	ands	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d014      	beq.n	8002f48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7ff fcfd 	bl	800291c <HAL_GetTick>
 8002f22:	0003      	movs	r3, r0
 8002f24:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f28:	f7ff fcf8 	bl	800291c <HAL_GetTick>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e2db      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b8d      	ldr	r3, [pc, #564]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	029b      	lsls	r3, r3, #10
 8002f42:	4013      	ands	r3, r2
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0xe8>
 8002f46:	e015      	b.n	8002f74 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7ff fce8 	bl	800291c <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f52:	f7ff fce3 	bl	800291c <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	; 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e2c6      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f64:	4b82      	ldr	r3, [pc, #520]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	029b      	lsls	r3, r3, #10
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x112>
 8002f70:	e000      	b.n	8002f74 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d100      	bne.n	8002f80 <HAL_RCC_OscConfig+0x140>
 8002f7e:	e06c      	b.n	800305a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f80:	4b7b      	ldr	r3, [pc, #492]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	220c      	movs	r2, #12
 8002f86:	4013      	ands	r3, r2
 8002f88:	d00e      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f8a:	4b79      	ldr	r3, [pc, #484]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	220c      	movs	r2, #12
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d11f      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x196>
 8002f96:	4b76      	ldr	r3, [pc, #472]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	23c0      	movs	r3, #192	; 0xc0
 8002f9c:	025b      	lsls	r3, r3, #9
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d116      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa8:	4b71      	ldr	r3, [pc, #452]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2202      	movs	r2, #2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x17e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e299      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b6c      	ldr	r3, [pc, #432]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	22f8      	movs	r2, #248	; 0xf8
 8002fc4:	4393      	bics	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00da      	lsls	r2, r3, #3
 8002fce:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd4:	e041      	b.n	800305a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d024      	beq.n	8003028 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fde:	4b64      	ldr	r3, [pc, #400]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b63      	ldr	r3, [pc, #396]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7ff fc97 	bl	800291c <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7ff fc92 	bl	800291c <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e275      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d0f1      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4b57      	ldr	r3, [pc, #348]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	22f8      	movs	r2, #248	; 0xf8
 8003016:	4393      	bics	r3, r2
 8003018:	0019      	movs	r1, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00da      	lsls	r2, r3, #3
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e018      	b.n	800305a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003028:	4b51      	ldr	r3, [pc, #324]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b50      	ldr	r3, [pc, #320]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 800302e:	2101      	movs	r1, #1
 8003030:	438a      	bics	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7ff fc72 	bl	800291c <HAL_GetTick>
 8003038:	0003      	movs	r3, r0
 800303a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303e:	f7ff fc6d 	bl	800291c <HAL_GetTick>
 8003042:	0002      	movs	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e250      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003050:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2202      	movs	r2, #2
 8003056:	4013      	ands	r3, r2
 8003058:	d1f1      	bne.n	800303e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2208      	movs	r2, #8
 8003060:	4013      	ands	r3, r2
 8003062:	d036      	beq.n	80030d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d019      	beq.n	80030a0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306c:	4b40      	ldr	r3, [pc, #256]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 800306e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003070:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8003072:	2101      	movs	r1, #1
 8003074:	430a      	orrs	r2, r1
 8003076:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003078:	f7ff fc50 	bl	800291c <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003082:	f7ff fc4b 	bl	800291c <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e22e      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2202      	movs	r2, #2
 800309a:	4013      	ands	r3, r2
 800309c:	d0f1      	beq.n	8003082 <HAL_RCC_OscConfig+0x242>
 800309e:	e018      	b.n	80030d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 80030a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a4:	4b32      	ldr	r3, [pc, #200]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	438a      	bics	r2, r1
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ac:	f7ff fc36 	bl	800291c <HAL_GetTick>
 80030b0:	0003      	movs	r3, r0
 80030b2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b6:	f7ff fc31 	bl	800291c <HAL_GetTick>
 80030ba:	0002      	movs	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e214      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b29      	ldr	r3, [pc, #164]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2202      	movs	r2, #2
 80030ce:	4013      	ands	r3, r2
 80030d0:	d1f1      	bne.n	80030b6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2204      	movs	r2, #4
 80030d8:	4013      	ands	r3, r2
 80030da:	d100      	bne.n	80030de <HAL_RCC_OscConfig+0x29e>
 80030dc:	e0b6      	b.n	800324c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030de:	2317      	movs	r3, #23
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	055b      	lsls	r3, r3, #21
 80030ee:	4013      	ands	r3, r2
 80030f0:	d111      	bne.n	8003116 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	0549      	lsls	r1, r1, #21
 80030fc:	430a      	orrs	r2, r1
 80030fe:	61da      	str	r2, [r3, #28]
 8003100:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	055b      	lsls	r3, r3, #21
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800310e:	2317      	movs	r3, #23
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_RCC_OscConfig+0x33c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4013      	ands	r3, r2
 8003120:	d11a      	bne.n	8003158 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_RCC_OscConfig+0x33c>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <HAL_RCC_OscConfig+0x33c>)
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	0049      	lsls	r1, r1, #1
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003130:	f7ff fbf4 	bl	800291c <HAL_GetTick>
 8003134:	0003      	movs	r3, r0
 8003136:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7ff fbef 	bl	800291c <HAL_GetTick>
 800313e:	0002      	movs	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e1d2      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_OscConfig+0x33c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4013      	ands	r3, r2
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10f      	bne.n	8003180 <HAL_RCC_OscConfig+0x340>
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8003162:	6a1a      	ldr	r2, [r3, #32]
 8003164:	4b02      	ldr	r3, [pc, #8]	; (8003170 <HAL_RCC_OscConfig+0x330>)
 8003166:	2101      	movs	r1, #1
 8003168:	430a      	orrs	r2, r1
 800316a:	621a      	str	r2, [r3, #32]
 800316c:	e036      	b.n	80031dc <HAL_RCC_OscConfig+0x39c>
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	40021000 	.word	0x40021000
 8003174:	fffeffff 	.word	0xfffeffff
 8003178:	fffbffff 	.word	0xfffbffff
 800317c:	40007000 	.word	0x40007000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10c      	bne.n	80031a2 <HAL_RCC_OscConfig+0x362>
 8003188:	4bca      	ldr	r3, [pc, #808]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800318a:	6a1a      	ldr	r2, [r3, #32]
 800318c:	4bc9      	ldr	r3, [pc, #804]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800318e:	2101      	movs	r1, #1
 8003190:	438a      	bics	r2, r1
 8003192:	621a      	str	r2, [r3, #32]
 8003194:	4bc7      	ldr	r3, [pc, #796]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	4bc6      	ldr	r3, [pc, #792]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800319a:	2104      	movs	r1, #4
 800319c:	438a      	bics	r2, r1
 800319e:	621a      	str	r2, [r3, #32]
 80031a0:	e01c      	b.n	80031dc <HAL_RCC_OscConfig+0x39c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x384>
 80031aa:	4bc2      	ldr	r3, [pc, #776]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80031ac:	6a1a      	ldr	r2, [r3, #32]
 80031ae:	4bc1      	ldr	r3, [pc, #772]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80031b0:	2104      	movs	r1, #4
 80031b2:	430a      	orrs	r2, r1
 80031b4:	621a      	str	r2, [r3, #32]
 80031b6:	4bbf      	ldr	r3, [pc, #764]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	4bbe      	ldr	r3, [pc, #760]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80031bc:	2101      	movs	r1, #1
 80031be:	430a      	orrs	r2, r1
 80031c0:	621a      	str	r2, [r3, #32]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0x39c>
 80031c4:	4bbb      	ldr	r3, [pc, #748]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	4bba      	ldr	r3, [pc, #744]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80031ca:	2101      	movs	r1, #1
 80031cc:	438a      	bics	r2, r1
 80031ce:	621a      	str	r2, [r3, #32]
 80031d0:	4bb8      	ldr	r3, [pc, #736]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	4bb7      	ldr	r3, [pc, #732]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80031d6:	2104      	movs	r1, #4
 80031d8:	438a      	bics	r2, r1
 80031da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d014      	beq.n	800320e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e4:	f7ff fb9a 	bl	800291c <HAL_GetTick>
 80031e8:	0003      	movs	r3, r0
 80031ea:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e009      	b.n	8003202 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7ff fb95 	bl	800291c <HAL_GetTick>
 80031f2:	0002      	movs	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	4aaf      	ldr	r2, [pc, #700]	; (80034b8 <HAL_RCC_OscConfig+0x678>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e177      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	4bac      	ldr	r3, [pc, #688]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	2202      	movs	r2, #2
 8003208:	4013      	ands	r3, r2
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x3ae>
 800320c:	e013      	b.n	8003236 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320e:	f7ff fb85 	bl	800291c <HAL_GetTick>
 8003212:	0003      	movs	r3, r0
 8003214:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003216:	e009      	b.n	800322c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7ff fb80 	bl	800291c <HAL_GetTick>
 800321c:	0002      	movs	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	4aa5      	ldr	r2, [pc, #660]	; (80034b8 <HAL_RCC_OscConfig+0x678>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e162      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322c:	4ba1      	ldr	r3, [pc, #644]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003236:	2317      	movs	r3, #23
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003240:	4b9c      	ldr	r3, [pc, #624]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	4b9b      	ldr	r3, [pc, #620]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003246:	499d      	ldr	r1, [pc, #628]	; (80034bc <HAL_RCC_OscConfig+0x67c>)
 8003248:	400a      	ands	r2, r1
 800324a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2210      	movs	r2, #16
 8003252:	4013      	ands	r3, r2
 8003254:	d063      	beq.n	800331e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d12a      	bne.n	80032b4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800325e:	4b95      	ldr	r3, [pc, #596]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003262:	4b94      	ldr	r3, [pc, #592]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003264:	2104      	movs	r1, #4
 8003266:	430a      	orrs	r2, r1
 8003268:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800326a:	4b92      	ldr	r3, [pc, #584]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800326c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326e:	4b91      	ldr	r3, [pc, #580]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003270:	2101      	movs	r1, #1
 8003272:	430a      	orrs	r2, r1
 8003274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7ff fb51 	bl	800291c <HAL_GetTick>
 800327a:	0003      	movs	r3, r0
 800327c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003280:	f7ff fb4c 	bl	800291c <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e12f      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003292:	4b88      	ldr	r3, [pc, #544]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d0f1      	beq.n	8003280 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800329c:	4b85      	ldr	r3, [pc, #532]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800329e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a0:	22f8      	movs	r2, #248	; 0xf8
 80032a2:	4393      	bics	r3, r2
 80032a4:	0019      	movs	r1, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	00da      	lsls	r2, r3, #3
 80032ac:	4b81      	ldr	r3, [pc, #516]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80032ae:	430a      	orrs	r2, r1
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34
 80032b2:	e034      	b.n	800331e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	3305      	adds	r3, #5
 80032ba:	d111      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032bc:	4b7d      	ldr	r3, [pc, #500]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80032be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c0:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80032c2:	2104      	movs	r1, #4
 80032c4:	438a      	bics	r2, r1
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032c8:	4b7a      	ldr	r3, [pc, #488]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	22f8      	movs	r2, #248	; 0xf8
 80032ce:	4393      	bics	r3, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	00da      	lsls	r2, r3, #3
 80032d8:	4b76      	ldr	r3, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80032da:	430a      	orrs	r2, r1
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34
 80032de:	e01e      	b.n	800331e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80032e0:	4b74      	ldr	r3, [pc, #464]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80032e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e4:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80032e6:	2104      	movs	r1, #4
 80032e8:	430a      	orrs	r2, r1
 80032ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80032ec:	4b71      	ldr	r3, [pc, #452]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80032ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f0:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80032f2:	2101      	movs	r1, #1
 80032f4:	438a      	bics	r2, r1
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7ff fb10 	bl	800291c <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003302:	f7ff fb0b 	bl	800291c <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0ee      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003314:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	2202      	movs	r2, #2
 800331a:	4013      	ands	r3, r2
 800331c:	d1f1      	bne.n	8003302 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2220      	movs	r2, #32
 8003324:	4013      	ands	r3, r2
 8003326:	d05c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003328:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	220c      	movs	r2, #12
 800332e:	4013      	ands	r3, r2
 8003330:	2b0c      	cmp	r3, #12
 8003332:	d00e      	beq.n	8003352 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003334:	4b5f      	ldr	r3, [pc, #380]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	220c      	movs	r2, #12
 800333a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800333c:	2b08      	cmp	r3, #8
 800333e:	d114      	bne.n	800336a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003340:	4b5c      	ldr	r3, [pc, #368]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	23c0      	movs	r3, #192	; 0xc0
 8003346:	025b      	lsls	r3, r3, #9
 8003348:	401a      	ands	r2, r3
 800334a:	23c0      	movs	r3, #192	; 0xc0
 800334c:	025b      	lsls	r3, r3, #9
 800334e:	429a      	cmp	r2, r3
 8003350:	d10b      	bne.n	800336a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003352:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	025b      	lsls	r3, r3, #9
 800335a:	4013      	ands	r3, r2
 800335c:	d040      	beq.n	80033e0 <HAL_RCC_OscConfig+0x5a0>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d03c      	beq.n	80033e0 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0c3      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01b      	beq.n	80033aa <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003372:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	0249      	lsls	r1, r1, #9
 800337c:	430a      	orrs	r2, r1
 800337e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7ff facc 	bl	800291c <HAL_GetTick>
 8003384:	0003      	movs	r3, r0
 8003386:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800338a:	f7ff fac7 	bl	800291c <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e0aa      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800339c:	4b45      	ldr	r3, [pc, #276]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800339e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	025b      	lsls	r3, r3, #9
 80033a4:	4013      	ands	r3, r2
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x54a>
 80033a8:	e01b      	b.n	80033e2 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033aa:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80033ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80033b0:	4943      	ldr	r1, [pc, #268]	; (80034c0 <HAL_RCC_OscConfig+0x680>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7ff fab1 	bl	800291c <HAL_GetTick>
 80033ba:	0003      	movs	r3, r0
 80033bc:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c0:	f7ff faac 	bl	800291c <HAL_GetTick>
 80033c4:	0002      	movs	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e08f      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80033d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	025b      	lsls	r3, r3, #9
 80033da:	4013      	ands	r3, r2
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x580>
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80033e0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d100      	bne.n	80033ec <HAL_RCC_OscConfig+0x5ac>
 80033ea:	e081      	b.n	80034f0 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	220c      	movs	r2, #12
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d100      	bne.n	80033fa <HAL_RCC_OscConfig+0x5ba>
 80033f8:	e078      	b.n	80034ec <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d14c      	bne.n	800349c <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003408:	492e      	ldr	r1, [pc, #184]	; (80034c4 <HAL_RCC_OscConfig+0x684>)
 800340a:	400a      	ands	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7ff fa85 	bl	800291c <HAL_GetTick>
 8003412:	0003      	movs	r3, r0
 8003414:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003418:	f7ff fa80 	bl	800291c <HAL_GetTick>
 800341c:	0002      	movs	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e063      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342a:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	049b      	lsls	r3, r3, #18
 8003432:	4013      	ands	r3, r2
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003436:	4b1f      	ldr	r3, [pc, #124]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	220f      	movs	r2, #15
 800343c:	4393      	bics	r3, r2
 800343e:	0019      	movs	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003446:	430a      	orrs	r2, r1
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
 800344a:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <HAL_RCC_OscConfig+0x688>)
 8003450:	4013      	ands	r3, r2
 8003452:	0019      	movs	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	431a      	orrs	r2, r3
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800346a:	2180      	movs	r1, #128	; 0x80
 800346c:	0449      	lsls	r1, r1, #17
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7ff fa53 	bl	800291c <HAL_GetTick>
 8003476:	0003      	movs	r3, r0
 8003478:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7ff fa4e 	bl	800291c <HAL_GetTick>
 8003480:	0002      	movs	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e031      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	049b      	lsls	r3, r3, #18
 8003496:	4013      	ands	r3, r2
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x63c>
 800349a:	e029      	b.n	80034f0 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <HAL_RCC_OscConfig+0x674>)
 80034a2:	4908      	ldr	r1, [pc, #32]	; (80034c4 <HAL_RCC_OscConfig+0x684>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7ff fa38 	bl	800291c <HAL_GetTick>
 80034ac:	0003      	movs	r3, r0
 80034ae:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x69e>
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	40021000 	.word	0x40021000
 80034b8:	00001388 	.word	0x00001388
 80034bc:	efffffff 	.word	0xefffffff
 80034c0:	fffeffff 	.word	0xfffeffff
 80034c4:	feffffff 	.word	0xfeffffff
 80034c8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7ff fa26 	bl	800291c <HAL_GetTick>
 80034d0:	0002      	movs	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e009      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_RCC_OscConfig+0x6bc>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	049b      	lsls	r3, r3, #18
 80034e6:	4013      	ands	r3, r2
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x68c>
 80034ea:	e001      	b.n	80034f0 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b006      	add	sp, #24
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800350e:	4b7b      	ldr	r3, [pc, #492]	; (80036fc <HAL_RCC_ClockConfig+0x1fc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2201      	movs	r2, #1
 8003514:	4013      	ands	r3, r2
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d911      	bls.n	8003540 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351c:	4b77      	ldr	r3, [pc, #476]	; (80036fc <HAL_RCC_ClockConfig+0x1fc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2201      	movs	r2, #1
 8003522:	4393      	bics	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	4b75      	ldr	r3, [pc, #468]	; (80036fc <HAL_RCC_ClockConfig+0x1fc>)
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800352e:	4b73      	ldr	r3, [pc, #460]	; (80036fc <HAL_RCC_ClockConfig+0x1fc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	4013      	ands	r3, r2
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0d8      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2202      	movs	r2, #2
 8003546:	4013      	ands	r3, r2
 8003548:	d009      	beq.n	800355e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354a:	4b6d      	ldr	r3, [pc, #436]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	22f0      	movs	r2, #240	; 0xf0
 8003550:	4393      	bics	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	4b69      	ldr	r3, [pc, #420]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	4013      	ands	r3, r2
 8003566:	d100      	bne.n	800356a <HAL_RCC_ClockConfig+0x6a>
 8003568:	e089      	b.n	800367e <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	029b      	lsls	r3, r3, #10
 800357a:	4013      	ands	r3, r2
 800357c:	d120      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0b7      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358a:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	049b      	lsls	r3, r3, #18
 8003592:	4013      	ands	r3, r2
 8003594:	d114      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0ab      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80035a2:	4b57      	ldr	r3, [pc, #348]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 80035a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	4013      	ands	r3, r2
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e09f      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b53      	ldr	r3, [pc, #332]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2202      	movs	r2, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e098      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c0:	4b4f      	ldr	r3, [pc, #316]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2203      	movs	r2, #3
 80035c6:	4393      	bics	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7ff f9a2 	bl	800291c <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d111      	bne.n	8003608 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e4:	e009      	b.n	80035fa <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e6:	f7ff f999 	bl	800291c <HAL_GetTick>
 80035ea:	0002      	movs	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	4a44      	ldr	r2, [pc, #272]	; (8003704 <HAL_RCC_ClockConfig+0x204>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e07b      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	220c      	movs	r2, #12
 8003600:	4013      	ands	r3, r2
 8003602:	2b04      	cmp	r3, #4
 8003604:	d1ef      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xe6>
 8003606:	e03a      	b.n	800367e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d111      	bne.n	8003634 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003610:	e009      	b.n	8003626 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003612:	f7ff f983 	bl	800291c <HAL_GetTick>
 8003616:	0002      	movs	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	4a39      	ldr	r2, [pc, #228]	; (8003704 <HAL_RCC_ClockConfig+0x204>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e065      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	220c      	movs	r2, #12
 800362c:	4013      	ands	r3, r2
 800362e:	2b08      	cmp	r3, #8
 8003630:	d1ef      	bne.n	8003612 <HAL_RCC_ClockConfig+0x112>
 8003632:	e024      	b.n	800367e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d11b      	bne.n	8003674 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800363c:	e009      	b.n	8003652 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363e:	f7ff f96d 	bl	800291c <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <HAL_RCC_ClockConfig+0x204>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e04f      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8003652:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	220c      	movs	r2, #12
 8003658:	4013      	ands	r3, r2
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d1ef      	bne.n	800363e <HAL_RCC_ClockConfig+0x13e>
 800365e:	e00e      	b.n	800367e <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7ff f95c 	bl	800291c <HAL_GetTick>
 8003664:	0002      	movs	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	4a26      	ldr	r2, [pc, #152]	; (8003704 <HAL_RCC_ClockConfig+0x204>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e03e      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003674:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	220c      	movs	r2, #12
 800367a:	4013      	ands	r3, r2
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800367e:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <HAL_RCC_ClockConfig+0x1fc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2201      	movs	r2, #1
 8003684:	4013      	ands	r3, r2
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d211      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <HAL_RCC_ClockConfig+0x1fc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	4393      	bics	r3, r2
 8003694:	0019      	movs	r1, r3
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1fc>)
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <HAL_RCC_ClockConfig+0x1fc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2201      	movs	r2, #1
 80036a4:	4013      	ands	r3, r2
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e020      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2204      	movs	r2, #4
 80036b6:	4013      	ands	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_RCC_ClockConfig+0x208>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	0019      	movs	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036ce:	f000 f821 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80036d2:	0001      	movs	r1, r0
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x200>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	220f      	movs	r2, #15
 80036dc:	4013      	ands	r3, r2
 80036de:	4a0b      	ldr	r2, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x20c>)
 80036e0:	5cd3      	ldrb	r3, [r2, r3]
 80036e2:	000a      	movs	r2, r1
 80036e4:	40da      	lsrs	r2, r3
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x210>)
 80036e8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff f8ee 	bl	80028cc <HAL_InitTick>
  
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b004      	add	sp, #16
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	40022000 	.word	0x40022000
 8003700:	40021000 	.word	0x40021000
 8003704:	00001388 	.word	0x00001388
 8003708:	fffff8ff 	.word	0xfffff8ff
 800370c:	08008b9c 	.word	0x08008b9c
 8003710:	20000008 	.word	0x20000008

08003714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b08f      	sub	sp, #60	; 0x3c
 8003718:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800371a:	2314      	movs	r3, #20
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	4a37      	ldr	r2, [pc, #220]	; (80037fc <HAL_RCC_GetSysClockFreq+0xe8>)
 8003720:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003722:	c313      	stmia	r3!, {r0, r1, r4}
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	4a35      	ldr	r2, [pc, #212]	; (8003800 <HAL_RCC_GetSysClockFreq+0xec>)
 800372c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800372e:	c313      	stmia	r3!, {r0, r1, r4}
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003738:	2300      	movs	r3, #0
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
 800373c:	2300      	movs	r3, #0
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003748:	4b2e      	ldr	r3, [pc, #184]	; (8003804 <HAL_RCC_GetSysClockFreq+0xf0>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	220c      	movs	r2, #12
 8003752:	4013      	ands	r3, r2
 8003754:	2b08      	cmp	r3, #8
 8003756:	d006      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0x52>
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d043      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0xd0>
 800375c:	2b04      	cmp	r3, #4
 800375e:	d144      	bne.n	80037ea <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003760:	4b29      	ldr	r3, [pc, #164]	; (8003808 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003764:	e044      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	0c9b      	lsrs	r3, r3, #18
 800376a:	220f      	movs	r2, #15
 800376c:	4013      	ands	r3, r2
 800376e:	2214      	movs	r2, #20
 8003770:	18ba      	adds	r2, r7, r2
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003776:	4b23      	ldr	r3, [pc, #140]	; (8003804 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	220f      	movs	r2, #15
 800377c:	4013      	ands	r3, r2
 800377e:	1d3a      	adds	r2, r7, #4
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003786:	23c0      	movs	r3, #192	; 0xc0
 8003788:	025b      	lsls	r3, r3, #9
 800378a:	401a      	ands	r2, r3
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	025b      	lsls	r3, r3, #9
 8003790:	429a      	cmp	r2, r3
 8003792:	d109      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003796:	481c      	ldr	r0, [pc, #112]	; (8003808 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003798:	f7fc fcb6 	bl	8000108 <__udivsi3>
 800379c:	0003      	movs	r3, r0
 800379e:	001a      	movs	r2, r3
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	4353      	muls	r3, r2
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
 80037a6:	e01a      	b.n	80037de <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80037a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037aa:	23c0      	movs	r3, #192	; 0xc0
 80037ac:	025b      	lsls	r3, r3, #9
 80037ae:	401a      	ands	r2, r3
 80037b0:	23c0      	movs	r3, #192	; 0xc0
 80037b2:	025b      	lsls	r3, r3, #9
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d109      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80037b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ba:	4814      	ldr	r0, [pc, #80]	; (800380c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037bc:	f7fc fca4 	bl	8000108 <__udivsi3>
 80037c0:	0003      	movs	r3, r0
 80037c2:	001a      	movs	r2, r3
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	4353      	muls	r3, r2
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ca:	e008      	b.n	80037de <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80037cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ce:	480e      	ldr	r0, [pc, #56]	; (8003808 <HAL_RCC_GetSysClockFreq+0xf4>)
 80037d0:	f7fc fc9a 	bl	8000108 <__udivsi3>
 80037d4:	0003      	movs	r3, r0
 80037d6:	001a      	movs	r2, r3
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	4353      	muls	r3, r2
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037e2:	e005      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037e8:	e002      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <HAL_RCC_GetSysClockFreq+0xf4>)
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b00f      	add	sp, #60	; 0x3c
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	08008800 	.word	0x08008800
 8003800:	08008810 	.word	0x08008810
 8003804:	40021000 	.word	0x40021000
 8003808:	007a1200 	.word	0x007a1200
 800380c:	02dc6c00 	.word	0x02dc6c00

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b02      	ldr	r3, [pc, #8]	; (8003820 <HAL_RCC_GetHCLKFreq+0x10>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	20000008 	.word	0x20000008

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	025b      	lsls	r3, r3, #9
 800383c:	4013      	ands	r3, r2
 800383e:	d100      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003840:	e08f      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003842:	2317      	movs	r3, #23
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384a:	4b6f      	ldr	r3, [pc, #444]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	055b      	lsls	r3, r3, #21
 8003852:	4013      	ands	r3, r2
 8003854:	d111      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	4b6b      	ldr	r3, [pc, #428]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	0549      	lsls	r1, r1, #21
 8003860:	430a      	orrs	r2, r1
 8003862:	61da      	str	r2, [r3, #28]
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	055b      	lsls	r3, r3, #21
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003872:	2317      	movs	r3, #23
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387a:	4b64      	ldr	r3, [pc, #400]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4013      	ands	r3, r2
 8003884:	d11a      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003886:	4b61      	ldr	r3, [pc, #388]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	0049      	lsls	r1, r1, #1
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003894:	f7ff f842 	bl	800291c <HAL_GetTick>
 8003898:	0003      	movs	r3, r0
 800389a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	e008      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389e:	f7ff f83d 	bl	800291c <HAL_GetTick>
 80038a2:	0002      	movs	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	; 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0a6      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b56      	ldr	r3, [pc, #344]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4013      	ands	r3, r2
 80038ba:	d0f0      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038bc:	4b52      	ldr	r3, [pc, #328]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	23c0      	movs	r3, #192	; 0xc0
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d034      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	23c0      	movs	r3, #192	; 0xc0
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4013      	ands	r3, r2
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d02c      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038de:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a4b      	ldr	r2, [pc, #300]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038e8:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038ee:	2180      	movs	r1, #128	; 0x80
 80038f0:	0249      	lsls	r1, r1, #9
 80038f2:	430a      	orrs	r2, r1
 80038f4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038f6:	4b44      	ldr	r3, [pc, #272]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038f8:	6a1a      	ldr	r2, [r3, #32]
 80038fa:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80038fc:	4945      	ldr	r1, [pc, #276]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80038fe:	400a      	ands	r2, r1
 8003900:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003902:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	4013      	ands	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7ff f804 	bl	800291c <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003918:	e009      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fe ffff 	bl	800291c <HAL_GetTick>
 800391e:	0002      	movs	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	4a3c      	ldr	r2, [pc, #240]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e067      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	2202      	movs	r2, #2
 8003934:	4013      	ands	r3, r2
 8003936:	d0f0      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003938:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	4a34      	ldr	r2, [pc, #208]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800393e:	4013      	ands	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003948:	430a      	orrs	r2, r1
 800394a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800394c:	2317      	movs	r3, #23
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003956:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003958:	69da      	ldr	r2, [r3, #28]
 800395a:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800395c:	492f      	ldr	r1, [pc, #188]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800395e:	400a      	ands	r2, r1
 8003960:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	4013      	ands	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800396c:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	2203      	movs	r2, #3
 8003972:	4393      	bics	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800397c:	430a      	orrs	r2, r1
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2202      	movs	r2, #2
 8003986:	4013      	ands	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800398a:	4b1f      	ldr	r3, [pc, #124]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003990:	4013      	ands	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800399a:	430a      	orrs	r2, r1
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2220      	movs	r2, #32
 80039a4:	4013      	ands	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	2210      	movs	r2, #16
 80039ae:	4393      	bics	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039b8:	430a      	orrs	r2, r1
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	029b      	lsls	r3, r3, #10
 80039c4:	4013      	ands	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	4393      	bics	r3, r2
 80039d0:	0019      	movs	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039d8:	430a      	orrs	r2, r1
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4013      	ands	r3, r2
 80039e6:	d009      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039e8:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	2240      	movs	r2, #64	; 0x40
 80039ee:	4393      	bics	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039f8:	430a      	orrs	r2, r1
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b006      	add	sp, #24
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	fffffcff 	.word	0xfffffcff
 8003a14:	fffeffff 	.word	0xfffeffff
 8003a18:	00001388 	.word	0x00001388
 8003a1c:	efffffff 	.word	0xefffffff
 8003a20:	fffcffff 	.word	0xfffcffff

08003a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e08a      	b.n	8003b4c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	225d      	movs	r2, #93	; 0x5d
 8003a40:	5c9b      	ldrb	r3, [r3, r2]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	225c      	movs	r2, #92	; 0x5c
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f001 fc4e 	bl	80052f4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	225d      	movs	r2, #93	; 0x5d
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2140      	movs	r1, #64	; 0x40
 8003a6c:	438a      	bics	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	23e0      	movs	r3, #224	; 0xe0
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d902      	bls.n	8003a82 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e002      	b.n	8003a88 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	015b      	lsls	r3, r3, #5
 8003a86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	23f0      	movs	r3, #240	; 0xf0
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d008      	beq.n	8003aa6 <HAL_SPI_Init+0x82>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	23e0      	movs	r3, #224	; 0xe0
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d002      	beq.n	8003aa6 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10c      	bne.n	8003ac8 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	23e0      	movs	r3, #224	; 0xe0
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d903      	bls.n	8003ac2 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac0:	e002      	b.n	8003ac8 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6999      	ldr	r1, [r3, #24]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	0011      	movs	r1, r2
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	0011      	movs	r1, r2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4907      	ldr	r1, [pc, #28]	; (8003b54 <HAL_SPI_Init+0x130>)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	225d      	movs	r2, #93	; 0x5d
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b004      	add	sp, #16
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	fffff7ff 	.word	0xfffff7ff

08003b58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	1dbb      	adds	r3, r7, #6
 8003b66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b6c:	231f      	movs	r3, #31
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	225c      	movs	r2, #92	; 0x5c
 8003b78:	5c9b      	ldrb	r3, [r3, r2]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_SPI_Transmit+0x2a>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e14f      	b.n	8003e22 <HAL_SPI_Transmit+0x2ca>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	225c      	movs	r2, #92	; 0x5c
 8003b86:	2101      	movs	r1, #1
 8003b88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b8a:	f7fe fec7 	bl	800291c <HAL_GetTick>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	225d      	movs	r2, #93	; 0x5d
 8003b96:	5c9b      	ldrb	r3, [r3, r2]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d004      	beq.n	8003ba8 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8003b9e:	231f      	movs	r3, #31
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ba6:	e131      	b.n	8003e0c <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_SPI_Transmit+0x5e>
 8003bae:	1dbb      	adds	r3, r7, #6
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 8003bb6:	231f      	movs	r3, #31
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bbe:	e125      	b.n	8003e0c <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	225d      	movs	r2, #93	; 0x5d
 8003bc4:	2103      	movs	r1, #3
 8003bc6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1dba      	adds	r2, r7, #6
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1dba      	adds	r2, r7, #6
 8003be0:	8812      	ldrh	r2, [r2, #0]
 8003be2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2244      	movs	r2, #68	; 0x44
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2246      	movs	r2, #70	; 0x46
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d108      	bne.n	8003c24 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	01c9      	lsls	r1, r1, #7
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d007      	beq.n	8003c42 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2140      	movs	r1, #64	; 0x40
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	23e0      	movs	r3, #224	; 0xe0
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d948      	bls.n	8003ce0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <HAL_SPI_Transmit+0x108>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d139      	bne.n	8003cd4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	881a      	ldrh	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c7e:	e029      	b.n	8003cd4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2202      	movs	r2, #2
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d10f      	bne.n	8003cae <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cac:	e012      	b.n	8003cd4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_SPI_Transmit+0x172>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_SPI_Transmit+0x17c>
 8003cba:	f7fe fe2f 	bl	800291c <HAL_GetTick>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d804      	bhi.n	8003cd4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003cca:	231f      	movs	r3, #31
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2203      	movs	r2, #3
 8003cd0:	701a      	strb	r2, [r3, #0]
          goto error;
 8003cd2:	e09b      	b.n	8003e0c <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1d0      	bne.n	8003c80 <HAL_SPI_Transmit+0x128>
 8003cde:	e071      	b.n	8003dc4 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_SPI_Transmit+0x19a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d163      	bne.n	8003dba <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d90f      	bls.n	8003d1c <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3302      	adds	r3, #2
 8003d0a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b02      	subs	r3, #2
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d1a:	e04e      	b.n	8003dba <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	60ba      	str	r2, [r7, #8]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	320c      	adds	r2, #12
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d3a:	e03e      	b.n	8003dba <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2202      	movs	r2, #2
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d124      	bne.n	8003d94 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d90f      	bls.n	8003d74 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	881a      	ldrh	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	3302      	adds	r3, #2
 8003d62:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b02      	subs	r3, #2
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d72:	e022      	b.n	8003dba <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	60ba      	str	r2, [r7, #8]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	320c      	adds	r2, #12
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d92:	e012      	b.n	8003dba <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_SPI_Transmit+0x258>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	d00c      	beq.n	8003dba <HAL_SPI_Transmit+0x262>
 8003da0:	f7fe fdbc 	bl	800291c <HAL_GetTick>
 8003da4:	0002      	movs	r2, r0
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d804      	bhi.n	8003dba <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8003db0:	231f      	movs	r3, #31
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	2203      	movs	r2, #3
 8003db6:	701a      	strb	r2, [r3, #0]
          goto error;
 8003db8:	e028      	b.n	8003e0c <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1bb      	bne.n	8003d3c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 f916 	bl	8003ffc <SPI_EndRxTxTransaction>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8003e00:	231f      	movs	r3, #31
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	e000      	b.n	8003e0c <HAL_SPI_Transmit+0x2b4>
  }

error:
 8003e0a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	225d      	movs	r2, #93	; 0x5d
 8003e10:	2101      	movs	r1, #1
 8003e12:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	225c      	movs	r2, #92	; 0x5c
 8003e18:	2100      	movs	r1, #0
 8003e1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e1c:	231f      	movs	r3, #31
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	781b      	ldrb	r3, [r3, #0]
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b008      	add	sp, #32
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e3a:	e050      	b.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	d04d      	beq.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8003e48:	f7fe fd68 	bl	800291c <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d842      	bhi.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	21e0      	movs	r1, #224	; 0xe0
 8003e64:	438a      	bics	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	2382      	movs	r3, #130	; 0x82
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d113      	bne.n	8003e9c <SPI_WaitFlagStateUntilTimeout+0x70>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d005      	beq.n	8003e8c <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d107      	bne.n	8003e9c <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	438a      	bics	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	019b      	lsls	r3, r3, #6
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d110      	bne.n	8003eca <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4914      	ldr	r1, [pc, #80]	; (8003f04 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	0189      	lsls	r1, r1, #6
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	225d      	movs	r2, #93	; 0x5d
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	225c      	movs	r2, #92	; 0x5c
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e00e      	b.n	8003efc <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d101      	bne.n	8003ef2 <SPI_WaitFlagStateUntilTimeout+0xc6>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d1a0      	bne.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b004      	add	sp, #16
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	ffffdfff 	.word	0xffffdfff

08003f08 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8003f16:	e062      	b.n	8003fde <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	23c0      	movs	r3, #192	; 0xc0
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d10c      	bne.n	8003f3c <SPI_WaitFifoStateUntilTimeout+0x34>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	2117      	movs	r1, #23
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	d04d      	beq.n	8003fde <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <SPI_WaitFifoStateUntilTimeout+0x50>
 8003f48:	f7fe fce8 	bl	800291c <HAL_GetTick>
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d842      	bhi.n	8003fde <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	21e0      	movs	r1, #224	; 0xe0
 8003f64:	438a      	bics	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	2382      	movs	r3, #130	; 0x82
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d113      	bne.n	8003f9c <SPI_WaitFifoStateUntilTimeout+0x94>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d005      	beq.n	8003f8c <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d107      	bne.n	8003f9c <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2140      	movs	r1, #64	; 0x40
 8003f98:	438a      	bics	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	019b      	lsls	r3, r3, #6
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d110      	bne.n	8003fca <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4911      	ldr	r1, [pc, #68]	; (8003ff8 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	0189      	lsls	r1, r1, #6
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	225d      	movs	r2, #93	; 0x5d
 8003fce:	2101      	movs	r1, #1
 8003fd0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	225c      	movs	r2, #92	; 0x5c
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e008      	b.n	8003ff0 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d194      	bne.n	8003f18 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b006      	add	sp, #24
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	ffffdfff 	.word	0xffffdfff

08003ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	23c0      	movs	r3, #192	; 0xc0
 800400c:	0159      	lsls	r1, r3, #5
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	0013      	movs	r3, r2
 8004016:	2200      	movs	r2, #0
 8004018:	f7ff ff76 	bl	8003f08 <SPI_WaitFifoStateUntilTimeout>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d007      	beq.n	8004030 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004024:	2220      	movs	r2, #32
 8004026:	431a      	orrs	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e027      	b.n	8004080 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	0013      	movs	r3, r2
 800403a:	2200      	movs	r2, #0
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	f7ff fef5 	bl	8003e2c <SPI_WaitFlagStateUntilTimeout>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d007      	beq.n	8004056 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404a:	2220      	movs	r2, #32
 800404c:	431a      	orrs	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e014      	b.n	8004080 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	23c0      	movs	r3, #192	; 0xc0
 800405a:	00d9      	lsls	r1, r3, #3
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	0013      	movs	r3, r2
 8004064:	2200      	movs	r2, #0
 8004066:	f7ff ff4f 	bl	8003f08 <SPI_WaitFifoStateUntilTimeout>
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d007      	beq.n	800407e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004072:	2220      	movs	r2, #32
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e000      	b.n	8004080 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b004      	add	sp, #16
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e01e      	b.n	80040d8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	223d      	movs	r2, #61	; 0x3d
 800409e:	5c9b      	ldrb	r3, [r3, r2]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d107      	bne.n	80040b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	223c      	movs	r2, #60	; 0x3c
 80040aa:	2100      	movs	r1, #0
 80040ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f001 f995 	bl	80053e0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	223d      	movs	r2, #61	; 0x3d
 80040ba:	2102      	movs	r1, #2
 80040bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	0019      	movs	r1, r3
 80040c8:	0010      	movs	r0, r2
 80040ca:	f000 f809 	bl	80040e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	223d      	movs	r2, #61	; 0x3d
 80040d2:	2101      	movs	r1, #1
 80040d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b002      	add	sp, #8
 80040de:	bd80      	pop	{r7, pc}

080040e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a34      	ldr	r2, [pc, #208]	; (80041c8 <TIM_Base_SetConfig+0xe8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d008      	beq.n	800410e <TIM_Base_SetConfig+0x2e>
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	429a      	cmp	r2, r3
 8004104:	d003      	beq.n	800410e <TIM_Base_SetConfig+0x2e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a30      	ldr	r2, [pc, #192]	; (80041cc <TIM_Base_SetConfig+0xec>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d108      	bne.n	8004120 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2270      	movs	r2, #112	; 0x70
 8004112:	4393      	bics	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <TIM_Base_SetConfig+0xe8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <TIM_Base_SetConfig+0x7a>
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	05db      	lsls	r3, r3, #23
 800412e:	429a      	cmp	r2, r3
 8004130:	d013      	beq.n	800415a <TIM_Base_SetConfig+0x7a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a25      	ldr	r2, [pc, #148]	; (80041cc <TIM_Base_SetConfig+0xec>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00f      	beq.n	800415a <TIM_Base_SetConfig+0x7a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <TIM_Base_SetConfig+0xf0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00b      	beq.n	800415a <TIM_Base_SetConfig+0x7a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <TIM_Base_SetConfig+0xf4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <TIM_Base_SetConfig+0x7a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <TIM_Base_SetConfig+0xf8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_Base_SetConfig+0x7a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a21      	ldr	r2, [pc, #132]	; (80041dc <TIM_Base_SetConfig+0xfc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <TIM_Base_SetConfig+0x100>)
 800415e:	4013      	ands	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	4393      	bics	r3, r2
 8004172:	001a      	movs	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a0c      	ldr	r2, [pc, #48]	; (80041c8 <TIM_Base_SetConfig+0xe8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00b      	beq.n	80041b2 <TIM_Base_SetConfig+0xd2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <TIM_Base_SetConfig+0xf4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_Base_SetConfig+0xd2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <TIM_Base_SetConfig+0xf8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0xd2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a0b      	ldr	r2, [pc, #44]	; (80041dc <TIM_Base_SetConfig+0xfc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d103      	bne.n	80041ba <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	615a      	str	r2, [r3, #20]
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b004      	add	sp, #16
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40002000 	.word	0x40002000
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800
 80041e0:	fffffcff 	.word	0xfffffcff

080041e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	223c      	movs	r2, #60	; 0x3c
 80041f2:	5c9b      	ldrb	r3, [r3, r2]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e032      	b.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	223c      	movs	r2, #60	; 0x3c
 8004200:	2101      	movs	r1, #1
 8004202:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	223d      	movs	r2, #61	; 0x3d
 8004208:	2102      	movs	r1, #2
 800420a:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2170      	movs	r1, #112	; 0x70
 8004218:	438a      	bics	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6859      	ldr	r1, [r3, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2180      	movs	r1, #128	; 0x80
 800423a:	438a      	bics	r2, r1
 800423c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6899      	ldr	r1, [r3, #8]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	223d      	movs	r2, #61	; 0x3d
 8004254:	2101      	movs	r1, #1
 8004256:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	223c      	movs	r2, #60	; 0x3c
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b002      	add	sp, #8
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 800426c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6038      	str	r0, [r7, #0]
 8004274:	6079      	str	r1, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	001c      	movs	r4, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	085d      	lsrs	r5, r3, #1
 8004280:	2301      	movs	r3, #1
 8004282:	1c1e      	adds	r6, r3, #0
 8004284:	2201      	movs	r2, #1
 8004286:	4252      	negs	r2, r2
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <_ZSt5isinfd+0x58>)
 800428a:	0020      	movs	r0, r4
 800428c:	0029      	movs	r1, r5
 800428e:	f7fe fa0d 	bl	80026ac <__aeabi_dcmpun>
 8004292:	1e03      	subs	r3, r0, #0
 8004294:	d10a      	bne.n	80042ac <_ZSt5isinfd+0x40>
 8004296:	2201      	movs	r2, #1
 8004298:	4252      	negs	r2, r2
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <_ZSt5isinfd+0x58>)
 800429c:	0020      	movs	r0, r4
 800429e:	0029      	movs	r1, r5
 80042a0:	f7fc f8c8 	bl	8000434 <__aeabi_dcmple>
 80042a4:	1e03      	subs	r3, r0, #0
 80042a6:	d101      	bne.n	80042ac <_ZSt5isinfd+0x40>
 80042a8:	2300      	movs	r3, #0
 80042aa:	1c1e      	adds	r6, r3, #0
 80042ac:	b2f3      	uxtb	r3, r6
 80042ae:	2201      	movs	r2, #1
 80042b0:	4053      	eors	r3, r2
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	1c1a      	adds	r2, r3, #0
 80042b6:	2301      	movs	r3, #1
 80042b8:	4013      	ands	r3, r2
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	b003      	add	sp, #12
 80042c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c4:	7fefffff 	.word	0x7fefffff

080042c8 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6038      	str	r0, [r7, #0]
 80042d0:	6079      	str	r1, [r7, #4]
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6838      	ldr	r0, [r7, #0]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	f7fe f9e7 	bl	80026ac <__aeabi_dcmpun>
 80042de:	1e03      	subs	r3, r0, #0
 80042e0:	d001      	beq.n	80042e6 <_ZSt5isnand+0x1e>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <_ZSt5isnand+0x20>
 80042e6:	2300      	movs	r3, #0
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b002      	add	sp, #8
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80042f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f2:	b0bd      	sub	sp, #244	; 0xf4
 80042f4:	af04      	add	r7, sp, #16


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80042f6:	f7fe fad5 	bl	80028a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80042fa:	f000 fdcb 	bl	8004e94 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80042fe:	f000 fed1 	bl	80050a4 <_ZL12MX_GPIO_Initv>
	MX_SPI2_Init();
 8004302:	f000 fe27 	bl	8004f54 <_ZL12MX_SPI2_Initv>
	MX_TIM6_Init();
 8004306:	f000 fe7d 	bl	8005004 <_ZL12MX_TIM6_Initv>

	/* USER CODE BEGIN 2 */
	TFT_GFX tftDisplay{hspi2.Instance};
 800430a:	4bfe      	ldr	r3, [pc, #1016]	; (8004704 <main+0x414>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	26a8      	movs	r6, #168	; 0xa8
 8004310:	19bb      	adds	r3, r7, r6
 8004312:	0011      	movs	r1, r2
 8004314:	0018      	movs	r0, r3
 8004316:	f001 faeb 	bl	80058f0 <_ZN7TFT_GFXC1EP11SPI_TypeDef>
	 * LOW CELL VOLTAGE
	 * HIGH CELL VOLTAGE
	 * CURRENT
	 * AVG. TEMPERATURE
	 */
	const uint16_t textSize = 1;
 800431a:	23de      	movs	r3, #222	; 0xde
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2201      	movs	r2, #1
 8004320:	801a      	strh	r2, [r3, #0]
	const uint16_t lineThickness = 5;
 8004322:	23a6      	movs	r3, #166	; 0xa6
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	2205      	movs	r2, #5
 8004328:	801a      	strh	r2, [r3, #0]
	const uint8_t chosenStatesFontSize = 2;
 800432a:	23dd      	movs	r3, #221	; 0xdd
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	2202      	movs	r2, #2
 8004330:	701a      	strb	r2, [r3, #0]
	const uint8_t stateSelectorFontSize = 3;
 8004332:	23dc      	movs	r3, #220	; 0xdc
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	2203      	movs	r2, #3
 8004338:	701a      	strb	r2, [r3, #0]

	//LANDSCAPE W/ SD CARD SLOT ON LEFT SIDE
	tftDisplay.setRotation(1);
 800433a:	19bb      	adds	r3, r7, r6
 800433c:	2101      	movs	r1, #1
 800433e:	0018      	movs	r0, r3
 8004340:	f002 f90d 	bl	800655e <_ZN7TFT_GFX11setRotationEh>

	//Set background to correct color and add outline
	GUI_API::drawSelectionLines(tftDisplay, backgroundColor, fontColor, lineColor, lineThickness);
 8004344:	49f0      	ldr	r1, [pc, #960]	; (8004708 <main+0x418>)
 8004346:	4af0      	ldr	r2, [pc, #960]	; (8004708 <main+0x418>)
 8004348:	19b8      	adds	r0, r7, r6
 800434a:	2305      	movs	r3, #5
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	000b      	movs	r3, r1
 8004350:	2100      	movs	r1, #0
 8004352:	f002 fbf4 	bl	8006b3e <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>


	//CREATING SPEED TEXT BOX (TOP LEFT SQUARE)
	TFT_TEXT_BOX bottomSpeedTxtSel{&tftDisplay,backgroundColor,lineThickness + 0.15 * tftDisplay.width(), tftDisplay.height()/2 - (2*lineThickness), (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 8004356:	19bb      	adds	r3, r7, r6
 8004358:	0018      	movs	r0, r3
 800435a:	f002 f952 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 800435e:	0003      	movs	r3, r0
 8004360:	0018      	movs	r0, r3
 8004362:	f7fe f9f5 	bl	8002750 <__aeabi_i2d>
 8004366:	4ae9      	ldr	r2, [pc, #932]	; (800470c <main+0x41c>)
 8004368:	4be9      	ldr	r3, [pc, #932]	; (8004710 <main+0x420>)
 800436a:	f7fd fbe5 	bl	8001b38 <__aeabi_dmul>
 800436e:	0003      	movs	r3, r0
 8004370:	000c      	movs	r4, r1
 8004372:	0018      	movs	r0, r3
 8004374:	0021      	movs	r1, r4
 8004376:	2200      	movs	r2, #0
 8004378:	4be6      	ldr	r3, [pc, #920]	; (8004714 <main+0x424>)
 800437a:	f7fc fcb7 	bl	8000cec <__aeabi_dadd>
 800437e:	0003      	movs	r3, r0
 8004380:	000c      	movs	r4, r1
 8004382:	0018      	movs	r0, r3
 8004384:	0021      	movs	r1, r4
 8004386:	f7fc f8d7 	bl	8000538 <__aeabi_d2uiz>
 800438a:	0003      	movs	r3, r0
 800438c:	b29d      	uxth	r5, r3
 800438e:	19bb      	adds	r3, r7, r6
 8004390:	0018      	movs	r0, r3
 8004392:	f002 f940 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8004396:	0003      	movs	r3, r0
 8004398:	085b      	lsrs	r3, r3, #1
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b0a      	subs	r3, #10
 800439e:	b29c      	uxth	r4, r3
 80043a0:	19bb      	adds	r3, r7, r6
 80043a2:	0018      	movs	r0, r3
 80043a4:	f002 f92d 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 80043a8:	0003      	movs	r3, r0
 80043aa:	3b0d      	subs	r3, #13
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	b21b      	sxth	r3, r3
 80043b0:	19b9      	adds	r1, r7, r6
 80043b2:	2290      	movs	r2, #144	; 0x90
 80043b4:	18b8      	adds	r0, r7, r2
 80043b6:	2200      	movs	r2, #0
 80043b8:	9202      	str	r2, [sp, #8]
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	9400      	str	r4, [sp, #0]
 80043be:	002b      	movs	r3, r5
 80043c0:	2200      	movs	r2, #0
 80043c2:	f002 fcc8 	bl	8006d56 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomSpeedTxt = bottomSpeedTxtSel.write("SPEED (mph)", fontColor, 1);
 80043c6:	21da      	movs	r1, #218	; 0xda
 80043c8:	187c      	adds	r4, r7, r1
 80043ca:	4acf      	ldr	r2, [pc, #828]	; (8004708 <main+0x418>)
 80043cc:	49d2      	ldr	r1, [pc, #840]	; (8004718 <main+0x428>)
 80043ce:	2390      	movs	r3, #144	; 0x90
 80043d0:	18f8      	adds	r0, r7, r3
 80043d2:	2301      	movs	r3, #1
 80043d4:	f002 fd12 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 80043d8:	0003      	movs	r3, r0
 80043da:	8023      	strh	r3, [r4, #0]

	//CELL VOLTAGE TEXT BOX (TOP RIGHT)
	TFT_TEXT_BOX bottomVoltTxtSel{&tftDisplay,backgroundColor,lineThickness + 0.6 * tftDisplay.width(), tftDisplay.height()/2 - (2*lineThickness), (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 80043dc:	19bb      	adds	r3, r7, r6
 80043de:	0018      	movs	r0, r3
 80043e0:	f002 f90f 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 80043e4:	0003      	movs	r3, r0
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7fe f9b2 	bl	8002750 <__aeabi_i2d>
 80043ec:	4ac7      	ldr	r2, [pc, #796]	; (800470c <main+0x41c>)
 80043ee:	4bcb      	ldr	r3, [pc, #812]	; (800471c <main+0x42c>)
 80043f0:	f7fd fba2 	bl	8001b38 <__aeabi_dmul>
 80043f4:	0003      	movs	r3, r0
 80043f6:	000c      	movs	r4, r1
 80043f8:	0018      	movs	r0, r3
 80043fa:	0021      	movs	r1, r4
 80043fc:	2200      	movs	r2, #0
 80043fe:	4bc5      	ldr	r3, [pc, #788]	; (8004714 <main+0x424>)
 8004400:	f7fc fc74 	bl	8000cec <__aeabi_dadd>
 8004404:	0003      	movs	r3, r0
 8004406:	000c      	movs	r4, r1
 8004408:	0018      	movs	r0, r3
 800440a:	0021      	movs	r1, r4
 800440c:	f7fc f894 	bl	8000538 <__aeabi_d2uiz>
 8004410:	0003      	movs	r3, r0
 8004412:	b29d      	uxth	r5, r3
 8004414:	19bb      	adds	r3, r7, r6
 8004416:	0018      	movs	r0, r3
 8004418:	f002 f8fd 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 800441c:	0003      	movs	r3, r0
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b0a      	subs	r3, #10
 8004424:	b29c      	uxth	r4, r3
 8004426:	19bb      	adds	r3, r7, r6
 8004428:	0018      	movs	r0, r3
 800442a:	f002 f8ea 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 800442e:	0003      	movs	r3, r0
 8004430:	3b0d      	subs	r3, #13
 8004432:	b29b      	uxth	r3, r3
 8004434:	b21b      	sxth	r3, r3
 8004436:	19b9      	adds	r1, r7, r6
 8004438:	227c      	movs	r2, #124	; 0x7c
 800443a:	18b8      	adds	r0, r7, r2
 800443c:	2200      	movs	r2, #0
 800443e:	9202      	str	r2, [sp, #8]
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	9400      	str	r4, [sp, #0]
 8004444:	002b      	movs	r3, r5
 8004446:	2200      	movs	r2, #0
 8004448:	f002 fc85 	bl	8006d56 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomVoltTxt = bottomVoltTxtSel.write("BATTERY VOLTAGE", fontColor, 1);
 800444c:	21d8      	movs	r1, #216	; 0xd8
 800444e:	187c      	adds	r4, r7, r1
 8004450:	4aad      	ldr	r2, [pc, #692]	; (8004708 <main+0x418>)
 8004452:	49b3      	ldr	r1, [pc, #716]	; (8004720 <main+0x430>)
 8004454:	237c      	movs	r3, #124	; 0x7c
 8004456:	18f8      	adds	r0, r7, r3
 8004458:	2301      	movs	r3, #1
 800445a:	f002 fccf 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 800445e:	0003      	movs	r3, r0
 8004460:	8023      	strh	r3, [r4, #0]

	//BATTERY CURRENT TEXT BOX (BOTTOM LEFT)
	TFT_TEXT_BOX bottomCurrentTxtSel{&tftDisplay,backgroundColor,lineThickness + 0.1 * tftDisplay.width(), tftDisplay.height() - (3*lineThickness), (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 8004462:	19bb      	adds	r3, r7, r6
 8004464:	0018      	movs	r0, r3
 8004466:	f002 f8cc 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 800446a:	0003      	movs	r3, r0
 800446c:	0018      	movs	r0, r3
 800446e:	f7fe f96f 	bl	8002750 <__aeabi_i2d>
 8004472:	4aac      	ldr	r2, [pc, #688]	; (8004724 <main+0x434>)
 8004474:	4bac      	ldr	r3, [pc, #688]	; (8004728 <main+0x438>)
 8004476:	f7fd fb5f 	bl	8001b38 <__aeabi_dmul>
 800447a:	0003      	movs	r3, r0
 800447c:	000c      	movs	r4, r1
 800447e:	0018      	movs	r0, r3
 8004480:	0021      	movs	r1, r4
 8004482:	2200      	movs	r2, #0
 8004484:	4ba3      	ldr	r3, [pc, #652]	; (8004714 <main+0x424>)
 8004486:	f7fc fc31 	bl	8000cec <__aeabi_dadd>
 800448a:	0003      	movs	r3, r0
 800448c:	000c      	movs	r4, r1
 800448e:	0018      	movs	r0, r3
 8004490:	0021      	movs	r1, r4
 8004492:	f7fc f851 	bl	8000538 <__aeabi_d2uiz>
 8004496:	0003      	movs	r3, r0
 8004498:	b29d      	uxth	r5, r3
 800449a:	19bb      	adds	r3, r7, r6
 800449c:	0018      	movs	r0, r3
 800449e:	f002 f8ba 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 80044a2:	0003      	movs	r3, r0
 80044a4:	3b0f      	subs	r3, #15
 80044a6:	b29c      	uxth	r4, r3
 80044a8:	19bb      	adds	r3, r7, r6
 80044aa:	0018      	movs	r0, r3
 80044ac:	f002 f8a9 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 80044b0:	0003      	movs	r3, r0
 80044b2:	3b0d      	subs	r3, #13
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	19b9      	adds	r1, r7, r6
 80044ba:	2268      	movs	r2, #104	; 0x68
 80044bc:	18b8      	adds	r0, r7, r2
 80044be:	2200      	movs	r2, #0
 80044c0:	9202      	str	r2, [sp, #8]
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	9400      	str	r4, [sp, #0]
 80044c6:	002b      	movs	r3, r5
 80044c8:	2200      	movs	r2, #0
 80044ca:	f002 fc44 	bl	8006d56 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomCurrentTxt = bottomCurrentTxtSel.write("BATTERY CURRENT", fontColor, 1);
 80044ce:	21d6      	movs	r1, #214	; 0xd6
 80044d0:	187c      	adds	r4, r7, r1
 80044d2:	4a8d      	ldr	r2, [pc, #564]	; (8004708 <main+0x418>)
 80044d4:	4995      	ldr	r1, [pc, #596]	; (800472c <main+0x43c>)
 80044d6:	2368      	movs	r3, #104	; 0x68
 80044d8:	18f8      	adds	r0, r7, r3
 80044da:	2301      	movs	r3, #1
 80044dc:	f002 fc8e 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 80044e0:	0003      	movs	r3, r0
 80044e2:	8023      	strh	r3, [r4, #0]

	//AVG. TEMPERATURE TEXT BOX (BOTTOM RIGHT)
	TFT_TEXT_BOX bottomTempTxtSel{&tftDisplay,backgroundColor,lineThickness + 0.6 * tftDisplay.width(), tftDisplay.height() - (3*lineThickness), (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 80044e4:	19bb      	adds	r3, r7, r6
 80044e6:	0018      	movs	r0, r3
 80044e8:	f002 f88b 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 80044ec:	0003      	movs	r3, r0
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7fe f92e 	bl	8002750 <__aeabi_i2d>
 80044f4:	4a85      	ldr	r2, [pc, #532]	; (800470c <main+0x41c>)
 80044f6:	4b89      	ldr	r3, [pc, #548]	; (800471c <main+0x42c>)
 80044f8:	f7fd fb1e 	bl	8001b38 <__aeabi_dmul>
 80044fc:	0003      	movs	r3, r0
 80044fe:	000c      	movs	r4, r1
 8004500:	0018      	movs	r0, r3
 8004502:	0021      	movs	r1, r4
 8004504:	2200      	movs	r2, #0
 8004506:	4b83      	ldr	r3, [pc, #524]	; (8004714 <main+0x424>)
 8004508:	f7fc fbf0 	bl	8000cec <__aeabi_dadd>
 800450c:	0003      	movs	r3, r0
 800450e:	000c      	movs	r4, r1
 8004510:	0018      	movs	r0, r3
 8004512:	0021      	movs	r1, r4
 8004514:	f7fc f810 	bl	8000538 <__aeabi_d2uiz>
 8004518:	0003      	movs	r3, r0
 800451a:	b29d      	uxth	r5, r3
 800451c:	19bb      	adds	r3, r7, r6
 800451e:	0018      	movs	r0, r3
 8004520:	f002 f879 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8004524:	0003      	movs	r3, r0
 8004526:	3b0f      	subs	r3, #15
 8004528:	b29c      	uxth	r4, r3
 800452a:	19bb      	adds	r3, r7, r6
 800452c:	0018      	movs	r0, r3
 800452e:	f002 f868 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8004532:	0003      	movs	r3, r0
 8004534:	3b0d      	subs	r3, #13
 8004536:	b29b      	uxth	r3, r3
 8004538:	b21b      	sxth	r3, r3
 800453a:	19b9      	adds	r1, r7, r6
 800453c:	2254      	movs	r2, #84	; 0x54
 800453e:	18b8      	adds	r0, r7, r2
 8004540:	2200      	movs	r2, #0
 8004542:	9202      	str	r2, [sp, #8]
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	9400      	str	r4, [sp, #0]
 8004548:	002b      	movs	r3, r5
 800454a:	2200      	movs	r2, #0
 800454c:	f002 fc03 	bl	8006d56 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomTempTxt = bottomTempTxtSel.write("TEMPERATURE (F)", fontColor, 1);
 8004550:	21d4      	movs	r1, #212	; 0xd4
 8004552:	187c      	adds	r4, r7, r1
 8004554:	4a6c      	ldr	r2, [pc, #432]	; (8004708 <main+0x418>)
 8004556:	4976      	ldr	r1, [pc, #472]	; (8004730 <main+0x440>)
 8004558:	2354      	movs	r3, #84	; 0x54
 800455a:	18f8      	adds	r0, r7, r3
 800455c:	2301      	movs	r3, #1
 800455e:	f002 fc4d 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 8004562:	0003      	movs	r3, r0
 8004564:	8023      	strh	r3, [r4, #0]


	//SPEED SELECTOR
	TFT_TEXT_BOX selectorSpeed{&tftDisplay,backgroundColor, lineThickness + 0.0 * tftDisplay.width(), 0.2 * tftDisplay.height() - (lineThickness), (int16_t)(tftDisplay.width() / 2), true};
 8004566:	19bb      	adds	r3, r7, r6
 8004568:	0018      	movs	r0, r3
 800456a:	f002 f84a 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 800456e:	0003      	movs	r3, r0
 8004570:	0018      	movs	r0, r3
 8004572:	f7fe f8ed 	bl	8002750 <__aeabi_i2d>
 8004576:	2200      	movs	r2, #0
 8004578:	2300      	movs	r3, #0
 800457a:	f7fd fadd 	bl	8001b38 <__aeabi_dmul>
 800457e:	0003      	movs	r3, r0
 8004580:	000c      	movs	r4, r1
 8004582:	0018      	movs	r0, r3
 8004584:	0021      	movs	r1, r4
 8004586:	2200      	movs	r2, #0
 8004588:	4b62      	ldr	r3, [pc, #392]	; (8004714 <main+0x424>)
 800458a:	f7fc fbaf 	bl	8000cec <__aeabi_dadd>
 800458e:	0003      	movs	r3, r0
 8004590:	000c      	movs	r4, r1
 8004592:	0018      	movs	r0, r3
 8004594:	0021      	movs	r1, r4
 8004596:	f7fb ffcf 	bl	8000538 <__aeabi_d2uiz>
 800459a:	0003      	movs	r3, r0
 800459c:	b29d      	uxth	r5, r3
 800459e:	19bb      	adds	r3, r7, r6
 80045a0:	0018      	movs	r0, r3
 80045a2:	f002 f838 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 80045a6:	0003      	movs	r3, r0
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7fe f8d1 	bl	8002750 <__aeabi_i2d>
 80045ae:	4a5d      	ldr	r2, [pc, #372]	; (8004724 <main+0x434>)
 80045b0:	4b60      	ldr	r3, [pc, #384]	; (8004734 <main+0x444>)
 80045b2:	f7fd fac1 	bl	8001b38 <__aeabi_dmul>
 80045b6:	0003      	movs	r3, r0
 80045b8:	000c      	movs	r4, r1
 80045ba:	0018      	movs	r0, r3
 80045bc:	0021      	movs	r1, r4
 80045be:	2200      	movs	r2, #0
 80045c0:	4b54      	ldr	r3, [pc, #336]	; (8004714 <main+0x424>)
 80045c2:	f7fd fd2b 	bl	800201c <__aeabi_dsub>
 80045c6:	0003      	movs	r3, r0
 80045c8:	000c      	movs	r4, r1
 80045ca:	0018      	movs	r0, r3
 80045cc:	0021      	movs	r1, r4
 80045ce:	f7fb ffb3 	bl	8000538 <__aeabi_d2uiz>
 80045d2:	0003      	movs	r3, r0
 80045d4:	b29c      	uxth	r4, r3
 80045d6:	19bb      	adds	r3, r7, r6
 80045d8:	0018      	movs	r0, r3
 80045da:	f002 f812 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 80045de:	0003      	movs	r3, r0
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	19b9      	adds	r1, r7, r6
 80045e8:	2240      	movs	r2, #64	; 0x40
 80045ea:	18b8      	adds	r0, r7, r2
 80045ec:	2201      	movs	r2, #1
 80045ee:	9202      	str	r2, [sp, #8]
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	9400      	str	r4, [sp, #0]
 80045f4:	002b      	movs	r3, r5
 80045f6:	2200      	movs	r2, #0
 80045f8:	f002 fbad 	bl	8006d56 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t speedTxt = selectorSpeed.write("", fontColor, 6);
 80045fc:	21d2      	movs	r1, #210	; 0xd2
 80045fe:	187c      	adds	r4, r7, r1
 8004600:	4a41      	ldr	r2, [pc, #260]	; (8004708 <main+0x418>)
 8004602:	494d      	ldr	r1, [pc, #308]	; (8004738 <main+0x448>)
 8004604:	2340      	movs	r3, #64	; 0x40
 8004606:	18f8      	adds	r0, r7, r3
 8004608:	2306      	movs	r3, #6
 800460a:	f002 fbf7 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 800460e:	0003      	movs	r3, r0
 8004610:	8023      	strh	r3, [r4, #0]

	//BATTERY CURRENT SELECTOR
	TFT_TEXT_BOX selectorBatCurrent{&tftDisplay,backgroundColor, lineThickness + 0.0 * tftDisplay.width(), 0.70 * tftDisplay.height() - (lineThickness), (int16_t)(tftDisplay.width() / 2), true};
 8004612:	19bb      	adds	r3, r7, r6
 8004614:	0018      	movs	r0, r3
 8004616:	f001 fff4 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 800461a:	0003      	movs	r3, r0
 800461c:	0018      	movs	r0, r3
 800461e:	f7fe f897 	bl	8002750 <__aeabi_i2d>
 8004622:	2200      	movs	r2, #0
 8004624:	2300      	movs	r3, #0
 8004626:	f7fd fa87 	bl	8001b38 <__aeabi_dmul>
 800462a:	0003      	movs	r3, r0
 800462c:	000c      	movs	r4, r1
 800462e:	0018      	movs	r0, r3
 8004630:	0021      	movs	r1, r4
 8004632:	2200      	movs	r2, #0
 8004634:	4b37      	ldr	r3, [pc, #220]	; (8004714 <main+0x424>)
 8004636:	f7fc fb59 	bl	8000cec <__aeabi_dadd>
 800463a:	0003      	movs	r3, r0
 800463c:	000c      	movs	r4, r1
 800463e:	0018      	movs	r0, r3
 8004640:	0021      	movs	r1, r4
 8004642:	f7fb ff79 	bl	8000538 <__aeabi_d2uiz>
 8004646:	0003      	movs	r3, r0
 8004648:	b29d      	uxth	r5, r3
 800464a:	19bb      	adds	r3, r7, r6
 800464c:	0018      	movs	r0, r3
 800464e:	f001 ffe2 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8004652:	0003      	movs	r3, r0
 8004654:	0018      	movs	r0, r3
 8004656:	f7fe f87b 	bl	8002750 <__aeabi_i2d>
 800465a:	4a38      	ldr	r2, [pc, #224]	; (800473c <main+0x44c>)
 800465c:	4b38      	ldr	r3, [pc, #224]	; (8004740 <main+0x450>)
 800465e:	f7fd fa6b 	bl	8001b38 <__aeabi_dmul>
 8004662:	0003      	movs	r3, r0
 8004664:	000c      	movs	r4, r1
 8004666:	0018      	movs	r0, r3
 8004668:	0021      	movs	r1, r4
 800466a:	2200      	movs	r2, #0
 800466c:	4b29      	ldr	r3, [pc, #164]	; (8004714 <main+0x424>)
 800466e:	f7fd fcd5 	bl	800201c <__aeabi_dsub>
 8004672:	0003      	movs	r3, r0
 8004674:	000c      	movs	r4, r1
 8004676:	0018      	movs	r0, r3
 8004678:	0021      	movs	r1, r4
 800467a:	f7fb ff5d 	bl	8000538 <__aeabi_d2uiz>
 800467e:	0003      	movs	r3, r0
 8004680:	b29c      	uxth	r4, r3
 8004682:	19bb      	adds	r3, r7, r6
 8004684:	0018      	movs	r0, r3
 8004686:	f001 ffbc 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 800468a:	0003      	movs	r3, r0
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	b29b      	uxth	r3, r3
 8004690:	b21b      	sxth	r3, r3
 8004692:	19b9      	adds	r1, r7, r6
 8004694:	222c      	movs	r2, #44	; 0x2c
 8004696:	18b8      	adds	r0, r7, r2
 8004698:	2201      	movs	r2, #1
 800469a:	9202      	str	r2, [sp, #8]
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	9400      	str	r4, [sp, #0]
 80046a0:	002b      	movs	r3, r5
 80046a2:	2200      	movs	r2, #0
 80046a4:	f002 fb57 	bl	8006d56 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t batCurrentTxt = selectorBatCurrent.write("", fontColor, 6);
 80046a8:	21d0      	movs	r1, #208	; 0xd0
 80046aa:	187c      	adds	r4, r7, r1
 80046ac:	4a16      	ldr	r2, [pc, #88]	; (8004708 <main+0x418>)
 80046ae:	4922      	ldr	r1, [pc, #136]	; (8004738 <main+0x448>)
 80046b0:	232c      	movs	r3, #44	; 0x2c
 80046b2:	18f8      	adds	r0, r7, r3
 80046b4:	2306      	movs	r3, #6
 80046b6:	f002 fba1 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 80046ba:	0003      	movs	r3, r0
 80046bc:	8023      	strh	r3, [r4, #0]

	//BATTERY VOLTAGE SELECTOR
	TFT_TEXT_BOX selectorBatVolt{&tftDisplay,backgroundColor, lineThickness + 0.50 * tftDisplay.width(), 0.2 * tftDisplay.height() - (lineThickness), (int16_t)(tftDisplay.width() - lineThickness), true};
 80046be:	19bb      	adds	r3, r7, r6
 80046c0:	0018      	movs	r0, r3
 80046c2:	f001 ff9e 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 80046c6:	0003      	movs	r3, r0
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fe f841 	bl	8002750 <__aeabi_i2d>
 80046ce:	2200      	movs	r2, #0
 80046d0:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <main+0x454>)
 80046d2:	f7fd fa31 	bl	8001b38 <__aeabi_dmul>
 80046d6:	0003      	movs	r3, r0
 80046d8:	000c      	movs	r4, r1
 80046da:	0018      	movs	r0, r3
 80046dc:	0021      	movs	r1, r4
 80046de:	2200      	movs	r2, #0
 80046e0:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <main+0x424>)
 80046e2:	f7fc fb03 	bl	8000cec <__aeabi_dadd>
 80046e6:	0003      	movs	r3, r0
 80046e8:	000c      	movs	r4, r1
 80046ea:	0018      	movs	r0, r3
 80046ec:	0021      	movs	r1, r4
 80046ee:	f7fb ff23 	bl	8000538 <__aeabi_d2uiz>
 80046f2:	0003      	movs	r3, r0
 80046f4:	b29d      	uxth	r5, r3
 80046f6:	19bb      	adds	r3, r7, r6
 80046f8:	0018      	movs	r0, r3
 80046fa:	f001 ff8c 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 80046fe:	0003      	movs	r3, r0
 8004700:	0018      	movs	r0, r3
 8004702:	e021      	b.n	8004748 <main+0x458>
 8004704:	20000090 	.word	0x20000090
 8004708:	0000fc60 	.word	0x0000fc60
 800470c:	33333333 	.word	0x33333333
 8004710:	3fc33333 	.word	0x3fc33333
 8004714:	40140000 	.word	0x40140000
 8004718:	08008a50 	.word	0x08008a50
 800471c:	3fe33333 	.word	0x3fe33333
 8004720:	08008a5c 	.word	0x08008a5c
 8004724:	9999999a 	.word	0x9999999a
 8004728:	3fb99999 	.word	0x3fb99999
 800472c:	08008a6c 	.word	0x08008a6c
 8004730:	08008a7c 	.word	0x08008a7c
 8004734:	3fc99999 	.word	0x3fc99999
 8004738:	08008a8c 	.word	0x08008a8c
 800473c:	66666666 	.word	0x66666666
 8004740:	3fe66666 	.word	0x3fe66666
 8004744:	3fe00000 	.word	0x3fe00000
 8004748:	f7fe f802 	bl	8002750 <__aeabi_i2d>
 800474c:	4a9e      	ldr	r2, [pc, #632]	; (80049c8 <main+0x6d8>)
 800474e:	4b9f      	ldr	r3, [pc, #636]	; (80049cc <main+0x6dc>)
 8004750:	f7fd f9f2 	bl	8001b38 <__aeabi_dmul>
 8004754:	0003      	movs	r3, r0
 8004756:	000c      	movs	r4, r1
 8004758:	0018      	movs	r0, r3
 800475a:	0021      	movs	r1, r4
 800475c:	2200      	movs	r2, #0
 800475e:	4b9c      	ldr	r3, [pc, #624]	; (80049d0 <main+0x6e0>)
 8004760:	f7fd fc5c 	bl	800201c <__aeabi_dsub>
 8004764:	0003      	movs	r3, r0
 8004766:	000c      	movs	r4, r1
 8004768:	0018      	movs	r0, r3
 800476a:	0021      	movs	r1, r4
 800476c:	f7fb fee4 	bl	8000538 <__aeabi_d2uiz>
 8004770:	0003      	movs	r3, r0
 8004772:	b29c      	uxth	r4, r3
 8004774:	19bb      	adds	r3, r7, r6
 8004776:	0018      	movs	r0, r3
 8004778:	f001 ff43 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 800477c:	0003      	movs	r3, r0
 800477e:	3b05      	subs	r3, #5
 8004780:	b29b      	uxth	r3, r3
 8004782:	b21b      	sxth	r3, r3
 8004784:	19b9      	adds	r1, r7, r6
 8004786:	2218      	movs	r2, #24
 8004788:	18b8      	adds	r0, r7, r2
 800478a:	2201      	movs	r2, #1
 800478c:	9202      	str	r2, [sp, #8]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	9400      	str	r4, [sp, #0]
 8004792:	002b      	movs	r3, r5
 8004794:	2200      	movs	r2, #0
 8004796:	f002 fade 	bl	8006d56 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t batVoltTxt = selectorBatVolt.write("", fontColor, 6);
 800479a:	21ce      	movs	r1, #206	; 0xce
 800479c:	187c      	adds	r4, r7, r1
 800479e:	4a8d      	ldr	r2, [pc, #564]	; (80049d4 <main+0x6e4>)
 80047a0:	498d      	ldr	r1, [pc, #564]	; (80049d8 <main+0x6e8>)
 80047a2:	2318      	movs	r3, #24
 80047a4:	18f8      	adds	r0, r7, r3
 80047a6:	2306      	movs	r3, #6
 80047a8:	f002 fb28 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 80047ac:	0003      	movs	r3, r0
 80047ae:	8023      	strh	r3, [r4, #0]

	//TEMPERATURE SELECTOR
	TFT_TEXT_BOX selectorTemp{&tftDisplay,backgroundColor, lineThickness + 0.50 * tftDisplay.width(), 0.70 * tftDisplay.height() - (lineThickness), (int16_t)(tftDisplay.width() - lineThickness), true};
 80047b0:	19bb      	adds	r3, r7, r6
 80047b2:	0018      	movs	r0, r3
 80047b4:	f001 ff25 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 80047b8:	0003      	movs	r3, r0
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7fd ffc8 	bl	8002750 <__aeabi_i2d>
 80047c0:	2200      	movs	r2, #0
 80047c2:	4b86      	ldr	r3, [pc, #536]	; (80049dc <main+0x6ec>)
 80047c4:	f7fd f9b8 	bl	8001b38 <__aeabi_dmul>
 80047c8:	0003      	movs	r3, r0
 80047ca:	000c      	movs	r4, r1
 80047cc:	0018      	movs	r0, r3
 80047ce:	0021      	movs	r1, r4
 80047d0:	2200      	movs	r2, #0
 80047d2:	4b7f      	ldr	r3, [pc, #508]	; (80049d0 <main+0x6e0>)
 80047d4:	f7fc fa8a 	bl	8000cec <__aeabi_dadd>
 80047d8:	0003      	movs	r3, r0
 80047da:	000c      	movs	r4, r1
 80047dc:	0018      	movs	r0, r3
 80047de:	0021      	movs	r1, r4
 80047e0:	f7fb feaa 	bl	8000538 <__aeabi_d2uiz>
 80047e4:	0003      	movs	r3, r0
 80047e6:	b29d      	uxth	r5, r3
 80047e8:	19bb      	adds	r3, r7, r6
 80047ea:	0018      	movs	r0, r3
 80047ec:	f001 ff13 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 80047f0:	0003      	movs	r3, r0
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7fd ffac 	bl	8002750 <__aeabi_i2d>
 80047f8:	4a79      	ldr	r2, [pc, #484]	; (80049e0 <main+0x6f0>)
 80047fa:	4b7a      	ldr	r3, [pc, #488]	; (80049e4 <main+0x6f4>)
 80047fc:	f7fd f99c 	bl	8001b38 <__aeabi_dmul>
 8004800:	0003      	movs	r3, r0
 8004802:	000c      	movs	r4, r1
 8004804:	0018      	movs	r0, r3
 8004806:	0021      	movs	r1, r4
 8004808:	2200      	movs	r2, #0
 800480a:	4b71      	ldr	r3, [pc, #452]	; (80049d0 <main+0x6e0>)
 800480c:	f7fd fc06 	bl	800201c <__aeabi_dsub>
 8004810:	0003      	movs	r3, r0
 8004812:	000c      	movs	r4, r1
 8004814:	0018      	movs	r0, r3
 8004816:	0021      	movs	r1, r4
 8004818:	f7fb fe8e 	bl	8000538 <__aeabi_d2uiz>
 800481c:	0003      	movs	r3, r0
 800481e:	b29c      	uxth	r4, r3
 8004820:	19bb      	adds	r3, r7, r6
 8004822:	0018      	movs	r0, r3
 8004824:	f001 feed 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8004828:	0003      	movs	r3, r0
 800482a:	3b05      	subs	r3, #5
 800482c:	b29b      	uxth	r3, r3
 800482e:	b21b      	sxth	r3, r3
 8004830:	19b9      	adds	r1, r7, r6
 8004832:	1d38      	adds	r0, r7, #4
 8004834:	2201      	movs	r2, #1
 8004836:	9202      	str	r2, [sp, #8]
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	9400      	str	r4, [sp, #0]
 800483c:	002b      	movs	r3, r5
 800483e:	2200      	movs	r2, #0
 8004840:	f002 fa89 	bl	8006d56 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t tempTxt = selectorTemp.write("", fontColor, 6);
 8004844:	23cc      	movs	r3, #204	; 0xcc
 8004846:	18fc      	adds	r4, r7, r3
 8004848:	4a62      	ldr	r2, [pc, #392]	; (80049d4 <main+0x6e4>)
 800484a:	4963      	ldr	r1, [pc, #396]	; (80049d8 <main+0x6e8>)
 800484c:	1d38      	adds	r0, r7, #4
 800484e:	2306      	movs	r3, #6
 8004850:	f002 fad4 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
 8004854:	0003      	movs	r3, r0
 8004856:	8023      	strh	r3, [r4, #0]
	 * 		78 < batter voltage < 109
	 * 2. CREATE SELECTORS FOR EACH QUADRANT
	 * 3. IMPLEMENT COLOR FONT CHANGE FOR TOO HIGH/TOO LOW
	 */

	int prev_s = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	22c8      	movs	r2, #200	; 0xc8
 800485c:	18ba      	adds	r2, r7, r2
 800485e:	6013      	str	r3, [r2, #0]
	int prev_t = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	22c4      	movs	r2, #196	; 0xc4
 8004864:	18ba      	adds	r2, r7, r2
 8004866:	6013      	str	r3, [r2, #0]
	while(true){

		int i;


		int s = rand() % 2;
 8004868:	f003 ff10 	bl	800868c <rand>
 800486c:	0002      	movs	r2, r0
 800486e:	4b5e      	ldr	r3, [pc, #376]	; (80049e8 <main+0x6f8>)
 8004870:	4013      	ands	r3, r2
 8004872:	d504      	bpl.n	800487e <main+0x58e>
 8004874:	3b01      	subs	r3, #1
 8004876:	2202      	movs	r2, #2
 8004878:	4252      	negs	r2, r2
 800487a:	4313      	orrs	r3, r2
 800487c:	3301      	adds	r3, #1
 800487e:	22c0      	movs	r2, #192	; 0xc0
 8004880:	18b9      	adds	r1, r7, r2
 8004882:	600b      	str	r3, [r1, #0]
		//		{
		//			updateFloatSelector(selectorSpeed, s, 3);
		//			int prev_s = s;
		//		}

		if(s != prev_s)
 8004884:	18bb      	adds	r3, r7, r2
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	23c8      	movs	r3, #200	; 0xc8
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d012      	beq.n	80048b8 <main+0x5c8>
		{
			updateFloatSelector(selectorSpeed, 20, 3);
 8004892:	4a56      	ldr	r2, [pc, #344]	; (80049ec <main+0x6fc>)
 8004894:	4956      	ldr	r1, [pc, #344]	; (80049f0 <main+0x700>)
 8004896:	2340      	movs	r3, #64	; 0x40
 8004898:	18f8      	adds	r0, r7, r3
 800489a:	2301      	movs	r3, #1
 800489c:	425b      	negs	r3, r3
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	4b52      	ldr	r3, [pc, #328]	; (80049ec <main+0x6fc>)
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	0013      	movs	r3, r2
 80048a6:	2203      	movs	r2, #3
 80048a8:	f000 fa62 	bl	8004d70 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>
			int prev_s = s;
 80048ac:	23c0      	movs	r3, #192	; 0xc0
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	22bc      	movs	r2, #188	; 0xbc
 80048b4:	18ba      	adds	r2, r7, r2
 80048b6:	6013      	str	r3, [r2, #0]
		}


		int t = rand() % 110;
 80048b8:	f003 fee8 	bl	800868c <rand>
 80048bc:	0003      	movs	r3, r0
 80048be:	216e      	movs	r1, #110	; 0x6e
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fb fd91 	bl	80003e8 <__aeabi_idivmod>
 80048c6:	000b      	movs	r3, r1
 80048c8:	22b8      	movs	r2, #184	; 0xb8
 80048ca:	18b9      	adds	r1, r7, r2
 80048cc:	600b      	str	r3, [r1, #0]
		updateFloatSelector(selectorTemp, t, 3);
 80048ce:	18bb      	adds	r3, r7, r2
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	f7fc f9c1 	bl	8000c58 <__aeabi_i2f>
 80048d6:	1c01      	adds	r1, r0, #0
 80048d8:	4a44      	ldr	r2, [pc, #272]	; (80049ec <main+0x6fc>)
 80048da:	1d38      	adds	r0, r7, #4
 80048dc:	2301      	movs	r3, #1
 80048de:	425b      	negs	r3, r3
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	4b42      	ldr	r3, [pc, #264]	; (80049ec <main+0x6fc>)
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	0013      	movs	r3, r2
 80048e8:	2203      	movs	r2, #3
 80048ea:	f000 fa41 	bl	8004d70 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>

		float q = (float)rand()/(RAND_MAX + 1)+1+(rand()%150);
 80048ee:	f003 fecd 	bl	800868c <rand>
 80048f2:	0003      	movs	r3, r0
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7fc f9af 	bl	8000c58 <__aeabi_i2f>
 80048fa:	1c03      	adds	r3, r0, #0
 80048fc:	21cf      	movs	r1, #207	; 0xcf
 80048fe:	0609      	lsls	r1, r1, #24
 8004900:	1c18      	adds	r0, r3, #0
 8004902:	f7fb ffd1 	bl	80008a8 <__aeabi_fdiv>
 8004906:	1c03      	adds	r3, r0, #0
 8004908:	21fe      	movs	r1, #254	; 0xfe
 800490a:	0589      	lsls	r1, r1, #22
 800490c:	1c18      	adds	r0, r3, #0
 800490e:	f7fb fe31 	bl	8000574 <__aeabi_fadd>
 8004912:	1c03      	adds	r3, r0, #0
 8004914:	1c1c      	adds	r4, r3, #0
 8004916:	f003 feb9 	bl	800868c <rand>
 800491a:	0003      	movs	r3, r0
 800491c:	2196      	movs	r1, #150	; 0x96
 800491e:	0018      	movs	r0, r3
 8004920:	f7fb fd62 	bl	80003e8 <__aeabi_idivmod>
 8004924:	000b      	movs	r3, r1
 8004926:	0018      	movs	r0, r3
 8004928:	f7fc f996 	bl	8000c58 <__aeabi_i2f>
 800492c:	1c03      	adds	r3, r0, #0
 800492e:	1c19      	adds	r1, r3, #0
 8004930:	1c20      	adds	r0, r4, #0
 8004932:	f7fb fe1f 	bl	8000574 <__aeabi_fadd>
 8004936:	1c03      	adds	r3, r0, #0
 8004938:	25b4      	movs	r5, #180	; 0xb4
 800493a:	197a      	adds	r2, r7, r5
 800493c:	6013      	str	r3, [r2, #0]
		float r = (float)rand()/(RAND_MAX + 1)+1+(rand()%150);
 800493e:	f003 fea5 	bl	800868c <rand>
 8004942:	0003      	movs	r3, r0
 8004944:	0018      	movs	r0, r3
 8004946:	f7fc f987 	bl	8000c58 <__aeabi_i2f>
 800494a:	1c03      	adds	r3, r0, #0
 800494c:	21cf      	movs	r1, #207	; 0xcf
 800494e:	0609      	lsls	r1, r1, #24
 8004950:	1c18      	adds	r0, r3, #0
 8004952:	f7fb ffa9 	bl	80008a8 <__aeabi_fdiv>
 8004956:	1c03      	adds	r3, r0, #0
 8004958:	21fe      	movs	r1, #254	; 0xfe
 800495a:	0589      	lsls	r1, r1, #22
 800495c:	1c18      	adds	r0, r3, #0
 800495e:	f7fb fe09 	bl	8000574 <__aeabi_fadd>
 8004962:	1c03      	adds	r3, r0, #0
 8004964:	1c1c      	adds	r4, r3, #0
 8004966:	f003 fe91 	bl	800868c <rand>
 800496a:	0003      	movs	r3, r0
 800496c:	2196      	movs	r1, #150	; 0x96
 800496e:	0018      	movs	r0, r3
 8004970:	f7fb fd3a 	bl	80003e8 <__aeabi_idivmod>
 8004974:	000b      	movs	r3, r1
 8004976:	0018      	movs	r0, r3
 8004978:	f7fc f96e 	bl	8000c58 <__aeabi_i2f>
 800497c:	1c03      	adds	r3, r0, #0
 800497e:	1c19      	adds	r1, r3, #0
 8004980:	1c20      	adds	r0, r4, #0
 8004982:	f7fb fdf7 	bl	8000574 <__aeabi_fadd>
 8004986:	1c03      	adds	r3, r0, #0
 8004988:	24b0      	movs	r4, #176	; 0xb0
 800498a:	193a      	adds	r2, r7, r4
 800498c:	6013      	str	r3, [r2, #0]
		updateFloatSelector(selectorBatVolt, q, 3, MIN_BAT_VOLTAGE, MAX_BAT_VOLTAGE);
 800498e:	197b      	adds	r3, r7, r5
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	2318      	movs	r3, #24
 8004994:	18f8      	adds	r0, r7, r3
 8004996:	2301      	movs	r3, #1
 8004998:	425b      	negs	r3, r3
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	236d      	movs	r3, #109	; 0x6d
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	234e      	movs	r3, #78	; 0x4e
 80049a2:	2203      	movs	r2, #3
 80049a4:	f000 f9e4 	bl	8004d70 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>
		updateFloatSelector(selectorBatCurrent, r, 3);
 80049a8:	4a10      	ldr	r2, [pc, #64]	; (80049ec <main+0x6fc>)
 80049aa:	193b      	adds	r3, r7, r4
 80049ac:	6819      	ldr	r1, [r3, #0]
 80049ae:	232c      	movs	r3, #44	; 0x2c
 80049b0:	18f8      	adds	r0, r7, r3
 80049b2:	2301      	movs	r3, #1
 80049b4:	425b      	negs	r3, r3
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <main+0x6fc>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	0013      	movs	r3, r2
 80049be:	2203      	movs	r2, #3
 80049c0:	f000 f9d6 	bl	8004d70 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>


		// 20ms ~ 50Hz
		//HAL_Delay(20);

	}
 80049c4:	e750      	b.n	8004868 <main+0x578>
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	9999999a 	.word	0x9999999a
 80049cc:	3fc99999 	.word	0x3fc99999
 80049d0:	40140000 	.word	0x40140000
 80049d4:	0000fc60 	.word	0x0000fc60
 80049d8:	08008a8c 	.word	0x08008a8c
 80049dc:	3fe00000 	.word	0x3fe00000
 80049e0:	66666666 	.word	0x66666666
 80049e4:	3fe66666 	.word	0x3fe66666
 80049e8:	80000001 	.word	0x80000001
 80049ec:	fffffc18 	.word	0xfffffc18
 80049f0:	41a00000 	.word	0x41a00000

080049f4 <_Z4dtoaPcd>:
	itoa(input, buff, base);
	return;
	//	return buf;
}

char * dtoa(char *s, double n) {
 80049f4:	b5b0      	push	{r4, r5, r7, lr}
 80049f6:	b08e      	sub	sp, #56	; 0x38
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	603a      	str	r2, [r7, #0]
 80049fe:	607b      	str	r3, [r7, #4]
	// handle special cases
	if (isnan(n)) {
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687c      	ldr	r4, [r7, #4]
 8004a04:	0018      	movs	r0, r3
 8004a06:	0021      	movs	r1, r4
 8004a08:	f7ff fc5e 	bl	80042c8 <_ZSt5isnand>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d008      	beq.n	8004a22 <_Z4dtoaPcd+0x2e>
		strcpy(s, "nan");
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4bcb      	ldr	r3, [pc, #812]	; (8004d40 <_Z4dtoaPcd+0x34c>)
 8004a14:	0010      	movs	r0, r2
 8004a16:	0019      	movs	r1, r3
 8004a18:	2304      	movs	r3, #4
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	f003 fe24 	bl	8008668 <memcpy>
 8004a20:	e1a1      	b.n	8004d66 <_Z4dtoaPcd+0x372>
	} else if (isinf(n)) {
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	687c      	ldr	r4, [r7, #4]
 8004a26:	0018      	movs	r0, r3
 8004a28:	0021      	movs	r1, r4
 8004a2a:	f7ff fc1f 	bl	800426c <_ZSt5isinfd>
 8004a2e:	1e03      	subs	r3, r0, #0
 8004a30:	d008      	beq.n	8004a44 <_Z4dtoaPcd+0x50>
		strcpy(s, "inf");
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4bc3      	ldr	r3, [pc, #780]	; (8004d44 <_Z4dtoaPcd+0x350>)
 8004a36:	0010      	movs	r0, r2
 8004a38:	0019      	movs	r1, r3
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	001a      	movs	r2, r3
 8004a3e:	f003 fe13 	bl	8008668 <memcpy>
 8004a42:	e190      	b.n	8004d66 <_Z4dtoaPcd+0x372>
	} else if (n == 0.0) {
 8004a44:	2200      	movs	r2, #0
 8004a46:	2300      	movs	r3, #0
 8004a48:	6838      	ldr	r0, [r7, #0]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	f7fb fce2 	bl	8000414 <__aeabi_dcmpeq>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d008      	beq.n	8004a66 <_Z4dtoaPcd+0x72>
		strcpy(s, "0");
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4bbc      	ldr	r3, [pc, #752]	; (8004d48 <_Z4dtoaPcd+0x354>)
 8004a58:	0010      	movs	r0, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	001a      	movs	r2, r3
 8004a60:	f003 fe02 	bl	8008668 <memcpy>
 8004a64:	e17f      	b.n	8004d66 <_Z4dtoaPcd+0x372>
	} else {
		int digit, m, m1;
		char *c = s;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	613b      	str	r3, [r7, #16]
		int neg = (n < 0);
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	1c1c      	adds	r4, r3, #0
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2300      	movs	r3, #0
 8004a72:	6838      	ldr	r0, [r7, #0]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	f7fb fcd3 	bl	8000420 <__aeabi_dcmplt>
 8004a7a:	1e03      	subs	r3, r0, #0
 8004a7c:	d101      	bne.n	8004a82 <_Z4dtoaPcd+0x8e>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	1c1c      	adds	r4, r3, #0
 8004a82:	b2e3      	uxtb	r3, r4
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
		if (neg)
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d006      	beq.n	8004a9a <_Z4dtoaPcd+0xa6>
			n = -n;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2280      	movs	r2, #128	; 0x80
 8004a94:	0612      	lsls	r2, r2, #24
 8004a96:	4053      	eors	r3, r2
 8004a98:	607b      	str	r3, [r7, #4]
		// calculate magnitude
		m = log10(n);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	687c      	ldr	r4, [r7, #4]
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	0021      	movs	r1, r4
 8004aa2:	f002 fabf 	bl	8007024 <log10>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	000c      	movs	r4, r1
 8004aaa:	0018      	movs	r0, r3
 8004aac:	0021      	movs	r1, r4
 8004aae:	f7fd fe19 	bl	80026e4 <__aeabi_d2iz>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	637b      	str	r3, [r7, #52]	; 0x34
		int useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	2b0d      	cmp	r3, #13
 8004aba:	dc08      	bgt.n	8004ace <_Z4dtoaPcd+0xda>
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <_Z4dtoaPcd+0xd4>
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	dc02      	bgt.n	8004ace <_Z4dtoaPcd+0xda>
 8004ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aca:	3308      	adds	r3, #8
 8004acc:	da01      	bge.n	8004ad2 <_Z4dtoaPcd+0xde>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <_Z4dtoaPcd+0xe0>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	623b      	str	r3, [r7, #32]
		if (neg)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <_Z4dtoaPcd+0xf2>
			*(c++) = '-';
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	613a      	str	r2, [r7, #16]
 8004ae2:	222d      	movs	r2, #45	; 0x2d
 8004ae4:	701a      	strb	r2, [r3, #0]
		// set up for scientific notation
		if (useExp) {
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d028      	beq.n	8004b3e <_Z4dtoaPcd+0x14a>
			if (m < 0)
 8004aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da0e      	bge.n	8004b10 <_Z4dtoaPcd+0x11c>
				m -= 1.0;
 8004af2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004af4:	f7fd fe2c 	bl	8002750 <__aeabi_i2d>
 8004af8:	2200      	movs	r2, #0
 8004afa:	4b94      	ldr	r3, [pc, #592]	; (8004d4c <_Z4dtoaPcd+0x358>)
 8004afc:	f7fd fa8e 	bl	800201c <__aeabi_dsub>
 8004b00:	0003      	movs	r3, r0
 8004b02:	000c      	movs	r4, r1
 8004b04:	0018      	movs	r0, r3
 8004b06:	0021      	movs	r1, r4
 8004b08:	f7fd fdec 	bl	80026e4 <__aeabi_d2iz>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
			n = n / pow(10.0, m);
 8004b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b12:	2300      	movs	r3, #0
 8004b14:	4c8e      	ldr	r4, [pc, #568]	; (8004d50 <_Z4dtoaPcd+0x35c>)
 8004b16:	0018      	movs	r0, r3
 8004b18:	0021      	movs	r1, r4
 8004b1a:	f000 fbae 	bl	800527a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	000c      	movs	r4, r1
 8004b22:	001a      	movs	r2, r3
 8004b24:	0023      	movs	r3, r4
 8004b26:	6838      	ldr	r0, [r7, #0]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	f7fc fbfb 	bl	8001324 <__aeabi_ddiv>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	000c      	movs	r4, r1
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	607c      	str	r4, [r7, #4]
			m1 = m;
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
			m = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (m < 1.0) {
 8004b3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b40:	f7fd fe06 	bl	8002750 <__aeabi_i2d>
 8004b44:	2200      	movs	r2, #0
 8004b46:	4b81      	ldr	r3, [pc, #516]	; (8004d4c <_Z4dtoaPcd+0x358>)
 8004b48:	f7fb fc6a 	bl	8000420 <__aeabi_dcmplt>
 8004b4c:	1e03      	subs	r3, r0, #0
 8004b4e:	d001      	beq.n	8004b54 <_Z4dtoaPcd+0x160>
			m = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34
		}
		// convert the number
		while (n > PRECISION || m >= 0) {
 8004b54:	4b7f      	ldr	r3, [pc, #508]	; (8004d54 <_Z4dtoaPcd+0x360>)
 8004b56:	685c      	ldr	r4, [r3, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	1c15      	adds	r5, r2, #0
 8004b5e:	001a      	movs	r2, r3
 8004b60:	0023      	movs	r3, r4
 8004b62:	6838      	ldr	r0, [r7, #0]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	f7fb fc6f 	bl	8000448 <__aeabi_dcmpgt>
 8004b6a:	1e03      	subs	r3, r0, #0
 8004b6c:	d101      	bne.n	8004b72 <_Z4dtoaPcd+0x17e>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	1c1d      	adds	r5, r3, #0
 8004b72:	b2eb      	uxtb	r3, r5
 8004b74:	2201      	movs	r2, #1
 8004b76:	4053      	eors	r3, r2
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <_Z4dtoaPcd+0x190>
 8004b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	db67      	blt.n	8004c54 <_Z4dtoaPcd+0x260>
			double weight = pow(10.0, m);
 8004b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b86:	2300      	movs	r3, #0
 8004b88:	4c71      	ldr	r4, [pc, #452]	; (8004d50 <_Z4dtoaPcd+0x35c>)
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	0021      	movs	r1, r4
 8004b8e:	f000 fb74 	bl	800527a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004b92:	0003      	movs	r3, r0
 8004b94:	000c      	movs	r4, r1
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	61fc      	str	r4, [r7, #28]
			if (weight > 0 && !isinf(weight)) {
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	69b8      	ldr	r0, [r7, #24]
 8004ba0:	69f9      	ldr	r1, [r7, #28]
 8004ba2:	f7fb fc51 	bl	8000448 <__aeabi_dcmpgt>
 8004ba6:	1e03      	subs	r3, r0, #0
 8004ba8:	d00e      	beq.n	8004bc8 <_Z4dtoaPcd+0x1d4>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	69fc      	ldr	r4, [r7, #28]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	0021      	movs	r1, r4
 8004bb2:	f7ff fb5b 	bl	800426c <_ZSt5isinfd>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	001a      	movs	r2, r3
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4053      	eors	r3, r2
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <_Z4dtoaPcd+0x1d4>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <_Z4dtoaPcd+0x1d6>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d02e      	beq.n	8004c2c <_Z4dtoaPcd+0x238>
				digit = floor(n / weight);
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	6838      	ldr	r0, [r7, #0]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	f7fc fba5 	bl	8001324 <__aeabi_ddiv>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	000c      	movs	r4, r1
 8004bde:	0018      	movs	r0, r3
 8004be0:	0021      	movs	r1, r4
 8004be2:	f002 f99d 	bl	8006f20 <floor>
 8004be6:	0003      	movs	r3, r0
 8004be8:	000c      	movs	r4, r1
 8004bea:	0018      	movs	r0, r3
 8004bec:	0021      	movs	r1, r4
 8004bee:	f7fd fd79 	bl	80026e4 <__aeabi_d2iz>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	617b      	str	r3, [r7, #20]
				n -= (digit * weight);
 8004bf6:	6978      	ldr	r0, [r7, #20]
 8004bf8:	f7fd fdaa 	bl	8002750 <__aeabi_i2d>
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f7fc ff9a 	bl	8001b38 <__aeabi_dmul>
 8004c04:	0003      	movs	r3, r0
 8004c06:	000c      	movs	r4, r1
 8004c08:	001a      	movs	r2, r3
 8004c0a:	0023      	movs	r3, r4
 8004c0c:	6838      	ldr	r0, [r7, #0]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	f7fd fa04 	bl	800201c <__aeabi_dsub>
 8004c14:	0003      	movs	r3, r0
 8004c16:	000c      	movs	r4, r1
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	607c      	str	r4, [r7, #4]
				*(c++) = '0' + digit;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1c59      	adds	r1, r3, #1
 8004c24:	6139      	str	r1, [r7, #16]
 8004c26:	3230      	adds	r2, #48	; 0x30
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
			}
			if (m == 0 && n > 0)
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <_Z4dtoaPcd+0x258>
 8004c32:	2200      	movs	r2, #0
 8004c34:	2300      	movs	r3, #0
 8004c36:	6838      	ldr	r0, [r7, #0]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	f7fb fc05 	bl	8000448 <__aeabi_dcmpgt>
 8004c3e:	1e03      	subs	r3, r0, #0
 8004c40:	d004      	beq.n	8004c4c <_Z4dtoaPcd+0x258>
				*(c++) = '.';
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	613a      	str	r2, [r7, #16]
 8004c48:	222e      	movs	r2, #46	; 0x2e
 8004c4a:	701a      	strb	r2, [r3, #0]
			m--;
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
		while (n > PRECISION || m >= 0) {
 8004c52:	e77f      	b.n	8004b54 <_Z4dtoaPcd+0x160>
		}
		if (useExp) {
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d100      	bne.n	8004c5c <_Z4dtoaPcd+0x268>
 8004c5a:	e081      	b.n	8004d60 <_Z4dtoaPcd+0x36c>
			// convert the exponent
			int i, j;
			*(c++) = 'e';
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	613a      	str	r2, [r7, #16]
 8004c62:	2265      	movs	r2, #101	; 0x65
 8004c64:	701a      	strb	r2, [r3, #0]
			if (m1 > 0) {
 8004c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	dd05      	ble.n	8004c78 <_Z4dtoaPcd+0x284>
				*(c++) = '+';
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	613a      	str	r2, [r7, #16]
 8004c72:	222b      	movs	r2, #43	; 0x2b
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e007      	b.n	8004c88 <_Z4dtoaPcd+0x294>
			} else {
				*(c++) = '-';
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	613a      	str	r2, [r7, #16]
 8004c7e:	222d      	movs	r2, #45	; 0x2d
 8004c80:	701a      	strb	r2, [r3, #0]
				m1 = -m1;
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	425b      	negs	r3, r3
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
			}
			m = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	637b      	str	r3, [r7, #52]	; 0x34
			while (m1 > 0) {
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	dd17      	ble.n	8004cc2 <_Z4dtoaPcd+0x2ce>
				*(c++) = '0' + m1 % 10;
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	210a      	movs	r1, #10
 8004c96:	0018      	movs	r0, r3
 8004c98:	f7fb fba6 	bl	80003e8 <__aeabi_idivmod>
 8004c9c:	000b      	movs	r3, r1
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1c59      	adds	r1, r3, #1
 8004ca4:	6139      	str	r1, [r7, #16]
 8004ca6:	3230      	adds	r2, #48	; 0x30
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
				m1 /= 10;
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	210a      	movs	r1, #10
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f7fb fab3 	bl	800021c <__divsi3>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	633b      	str	r3, [r7, #48]	; 0x30
				m++;
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
			while (m1 > 0) {
 8004cc0:	e7e4      	b.n	8004c8c <_Z4dtoaPcd+0x298>
			}
			c -= m;
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc6:	425b      	negs	r3, r3
 8004cc8:	18d3      	adds	r3, r2, r3
 8004cca:	613b      	str	r3, [r7, #16]
			for (i = 0, j = m-1; i<j; i++, j--) {
 8004ccc:	2300      	movs	r3, #0
 8004cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	da3c      	bge.n	8004d58 <_Z4dtoaPcd+0x364>
				// swap without temporary
				c[i] ^= c[j];
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	18d3      	adds	r3, r2, r3
 8004ce4:	7819      	ldrb	r1, [r3, #0]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	18d3      	adds	r3, r2, r3
 8004cec:	781a      	ldrb	r2, [r3, #0]
 8004cee:	6938      	ldr	r0, [r7, #16]
 8004cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf2:	18c3      	adds	r3, r0, r3
 8004cf4:	404a      	eors	r2, r1
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
				c[j] ^= c[i];
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	18d3      	adds	r3, r2, r3
 8004d00:	7819      	ldrb	r1, [r3, #0]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	6938      	ldr	r0, [r7, #16]
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	18c3      	adds	r3, r0, r3
 8004d10:	404a      	eors	r2, r1
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
				c[i] ^= c[j];
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	18d3      	adds	r3, r2, r3
 8004d1c:	7819      	ldrb	r1, [r3, #0]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	18d3      	adds	r3, r2, r3
 8004d24:	781a      	ldrb	r2, [r3, #0]
 8004d26:	6938      	ldr	r0, [r7, #16]
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	18c3      	adds	r3, r0, r3
 8004d2c:	404a      	eors	r2, r1
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]
			for (i = 0, j = m-1; i<j; i++, j--) {
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	3301      	adds	r3, #1
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d3e:	e7ca      	b.n	8004cd6 <_Z4dtoaPcd+0x2e2>
 8004d40:	08008a90 	.word	0x08008a90
 8004d44:	08008a94 	.word	0x08008a94
 8004d48:	08008a98 	.word	0x08008a98
 8004d4c:	3ff00000 	.word	0x3ff00000
 8004d50:	40240000 	.word	0x40240000
 8004d54:	20000000 	.word	0x20000000
			}
			c += m;
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	613b      	str	r3, [r7, #16]
		}
		*(c) = '\0';
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2200      	movs	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
	}
	return s;
 8004d66:	68fb      	ldr	r3, [r7, #12]
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b00e      	add	sp, #56	; 0x38
 8004d6e:	bdb0      	pop	{r4, r5, r7, pc}

08004d70 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii>:

	return;
}

void updateFloatSelector(TFT_TEXT_BOX &selector, float value, int precision, int minValue, int maxValue, int backgroundColor)
{
 8004d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d72:	b08f      	sub	sp, #60	; 0x3c
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004d78:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d7a:	627a      	str	r2, [r7, #36]	; 0x24
 8004d7c:	623b      	str	r3, [r7, #32]
		else
			selector.write(buffer, fontColorGood, 4);

	}

	return;
 8004d7e:	466b      	mov	r3, sp
 8004d80:	607b      	str	r3, [r7, #4]
	char buffer[precision + 2];
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	3301      	adds	r3, #1
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
 8004d88:	001a      	movs	r2, r3
 8004d8a:	3201      	adds	r2, #1
 8004d8c:	613a      	str	r2, [r7, #16]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	617a      	str	r2, [r7, #20]
 8004d92:	6938      	ldr	r0, [r7, #16]
 8004d94:	6979      	ldr	r1, [r7, #20]
 8004d96:	0002      	movs	r2, r0
 8004d98:	0f52      	lsrs	r2, r2, #29
 8004d9a:	000e      	movs	r6, r1
 8004d9c:	00f6      	lsls	r6, r6, #3
 8004d9e:	61fe      	str	r6, [r7, #28]
 8004da0:	69fe      	ldr	r6, [r7, #28]
 8004da2:	4316      	orrs	r6, r2
 8004da4:	61fe      	str	r6, [r7, #28]
 8004da6:	0002      	movs	r2, r0
 8004da8:	00d2      	lsls	r2, r2, #3
 8004daa:	61ba      	str	r2, [r7, #24]
 8004dac:	001a      	movs	r2, r3
 8004dae:	3201      	adds	r2, #1
 8004db0:	60ba      	str	r2, [r7, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	60fa      	str	r2, [r7, #12]
 8004db6:	68b8      	ldr	r0, [r7, #8]
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	0002      	movs	r2, r0
 8004dbc:	0f52      	lsrs	r2, r2, #29
 8004dbe:	000e      	movs	r6, r1
 8004dc0:	00f5      	lsls	r5, r6, #3
 8004dc2:	4315      	orrs	r5, r2
 8004dc4:	0002      	movs	r2, r0
 8004dc6:	00d4      	lsls	r4, r2, #3
 8004dc8:	3301      	adds	r3, #1
 8004dca:	3307      	adds	r3, #7
 8004dcc:	08db      	lsrs	r3, r3, #3
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	466a      	mov	r2, sp
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	469d      	mov	sp, r3
 8004dd6:	466b      	mov	r3, sp
 8004dd8:	3300      	adds	r3, #0
 8004dda:	633b      	str	r3, [r7, #48]	; 0x30
	dtoa(buffer, value);
 8004ddc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8004dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de0:	f7fd fcf0 	bl	80027c4 <__aeabi_f2d>
 8004de4:	0002      	movs	r2, r0
 8004de6:	000b      	movs	r3, r1
 8004de8:	0020      	movs	r0, r4
 8004dea:	f7ff fe03 	bl	80049f4 <_Z4dtoaPcd>
	if(backgroundColor != -1)
 8004dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df0:	3301      	adds	r3, #1
 8004df2:	d007      	beq.n	8004e04 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x94>
		selector.write(buffer, backgroundColor, 4);
 8004df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f001 fffd 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004e02:	e037      	b.n	8004e74 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x104>
	else if(minValue == -1000 && maxValue == -1000)
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x114>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d10a      	bne.n	8004e22 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0xb2>
 8004e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0e:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x114>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d106      	bne.n	8004e22 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0xb2>
		selector.write(buffer, fontColor, 4);
 8004e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e16:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x118>)
 8004e18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e1a:	2304      	movs	r3, #4
 8004e1c:	f001 ffee 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004e20:	e028      	b.n	8004e74 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x104>
		if(value >= maxValue)
 8004e22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004e24:	f7fb ff18 	bl	8000c58 <__aeabi_i2f>
 8004e28:	1c03      	adds	r3, r0, #0
 8004e2a:	1c19      	adds	r1, r3, #0
 8004e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e2e:	f7fb fb4f 	bl	80004d0 <__aeabi_fcmpge>
 8004e32:	1e03      	subs	r3, r0, #0
 8004e34:	d007      	beq.n	8004e46 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0xd6>
			selector.write(buffer, fontColorHigh, 4);
 8004e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e38:	23f8      	movs	r3, #248	; 0xf8
 8004e3a:	021a      	lsls	r2, r3, #8
 8004e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e3e:	2304      	movs	r3, #4
 8004e40:	f001 ffdc 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004e44:	e016      	b.n	8004e74 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x104>
		else if(value <= minValue)
 8004e46:	6a38      	ldr	r0, [r7, #32]
 8004e48:	f7fb ff06 	bl	8000c58 <__aeabi_i2f>
 8004e4c:	1c03      	adds	r3, r0, #0
 8004e4e:	1c19      	adds	r1, r3, #0
 8004e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e52:	f7fb fb29 	bl	80004a8 <__aeabi_fcmple>
 8004e56:	1e03      	subs	r3, r0, #0
 8004e58:	d006      	beq.n	8004e68 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0xf8>
			selector.write(buffer, fontColorLow, 4);
 8004e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e5c:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x11c>)
 8004e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e60:	2304      	movs	r3, #4
 8004e62:	f001 ffcb 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004e66:	e005      	b.n	8004e74 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x104>
			selector.write(buffer, fontColorGood, 4);
 8004e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e6a:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <_Z19updateFloatSelectorR12TFT_TEXT_BOXfiiii+0x120>)
 8004e6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e6e:	2304      	movs	r3, #4
 8004e70:	f001 ffc4 	bl	8006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>
	return;
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	469d      	mov	sp, r3
 8004e7a:	46c0      	nop			; (mov r8, r8)
}
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b00f      	add	sp, #60	; 0x3c
 8004e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	fffffc18 	.word	0xfffffc18
 8004e88:	0000fc60 	.word	0x0000fc60
 8004e8c:	000007ff 	.word	0x000007ff
 8004e90:	00003781 	.word	0x00003781

08004e94 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b099      	sub	sp, #100	; 0x64
 8004e98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e9a:	242c      	movs	r4, #44	; 0x2c
 8004e9c:	193b      	adds	r3, r7, r4
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	2334      	movs	r3, #52	; 0x34
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	f003 fbe8 	bl	800867a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004eaa:	231c      	movs	r3, #28
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	0018      	movs	r0, r3
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	001a      	movs	r2, r3
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f003 fbe0 	bl	800867a <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004eba:	003b      	movs	r3, r7
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	231c      	movs	r3, #28
 8004ec0:	001a      	movs	r2, r3
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	f003 fbd9 	bl	800867a <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8004ec8:	193b      	adds	r3, r7, r4
 8004eca:	2220      	movs	r2, #32
 8004ecc:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004ed4:	193b      	adds	r3, r7, r4
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004eda:	193b      	adds	r3, r7, r4
 8004edc:	0018      	movs	r0, r3
 8004ede:	f7fd ffaf 	bl	8002e40 <HAL_RCC_OscConfig>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	1e5a      	subs	r2, r3, #1
 8004ee6:	4193      	sbcs	r3, r2
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <_Z18SystemClock_Configv+0x5e>
	{
		Error_Handler();
 8004eee:	f000 f9bf 	bl	8005270 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ef2:	211c      	movs	r1, #28
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	2207      	movs	r2, #7
 8004ef8:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8004efa:	187b      	adds	r3, r7, r1
 8004efc:	2203      	movs	r2, #3
 8004efe:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	2200      	movs	r2, #0
 8004f04:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004f06:	187b      	adds	r3, r7, r1
 8004f08:	2200      	movs	r2, #0
 8004f0a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004f0c:	187b      	adds	r3, r7, r1
 8004f0e:	2101      	movs	r1, #1
 8004f10:	0018      	movs	r0, r3
 8004f12:	f7fe faf5 	bl	8003500 <HAL_RCC_ClockConfig>
 8004f16:	0003      	movs	r3, r0
 8004f18:	1e5a      	subs	r2, r3, #1
 8004f1a:	4193      	sbcs	r3, r2
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <_Z18SystemClock_Configv+0x92>
	{
		Error_Handler();
 8004f22:	f000 f9a5 	bl	8005270 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f26:	003b      	movs	r3, r7
 8004f28:	2202      	movs	r2, #2
 8004f2a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004f2c:	003b      	movs	r3, r7
 8004f2e:	2200      	movs	r2, #0
 8004f30:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f32:	003b      	movs	r3, r7
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7fe fc75 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	1e5a      	subs	r2, r3, #1
 8004f3e:	4193      	sbcs	r3, r2
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <_Z18SystemClock_Configv+0xb6>
	{
		Error_Handler();
 8004f46:	f000 f993 	bl	8005270 <Error_Handler>
	}
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b019      	add	sp, #100	; 0x64
 8004f50:	bd90      	pop	{r4, r7, pc}
	...

08004f54 <_ZL12MX_SPI2_Initv>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8004f5a:	4b28      	ldr	r3, [pc, #160]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f5c:	4a28      	ldr	r2, [pc, #160]	; (8005000 <_ZL12MX_SPI2_Initv+0xac>)
 8004f5e:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f60:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f62:	2282      	movs	r2, #130	; 0x82
 8004f64:	0052      	lsls	r2, r2, #1
 8004f66:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004f68:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f6e:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f70:	22e0      	movs	r2, #224	; 0xe0
 8004f72:	00d2      	lsls	r2, r2, #3
 8004f74:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004f76:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f78:	2202      	movs	r2, #2
 8004f7a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004f7c:	4b1f      	ldr	r3, [pc, #124]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8004f82:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	0092      	lsls	r2, r2, #2
 8004f88:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004f8a:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f90:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f96:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f9c:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8004fa2:	4b16      	ldr	r3, [pc, #88]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004fa4:	2207      	movs	r2, #7
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004fa8:	4b14      	ldr	r3, [pc, #80]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f7fe fd34 	bl	8003a24 <HAL_SPI_Init>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	1e5a      	subs	r2, r3, #1
 8004fc0:	4193      	sbcs	r3, r2
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <_ZL12MX_SPI2_Initv+0x78>
	{
		Error_Handler();
 8004fc8:	f000 f952 	bl	8005270 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */
	//Send 1 random byte to reset the sck
	uint8_t temp = 0;
 8004fcc:	1dfb      	adds	r3, r7, #7
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, &temp, sizeof(temp), HAL_MAX_DELAY);
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	425b      	negs	r3, r3
 8004fd6:	1df9      	adds	r1, r7, #7
 8004fd8:	4808      	ldr	r0, [pc, #32]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f7fe fdbc 	bl	8003b58 <HAL_SPI_Transmit>
	resetTftBoard();
 8004fe0:	f001 fb23 	bl	800662a <resetTftBoard>
	pullCSLow();
 8004fe4:	f001 fb3c 	bl	8006660 <pullCSLow>
	ili9341_hspi_init(hspi2.Instance);
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <_ZL12MX_SPI2_Initv+0xa8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	0018      	movs	r0, r3
 8004fee:	f001 fbdb 	bl	80067a8 <ili9341_hspi_init>
	/* USER CODE END SPI2_Init 2 */

}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b002      	add	sp, #8
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	20000090 	.word	0x20000090
 8005000:	40003800 	.word	0x40003800

08005004 <_ZL12MX_TIM6_Initv>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800500a:	003b      	movs	r3, r7
 800500c:	0018      	movs	r0, r3
 800500e:	2308      	movs	r3, #8
 8005010:	001a      	movs	r2, r3
 8005012:	2100      	movs	r1, #0
 8005014:	f003 fb31 	bl	800867a <memset>

	/* USER CODE BEGIN TIM6_Init 1 */
	//Set a period of 2ms
	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8005018:	4b20      	ldr	r3, [pc, #128]	; (800509c <_ZL12MX_TIM6_Initv+0x98>)
 800501a:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <_ZL12MX_TIM6_Initv+0x9c>)
 800501c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 240-1;
 800501e:	4b1f      	ldr	r3, [pc, #124]	; (800509c <_ZL12MX_TIM6_Initv+0x98>)
 8005020:	22ef      	movs	r2, #239	; 0xef
 8005022:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005024:	4b1d      	ldr	r3, [pc, #116]	; (800509c <_ZL12MX_TIM6_Initv+0x98>)
 8005026:	2200      	movs	r2, #0
 8005028:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 400-1;
 800502a:	4b1c      	ldr	r3, [pc, #112]	; (800509c <_ZL12MX_TIM6_Initv+0x98>)
 800502c:	2290      	movs	r2, #144	; 0x90
 800502e:	32ff      	adds	r2, #255	; 0xff
 8005030:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <_ZL12MX_TIM6_Initv+0x98>)
 8005034:	2200      	movs	r2, #0
 8005036:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005038:	4b18      	ldr	r3, [pc, #96]	; (800509c <_ZL12MX_TIM6_Initv+0x98>)
 800503a:	0018      	movs	r0, r3
 800503c:	f7ff f824 	bl	8004088 <HAL_TIM_Base_Init>
 8005040:	0003      	movs	r3, r0
 8005042:	1e5a      	subs	r2, r3, #1
 8005044:	4193      	sbcs	r3, r2
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <_ZL12MX_TIM6_Initv+0x4c>
	{
		Error_Handler();
 800504c:	f000 f910 	bl	8005270 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005050:	003b      	movs	r3, r7
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005056:	003b      	movs	r3, r7
 8005058:	2200      	movs	r2, #0
 800505a:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800505c:	003a      	movs	r2, r7
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <_ZL12MX_TIM6_Initv+0x98>)
 8005060:	0011      	movs	r1, r2
 8005062:	0018      	movs	r0, r3
 8005064:	f7ff f8be 	bl	80041e4 <HAL_TIMEx_MasterConfigSynchronization>
 8005068:	0003      	movs	r3, r0
 800506a:	1e5a      	subs	r2, r3, #1
 800506c:	4193      	sbcs	r3, r2
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <_ZL12MX_TIM6_Initv+0x74>
	{
		Error_Handler();
 8005074:	f000 f8fc 	bl	8005270 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */
	//Clear status reg
	htim6.Instance->SR &= TIM_SR_UIF;
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <_ZL12MX_TIM6_Initv+0x98>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	4b07      	ldr	r3, [pc, #28]	; (800509c <_ZL12MX_TIM6_Initv+0x98>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2101      	movs	r1, #1
 8005084:	400a      	ands	r2, r1
 8005086:	611a      	str	r2, [r3, #16]
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8005088:	2200      	movs	r2, #0
 800508a:	2103      	movs	r1, #3
 800508c:	2011      	movs	r0, #17
 800508e:	f7fd fcff 	bl	8002a90 <HAL_NVIC_SetPriority>
	/* USER CODE END TIM6_Init 2 */

}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	46bd      	mov	sp, r7
 8005096:	b002      	add	sp, #8
 8005098:	bd80      	pop	{r7, pc}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	200000f4 	.word	0x200000f4
 80050a0:	40001000 	.word	0x40001000

080050a4 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b08b      	sub	sp, #44	; 0x2c
 80050a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050aa:	2414      	movs	r4, #20
 80050ac:	193b      	adds	r3, r7, r4
 80050ae:	0018      	movs	r0, r3
 80050b0:	2314      	movs	r3, #20
 80050b2:	001a      	movs	r2, r3
 80050b4:	2100      	movs	r1, #0
 80050b6:	f003 fae0 	bl	800867a <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80050ba:	4b69      	ldr	r3, [pc, #420]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 80050bc:	695a      	ldr	r2, [r3, #20]
 80050be:	4b68      	ldr	r3, [pc, #416]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 80050c0:	2180      	movs	r1, #128	; 0x80
 80050c2:	0309      	lsls	r1, r1, #12
 80050c4:	430a      	orrs	r2, r1
 80050c6:	615a      	str	r2, [r3, #20]
 80050c8:	4b65      	ldr	r3, [pc, #404]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	031b      	lsls	r3, r3, #12
 80050d0:	4013      	ands	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80050d6:	4b62      	ldr	r3, [pc, #392]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	4b61      	ldr	r3, [pc, #388]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 80050dc:	2180      	movs	r1, #128	; 0x80
 80050de:	03c9      	lsls	r1, r1, #15
 80050e0:	430a      	orrs	r2, r1
 80050e2:	615a      	str	r2, [r3, #20]
 80050e4:	4b5e      	ldr	r3, [pc, #376]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	03db      	lsls	r3, r3, #15
 80050ec:	4013      	ands	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80050f2:	4b5b      	ldr	r3, [pc, #364]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	4b5a      	ldr	r3, [pc, #360]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	0289      	lsls	r1, r1, #10
 80050fc:	430a      	orrs	r2, r1
 80050fe:	615a      	str	r2, [r3, #20]
 8005100:	4b57      	ldr	r3, [pc, #348]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 8005102:	695a      	ldr	r2, [r3, #20]
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	029b      	lsls	r3, r3, #10
 8005108:	4013      	ands	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800510e:	4b54      	ldr	r3, [pc, #336]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	4b53      	ldr	r3, [pc, #332]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	02c9      	lsls	r1, r1, #11
 8005118:	430a      	orrs	r2, r1
 800511a:	615a      	str	r2, [r3, #20]
 800511c:	4b50      	ldr	r3, [pc, #320]	; (8005260 <_ZL12MX_GPIO_Initv+0x1bc>)
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	2380      	movs	r3, #128	; 0x80
 8005122:	02db      	lsls	r3, r3, #11
 8005124:	4013      	ands	r3, r2
 8005126:	607b      	str	r3, [r7, #4]
 8005128:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TFT_D_C_GPIO_Port, TFT_D_C_Pin, GPIO_PIN_RESET);
 800512a:	2390      	movs	r3, #144	; 0x90
 800512c:	05db      	lsls	r3, r3, #23
 800512e:	2200      	movs	r2, #0
 8005130:	2120      	movs	r1, #32
 8005132:	0018      	movs	r0, r3
 8005134:	f7fd fe4a 	bl	8002dcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8005138:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <_ZL12MX_GPIO_Initv+0x1c0>)
 800513a:	2201      	movs	r2, #1
 800513c:	2102      	movs	r1, #2
 800513e:	0018      	movs	r0, r3
 8005140:	f7fd fe44 	bl	8002dcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8005144:	2390      	movs	r3, #144	; 0x90
 8005146:	05db      	lsls	r3, r3, #23
 8005148:	2200      	movs	r2, #0
 800514a:	2110      	movs	r1, #16
 800514c:	0018      	movs	r0, r3
 800514e:	f7fd fe3d 	bl	8002dcc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SPI2_NSS_Pin */
	GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8005152:	193b      	adds	r3, r7, r4
 8005154:	2202      	movs	r2, #2
 8005156:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005158:	193b      	adds	r3, r7, r4
 800515a:	2201      	movs	r2, #1
 800515c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515e:	193b      	adds	r3, r7, r4
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005164:	193b      	adds	r3, r7, r4
 8005166:	2203      	movs	r2, #3
 8005168:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800516a:	193b      	adds	r3, r7, r4
 800516c:	4a3d      	ldr	r2, [pc, #244]	; (8005264 <_ZL12MX_GPIO_Initv+0x1c0>)
 800516e:	0019      	movs	r1, r3
 8005170:	0010      	movs	r0, r2
 8005172:	f7fd fcaf 	bl	8002ad4 <HAL_GPIO_Init>

	/*Configure GPIO pins : TFT_D_C_Pin*/
	GPIO_InitStruct.Pin = TFT_D_C_Pin;
 8005176:	193b      	adds	r3, r7, r4
 8005178:	2220      	movs	r2, #32
 800517a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800517c:	193b      	adds	r3, r7, r4
 800517e:	2201      	movs	r2, #1
 8005180:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005182:	193b      	adds	r3, r7, r4
 8005184:	2200      	movs	r2, #0
 8005186:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005188:	193b      	adds	r3, r7, r4
 800518a:	2203      	movs	r2, #3
 800518c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(TFT_D_C_GPIO_Port, &GPIO_InitStruct);
 800518e:	193a      	adds	r2, r7, r4
 8005190:	2390      	movs	r3, #144	; 0x90
 8005192:	05db      	lsls	r3, r3, #23
 8005194:	0011      	movs	r1, r2
 8005196:	0018      	movs	r0, r3
 8005198:	f7fd fc9c 	bl	8002ad4 <HAL_GPIO_Init>

	/*Configure GPIO pins : TFT_RST_Pin */
	GPIO_InitStruct.Pin = TFT_RST_Pin;
 800519c:	193b      	adds	r3, r7, r4
 800519e:	2210      	movs	r2, #16
 80051a0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051a2:	193b      	adds	r3, r7, r4
 80051a4:	2201      	movs	r2, #1
 80051a6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	193b      	adds	r3, r7, r4
 80051aa:	2200      	movs	r2, #0
 80051ac:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ae:	193b      	adds	r3, r7, r4
 80051b0:	2200      	movs	r2, #0
 80051b2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 80051b4:	193a      	adds	r2, r7, r4
 80051b6:	2390      	movs	r3, #144	; 0x90
 80051b8:	05db      	lsls	r3, r3, #23
 80051ba:	0011      	movs	r1, r2
 80051bc:	0018      	movs	r0, r3
 80051be:	f7fd fc89 	bl	8002ad4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENC_B_Pin */
	GPIO_InitStruct.Pin = ENC_B_Pin;
 80051c2:	193b      	adds	r3, r7, r4
 80051c4:	2280      	movs	r2, #128	; 0x80
 80051c6:	0212      	lsls	r2, r2, #8
 80051c8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80051ca:	193b      	adds	r3, r7, r4
 80051cc:	4a26      	ldr	r2, [pc, #152]	; (8005268 <_ZL12MX_GPIO_Initv+0x1c4>)
 80051ce:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051d0:	193b      	adds	r3, r7, r4
 80051d2:	2201      	movs	r2, #1
 80051d4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 80051d6:	193a      	adds	r2, r7, r4
 80051d8:	2390      	movs	r3, #144	; 0x90
 80051da:	05db      	lsls	r3, r3, #23
 80051dc:	0011      	movs	r1, r2
 80051de:	0018      	movs	r0, r3
 80051e0:	f7fd fc78 	bl	8002ad4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENC_A_Pin */
	GPIO_InitStruct.Pin = ENC_A_Pin;
 80051e4:	0021      	movs	r1, r4
 80051e6:	187b      	adds	r3, r7, r1
 80051e8:	2280      	movs	r2, #128	; 0x80
 80051ea:	00d2      	lsls	r2, r2, #3
 80051ec:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <_ZL12MX_GPIO_Initv+0x1c4>)
 80051f2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051f4:	187b      	adds	r3, r7, r1
 80051f6:	2201      	movs	r2, #1
 80051f8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 80051fa:	000c      	movs	r4, r1
 80051fc:	187b      	adds	r3, r7, r1
 80051fe:	4a1b      	ldr	r2, [pc, #108]	; (800526c <_ZL12MX_GPIO_Initv+0x1c8>)
 8005200:	0019      	movs	r1, r3
 8005202:	0010      	movs	r0, r2
 8005204:	f7fd fc66 	bl	8002ad4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENC_OK_Pin */
	GPIO_InitStruct.Pin = ENC_OK_Pin;
 8005208:	0021      	movs	r1, r4
 800520a:	187b      	adds	r3, r7, r1
 800520c:	2280      	movs	r2, #128	; 0x80
 800520e:	0112      	lsls	r2, r2, #4
 8005210:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005212:	187b      	adds	r3, r7, r1
 8005214:	2200      	movs	r2, #0
 8005216:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005218:	187b      	adds	r3, r7, r1
 800521a:	2201      	movs	r2, #1
 800521c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(ENC_OK_GPIO_Port, &GPIO_InitStruct);
 800521e:	000c      	movs	r4, r1
 8005220:	187b      	adds	r3, r7, r1
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <_ZL12MX_GPIO_Initv+0x1c8>)
 8005224:	0019      	movs	r1, r3
 8005226:	0010      	movs	r0, r2
 8005228:	f7fd fc54 	bl	8002ad4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_CANCEL_Pin */
	GPIO_InitStruct.Pin = BTN_CANCEL_Pin;
 800522c:	0021      	movs	r1, r4
 800522e:	187b      	adds	r3, r7, r1
 8005230:	2280      	movs	r2, #128	; 0x80
 8005232:	0152      	lsls	r2, r2, #5
 8005234:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005236:	187b      	adds	r3, r7, r1
 8005238:	2200      	movs	r2, #0
 800523a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800523c:	187b      	adds	r3, r7, r1
 800523e:	2201      	movs	r2, #1
 8005240:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BTN_CANCEL_Port, &GPIO_InitStruct);
 8005242:	187b      	adds	r3, r7, r1
 8005244:	4a09      	ldr	r2, [pc, #36]	; (800526c <_ZL12MX_GPIO_Initv+0x1c8>)
 8005246:	0019      	movs	r1, r3
 8005248:	0010      	movs	r0, r2
 800524a:	f7fd fc43 	bl	8002ad4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800524e:	2200      	movs	r2, #0
 8005250:	2101      	movs	r1, #1
 8005252:	2007      	movs	r0, #7
 8005254:	f7fd fc1c 	bl	8002a90 <HAL_NVIC_SetPriority>
}
 8005258:	46c0      	nop			; (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	b00b      	add	sp, #44	; 0x2c
 800525e:	bd90      	pop	{r4, r7, pc}
 8005260:	40021000 	.word	0x40021000
 8005264:	48000400 	.word	0x48000400
 8005268:	10310000 	.word	0x10310000
 800526c:	48000800 	.word	0x48000800

08005270 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800527a:	b590      	push	{r4, r7, lr}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	60b8      	str	r0, [r7, #8]
 8005282:	60f9      	str	r1, [r7, #12]
 8005284:	607a      	str	r2, [r7, #4]
      return pow(__type(__x), __type(__y));
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fd fa62 	bl	8002750 <__aeabi_i2d>
 800528c:	0003      	movs	r3, r0
 800528e:	000c      	movs	r4, r1
 8005290:	68b8      	ldr	r0, [r7, #8]
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	001a      	movs	r2, r3
 8005296:	0023      	movs	r3, r4
 8005298:	f001 ff42 	bl	8007120 <pow>
 800529c:	0003      	movs	r3, r0
 800529e:	000c      	movs	r4, r1
    }
 80052a0:	0018      	movs	r0, r3
 80052a2:	0021      	movs	r1, r4
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b005      	add	sp, #20
 80052a8:	bd90      	pop	{r4, r7, pc}
	...

080052ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <HAL_MspInit+0x44>)
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <HAL_MspInit+0x44>)
 80052b8:	2101      	movs	r1, #1
 80052ba:	430a      	orrs	r2, r1
 80052bc:	619a      	str	r2, [r3, #24]
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <HAL_MspInit+0x44>)
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2201      	movs	r2, #1
 80052c4:	4013      	ands	r3, r2
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <HAL_MspInit+0x44>)
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <HAL_MspInit+0x44>)
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	0549      	lsls	r1, r1, #21
 80052d4:	430a      	orrs	r2, r1
 80052d6:	61da      	str	r2, [r3, #28]
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_MspInit+0x44>)
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	055b      	lsls	r3, r3, #21
 80052e0:	4013      	ands	r3, r2
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b002      	add	sp, #8
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	40021000 	.word	0x40021000

080052f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b08b      	sub	sp, #44	; 0x2c
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052fc:	2314      	movs	r3, #20
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	0018      	movs	r0, r3
 8005302:	2314      	movs	r3, #20
 8005304:	001a      	movs	r2, r3
 8005306:	2100      	movs	r1, #0
 8005308:	f003 f9b7 	bl	800867a <memset>
  if(hspi->Instance==SPI2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <HAL_SPI_MspInit+0xdc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d157      	bne.n	80053c6 <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005316:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <HAL_SPI_MspInit+0xe0>)
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	4b2e      	ldr	r3, [pc, #184]	; (80053d4 <HAL_SPI_MspInit+0xe0>)
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	01c9      	lsls	r1, r1, #7
 8005320:	430a      	orrs	r2, r1
 8005322:	61da      	str	r2, [r3, #28]
 8005324:	4b2b      	ldr	r3, [pc, #172]	; (80053d4 <HAL_SPI_MspInit+0xe0>)
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	01db      	lsls	r3, r3, #7
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005332:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <HAL_SPI_MspInit+0xe0>)
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <HAL_SPI_MspInit+0xe0>)
 8005338:	2180      	movs	r1, #128	; 0x80
 800533a:	0309      	lsls	r1, r1, #12
 800533c:	430a      	orrs	r2, r1
 800533e:	615a      	str	r2, [r3, #20]
 8005340:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_SPI_MspInit+0xe0>)
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	2380      	movs	r3, #128	; 0x80
 8005346:	031b      	lsls	r3, r3, #12
 8005348:	4013      	ands	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800534e:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <HAL_SPI_MspInit+0xe0>)
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <HAL_SPI_MspInit+0xe0>)
 8005354:	2180      	movs	r1, #128	; 0x80
 8005356:	02c9      	lsls	r1, r1, #11
 8005358:	430a      	orrs	r2, r1
 800535a:	615a      	str	r2, [r3, #20]
 800535c:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <HAL_SPI_MspInit+0xe0>)
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	02db      	lsls	r3, r3, #11
 8005364:	4013      	ands	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800536a:	2114      	movs	r1, #20
 800536c:	187b      	adds	r3, r7, r1
 800536e:	220c      	movs	r2, #12
 8005370:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005372:	187b      	adds	r3, r7, r1
 8005374:	2202      	movs	r2, #2
 8005376:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005378:	187b      	adds	r3, r7, r1
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800537e:	187b      	adds	r3, r7, r1
 8005380:	2203      	movs	r2, #3
 8005382:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8005384:	187b      	adds	r3, r7, r1
 8005386:	2201      	movs	r2, #1
 8005388:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800538a:	000c      	movs	r4, r1
 800538c:	187b      	adds	r3, r7, r1
 800538e:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <HAL_SPI_MspInit+0xe4>)
 8005390:	0019      	movs	r1, r3
 8005392:	0010      	movs	r0, r2
 8005394:	f7fd fb9e 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005398:	0021      	movs	r1, r4
 800539a:	187b      	adds	r3, r7, r1
 800539c:	2280      	movs	r2, #128	; 0x80
 800539e:	00d2      	lsls	r2, r2, #3
 80053a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a2:	187b      	adds	r3, r7, r1
 80053a4:	2202      	movs	r2, #2
 80053a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a8:	187b      	adds	r3, r7, r1
 80053aa:	2200      	movs	r2, #0
 80053ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053ae:	187b      	adds	r3, r7, r1
 80053b0:	2203      	movs	r2, #3
 80053b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80053b4:	187b      	adds	r3, r7, r1
 80053b6:	2205      	movs	r2, #5
 80053b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ba:	187b      	adds	r3, r7, r1
 80053bc:	4a07      	ldr	r2, [pc, #28]	; (80053dc <HAL_SPI_MspInit+0xe8>)
 80053be:	0019      	movs	r1, r3
 80053c0:	0010      	movs	r0, r2
 80053c2:	f7fd fb87 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b00b      	add	sp, #44	; 0x2c
 80053cc:	bd90      	pop	{r4, r7, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	40003800 	.word	0x40003800
 80053d4:	40021000 	.word	0x40021000
 80053d8:	48000800 	.word	0x48000800
 80053dc:	48000400 	.word	0x48000400

080053e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a09      	ldr	r2, [pc, #36]	; (8005414 <HAL_TIM_Base_MspInit+0x34>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d10b      	bne.n	800540a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <HAL_TIM_Base_MspInit+0x38>)
 80053f4:	69da      	ldr	r2, [r3, #28]
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <HAL_TIM_Base_MspInit+0x38>)
 80053f8:	2110      	movs	r1, #16
 80053fa:	430a      	orrs	r2, r1
 80053fc:	61da      	str	r2, [r3, #28]
 80053fe:	4b06      	ldr	r3, [pc, #24]	; (8005418 <HAL_TIM_Base_MspInit+0x38>)
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	2210      	movs	r2, #16
 8005404:	4013      	ands	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	b004      	add	sp, #16
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	40001000 	.word	0x40001000
 8005418:	40021000 	.word	0x40021000

0800541c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800542a:	e7fe      	b.n	800542a <HardFault_Handler+0x4>

0800542c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005430:	46c0      	nop			; (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005444:	f7fd fa5e 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  //This is for the encoder A input
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8005452:	2380      	movs	r3, #128	; 0x80
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	0018      	movs	r0, r3
 8005458:	f7fd fcd6 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  //This is for the encoder B input
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 800545c:	2380      	movs	r3, #128	; 0x80
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	0018      	movs	r0, r3
 8005462:	f7fd fcd1 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
	//Clear interrupt flag
	htim6.Instance->SR &= ~TIM_SR_UIF;
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <TIM6_DAC_IRQHandler+0x30>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	4b09      	ldr	r3, [pc, #36]	; (800549c <TIM6_DAC_IRQHandler+0x30>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	438a      	bics	r2, r1
 800547e:	611a      	str	r2, [r3, #16]
	okButtonPtr->process();
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <TIM6_DAC_IRQHandler+0x34>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	0018      	movs	r0, r3
 8005486:	f000 f929 	bl	80056dc <_ZN11SW_DEBOUNCE7processEv>
	cancelButtonPtr->process();
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <TIM6_DAC_IRQHandler+0x38>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	0018      	movs	r0, r3
 8005490:	f000 f924 	bl	80056dc <_ZN11SW_DEBOUNCE7processEv>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005494:	46c0      	nop			; (mov r8, r8)
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	200000f4 	.word	0x200000f4
 80054a0:	20000138 	.word	0x20000138
 80054a4:	2000013c 	.word	0x2000013c

080054a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	0002      	movs	r2, r0
 80054b0:	1dbb      	adds	r3, r7, #6
 80054b2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin)
 80054b4:	1dbb      	adds	r3, r7, #6
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	429a      	cmp	r2, r3
 80054be:	d005      	beq.n	80054cc <HAL_GPIO_EXTI_Callback+0x24>
 80054c0:	1dbb      	adds	r3, r7, #6
 80054c2:	881a      	ldrh	r2, [r3, #0]
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d117      	bne.n	80054fc <HAL_GPIO_EXTI_Callback+0x54>
	{
		encoderPtr->process((ENC_A_GPIO_Port->IDR & ENC_A_Pin) != 0, (ENC_B_GPIO_Port->IDR & ENC_B_Pin) != 0);
 80054cc:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <HAL_GPIO_EXTI_Callback+0x5c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	0018      	movs	r0, r3
 80054d2:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <HAL_GPIO_EXTI_Callback+0x60>)
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4013      	ands	r3, r2
 80054dc:	1e5a      	subs	r2, r3, #1
 80054de:	4193      	sbcs	r3, r2
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	0019      	movs	r1, r3
 80054e4:	2390      	movs	r3, #144	; 0x90
 80054e6:	05db      	lsls	r3, r3, #23
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	4013      	ands	r3, r2
 80054f0:	1e5a      	subs	r2, r3, #1
 80054f2:	4193      	sbcs	r3, r2
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	001a      	movs	r2, r3
 80054f8:	f000 f878 	bl	80055ec <_ZN14ROTARY_ENCODER7processEhh>
	}
}
 80054fc:	46c0      	nop			; (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	b002      	add	sp, #8
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20000134 	.word	0x20000134
 8005508:	48000800 	.word	0x48000800

0800550c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <_sbrk+0x50>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <_sbrk+0x16>
		heap_end = &end;
 800551c:	4b0f      	ldr	r3, [pc, #60]	; (800555c <_sbrk+0x50>)
 800551e:	4a10      	ldr	r2, [pc, #64]	; (8005560 <_sbrk+0x54>)
 8005520:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005522:	4b0e      	ldr	r3, [pc, #56]	; (800555c <_sbrk+0x50>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005528:	4b0c      	ldr	r3, [pc, #48]	; (800555c <_sbrk+0x50>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	18d3      	adds	r3, r2, r3
 8005530:	466a      	mov	r2, sp
 8005532:	4293      	cmp	r3, r2
 8005534:	d907      	bls.n	8005546 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005536:	f003 f86d 	bl	8008614 <__errno>
 800553a:	0003      	movs	r3, r0
 800553c:	220c      	movs	r2, #12
 800553e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005540:	2301      	movs	r3, #1
 8005542:	425b      	negs	r3, r3
 8005544:	e006      	b.n	8005554 <_sbrk+0x48>
	}

	heap_end += incr;
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <_sbrk+0x50>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	18d2      	adds	r2, r2, r3
 800554e:	4b03      	ldr	r3, [pc, #12]	; (800555c <_sbrk+0x50>)
 8005550:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	0018      	movs	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	b004      	add	sp, #16
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000140 	.word	0x20000140
 8005560:	20000158 	.word	0x20000158

08005564 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005568:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <SystemInit+0x70>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <SystemInit+0x70>)
 800556e:	2101      	movs	r1, #1
 8005570:	430a      	orrs	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8005574:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <SystemInit+0x70>)
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <SystemInit+0x70>)
 800557a:	4917      	ldr	r1, [pc, #92]	; (80055d8 <SystemInit+0x74>)
 800557c:	400a      	ands	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8005580:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <SystemInit+0x70>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <SystemInit+0x70>)
 8005586:	4915      	ldr	r1, [pc, #84]	; (80055dc <SystemInit+0x78>)
 8005588:	400a      	ands	r2, r1
 800558a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800558c:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <SystemInit+0x70>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <SystemInit+0x70>)
 8005592:	4913      	ldr	r1, [pc, #76]	; (80055e0 <SystemInit+0x7c>)
 8005594:	400a      	ands	r2, r1
 8005596:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005598:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <SystemInit+0x70>)
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <SystemInit+0x70>)
 800559e:	4911      	ldr	r1, [pc, #68]	; (80055e4 <SystemInit+0x80>)
 80055a0:	400a      	ands	r2, r1
 80055a2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <SystemInit+0x70>)
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <SystemInit+0x70>)
 80055aa:	210f      	movs	r1, #15
 80055ac:	438a      	bics	r2, r1
 80055ae:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <SystemInit+0x70>)
 80055b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b4:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <SystemInit+0x70>)
 80055b6:	490c      	ldr	r1, [pc, #48]	; (80055e8 <SystemInit+0x84>)
 80055b8:	400a      	ands	r2, r1
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <SystemInit+0x70>)
 80055be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c0:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <SystemInit+0x70>)
 80055c2:	2101      	movs	r1, #1
 80055c4:	438a      	bics	r2, r1
 80055c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80055c8:	4b02      	ldr	r3, [pc, #8]	; (80055d4 <SystemInit+0x70>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	609a      	str	r2, [r3, #8]

}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40021000 	.word	0x40021000
 80055d8:	08ffb80c 	.word	0x08ffb80c
 80055dc:	fef6ffff 	.word	0xfef6ffff
 80055e0:	fffbffff 	.word	0xfffbffff
 80055e4:	ffc0ffff 	.word	0xffc0ffff
 80055e8:	fffcfe2c 	.word	0xfffcfe2c

080055ec <_ZN14ROTARY_ENCODER7processEhh>:
ROTARY_ENCODER::ROTARY_ENCODER(uint8_t ticks_per_step):
ticksPerStep{ticks_per_step}, tickCounter{0}, state{R_START}
{}

void ROTARY_ENCODER::process(uint8_t a_state, uint8_t b_state)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	0008      	movs	r0, r1
 80055f6:	0011      	movs	r1, r2
 80055f8:	1cfb      	adds	r3, r7, #3
 80055fa:	1c02      	adds	r2, r0, #0
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	1cbb      	adds	r3, r7, #2
 8005600:	1c0a      	adds	r2, r1, #0
 8005602:	701a      	strb	r2, [r3, #0]
	state = ttable[state & 0xF][((a_state & 0x1) << 1) | (b_state & 0x1)];
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	7a1b      	ldrb	r3, [r3, #8]
 8005608:	001a      	movs	r2, r3
 800560a:	230f      	movs	r3, #15
 800560c:	401a      	ands	r2, r3
 800560e:	1cfb      	adds	r3, r7, #3
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	2102      	movs	r1, #2
 8005616:	4019      	ands	r1, r3
 8005618:	1cbb      	adds	r3, r7, #2
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2001      	movs	r0, #1
 800561e:	4003      	ands	r3, r0
 8005620:	430b      	orrs	r3, r1
 8005622:	492d      	ldr	r1, [pc, #180]	; (80056d8 <_ZN14ROTARY_ENCODER7processEhh+0xec>)
 8005624:	0092      	lsls	r2, r2, #2
 8005626:	188a      	adds	r2, r1, r2
 8005628:	5cd2      	ldrb	r2, [r2, r3]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	721a      	strb	r2, [r3, #8]
	if(state & (DIR_CCW | DIR_CW))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7a1b      	ldrb	r3, [r3, #8]
 8005632:	001a      	movs	r2, r3
 8005634:	2330      	movs	r3, #48	; 0x30
 8005636:	4013      	ands	r3, r2
 8005638:	d049      	beq.n	80056ce <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	{
	    if(state & DIR_CW)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	7a1b      	ldrb	r3, [r3, #8]
 800563e:	001a      	movs	r2, r3
 8005640:	2310      	movs	r3, #16
 8005642:	4013      	ands	r3, r2
 8005644:	d011      	beq.n	800566a <_ZN14ROTARY_ENCODER7processEhh+0x7e>
	    {
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter < 0)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2206      	movs	r2, #6
 800564a:	5e9b      	ldrsh	r3, [r3, r2]
 800564c:	2b00      	cmp	r3, #0
 800564e:	da02      	bge.n	8005656 <_ZN14ROTARY_ENCODER7processEhh+0x6a>
	    	{
	    		this->tickCounter = 0;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter++;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2206      	movs	r2, #6
 800565a:	5e9b      	ldrsh	r3, [r3, r2]
 800565c:	b29b      	uxth	r3, r3
 800565e:	3301      	adds	r3, #1
 8005660:	b29b      	uxth	r3, r3
 8005662:	b21a      	sxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	80da      	strh	r2, [r3, #6]
 8005668:	e010      	b.n	800568c <_ZN14ROTARY_ENCODER7processEhh+0xa0>
	    }else{
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter > 0)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2206      	movs	r2, #6
 800566e:	5e9b      	ldrsh	r3, [r3, r2]
 8005670:	2b00      	cmp	r3, #0
 8005672:	dd02      	ble.n	800567a <_ZN14ROTARY_ENCODER7processEhh+0x8e>
	    	{
	    		this->tickCounter = 0;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter--;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2206      	movs	r2, #6
 800567e:	5e9b      	ldrsh	r3, [r3, r2]
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29b      	uxth	r3, r3
 8005686:	b21a      	sxth	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	80da      	strh	r2, [r3, #6]
	    }

	    uint16_t tempCounter = (this->tickCounter < 0) ? this->tickCounter * -1 : this->tickCounter;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2206      	movs	r2, #6
 8005690:	5e9b      	ldrsh	r3, [r3, r2]
 8005692:	17d9      	asrs	r1, r3, #31
 8005694:	185a      	adds	r2, r3, r1
 8005696:	404a      	eors	r2, r1
 8005698:	210e      	movs	r1, #14
 800569a:	187b      	adds	r3, r7, r1
 800569c:	801a      	strh	r2, [r3, #0]
	    if(tempCounter >= this->ticksPerStep)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	791b      	ldrb	r3, [r3, #4]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	187a      	adds	r2, r7, r1
 80056a6:	8812      	ldrh	r2, [r2, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d310      	bcc.n	80056ce <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	    {
	    	this->doStep(state & DIR_CW);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	7a12      	ldrb	r2, [r2, #8]
 80056b6:	0011      	movs	r1, r2
 80056b8:	2210      	movs	r2, #16
 80056ba:	400a      	ands	r2, r1
 80056bc:	1e51      	subs	r1, r2, #1
 80056be:	418a      	sbcs	r2, r1
 80056c0:	b2d1      	uxtb	r1, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	0010      	movs	r0, r2
 80056c6:	4798      	blx	r3
	    	this->tickCounter = 0;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	80da      	strh	r2, [r3, #6]
	    }
	}
}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b004      	add	sp, #16
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	08008bac 	.word	0x08008bac

080056dc <_ZN11SW_DEBOUNCE7processEv>:
switchBitSequence{0xFF},stateMachineState{SW_STATE_MACHINE::SWITCH_OPEN}, validPressBitSequence{static_cast<uint8_t>(1 << static_cast<uint8_t>(ms_for_valid_press/timer_period_ms))},
msHeldCounter{0}, timerPeriodMs{timer_period_ms}, msForValidPress{ms_for_valid_press} , timerInstance{timer_instance}
{}

void SW_DEBOUNCE::process(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	this->switchBitSequence = (this->switchBitSequence << 1) | ((this->gpioPort->IDR & this->gpioPin) != 0);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	7b1b      	ldrb	r3, [r3, #12]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	b25a      	sxtb	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	8889      	ldrh	r1, [r1, #4]
 80056f6:	400b      	ands	r3, r1
 80056f8:	1e59      	subs	r1, r3, #1
 80056fa:	418b      	sbcs	r3, r1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	b25b      	sxtb	r3, r3
 8005700:	4313      	orrs	r3, r2
 8005702:	b25b      	sxtb	r3, r3
 8005704:	b2da      	uxtb	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	731a      	strb	r2, [r3, #12]
	if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_OPEN)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11b      	bne.n	800574a <_ZN11SW_DEBOUNCE7processEv+0x6e>
	{
		if((this->switchBitSequence & (this->validPressBitSequence | (this->validPressBitSequence - 1))) == this->validPressBitSequence)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7b1b      	ldrb	r3, [r3, #12]
 8005716:	001a      	movs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	7d1b      	ldrb	r3, [r3, #20]
 800571c:	0019      	movs	r1, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	7d1b      	ldrb	r3, [r3, #20]
 8005722:	3b01      	subs	r3, #1
 8005724:	430b      	orrs	r3, r1
 8005726:	4013      	ands	r3, r2
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	7d12      	ldrb	r2, [r2, #20]
 800572c:	4293      	cmp	r3, r2
 800572e:	d13a      	bne.n	80057a6 <_ZN11SW_DEBOUNCE7processEv+0xca>
		{
			this->stateMachineState = SW_STATE_MACHINE::VALID_PRESS_DETECTED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	611a      	str	r2, [r3, #16]
			this->msHeldCounter = this->msForValidPress;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	5c9b      	ldrb	r3, [r3, r2]
 800573c:	001a      	movs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	619a      	str	r2, [r3, #24]
			//Reset the bit sequence to only count held time now
			this->switchBitSequence = 0;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	731a      	strb	r2, [r3, #12]
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
		{
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
		}
	}
}
 8005748:	e02d      	b.n	80057a6 <_ZN11SW_DEBOUNCE7processEv+0xca>
	}else if(this->stateMachineState == SW_STATE_MACHINE::VALID_PRESS_DETECTED)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d11e      	bne.n	8005790 <_ZN11SW_DEBOUNCE7processEv+0xb4>
		if(!this->switchBitSequence)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7b1b      	ldrb	r3, [r3, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d107      	bne.n	800576a <_ZN11SW_DEBOUNCE7processEv+0x8e>
			this->msHeldCounter+= this->timerPeriodMs;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	18d2      	adds	r2, r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	619a      	str	r2, [r3, #24]
}
 8005768:	e01d      	b.n	80057a6 <_ZN11SW_DEBOUNCE7processEv+0xca>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_RELEASED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	611a      	str	r2, [r3, #16]
			if(this->msHeldCounter >= static_cast<uint32_t>(SWITCH_STATE::THREE_SECOND_PRESS))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4a0e      	ldr	r2, [pc, #56]	; (80057b0 <_ZN11SW_DEBOUNCE7processEv+0xd4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d903      	bls.n	8005782 <_ZN11SW_DEBOUNCE7processEv+0xa6>
				this->debouncedState = SWITCH_STATE::THREE_SECOND_PRESS;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <_ZN11SW_DEBOUNCE7processEv+0xd8>)
 800577e:	609a      	str	r2, [r3, #8]
 8005780:	e002      	b.n	8005788 <_ZN11SW_DEBOUNCE7processEv+0xac>
				this->debouncedState = SWITCH_STATE::SHORT_PRESS;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	609a      	str	r2, [r3, #8]
			this->msHeldCounter = 0;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	619a      	str	r2, [r3, #24]
}
 800578e:	e00a      	b.n	80057a6 <_ZN11SW_DEBOUNCE7processEv+0xca>
	}else if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_RELEASED)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d106      	bne.n	80057a6 <_ZN11SW_DEBOUNCE7processEv+0xca>
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	7b1b      	ldrb	r3, [r3, #12]
 800579c:	2bff      	cmp	r3, #255	; 0xff
 800579e:	d102      	bne.n	80057a6 <_ZN11SW_DEBOUNCE7processEv+0xca>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	611a      	str	r2, [r3, #16]
}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b002      	add	sp, #8
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	00000bb7 	.word	0x00000bb7
 80057b4:	00000bb8 	.word	0x00000bb8

080057b8 <_ZN7TFT_GFX11getWordSizeEPKc>:

//Public Function Prototypes

//Private Function Definitions
uint8_t TFT_GFX::getWordSize(const char* string)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 80057c2:	230f      	movs	r3, #15
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
	while(*string != ' ' && *string != '\0')
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d00d      	beq.n	80057ee <_ZN7TFT_GFX11getWordSizeEPKc+0x36>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d009      	beq.n	80057ee <_ZN7TFT_GFX11getWordSizeEPKc+0x36>
	{
		counter++;
 80057da:	210f      	movs	r1, #15
 80057dc:	187b      	adds	r3, r7, r1
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	187b      	adds	r3, r7, r1
 80057e2:	3201      	adds	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
		string++;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	603b      	str	r3, [r7, #0]
	while(*string != ' ' && *string != '\0')
 80057ec:	e7ed      	b.n	80057ca <_ZN7TFT_GFX11getWordSizeEPKc+0x12>
	}
	return counter;
 80057ee:	230f      	movs	r3, #15
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	781b      	ldrb	r3, [r3, #0]
}
 80057f4:	0018      	movs	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b004      	add	sp, #16
 80057fa:	bd80      	pop	{r7, pc}

080057fc <_ZN7TFT_GFX11getLineSizeEPKch>:

uint8_t TFT_GFX::getLineSize(const char* string, uint8_t max_chars_in_line)
{
 80057fc:	b5b0      	push	{r4, r5, r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	1dfb      	adds	r3, r7, #7
 8005808:	701a      	strb	r2, [r3, #0]
	uint8_t currCharsInLine = 0;
 800580a:	2317      	movs	r3, #23
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
	bool overFlowed = false;
 8005812:	2316      	movs	r3, #22
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
	while(*string && !overFlowed)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d03f      	beq.n	80058a2 <_ZN7TFT_GFX11getLineSizeEPKch+0xa6>
 8005822:	2316      	movs	r3, #22
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d13a      	bne.n	80058a2 <_ZN7TFT_GFX11getLineSizeEPKch+0xa6>
	{
		uint8_t nextWordSize = this->getWordSize(string);
 800582c:	2515      	movs	r5, #21
 800582e:	197c      	adds	r4, r7, r5
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	0011      	movs	r1, r2
 8005836:	0018      	movs	r0, r3
 8005838:	f7ff ffbe 	bl	80057b8 <_ZN7TFT_GFX11getWordSizeEPKc>
 800583c:	0003      	movs	r3, r0
 800583e:	7023      	strb	r3, [r4, #0]
		//This is to account for spaces
		if(nextWordSize == 0)
 8005840:	197b      	adds	r3, r7, r5
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d103      	bne.n	8005850 <_ZN7TFT_GFX11getLineSizeEPKch+0x54>
		{
			nextWordSize = 1;
 8005848:	2315      	movs	r3, #21
 800584a:	18fb      	adds	r3, r7, r3
 800584c:	2201      	movs	r2, #1
 800584e:	701a      	strb	r2, [r3, #0]
		}
		//Check if we overflow
		if(currCharsInLine + nextWordSize > max_chars_in_line)
 8005850:	2317      	movs	r3, #23
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	2315      	movs	r3, #21
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	18d2      	adds	r2, r2, r3
 800585e:	1dfb      	adds	r3, r7, #7
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	dd0e      	ble.n	8005884 <_ZN7TFT_GFX11getLineSizeEPKch+0x88>
		{
			if(currCharsInLine == 0)
 8005866:	2317      	movs	r3, #23
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <_ZN7TFT_GFX11getLineSizeEPKch+0x7e>
			{
				currCharsInLine = max_chars_in_line;
 8005870:	2317      	movs	r3, #23
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	1dfa      	adds	r2, r7, #7
 8005876:	7812      	ldrb	r2, [r2, #0]
 8005878:	701a      	strb	r2, [r3, #0]
			}
			overFlowed = true;
 800587a:	2316      	movs	r3, #22
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	e7ca      	b.n	800581a <_ZN7TFT_GFX11getLineSizeEPKch+0x1e>
		}else{
			currCharsInLine += nextWordSize;
 8005884:	2217      	movs	r2, #23
 8005886:	18bb      	adds	r3, r7, r2
 8005888:	18b9      	adds	r1, r7, r2
 800588a:	2015      	movs	r0, #21
 800588c:	183a      	adds	r2, r7, r0
 800588e:	7809      	ldrb	r1, [r1, #0]
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	188a      	adds	r2, r1, r2
 8005894:	701a      	strb	r2, [r3, #0]
			string += nextWordSize;
 8005896:	183b      	adds	r3, r7, r0
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	18d3      	adds	r3, r2, r3
 800589e:	60bb      	str	r3, [r7, #8]
	while(*string && !overFlowed)
 80058a0:	e7bb      	b.n	800581a <_ZN7TFT_GFX11getLineSizeEPKch+0x1e>
		}
	}
	return currCharsInLine;
 80058a2:	2317      	movs	r3, #23
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	781b      	ldrb	r3, [r3, #0]
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b006      	add	sp, #24
 80058ae:	bdb0      	pop	{r4, r5, r7, pc}

080058b0 <_ZN7TFT_GFX13getStringSizeEPKc>:

uint8_t TFT_GFX::getStringSize(const char* string)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 80058ba:	230f      	movs	r3, #15
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
	while(*(string++))
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	603a      	str	r2, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	1e5a      	subs	r2, r3, #1
 80058cc:	4193      	sbcs	r3, r2
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <_ZN7TFT_GFX13getStringSizeEPKc+0x32>
	{
		counter++;
 80058d4:	210f      	movs	r1, #15
 80058d6:	187b      	adds	r3, r7, r1
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	187b      	adds	r3, r7, r1
 80058dc:	3201      	adds	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
	while(*(string++))
 80058e0:	e7ef      	b.n	80058c2 <_ZN7TFT_GFX13getStringSizeEPKc+0x12>
	}
	return counter;
 80058e2:	230f      	movs	r3, #15
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	781b      	ldrb	r3, [r3, #0]
}
 80058e8:	0018      	movs	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b004      	add	sp, #16
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <_ZN7TFT_GFXC1EP11SPI_TypeDef>:
//Public Function Definitions
TFT_GFX::TFT_GFX(SPI_TypeDef *SPIx):
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
spiInstance{SPIx}, _width{ILI9341_TFTWIDTH}, _height{ILI9341_TFTHEIGHT}
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	22f0      	movs	r2, #240	; 0xf0
 8005904:	809a      	strh	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	22a0      	movs	r2, #160	; 0xa0
 800590a:	0052      	lsls	r2, r2, #1
 800590c:	80da      	strh	r2, [r3, #6]
{}
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	0018      	movs	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	b002      	add	sp, #8
 8005916:	bd80      	pop	{r7, pc}

08005918 <_ZN7TFT_GFX13setAddrWindowEtttt>:

void TFT_GFX::setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8005918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	000c      	movs	r4, r1
 8005922:	0010      	movs	r0, r2
 8005924:	0019      	movs	r1, r3
 8005926:	250a      	movs	r5, #10
 8005928:	197b      	adds	r3, r7, r5
 800592a:	1c22      	adds	r2, r4, #0
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	2608      	movs	r6, #8
 8005930:	19bb      	adds	r3, r7, r6
 8005932:	1c02      	adds	r2, r0, #0
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	1dbb      	adds	r3, r7, #6
 8005938:	1c0a      	adds	r2, r1, #0
 800593a:	801a      	strh	r2, [r3, #0]
    uint16_t x2 = (x1 + w - 1);
 800593c:	002c      	movs	r4, r5
 800593e:	193a      	adds	r2, r7, r4
 8005940:	1dbb      	adds	r3, r7, #6
 8005942:	8812      	ldrh	r2, [r2, #0]
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	18d3      	adds	r3, r2, r3
 8005948:	b29a      	uxth	r2, r3
 800594a:	2316      	movs	r3, #22
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	3a01      	subs	r2, #1
 8005950:	801a      	strh	r2, [r3, #0]
    uint16_t y2 = (y1 + h - 1);
 8005952:	0035      	movs	r5, r6
 8005954:	197b      	adds	r3, r7, r5
 8005956:	2228      	movs	r2, #40	; 0x28
 8005958:	2108      	movs	r1, #8
 800595a:	1879      	adds	r1, r7, r1
 800595c:	1889      	adds	r1, r1, r2
 800595e:	881a      	ldrh	r2, [r3, #0]
 8005960:	880b      	ldrh	r3, [r1, #0]
 8005962:	18d3      	adds	r3, r2, r3
 8005964:	b29a      	uxth	r2, r3
 8005966:	2614      	movs	r6, #20
 8005968:	19bb      	adds	r3, r7, r6
 800596a:	3a01      	subs	r2, #1
 800596c:	801a      	strh	r2, [r3, #0]
	// Set column range.
	hspi_cmd(this->spiInstance, 0x2A);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	212a      	movs	r1, #42	; 0x2a
 8005974:	0018      	movs	r0, r3
 8005976:	f000 feba 	bl	80066ee <hspi_cmd>
	hspi_w16(this->spiInstance, x1);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	193b      	adds	r3, r7, r4
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	0019      	movs	r1, r3
 8005984:	0010      	movs	r0, r2
 8005986:	f000 fe8f 	bl	80066a8 <hspi_w16>
	hspi_w16(this->spiInstance, x2);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	2316      	movs	r3, #22
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	0019      	movs	r1, r3
 8005996:	0010      	movs	r0, r2
 8005998:	f000 fe86 	bl	80066a8 <hspi_w16>
	
	// Set row range.
	hspi_cmd(this->spiInstance, 0x2B);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	212b      	movs	r1, #43	; 0x2b
 80059a2:	0018      	movs	r0, r3
 80059a4:	f000 fea3 	bl	80066ee <hspi_cmd>
	hspi_w16(this->spiInstance, y1);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	197b      	adds	r3, r7, r5
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	0019      	movs	r1, r3
 80059b2:	0010      	movs	r0, r2
 80059b4:	f000 fe78 	bl	80066a8 <hspi_w16>
	hspi_w16(this->spiInstance, y2);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	19bb      	adds	r3, r7, r6
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	0019      	movs	r1, r3
 80059c2:	0010      	movs	r0, r2
 80059c4:	f000 fe70 	bl	80066a8 <hspi_w16>
	
	// Set 'write to RAM'
	hspi_cmd(this->spiInstance, 0x2C);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	212c      	movs	r1, #44	; 0x2c
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 fe8d 	bl	80066ee <hspi_cmd>
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b007      	add	sp, #28
 80059da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059dc <_ZN7TFT_GFX10writePixelEsst>:

void TFT_GFX::writePixel(int16_t x, int16_t y, uint16_t color) 
{
 80059dc:	b5b0      	push	{r4, r5, r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	000c      	movs	r4, r1
 80059e6:	0010      	movs	r0, r2
 80059e8:	0019      	movs	r1, r3
 80059ea:	250a      	movs	r5, #10
 80059ec:	197b      	adds	r3, r7, r5
 80059ee:	1c22      	adds	r2, r4, #0
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	2308      	movs	r3, #8
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	1c02      	adds	r2, r0, #0
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	1dbb      	adds	r3, r7, #6
 80059fc:	1c0a      	adds	r2, r1, #0
 80059fe:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && (y >= 0) && (y < this->_height)) 
 8005a00:	197b      	adds	r3, r7, r5
 8005a02:	2200      	movs	r2, #0
 8005a04:	5e9b      	ldrsh	r3, [r3, r2]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	db29      	blt.n	8005a5e <_ZN7TFT_GFX10writePixelEsst+0x82>
 8005a0a:	230a      	movs	r3, #10
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	2200      	movs	r2, #0
 8005a10:	5e9b      	ldrsh	r3, [r3, r2]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	8892      	ldrh	r2, [r2, #4]
 8005a16:	4293      	cmp	r3, r2
 8005a18:	da21      	bge.n	8005a5e <_ZN7TFT_GFX10writePixelEsst+0x82>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2200      	movs	r2, #0
 8005a20:	5e9b      	ldrsh	r3, [r3, r2]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	db1b      	blt.n	8005a5e <_ZN7TFT_GFX10writePixelEsst+0x82>
 8005a26:	2308      	movs	r3, #8
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	5e9b      	ldrsh	r3, [r3, r2]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	88d2      	ldrh	r2, [r2, #6]
 8005a32:	4293      	cmp	r3, r2
 8005a34:	da13      	bge.n	8005a5e <_ZN7TFT_GFX10writePixelEsst+0x82>
    {
        setAddrWindow(x, y, 1, 1);
 8005a36:	230a      	movs	r3, #10
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	8819      	ldrh	r1, [r3, #0]
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	881a      	ldrh	r2, [r3, #0]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	2301      	movs	r3, #1
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f7ff ff65 	bl	8005918 <_ZN7TFT_GFX13setAddrWindowEtttt>
        hspi_w16(this->spiInstance, color);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	1dbb      	adds	r3, r7, #6
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	0019      	movs	r1, r3
 8005a58:	0010      	movs	r0, r2
 8005a5a:	f000 fe25 	bl	80066a8 <hspi_w16>
    }
}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b004      	add	sp, #16
 8005a64:	bdb0      	pop	{r4, r5, r7, pc}

08005a66 <_ZN7TFT_GFX13writeFillRectEsssst>:

void TFT_GFX::writeFillRect(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 8005a66:	b5b0      	push	{r4, r5, r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af02      	add	r7, sp, #8
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	000c      	movs	r4, r1
 8005a70:	0010      	movs	r0, r2
 8005a72:	0019      	movs	r1, r3
 8005a74:	230a      	movs	r3, #10
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	1c22      	adds	r2, r4, #0
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	1c02      	adds	r2, r0, #0
 8005a82:	801a      	strh	r2, [r3, #0]
 8005a84:	1dbb      	adds	r3, r7, #6
 8005a86:	1c0a      	adds	r2, r1, #0
 8005a88:	801a      	strh	r2, [r3, #0]
    if(w && h) {                            // Nonzero width and height?
 8005a8a:	1dbb      	adds	r3, r7, #6
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	5e9b      	ldrsh	r3, [r3, r2]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d100      	bne.n	8005a96 <_ZN7TFT_GFX13writeFillRectEsssst+0x30>
 8005a94:	e0c8      	b.n	8005c28 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
 8005a96:	2328      	movs	r3, #40	; 0x28
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	5e9b      	ldrsh	r3, [r3, r2]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d100      	bne.n	8005aa4 <_ZN7TFT_GFX13writeFillRectEsssst+0x3e>
 8005aa2:	e0c1      	b.n	8005c28 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
        if(w < 0) {                         // If negative width...
 8005aa4:	1dbb      	adds	r3, r7, #6
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	5e9b      	ldrsh	r3, [r3, r2]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	da10      	bge.n	8005ad0 <_ZN7TFT_GFX13writeFillRectEsssst+0x6a>
            x +=  w + 1;                    //   Move X to left edge
 8005aae:	1dbb      	adds	r3, r7, #6
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	210a      	movs	r1, #10
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	18d3      	adds	r3, r2, r3
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3301      	adds	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	801a      	strh	r2, [r3, #0]
            w  = -w;                        //   Use positive width
 8005ac4:	1dbb      	adds	r3, r7, #6
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	425b      	negs	r3, r3
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	1dbb      	adds	r3, r7, #6
 8005ace:	801a      	strh	r2, [r3, #0]
        }
        if(x < this->_width) {                    // Not off right
 8005ad0:	230a      	movs	r3, #10
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	5e9b      	ldrsh	r3, [r3, r2]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	8892      	ldrh	r2, [r2, #4]
 8005adc:	4293      	cmp	r3, r2
 8005ade:	db00      	blt.n	8005ae2 <_ZN7TFT_GFX13writeFillRectEsssst+0x7c>
 8005ae0:	e0a2      	b.n	8005c28 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
            if(h < 0) {                     // If negative height...
 8005ae2:	2328      	movs	r3, #40	; 0x28
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	5e9b      	ldrsh	r3, [r3, r2]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	da11      	bge.n	8005b12 <_ZN7TFT_GFX13writeFillRectEsssst+0xac>
                y +=  h + 1;                //   Move Y to top edge
 8005aee:	2128      	movs	r1, #40	; 0x28
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	881a      	ldrh	r2, [r3, #0]
 8005af4:	2008      	movs	r0, #8
 8005af6:	183b      	adds	r3, r7, r0
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3301      	adds	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	183b      	adds	r3, r7, r0
 8005b04:	801a      	strh	r2, [r3, #0]
                h  = -h;                    //   Use positive height
 8005b06:	187b      	adds	r3, r7, r1
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	425b      	negs	r3, r3
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	187b      	adds	r3, r7, r1
 8005b10:	801a      	strh	r2, [r3, #0]
            }
            if(y < this->_height) {               // Not off bottom
 8005b12:	2308      	movs	r3, #8
 8005b14:	18fb      	adds	r3, r7, r3
 8005b16:	2200      	movs	r2, #0
 8005b18:	5e9b      	ldrsh	r3, [r3, r2]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	88d2      	ldrh	r2, [r2, #6]
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	db00      	blt.n	8005b24 <_ZN7TFT_GFX13writeFillRectEsssst+0xbe>
 8005b22:	e081      	b.n	8005c28 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                int16_t x2 = x + w - 1;
 8005b24:	230a      	movs	r3, #10
 8005b26:	18fb      	adds	r3, r7, r3
 8005b28:	881a      	ldrh	r2, [r3, #0]
 8005b2a:	1dbb      	adds	r3, r7, #6
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	18d3      	adds	r3, r2, r3
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	2116      	movs	r1, #22
 8005b38:	187b      	adds	r3, r7, r1
 8005b3a:	801a      	strh	r2, [r3, #0]
                if(x2 >= 0) {               // Not off left
 8005b3c:	187b      	adds	r3, r7, r1
 8005b3e:	2200      	movs	r2, #0
 8005b40:	5e9b      	ldrsh	r3, [r3, r2]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	da00      	bge.n	8005b48 <_ZN7TFT_GFX13writeFillRectEsssst+0xe2>
 8005b46:	e06f      	b.n	8005c28 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                    int16_t y2 = y + h - 1;
 8005b48:	2308      	movs	r3, #8
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	881a      	ldrh	r2, [r3, #0]
 8005b4e:	2328      	movs	r3, #40	; 0x28
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	18d3      	adds	r3, r2, r3
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	2114      	movs	r1, #20
 8005b5e:	187b      	adds	r3, r7, r1
 8005b60:	801a      	strh	r2, [r3, #0]
                    if(y2 >= 0) {           // Not off top
 8005b62:	187b      	adds	r3, r7, r1
 8005b64:	2200      	movs	r2, #0
 8005b66:	5e9b      	ldrsh	r3, [r3, r2]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	db5d      	blt.n	8005c28 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                        // Rectangle partly or fully overlaps screen
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 8005b6c:	230a      	movs	r3, #10
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	2200      	movs	r2, #0
 8005b72:	5e9b      	ldrsh	r3, [r3, r2]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	da0a      	bge.n	8005b8e <_ZN7TFT_GFX13writeFillRectEsssst+0x128>
 8005b78:	230a      	movs	r3, #10
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	2316      	movs	r3, #22
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	3301      	adds	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	1dbb      	adds	r3, r7, #6
 8005b8c:	801a      	strh	r2, [r3, #0]
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8005b8e:	2308      	movs	r3, #8
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	2200      	movs	r2, #0
 8005b94:	5e9b      	ldrsh	r3, [r3, r2]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da0b      	bge.n	8005bb2 <_ZN7TFT_GFX13writeFillRectEsssst+0x14c>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	801a      	strh	r2, [r3, #0]
 8005ba2:	2314      	movs	r3, #20
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	2328      	movs	r3, #40	; 0x28
 8005bae:	18fb      	adds	r3, r7, r3
 8005bb0:	801a      	strh	r2, [r3, #0]
                        if(x2 >= this->_width)  { w = this->_width  - x;   } // Clip right
 8005bb2:	2316      	movs	r3, #22
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	5e9b      	ldrsh	r3, [r3, r2]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	8892      	ldrh	r2, [r2, #4]
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	db08      	blt.n	8005bd4 <_ZN7TFT_GFX13writeFillRectEsssst+0x16e>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	889a      	ldrh	r2, [r3, #4]
 8005bc6:	230a      	movs	r3, #10
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	1dbb      	adds	r3, r7, #6
 8005bd2:	801a      	strh	r2, [r3, #0]
                        if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 8005bd4:	2314      	movs	r3, #20
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2200      	movs	r2, #0
 8005bda:	5e9b      	ldrsh	r3, [r3, r2]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	88d2      	ldrh	r2, [r2, #6]
 8005be0:	4293      	cmp	r3, r2
 8005be2:	db09      	blt.n	8005bf8 <_ZN7TFT_GFX13writeFillRectEsssst+0x192>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	88da      	ldrh	r2, [r3, #6]
 8005be8:	2308      	movs	r3, #8
 8005bea:	18fb      	adds	r3, r7, r3
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	2328      	movs	r3, #40	; 0x28
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	801a      	strh	r2, [r3, #0]
                        writeFillRectPreclipped(x, y, w, h, color);
 8005bf8:	1dbb      	adds	r3, r7, #6
 8005bfa:	2400      	movs	r4, #0
 8005bfc:	5f1c      	ldrsh	r4, [r3, r4]
 8005bfe:	2308      	movs	r3, #8
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	2200      	movs	r2, #0
 8005c04:	5e9a      	ldrsh	r2, [r3, r2]
 8005c06:	230a      	movs	r3, #10
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	5e59      	ldrsh	r1, [r3, r1]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	232c      	movs	r3, #44	; 0x2c
 8005c12:	18fb      	adds	r3, r7, r3
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	2328      	movs	r3, #40	; 0x28
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	2500      	movs	r5, #0
 8005c1e:	5f5b      	ldrsh	r3, [r3, r5]
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	0023      	movs	r3, r4
 8005c24:	f000 f804 	bl	8005c30 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
                    }
                }
            }
        }
    }
}
 8005c28:	46c0      	nop			; (mov r8, r8)
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	b006      	add	sp, #24
 8005c2e:	bdb0      	pop	{r4, r5, r7, pc}

08005c30 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>:

inline void TFT_GFX::writeFillRectPreclipped(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 8005c30:	b5b0      	push	{r4, r5, r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	000c      	movs	r4, r1
 8005c3a:	0010      	movs	r0, r2
 8005c3c:	0019      	movs	r1, r3
 8005c3e:	250a      	movs	r5, #10
 8005c40:	197b      	adds	r3, r7, r5
 8005c42:	1c22      	adds	r2, r4, #0
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	2408      	movs	r4, #8
 8005c48:	193b      	adds	r3, r7, r4
 8005c4a:	1c02      	adds	r2, r0, #0
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	1dbb      	adds	r3, r7, #6
 8005c50:	1c0a      	adds	r2, r1, #0
 8005c52:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, w, h);
 8005c54:	197b      	adds	r3, r7, r5
 8005c56:	8819      	ldrh	r1, [r3, #0]
 8005c58:	193b      	adds	r3, r7, r4
 8005c5a:	881a      	ldrh	r2, [r3, #0]
 8005c5c:	1dbb      	adds	r3, r7, #6
 8005c5e:	881c      	ldrh	r4, [r3, #0]
 8005c60:	2520      	movs	r5, #32
 8005c62:	197b      	adds	r3, r7, r5
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	0023      	movs	r3, r4
 8005c6c:	f7ff fe54 	bl	8005918 <_ZN7TFT_GFX13setAddrWindowEtttt>
    writeColor(color, (uint32_t)w * h);
 8005c70:	1dbb      	adds	r3, r7, #6
 8005c72:	2200      	movs	r2, #0
 8005c74:	5e9b      	ldrsh	r3, [r3, r2]
 8005c76:	197a      	adds	r2, r7, r5
 8005c78:	2100      	movs	r1, #0
 8005c7a:	5e52      	ldrsh	r2, [r2, r1]
 8005c7c:	435a      	muls	r2, r3
 8005c7e:	2324      	movs	r3, #36	; 0x24
 8005c80:	18fb      	adds	r3, r7, r3
 8005c82:	8819      	ldrh	r1, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f000 f804 	bl	8005c94 <_ZN7TFT_GFX10writeColorEtm>
}
 8005c8c:	46c0      	nop			; (mov r8, r8)
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b004      	add	sp, #16
 8005c92:	bdb0      	pop	{r4, r5, r7, pc}

08005c94 <_ZN7TFT_GFX10writeColorEtm>:

void TFT_GFX::writeColor(uint16_t color, uint32_t len){
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	230a      	movs	r3, #10
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	1c0a      	adds	r2, r1, #0
 8005ca4:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++){
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d20c      	bcs.n	8005ccc <_ZN7TFT_GFX10writeColorEtm+0x38>
		hspi_w16(this->spiInstance, color);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	230a      	movs	r3, #10
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	0019      	movs	r1, r3
 8005cbe:	0010      	movs	r0, r2
 8005cc0:	f000 fcf2 	bl	80066a8 <hspi_w16>
	for(uint32_t i = 0; i < len; i++){
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e7ee      	b.n	8005caa <_ZN7TFT_GFX10writeColorEtm+0x16>
	}
}
 8005ccc:	46c0      	nop			; (mov r8, r8)
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b006      	add	sp, #24
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <_ZN7TFT_GFX14writeFastVLineEssst>:

void inline TFT_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8005cd4:	b5b0      	push	{r4, r5, r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	000c      	movs	r4, r1
 8005cde:	0010      	movs	r0, r2
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	250a      	movs	r5, #10
 8005ce4:	197b      	adds	r3, r7, r5
 8005ce6:	1c22      	adds	r2, r4, #0
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	2308      	movs	r3, #8
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	1c02      	adds	r2, r0, #0
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	1dbb      	adds	r3, r7, #6
 8005cf4:	1c0a      	adds	r2, r1, #0
 8005cf6:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && h) { // X on screen, nonzero height
 8005cf8:	197b      	adds	r3, r7, r5
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	5e9b      	ldrsh	r3, [r3, r2]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	da00      	bge.n	8005d04 <_ZN7TFT_GFX14writeFastVLineEssst+0x30>
 8005d02:	e072      	b.n	8005dea <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 8005d04:	230a      	movs	r3, #10
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	2200      	movs	r2, #0
 8005d0a:	5e9b      	ldrsh	r3, [r3, r2]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	8892      	ldrh	r2, [r2, #4]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	db00      	blt.n	8005d16 <_ZN7TFT_GFX14writeFastVLineEssst+0x42>
 8005d14:	e069      	b.n	8005dea <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 8005d16:	1dbb      	adds	r3, r7, #6
 8005d18:	2200      	movs	r2, #0
 8005d1a:	5e9b      	ldrsh	r3, [r3, r2]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d064      	beq.n	8005dea <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
        if(h < 0) {                     // If negative height...
 8005d20:	1dbb      	adds	r3, r7, #6
 8005d22:	2200      	movs	r2, #0
 8005d24:	5e9b      	ldrsh	r3, [r3, r2]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	da10      	bge.n	8005d4c <_ZN7TFT_GFX14writeFastVLineEssst+0x78>
            y +=  h + 1;                //   Move Y to top edge
 8005d2a:	1dbb      	adds	r3, r7, #6
 8005d2c:	881a      	ldrh	r2, [r3, #0]
 8005d2e:	2108      	movs	r1, #8
 8005d30:	187b      	adds	r3, r7, r1
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	18d3      	adds	r3, r2, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3301      	adds	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	187b      	adds	r3, r7, r1
 8005d3e:	801a      	strh	r2, [r3, #0]
            h  = -h;                    //   Use positive height
 8005d40:	1dbb      	adds	r3, r7, #6
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	425b      	negs	r3, r3
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	1dbb      	adds	r3, r7, #6
 8005d4a:	801a      	strh	r2, [r3, #0]
        }
        if(y < this->_height) {               // Not off bottom
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	2200      	movs	r2, #0
 8005d52:	5e9b      	ldrsh	r3, [r3, r2]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	88d2      	ldrh	r2, [r2, #6]
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	da46      	bge.n	8005dea <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
            int16_t y2 = y + h - 1;
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	881a      	ldrh	r2, [r3, #0]
 8005d62:	1dbb      	adds	r3, r7, #6
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	18d3      	adds	r3, r2, r3
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	2116      	movs	r1, #22
 8005d70:	187b      	adds	r3, r7, r1
 8005d72:	801a      	strh	r2, [r3, #0]
            if(y2 >= 0) {               // Not off top
 8005d74:	187b      	adds	r3, r7, r1
 8005d76:	2200      	movs	r2, #0
 8005d78:	5e9b      	ldrsh	r3, [r3, r2]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	db35      	blt.n	8005dea <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
                // Line partly or fully overlaps screen
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8005d7e:	2308      	movs	r3, #8
 8005d80:	18fb      	adds	r3, r7, r3
 8005d82:	2200      	movs	r2, #0
 8005d84:	5e9b      	ldrsh	r3, [r3, r2]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	da0a      	bge.n	8005da0 <_ZN7TFT_GFX14writeFastVLineEssst+0xcc>
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2200      	movs	r2, #0
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	2316      	movs	r3, #22
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	1dbb      	adds	r3, r7, #6
 8005d9e:	801a      	strh	r2, [r3, #0]
                if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 8005da0:	2316      	movs	r3, #22
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	2200      	movs	r2, #0
 8005da6:	5e9b      	ldrsh	r3, [r3, r2]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	88d2      	ldrh	r2, [r2, #6]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	db08      	blt.n	8005dc2 <_ZN7TFT_GFX14writeFastVLineEssst+0xee>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	88da      	ldrh	r2, [r3, #6]
 8005db4:	2308      	movs	r3, #8
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	1dbb      	adds	r3, r7, #6
 8005dc0:	801a      	strh	r2, [r3, #0]
                writeFillRectPreclipped(x, y, 1, h, color);
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	5e9a      	ldrsh	r2, [r3, r2]
 8005dca:	230a      	movs	r3, #10
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	2100      	movs	r1, #0
 8005dd0:	5e59      	ldrsh	r1, [r3, r1]
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	2328      	movs	r3, #40	; 0x28
 8005dd6:	18fb      	adds	r3, r7, r3
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	1dbb      	adds	r3, r7, #6
 8005dde:	2400      	movs	r4, #0
 8005de0:	5f1b      	ldrsh	r3, [r3, r4]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	f7ff ff23 	bl	8005c30 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
            }
        }
    }
}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b006      	add	sp, #24
 8005df0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005df4 <_ZN7TFT_GFX8drawCharEsshtthh>:
        }
    }
}

void TFT_GFX::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) 
{
 8005df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005df6:	b089      	sub	sp, #36	; 0x24
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	000c      	movs	r4, r1
 8005dfe:	0010      	movs	r0, r2
 8005e00:	0019      	movs	r1, r3
 8005e02:	250a      	movs	r5, #10
 8005e04:	197b      	adds	r3, r7, r5
 8005e06:	1c22      	adds	r2, r4, #0
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	1c02      	adds	r2, r0, #0
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	1dfb      	adds	r3, r7, #7
 8005e14:	1c0a      	adds	r2, r1, #0
 8005e16:	701a      	strb	r2, [r3, #0]
    if((x >= this->_width)            || // Clip right
 8005e18:	197b      	adds	r3, r7, r5
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	5e9b      	ldrsh	r3, [r3, r2]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	8892      	ldrh	r2, [r2, #4]
 8005e22:	4293      	cmp	r3, r2
 8005e24:	db00      	blt.n	8005e28 <_ZN7TFT_GFX8drawCharEsshtthh+0x34>
 8005e26:	e1c2      	b.n	80061ae <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        (y >= this->_height)           || // Clip bottom
 8005e28:	2308      	movs	r3, #8
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	5e9b      	ldrsh	r3, [r3, r2]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	88d2      	ldrh	r2, [r2, #6]
    if((x >= this->_width)            || // Clip right
 8005e34:	4293      	cmp	r3, r2
 8005e36:	db00      	blt.n	8005e3a <_ZN7TFT_GFX8drawCharEsshtthh+0x46>
 8005e38:	e1b9      	b.n	80061ae <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8005e3a:	230a      	movs	r3, #10
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5e59      	ldrsh	r1, [r3, r1]
 8005e42:	2330      	movs	r3, #48	; 0x30
 8005e44:	2208      	movs	r2, #8
 8005e46:	4694      	mov	ip, r2
 8005e48:	44bc      	add	ip, r7
 8005e4a:	4463      	add	r3, ip
 8005e4c:	781a      	ldrb	r2, [r3, #0]
 8005e4e:	0013      	movs	r3, r2
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	189b      	adds	r3, r3, r2
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	18cb      	adds	r3, r1, r3
 8005e58:	3b01      	subs	r3, #1
        (y >= this->_height)           || // Clip bottom
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	da00      	bge.n	8005e60 <_ZN7TFT_GFX8drawCharEsshtthh+0x6c>
 8005e5e:	e1a6      	b.n	80061ae <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8005e60:	2308      	movs	r3, #8
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	2200      	movs	r2, #0
 8005e66:	5e9a      	ldrsh	r2, [r3, r2]
 8005e68:	2334      	movs	r3, #52	; 0x34
 8005e6a:	2108      	movs	r1, #8
 8005e6c:	468c      	mov	ip, r1
 8005e6e:	44bc      	add	ip, r7
 8005e70:	4463      	add	r3, ip
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	18d3      	adds	r3, r2, r3
 8005e78:	3b01      	subs	r3, #1
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da00      	bge.n	8005e80 <_ZN7TFT_GFX8drawCharEsshtthh+0x8c>
 8005e7e:	e196      	b.n	80061ae <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        return;

    if(c >= 176) c++; // Handle 'classic' charset behavior
 8005e80:	1dfb      	adds	r3, r7, #7
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2baf      	cmp	r3, #175	; 0xaf
 8005e86:	d904      	bls.n	8005e92 <_ZN7TFT_GFX8drawCharEsshtthh+0x9e>
 8005e88:	1dfb      	adds	r3, r7, #7
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	1dfb      	adds	r3, r7, #7
 8005e8e:	3201      	adds	r2, #1
 8005e90:	701a      	strb	r2, [r3, #0]

    //startWrite();
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8005e92:	2317      	movs	r3, #23
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	2200      	movs	r2, #0
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	2317      	movs	r3, #23
 8005e9c:	18fb      	adds	r3, r7, r3
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	b25b      	sxtb	r3, r3
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	dd00      	ble.n	8005ea8 <_ZN7TFT_GFX8drawCharEsshtthh+0xb4>
 8005ea6:	e11f      	b.n	80060e8 <_ZN7TFT_GFX8drawCharEsshtthh+0x2f4>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8005ea8:	1dfb      	adds	r3, r7, #7
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	0013      	movs	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	189a      	adds	r2, r3, r2
 8005eb2:	2317      	movs	r3, #23
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	18d2      	adds	r2, r2, r3
 8005ebc:	2316      	movs	r3, #22
 8005ebe:	18fb      	adds	r3, r7, r3
 8005ec0:	49bd      	ldr	r1, [pc, #756]	; (80061b8 <_ZN7TFT_GFX8drawCharEsshtthh+0x3c4>)
 8005ec2:	5c8a      	ldrb	r2, [r1, r2]
 8005ec4:	701a      	strb	r2, [r3, #0]
        for(int8_t j=0; j<8; j++, line >>= 1) {
 8005ec6:	2315      	movs	r3, #21
 8005ec8:	18fb      	adds	r3, r7, r3
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	2315      	movs	r3, #21
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	2b07      	cmp	r3, #7
 8005ed8:	dd00      	ble.n	8005edc <_ZN7TFT_GFX8drawCharEsshtthh+0xe8>
 8005eda:	e0fb      	b.n	80060d4 <_ZN7TFT_GFX8drawCharEsshtthh+0x2e0>
            if(line & 1) {
 8005edc:	2316      	movs	r3, #22
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d06c      	beq.n	8005fc2 <_ZN7TFT_GFX8drawCharEsshtthh+0x1ce>
                if(size_x == 1 && size_y == 1)
 8005ee8:	2330      	movs	r3, #48	; 0x30
 8005eea:	2208      	movs	r2, #8
 8005eec:	4694      	mov	ip, r2
 8005eee:	44bc      	add	ip, r7
 8005ef0:	4463      	add	r3, ip
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d127      	bne.n	8005f48 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
 8005ef8:	2334      	movs	r3, #52	; 0x34
 8005efa:	2208      	movs	r2, #8
 8005efc:	4694      	mov	ip, r2
 8005efe:	44bc      	add	ip, r7
 8005f00:	4463      	add	r3, ip
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d11f      	bne.n	8005f48 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
                    writePixel(x+i, y+j, color);
 8005f08:	2317      	movs	r3, #23
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	230a      	movs	r3, #10
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	18d3      	adds	r3, r2, r3
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	b219      	sxth	r1, r3
 8005f1e:	2315      	movs	r3, #21
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b25b      	sxtb	r3, r3
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	2308      	movs	r3, #8
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	18d3      	adds	r3, r2, r3
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	b21a      	sxth	r2, r3
 8005f34:	2328      	movs	r3, #40	; 0x28
 8005f36:	2008      	movs	r0, #8
 8005f38:	4684      	mov	ip, r0
 8005f3a:	44bc      	add	ip, r7
 8005f3c:	4463      	add	r3, ip
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff fd4b 	bl	80059dc <_ZN7TFT_GFX10writePixelEsst>
 8005f46:	e0b5      	b.n	80060b4 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 8005f48:	2317      	movs	r3, #23
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b25b      	sxtb	r3, r3
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2030      	movs	r0, #48	; 0x30
 8005f54:	2408      	movs	r4, #8
 8005f56:	193a      	adds	r2, r7, r4
 8005f58:	1812      	adds	r2, r2, r0
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	4353      	muls	r3, r2
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	230a      	movs	r3, #10
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	18d3      	adds	r3, r2, r3
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	b219      	sxth	r1, r3
 8005f6e:	2315      	movs	r3, #21
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2634      	movs	r6, #52	; 0x34
 8005f7a:	193a      	adds	r2, r7, r4
 8005f7c:	1992      	adds	r2, r2, r6
 8005f7e:	7812      	ldrb	r2, [r2, #0]
 8005f80:	b292      	uxth	r2, r2
 8005f82:	4353      	muls	r3, r2
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	0023      	movs	r3, r4
 8005f88:	001d      	movs	r5, r3
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	18d3      	adds	r3, r2, r3
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	b21c      	sxth	r4, r3
 8005f94:	002a      	movs	r2, r5
 8005f96:	18bb      	adds	r3, r7, r2
 8005f98:	181b      	adds	r3, r3, r0
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b21d      	sxth	r5, r3
 8005f9e:	18bb      	adds	r3, r7, r2
 8005fa0:	199b      	adds	r3, r3, r6
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b21b      	sxth	r3, r3
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	2228      	movs	r2, #40	; 0x28
 8005faa:	2608      	movs	r6, #8
 8005fac:	46b4      	mov	ip, r6
 8005fae:	44bc      	add	ip, r7
 8005fb0:	4462      	add	r2, ip
 8005fb2:	8812      	ldrh	r2, [r2, #0]
 8005fb4:	9201      	str	r2, [sp, #4]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	002b      	movs	r3, r5
 8005fba:	0022      	movs	r2, r4
 8005fbc:	f7ff fd53 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>
 8005fc0:	e078      	b.n	80060b4 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
            } else if(bg != color) {
 8005fc2:	232c      	movs	r3, #44	; 0x2c
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	4694      	mov	ip, r2
 8005fc8:	44bc      	add	ip, r7
 8005fca:	4463      	add	r3, ip
 8005fcc:	2228      	movs	r2, #40	; 0x28
 8005fce:	2108      	movs	r1, #8
 8005fd0:	1879      	adds	r1, r7, r1
 8005fd2:	1889      	adds	r1, r1, r2
 8005fd4:	881a      	ldrh	r2, [r3, #0]
 8005fd6:	880b      	ldrh	r3, [r1, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d06b      	beq.n	80060b4 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                if(size_x == 1 && size_y == 1)
 8005fdc:	2330      	movs	r3, #48	; 0x30
 8005fde:	2208      	movs	r2, #8
 8005fe0:	4694      	mov	ip, r2
 8005fe2:	44bc      	add	ip, r7
 8005fe4:	4463      	add	r3, ip
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d127      	bne.n	800603c <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
 8005fec:	2334      	movs	r3, #52	; 0x34
 8005fee:	2208      	movs	r2, #8
 8005ff0:	4694      	mov	ip, r2
 8005ff2:	44bc      	add	ip, r7
 8005ff4:	4463      	add	r3, ip
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d11f      	bne.n	800603c <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
                    writePixel(x+i, y+j, bg);
 8005ffc:	2317      	movs	r3, #23
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	b25b      	sxtb	r3, r3
 8006004:	b29a      	uxth	r2, r3
 8006006:	230a      	movs	r3, #10
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	18d3      	adds	r3, r2, r3
 800600e:	b29b      	uxth	r3, r3
 8006010:	b219      	sxth	r1, r3
 8006012:	2315      	movs	r3, #21
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b25b      	sxtb	r3, r3
 800601a:	b29a      	uxth	r2, r3
 800601c:	2308      	movs	r3, #8
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	18d3      	adds	r3, r2, r3
 8006024:	b29b      	uxth	r3, r3
 8006026:	b21a      	sxth	r2, r3
 8006028:	232c      	movs	r3, #44	; 0x2c
 800602a:	2008      	movs	r0, #8
 800602c:	4684      	mov	ip, r0
 800602e:	44bc      	add	ip, r7
 8006030:	4463      	add	r3, ip
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fcd1 	bl	80059dc <_ZN7TFT_GFX10writePixelEsst>
 800603a:	e03b      	b.n	80060b4 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 800603c:	2317      	movs	r3, #23
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	b25b      	sxtb	r3, r3
 8006044:	b29b      	uxth	r3, r3
 8006046:	2030      	movs	r0, #48	; 0x30
 8006048:	2408      	movs	r4, #8
 800604a:	193a      	adds	r2, r7, r4
 800604c:	1812      	adds	r2, r2, r0
 800604e:	7812      	ldrb	r2, [r2, #0]
 8006050:	b292      	uxth	r2, r2
 8006052:	4353      	muls	r3, r2
 8006054:	b29a      	uxth	r2, r3
 8006056:	230a      	movs	r3, #10
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	18d3      	adds	r3, r2, r3
 800605e:	b29b      	uxth	r3, r3
 8006060:	b219      	sxth	r1, r3
 8006062:	2315      	movs	r3, #21
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	b25b      	sxtb	r3, r3
 800606a:	b29b      	uxth	r3, r3
 800606c:	2634      	movs	r6, #52	; 0x34
 800606e:	193a      	adds	r2, r7, r4
 8006070:	1992      	adds	r2, r2, r6
 8006072:	7812      	ldrb	r2, [r2, #0]
 8006074:	b292      	uxth	r2, r2
 8006076:	4353      	muls	r3, r2
 8006078:	b29a      	uxth	r2, r3
 800607a:	0023      	movs	r3, r4
 800607c:	001d      	movs	r5, r3
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	18d3      	adds	r3, r2, r3
 8006084:	b29b      	uxth	r3, r3
 8006086:	b21c      	sxth	r4, r3
 8006088:	002a      	movs	r2, r5
 800608a:	18bb      	adds	r3, r7, r2
 800608c:	181b      	adds	r3, r3, r0
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	b21d      	sxth	r5, r3
 8006092:	18bb      	adds	r3, r7, r2
 8006094:	199b      	adds	r3, r3, r6
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	b21b      	sxth	r3, r3
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	222c      	movs	r2, #44	; 0x2c
 800609e:	2608      	movs	r6, #8
 80060a0:	46b4      	mov	ip, r6
 80060a2:	44bc      	add	ip, r7
 80060a4:	4462      	add	r2, ip
 80060a6:	8812      	ldrh	r2, [r2, #0]
 80060a8:	9201      	str	r2, [sp, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	002b      	movs	r3, r5
 80060ae:	0022      	movs	r2, r4
 80060b0:	f7ff fcd9 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>
        for(int8_t j=0; j<8; j++, line >>= 1) {
 80060b4:	2115      	movs	r1, #21
 80060b6:	187b      	adds	r3, r7, r1
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	b25b      	sxtb	r3, r3
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	3301      	adds	r3, #1
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	187b      	adds	r3, r7, r1
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	2116      	movs	r1, #22
 80060c8:	187b      	adds	r3, r7, r1
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	105a      	asrs	r2, r3, #1
 80060ce:	187b      	adds	r3, r7, r1
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e6fc      	b.n	8005ece <_ZN7TFT_GFX8drawCharEsshtthh+0xda>
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80060d4:	2117      	movs	r1, #23
 80060d6:	187b      	adds	r3, r7, r1
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	b25b      	sxtb	r3, r3
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	3301      	adds	r3, #1
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	187b      	adds	r3, r7, r1
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e6d8      	b.n	8005e9a <_ZN7TFT_GFX8drawCharEsshtthh+0xa6>
            }
        }
    }
    if(bg != color) { // If opaque, draw vertical line for last column
 80060e8:	232c      	movs	r3, #44	; 0x2c
 80060ea:	2208      	movs	r2, #8
 80060ec:	4694      	mov	ip, r2
 80060ee:	44bc      	add	ip, r7
 80060f0:	4463      	add	r3, ip
 80060f2:	2228      	movs	r2, #40	; 0x28
 80060f4:	2108      	movs	r1, #8
 80060f6:	1879      	adds	r1, r7, r1
 80060f8:	1889      	adds	r1, r1, r2
 80060fa:	881a      	ldrh	r2, [r3, #0]
 80060fc:	880b      	ldrh	r3, [r1, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d056      	beq.n	80061b0 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 8006102:	2330      	movs	r3, #48	; 0x30
 8006104:	2208      	movs	r2, #8
 8006106:	4694      	mov	ip, r2
 8006108:	44bc      	add	ip, r7
 800610a:	4463      	add	r3, ip
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d11d      	bne.n	800614e <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 8006112:	2334      	movs	r3, #52	; 0x34
 8006114:	2208      	movs	r2, #8
 8006116:	4694      	mov	ip, r2
 8006118:	44bc      	add	ip, r7
 800611a:	4463      	add	r3, ip
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d115      	bne.n	800614e <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 8006122:	230a      	movs	r3, #10
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	3305      	adds	r3, #5
 800612a:	b29b      	uxth	r3, r3
 800612c:	b219      	sxth	r1, r3
 800612e:	2308      	movs	r3, #8
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	2200      	movs	r2, #0
 8006134:	5e9a      	ldrsh	r2, [r3, r2]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	232c      	movs	r3, #44	; 0x2c
 800613a:	2408      	movs	r4, #8
 800613c:	46a4      	mov	ip, r4
 800613e:	44bc      	add	ip, r7
 8006140:	4463      	add	r3, ip
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	2308      	movs	r3, #8
 8006148:	f7ff fdc4 	bl	8005cd4 <_ZN7TFT_GFX14writeFastVLineEssst>
 800614c:	e030      	b.n	80061b0 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 800614e:	2030      	movs	r0, #48	; 0x30
 8006150:	2408      	movs	r4, #8
 8006152:	193b      	adds	r3, r7, r4
 8006154:	181b      	adds	r3, r3, r0
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	1c1a      	adds	r2, r3, #0
 800615c:	0092      	lsls	r2, r2, #2
 800615e:	18d3      	adds	r3, r2, r3
 8006160:	b29a      	uxth	r2, r3
 8006162:	230a      	movs	r3, #10
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	18d3      	adds	r3, r2, r3
 800616a:	b29b      	uxth	r3, r3
 800616c:	b219      	sxth	r1, r3
 800616e:	193b      	adds	r3, r7, r4
 8006170:	181b      	adds	r3, r3, r0
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b21d      	sxth	r5, r3
 8006176:	2334      	movs	r3, #52	; 0x34
 8006178:	2208      	movs	r2, #8
 800617a:	4694      	mov	ip, r2
 800617c:	44bc      	add	ip, r7
 800617e:	4463      	add	r3, ip
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	b29b      	uxth	r3, r3
 8006188:	b21b      	sxth	r3, r3
 800618a:	0022      	movs	r2, r4
 800618c:	18ba      	adds	r2, r7, r2
 800618e:	2400      	movs	r4, #0
 8006190:	5f14      	ldrsh	r4, [r2, r4]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	222c      	movs	r2, #44	; 0x2c
 8006196:	2608      	movs	r6, #8
 8006198:	46b4      	mov	ip, r6
 800619a:	44bc      	add	ip, r7
 800619c:	4462      	add	r2, ip
 800619e:	8812      	ldrh	r2, [r2, #0]
 80061a0:	9201      	str	r2, [sp, #4]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	002b      	movs	r3, r5
 80061a6:	0022      	movs	r2, r4
 80061a8:	f7ff fc5d 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>
 80061ac:	e000      	b.n	80061b0 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        return;
 80061ae:	46c0      	nop			; (mov r8, r8)
    }
    //endWrite();
}
 80061b0:	46bd      	mov	sp, r7
 80061b2:	b007      	add	sp, #28
 80061b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	08008bc8 	.word	0x08008bc8

080061bc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	0018      	movs	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b002      	add	sp, #8
 80061cc:	bd80      	pop	{r7, pc}

080061ce <_ZNSt4pairIttEC1IRtS2_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	0018      	movs	r0, r3
 80061de:	f7ff ffed 	bl	80061bc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80061e2:	0003      	movs	r3, r0
 80061e4:	881a      	ldrh	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7ff ffe5 	bl	80061bc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80061f2:	0003      	movs	r3, r0
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	805a      	strh	r2, [r3, #2]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b004      	add	sp, #16
 8006202:	bd80      	pop	{r7, pc}

08006204 <_ZSt9make_pairIRtS0_ESt4pairINSt17__decay_and_stripIT_E6__typeENS2_IT0_E6__typeEEOS3_OS6_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 8006204:	b5b0      	push	{r4, r5, r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0018      	movs	r0, r3
 8006212:	f7ff ffd3 	bl	80061bc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8006216:	0004      	movs	r4, r0
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	0018      	movs	r0, r3
 800621c:	f7ff ffce 	bl	80061bc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8006220:	0002      	movs	r2, r0
 8006222:	250c      	movs	r5, #12
 8006224:	197b      	adds	r3, r7, r5
 8006226:	0021      	movs	r1, r4
 8006228:	0018      	movs	r0, r3
 800622a:	f7ff ffd0 	bl	80061ce <_ZNSt4pairIttEC1IRtS2_Lb1EEEOT_OT0_>
 800622e:	2108      	movs	r1, #8
 8006230:	187b      	adds	r3, r7, r1
 8006232:	197a      	adds	r2, r7, r5
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	187a      	adds	r2, r7, r1
 800623a:	2300      	movs	r3, #0
 800623c:	8811      	ldrh	r1, [r2, #0]
 800623e:	0409      	lsls	r1, r1, #16
 8006240:	0c09      	lsrs	r1, r1, #16
 8006242:	0c1b      	lsrs	r3, r3, #16
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	430b      	orrs	r3, r1
 8006248:	8852      	ldrh	r2, [r2, #2]
 800624a:	0412      	lsls	r2, r2, #16
 800624c:	041b      	lsls	r3, r3, #16
 800624e:	0c1b      	lsrs	r3, r3, #16
 8006250:	4313      	orrs	r3, r2
    }
 8006252:	0018      	movs	r0, r3
 8006254:	46bd      	mov	sp, r7
 8006256:	b004      	add	sp, #16
 8006258:	bdb0      	pop	{r4, r5, r7, pc}

0800625a <_ZN7TFT_GFX10drawStringEssPKctthhtb>:

std::pair<uint16_t, uint16_t> TFT_GFX::drawString(int16_t init_x, int16_t init_y, const char* s, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y, uint16_t x_edge, bool do_center)
{
 800625a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625c:	46c6      	mov	lr, r8
 800625e:	b500      	push	{lr}
 8006260:	b08e      	sub	sp, #56	; 0x38
 8006262:	af04      	add	r7, sp, #16
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	0008      	movs	r0, r1
 8006268:	0011      	movs	r1, r2
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	230a      	movs	r3, #10
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	1c02      	adds	r2, r0, #0
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	2308      	movs	r3, #8
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	1c0a      	adds	r2, r1, #0
 800627a:	801a      	strh	r2, [r3, #0]
	uint8_t totalChars = this->getStringSize(s);
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	0011      	movs	r1, r2
 8006282:	0018      	movs	r0, r3
 8006284:	f7ff fb14 	bl	80058b0 <_ZN7TFT_GFX13getStringSizeEPKc>
 8006288:	0003      	movs	r3, r0
 800628a:	001a      	movs	r2, r3
 800628c:	211b      	movs	r1, #27
 800628e:	187b      	adds	r3, r7, r1
 8006290:	701a      	strb	r2, [r3, #0]
	totalChars = (totalChars > TFT_GFX::MAX_STRING_LENGTH ? TFT_GFX::MAX_STRING_LENGTH : totalChars);
 8006292:	187b      	adds	r3, r7, r1
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b64      	cmp	r3, #100	; 0x64
 8006298:	d803      	bhi.n	80062a2 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x48>
 800629a:	231b      	movs	r3, #27
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	781a      	ldrb	r2, [r3, #0]
 80062a0:	e000      	b.n	80062a4 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x4a>
 80062a2:	2264      	movs	r2, #100	; 0x64
 80062a4:	231b      	movs	r3, #27
 80062a6:	18fb      	adds	r3, r7, r3
 80062a8:	701a      	strb	r2, [r3, #0]

	uint16_t currX = init_x;
 80062aa:	2326      	movs	r3, #38	; 0x26
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	210a      	movs	r1, #10
 80062b0:	187a      	adds	r2, r7, r1
 80062b2:	8812      	ldrh	r2, [r2, #0]
 80062b4:	801a      	strh	r2, [r3, #0]
	uint16_t currY = init_y;
 80062b6:	2324      	movs	r3, #36	; 0x24
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	2008      	movs	r0, #8
 80062bc:	183a      	adds	r2, r7, r0
 80062be:	8812      	ldrh	r2, [r2, #0]
 80062c0:	801a      	strh	r2, [r3, #0]

	uint16_t maxX = init_x;
 80062c2:	187b      	adds	r3, r7, r1
 80062c4:	881a      	ldrh	r2, [r3, #0]
 80062c6:	2318      	movs	r3, #24
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	801a      	strh	r2, [r3, #0]
	uint16_t maxY = init_y + (size_y * 8);
 80062cc:	2344      	movs	r3, #68	; 0x44
 80062ce:	2208      	movs	r2, #8
 80062d0:	4694      	mov	ip, r2
 80062d2:	44bc      	add	ip, r7
 80062d4:	4463      	add	r3, ip
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	b29a      	uxth	r2, r3
 80062de:	183b      	adds	r3, r7, r0
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	18d3      	adds	r3, r2, r3
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	2316      	movs	r3, #22
 80062e8:	18fb      	adds	r3, r7, r3
 80062ea:	801a      	strh	r2, [r3, #0]

	const uint8_t maxCharsInLine = (x_edge - init_x)/(size_x * 6);
 80062ec:	2348      	movs	r3, #72	; 0x48
 80062ee:	2208      	movs	r2, #8
 80062f0:	4694      	mov	ip, r2
 80062f2:	44bc      	add	ip, r7
 80062f4:	4463      	add	r3, ip
 80062f6:	881a      	ldrh	r2, [r3, #0]
 80062f8:	187b      	adds	r3, r7, r1
 80062fa:	2100      	movs	r1, #0
 80062fc:	5e5b      	ldrsh	r3, [r3, r1]
 80062fe:	1ad0      	subs	r0, r2, r3
 8006300:	2340      	movs	r3, #64	; 0x40
 8006302:	2208      	movs	r2, #8
 8006304:	4694      	mov	ip, r2
 8006306:	44bc      	add	ip, r7
 8006308:	4463      	add	r3, ip
 800630a:	781a      	ldrb	r2, [r3, #0]
 800630c:	0013      	movs	r3, r2
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	189b      	adds	r3, r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	0019      	movs	r1, r3
 8006316:	f7f9 ff81 	bl	800021c <__divsi3>
 800631a:	0003      	movs	r3, r0
 800631c:	001a      	movs	r2, r3
 800631e:	2321      	movs	r3, #33	; 0x21
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	701a      	strb	r2, [r3, #0]
	while(*s)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d100      	bne.n	800632e <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xd4>
 800632c:	e0d9      	b.n	80064e2 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x288>
	{
		uint8_t currLineSize = this->getLineSize(s, maxCharsInLine);
 800632e:	2520      	movs	r5, #32
 8006330:	197c      	adds	r4, r7, r5
 8006332:	2321      	movs	r3, #33	; 0x21
 8006334:	18fb      	adds	r3, r7, r3
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	0018      	movs	r0, r3
 800633e:	f7ff fa5d 	bl	80057fc <_ZN7TFT_GFX11getLineSizeEPKch>
 8006342:	0003      	movs	r3, r0
 8006344:	7023      	strb	r3, [r4, #0]
		uint8_t functionalLineSize;
		if(s[currLineSize - 1] == ' ')
 8006346:	197b      	adds	r3, r7, r5
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	3b01      	subs	r3, #1
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	18d3      	adds	r3, r2, r3
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b20      	cmp	r3, #32
 8006354:	d107      	bne.n	8006366 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x10c>
		{
			functionalLineSize = currLineSize - 1;
 8006356:	2323      	movs	r3, #35	; 0x23
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	2220      	movs	r2, #32
 800635c:	18ba      	adds	r2, r7, r2
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	3a01      	subs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e005      	b.n	8006372 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x118>
		}else{
			functionalLineSize = currLineSize;
 8006366:	2323      	movs	r3, #35	; 0x23
 8006368:	18fb      	adds	r3, r7, r3
 800636a:	2220      	movs	r2, #32
 800636c:	18ba      	adds	r2, r7, r2
 800636e:	7812      	ldrb	r2, [r2, #0]
 8006370:	701a      	strb	r2, [r3, #0]
		}

		if(do_center)
 8006372:	234c      	movs	r3, #76	; 0x4c
 8006374:	2208      	movs	r2, #8
 8006376:	4694      	mov	ip, r2
 8006378:	44bc      	add	ip, r7
 800637a:	4463      	add	r3, ip
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d026      	beq.n	80063d0 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x176>
		{
			currX = ((x_edge - init_x) - (functionalLineSize * size_x * 6))/2 + init_x;
 8006382:	2348      	movs	r3, #72	; 0x48
 8006384:	2208      	movs	r2, #8
 8006386:	4694      	mov	ip, r2
 8006388:	44bc      	add	ip, r7
 800638a:	4463      	add	r3, ip
 800638c:	881a      	ldrh	r2, [r3, #0]
 800638e:	230a      	movs	r3, #10
 8006390:	18fb      	adds	r3, r7, r3
 8006392:	2100      	movs	r1, #0
 8006394:	5e5b      	ldrsh	r3, [r3, r1]
 8006396:	1ad1      	subs	r1, r2, r3
 8006398:	2323      	movs	r3, #35	; 0x23
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2240      	movs	r2, #64	; 0x40
 80063a0:	2008      	movs	r0, #8
 80063a2:	4684      	mov	ip, r0
 80063a4:	44bc      	add	ip, r7
 80063a6:	4462      	add	r2, ip
 80063a8:	7812      	ldrb	r2, [r2, #0]
 80063aa:	435a      	muls	r2, r3
 80063ac:	0013      	movs	r3, r2
 80063ae:	0092      	lsls	r2, r2, #2
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	18cb      	adds	r3, r1, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da00      	bge.n	80063bc <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x162>
 80063ba:	3301      	adds	r3, #1
 80063bc:	105b      	asrs	r3, r3, #1
 80063be:	b299      	uxth	r1, r3
 80063c0:	230a      	movs	r3, #10
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	881a      	ldrh	r2, [r3, #0]
 80063c6:	2326      	movs	r3, #38	; 0x26
 80063c8:	18fb      	adds	r3, r7, r3
 80063ca:	188a      	adds	r2, r1, r2
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	e005      	b.n	80063dc <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x182>
		}else{
			currX = init_x;
 80063d0:	2326      	movs	r3, #38	; 0x26
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	220a      	movs	r2, #10
 80063d6:	18ba      	adds	r2, r7, r2
 80063d8:	8812      	ldrh	r2, [r2, #0]
 80063da:	801a      	strh	r2, [r3, #0]
		}

		for(uint8_t i = 0; i < functionalLineSize; i++)
 80063dc:	2322      	movs	r3, #34	; 0x22
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	2322      	movs	r3, #34	; 0x22
 80063e6:	18fa      	adds	r2, r7, r3
 80063e8:	2323      	movs	r3, #35	; 0x23
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	7812      	ldrb	r2, [r2, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d250      	bcs.n	8006496 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x23c>
		{
			drawChar(currX,currY,*(s++),color,bg,size_x,size_y);
 80063f4:	2526      	movs	r5, #38	; 0x26
 80063f6:	197b      	adds	r3, r7, r5
 80063f8:	2100      	movs	r1, #0
 80063fa:	5e59      	ldrsh	r1, [r3, r1]
 80063fc:	2324      	movs	r3, #36	; 0x24
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	2400      	movs	r4, #0
 8006402:	5f1c      	ldrsh	r4, [r3, r4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	607a      	str	r2, [r7, #4]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	4698      	mov	r8, r3
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	2344      	movs	r3, #68	; 0x44
 8006412:	2208      	movs	r2, #8
 8006414:	4694      	mov	ip, r2
 8006416:	44bc      	add	ip, r7
 8006418:	4463      	add	r3, ip
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	9303      	str	r3, [sp, #12]
 800641e:	2640      	movs	r6, #64	; 0x40
 8006420:	2308      	movs	r3, #8
 8006422:	18fa      	adds	r2, r7, r3
 8006424:	1993      	adds	r3, r2, r6
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	9302      	str	r3, [sp, #8]
 800642a:	233c      	movs	r3, #60	; 0x3c
 800642c:	2208      	movs	r2, #8
 800642e:	4694      	mov	ip, r2
 8006430:	44bc      	add	ip, r7
 8006432:	4463      	add	r3, ip
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	2338      	movs	r3, #56	; 0x38
 800643a:	2208      	movs	r2, #8
 800643c:	4694      	mov	ip, r2
 800643e:	44bc      	add	ip, r7
 8006440:	4463      	add	r3, ip
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	4643      	mov	r3, r8
 8006448:	0022      	movs	r2, r4
 800644a:	f7ff fcd3 	bl	8005df4 <_ZN7TFT_GFX8drawCharEsshtthh>
			currX += size_x * 6;
 800644e:	2308      	movs	r3, #8
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	199b      	adds	r3, r3, r6
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	1c1a      	adds	r2, r3, #0
 800645a:	1c13      	adds	r3, r2, #0
 800645c:	18db      	adds	r3, r3, r3
 800645e:	189b      	adds	r3, r3, r2
 8006460:	18db      	adds	r3, r3, r3
 8006462:	b299      	uxth	r1, r3
 8006464:	197b      	adds	r3, r7, r5
 8006466:	197a      	adds	r2, r7, r5
 8006468:	8812      	ldrh	r2, [r2, #0]
 800646a:	188a      	adds	r2, r1, r2
 800646c:	801a      	strh	r2, [r3, #0]
			if(currX > maxX)
 800646e:	2318      	movs	r3, #24
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	197a      	adds	r2, r7, r5
 8006476:	8812      	ldrh	r2, [r2, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d905      	bls.n	8006488 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x22e>
			{
				maxX = currX;
 800647c:	2318      	movs	r3, #24
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	2226      	movs	r2, #38	; 0x26
 8006482:	18ba      	adds	r2, r7, r2
 8006484:	8812      	ldrh	r2, [r2, #0]
 8006486:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < functionalLineSize; i++)
 8006488:	2122      	movs	r1, #34	; 0x22
 800648a:	187b      	adds	r3, r7, r1
 800648c:	781a      	ldrb	r2, [r3, #0]
 800648e:	187b      	adds	r3, r7, r1
 8006490:	3201      	adds	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e7a6      	b.n	80063e4 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x18a>
			}
		}
		//Skip the space
		s += (functionalLineSize == currLineSize ? 0 : 1);
 8006496:	2323      	movs	r3, #35	; 0x23
 8006498:	18fa      	adds	r2, r7, r3
 800649a:	2320      	movs	r3, #32
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	7812      	ldrb	r2, [r2, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	1e5a      	subs	r2, r3, #1
 80064a6:	4193      	sbcs	r3, r2
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	001a      	movs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	189b      	adds	r3, r3, r2
 80064b0:	607b      	str	r3, [r7, #4]
		//Go to next row
		currY += size_y * 8;
 80064b2:	2344      	movs	r3, #68	; 0x44
 80064b4:	2208      	movs	r2, #8
 80064b6:	4694      	mov	ip, r2
 80064b8:	44bc      	add	ip, r7
 80064ba:	4463      	add	r3, ip
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	b299      	uxth	r1, r3
 80064c4:	2224      	movs	r2, #36	; 0x24
 80064c6:	18bb      	adds	r3, r7, r2
 80064c8:	18ba      	adds	r2, r7, r2
 80064ca:	8812      	ldrh	r2, [r2, #0]
 80064cc:	188a      	adds	r2, r1, r2
 80064ce:	801a      	strh	r2, [r3, #0]
		//If the next line starts with a space lets just skip it
		if(*s == ' ')
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d000      	beq.n	80064da <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x280>
 80064d8:	e724      	b.n	8006324 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xca>
		{
			s++;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3301      	adds	r3, #1
 80064de:	607b      	str	r3, [r7, #4]
	while(*s)
 80064e0:	e720      	b.n	8006324 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xca>
		}
	}
	maxY = currY;
 80064e2:	2316      	movs	r3, #22
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	2224      	movs	r2, #36	; 0x24
 80064e8:	18ba      	adds	r2, r7, r2
 80064ea:	8812      	ldrh	r2, [r2, #0]
 80064ec:	801a      	strh	r2, [r3, #0]
	if(maxX > this->_width)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	889a      	ldrh	r2, [r3, #4]
 80064f2:	2318      	movs	r3, #24
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d204      	bcs.n	8006506 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x2ac>
	{
		maxX = this->_width;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	889a      	ldrh	r2, [r3, #4]
 8006500:	2318      	movs	r3, #24
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	801a      	strh	r2, [r3, #0]
	}
	if(maxY > this->_height)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	88da      	ldrh	r2, [r3, #6]
 800650a:	2316      	movs	r3, #22
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d204      	bcs.n	800651e <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x2c4>
	{
		maxY = this->_height;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	88da      	ldrh	r2, [r3, #6]
 8006518:	2316      	movs	r3, #22
 800651a:	18fb      	adds	r3, r7, r3
 800651c:	801a      	strh	r2, [r3, #0]
	}
	return std::make_pair(maxX, maxY);
 800651e:	2316      	movs	r3, #22
 8006520:	18fa      	adds	r2, r7, r3
 8006522:	2318      	movs	r3, #24
 8006524:	18fb      	adds	r3, r7, r3
 8006526:	0011      	movs	r1, r2
 8006528:	0018      	movs	r0, r3
 800652a:	f7ff fe6b 	bl	8006204 <_ZSt9make_pairIRtS0_ESt4pairINSt17__decay_and_stripIT_E6__typeENS2_IT0_E6__typeEEOS3_OS6_>
 800652e:	0003      	movs	r3, r0
 8006530:	001a      	movs	r2, r3
 8006532:	211c      	movs	r1, #28
 8006534:	187b      	adds	r3, r7, r1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	187a      	adds	r2, r7, r1
 800653a:	2300      	movs	r3, #0
 800653c:	8811      	ldrh	r1, [r2, #0]
 800653e:	0409      	lsls	r1, r1, #16
 8006540:	0c09      	lsrs	r1, r1, #16
 8006542:	0c1b      	lsrs	r3, r3, #16
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	430b      	orrs	r3, r1
 8006548:	8852      	ldrh	r2, [r2, #2]
 800654a:	0412      	lsls	r2, r2, #16
 800654c:	041b      	lsls	r3, r3, #16
 800654e:	0c1b      	lsrs	r3, r3, #16
 8006550:	4313      	orrs	r3, r2
}
 8006552:	0018      	movs	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	b00a      	add	sp, #40	; 0x28
 8006558:	bc04      	pop	{r2}
 800655a:	4690      	mov	r8, r2
 800655c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800655e <_ZN7TFT_GFX11setRotationEh>:

void TFT_GFX::setRotation(uint8_t m)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	000a      	movs	r2, r1
 8006568:	1cfb      	adds	r3, r7, #3
 800656a:	701a      	strb	r2, [r3, #0]
	uint8_t rotation = m % 4; // can't be higher than 3
 800656c:	1cfb      	adds	r3, r7, #3
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	200f      	movs	r0, #15
 8006572:	183b      	adds	r3, r7, r0
 8006574:	2103      	movs	r1, #3
 8006576:	400a      	ands	r2, r1
 8006578:	701a      	strb	r2, [r3, #0]
	    switch (rotation) {
 800657a:	183b      	adds	r3, r7, r0
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d013      	beq.n	80065aa <_ZN7TFT_GFX11setRotationEh+0x4c>
 8006582:	dc02      	bgt.n	800658a <_ZN7TFT_GFX11setRotationEh+0x2c>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <_ZN7TFT_GFX11setRotationEh+0x36>
 8006588:	e030      	b.n	80065ec <_ZN7TFT_GFX11setRotationEh+0x8e>
 800658a:	2b02      	cmp	r3, #2
 800658c:	d018      	beq.n	80065c0 <_ZN7TFT_GFX11setRotationEh+0x62>
 800658e:	2b03      	cmp	r3, #3
 8006590:	d021      	beq.n	80065d6 <_ZN7TFT_GFX11setRotationEh+0x78>
 8006592:	e02b      	b.n	80065ec <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 0:
	            m = (MADCTL_MX | MADCTL_BGR);
 8006594:	1cfb      	adds	r3, r7, #3
 8006596:	2248      	movs	r2, #72	; 0x48
 8006598:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	22f0      	movs	r2, #240	; 0xf0
 800659e:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	22a0      	movs	r2, #160	; 0xa0
 80065a4:	0052      	lsls	r2, r2, #1
 80065a6:	80da      	strh	r2, [r3, #6]
	            break;
 80065a8:	e020      	b.n	80065ec <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 1:
	            m = (MADCTL_MV | MADCTL_BGR);
 80065aa:	1cfb      	adds	r3, r7, #3
 80065ac:	2228      	movs	r2, #40	; 0x28
 80065ae:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	22a0      	movs	r2, #160	; 0xa0
 80065b4:	0052      	lsls	r2, r2, #1
 80065b6:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	22f0      	movs	r2, #240	; 0xf0
 80065bc:	80da      	strh	r2, [r3, #6]
	            break;
 80065be:	e015      	b.n	80065ec <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 2:
	            m = (MADCTL_MY | MADCTL_BGR);
 80065c0:	1cfb      	adds	r3, r7, #3
 80065c2:	2288      	movs	r2, #136	; 0x88
 80065c4:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	22f0      	movs	r2, #240	; 0xf0
 80065ca:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	22a0      	movs	r2, #160	; 0xa0
 80065d0:	0052      	lsls	r2, r2, #1
 80065d2:	80da      	strh	r2, [r3, #6]
	            break;
 80065d4:	e00a      	b.n	80065ec <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 3:
	            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80065d6:	1cfb      	adds	r3, r7, #3
 80065d8:	22e8      	movs	r2, #232	; 0xe8
 80065da:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	22a0      	movs	r2, #160	; 0xa0
 80065e0:	0052      	lsls	r2, r2, #1
 80065e2:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	22f0      	movs	r2, #240	; 0xf0
 80065e8:	80da      	strh	r2, [r3, #6]
	            break;
 80065ea:	46c0      	nop			; (mov r8, r8)
	    }
	    sendCommand(this->spiInstance, ILI9341_MADCTL, &m, 1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	1cfa      	adds	r2, r7, #3
 80065f2:	2301      	movs	r3, #1
 80065f4:	2136      	movs	r1, #54	; 0x36
 80065f6:	f000 f8a8 	bl	800674a <sendCommand>
}
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	46bd      	mov	sp, r7
 80065fe:	b004      	add	sp, #16
 8006600:	bd80      	pop	{r7, pc}

08006602 <_ZN7TFT_GFX5widthEv>:

uint16_t TFT_GFX::width(void)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
	return this->_width;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	889b      	ldrh	r3, [r3, #4]
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}

08006616 <_ZN7TFT_GFX6heightEv>:

uint16_t TFT_GFX::height(void)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
	return this->_height;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	88db      	ldrh	r3, [r3, #6]
}
 8006622:	0018      	movs	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	b002      	add	sp, #8
 8006628:	bd80      	pop	{r7, pc}

0800662a <resetTftBoard>:
#include "hspi.h"
#include "pin-definitions.h"

void resetTftBoard(void)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	af00      	add	r7, sp, #0
	TFT_RST_PORT->ODR &= ~(1 << TFT_RST_PIN);
 800662e:	2390      	movs	r3, #144	; 0x90
 8006630:	05db      	lsls	r3, r3, #23
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	2390      	movs	r3, #144	; 0x90
 8006636:	05db      	lsls	r3, r3, #23
 8006638:	2110      	movs	r1, #16
 800663a:	438a      	bics	r2, r1
 800663c:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 800663e:	2096      	movs	r0, #150	; 0x96
 8006640:	f7fc f976 	bl	8002930 <HAL_Delay>
	TFT_RST_PORT->ODR |=  (1 << TFT_RST_PIN);
 8006644:	2390      	movs	r3, #144	; 0x90
 8006646:	05db      	lsls	r3, r3, #23
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	2390      	movs	r3, #144	; 0x90
 800664c:	05db      	lsls	r3, r3, #23
 800664e:	2110      	movs	r1, #16
 8006650:	430a      	orrs	r2, r1
 8006652:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8006654:	2096      	movs	r0, #150	; 0x96
 8006656:	f7fc f96b 	bl	8002930 <HAL_Delay>
}
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <pullCSLow>:

void pullCSLow(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
	SPI2_CS_PORT->ODR &= ~(1 << SPI2_CS_PIN);
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <pullCSLow+0x18>)
 8006666:	695a      	ldr	r2, [r3, #20]
 8006668:	4b03      	ldr	r3, [pc, #12]	; (8006678 <pullCSLow+0x18>)
 800666a:	2102      	movs	r1, #2
 800666c:	438a      	bics	r2, r1
 800666e:	615a      	str	r2, [r3, #20]
}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	48000400 	.word	0x48000400

0800667c <hspi_w8>:
void pullCSHigh(void)
{
	SPI2_CS_PORT->ODR |= (1 << SPI2_CS_PIN);
}

void hspi_w8(SPI_TypeDef *SPIx, uint8_t dat) {
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	000a      	movs	r2, r1
 8006686:	1cfb      	adds	r3, r7, #3
 8006688:	701a      	strb	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2202      	movs	r2, #2
 8006692:	4013      	ands	r3, r2
 8006694:	d0fa      	beq.n	800668c <hspi_w8+0x10>
  // Send the byte.
  *(uint8_t*)&(SPIx->DR) = dat;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	330c      	adds	r3, #12
 800669a:	1cfa      	adds	r2, r7, #3
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	701a      	strb	r2, [r3, #0]
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b002      	add	sp, #8
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <hspi_w16>:

void hspi_w16(SPI_TypeDef *SPIx, uint16_t dat) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	000a      	movs	r2, r1
 80066b2:	1cbb      	adds	r3, r7, #2
 80066b4:	801a      	strh	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2202      	movs	r2, #2
 80066be:	4013      	ands	r3, r2
 80066c0:	d0fa      	beq.n	80066b8 <hspi_w16+0x10>
  // Send the data.
  // (Flip the bytes for the little-endian ARM core.)
  dat = (((dat & 0x00FF) << 8) | ((dat & 0xFF00) >> 8));
 80066c2:	1cbb      	adds	r3, r7, #2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	021b      	lsls	r3, r3, #8
 80066c8:	b21a      	sxth	r2, r3
 80066ca:	1cbb      	adds	r3, r7, #2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	b21b      	sxth	r3, r3
 80066d4:	4313      	orrs	r3, r2
 80066d6:	b21a      	sxth	r2, r3
 80066d8:	1cbb      	adds	r3, r7, #2
 80066da:	801a      	strh	r2, [r3, #0]
  *(uint16_t*)&(SPIx->DR) = dat;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	330c      	adds	r3, #12
 80066e0:	1cba      	adds	r2, r7, #2
 80066e2:	8812      	ldrh	r2, [r2, #0]
 80066e4:	801a      	strh	r2, [r3, #0]
}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b002      	add	sp, #8
 80066ec:	bd80      	pop	{r7, pc}

080066ee <hspi_cmd>:

void hspi_cmd(SPI_TypeDef *SPIx, uint8_t cmd) {
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	000a      	movs	r2, r1
 80066f8:	1cfb      	adds	r3, r7, #3
 80066fa:	701a      	strb	r2, [r3, #0]
  while ((SPIx->SR & SPI_SR_BSY)) {};
 80066fc:	46c0      	nop			; (mov r8, r8)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	4013      	ands	r3, r2
 8006706:	d1fa      	bne.n	80066fe <hspi_cmd+0x10>
  TFT_DC_PORT->ODR &= ~(1 << TFT_DC_PIN);
 8006708:	2390      	movs	r3, #144	; 0x90
 800670a:	05db      	lsls	r3, r3, #23
 800670c:	695a      	ldr	r2, [r3, #20]
 800670e:	2390      	movs	r3, #144	; 0x90
 8006710:	05db      	lsls	r3, r3, #23
 8006712:	2120      	movs	r1, #32
 8006714:	438a      	bics	r2, r1
 8006716:	615a      	str	r2, [r3, #20]
  hspi_w8(SPIx, cmd);
 8006718:	1cfb      	adds	r3, r7, #3
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	0011      	movs	r1, r2
 8006720:	0018      	movs	r0, r3
 8006722:	f7ff ffab 	bl	800667c <hspi_w8>
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2280      	movs	r2, #128	; 0x80
 800672e:	4013      	ands	r3, r2
 8006730:	d1fa      	bne.n	8006728 <hspi_cmd+0x3a>
  TFT_DC_PORT->ODR |=  (1 << TFT_DC_PIN);
 8006732:	2390      	movs	r3, #144	; 0x90
 8006734:	05db      	lsls	r3, r3, #23
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	2390      	movs	r3, #144	; 0x90
 800673a:	05db      	lsls	r3, r3, #23
 800673c:	2120      	movs	r1, #32
 800673e:	430a      	orrs	r2, r1
 8006740:	615a      	str	r2, [r3, #20]
}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	46bd      	mov	sp, r7
 8006746:	b002      	add	sp, #8
 8006748:	bd80      	pop	{r7, pc}

0800674a <sendCommand>:

void sendCommand(SPI_TypeDef *SPIx, uint8_t cmd, uint8_t* data, uint8_t length)
{
 800674a:	b590      	push	{r4, r7, lr}
 800674c:	b087      	sub	sp, #28
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	0008      	movs	r0, r1
 8006754:	607a      	str	r2, [r7, #4]
 8006756:	0019      	movs	r1, r3
 8006758:	240b      	movs	r4, #11
 800675a:	193b      	adds	r3, r7, r4
 800675c:	1c02      	adds	r2, r0, #0
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	230a      	movs	r3, #10
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	1c0a      	adds	r2, r1, #0
 8006766:	701a      	strb	r2, [r3, #0]
	hspi_cmd(SPIx,cmd);
 8006768:	193b      	adds	r3, r7, r4
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	0011      	movs	r1, r2
 8006770:	0018      	movs	r0, r3
 8006772:	f7ff ffbc 	bl	80066ee <hspi_cmd>
	for(int i = 0; i < length; i++)
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	e00b      	b.n	8006794 <sendCommand+0x4a>
	{
		hspi_w8(SPIx, *(data++));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	781a      	ldrb	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	0011      	movs	r1, r2
 8006788:	0018      	movs	r0, r3
 800678a:	f7ff ff77 	bl	800667c <hspi_w8>
	for(int i = 0; i < length; i++)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	3301      	adds	r3, #1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	230a      	movs	r3, #10
 8006796:	18fb      	adds	r3, r7, r3
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	429a      	cmp	r2, r3
 800679e:	dbed      	blt.n	800677c <sendCommand+0x32>
	}
}
 80067a0:	46c0      	nop			; (mov r8, r8)
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b007      	add	sp, #28
 80067a6:	bd90      	pop	{r4, r7, pc}

080067a8 <ili9341_hspi_init>:

void ili9341_hspi_init(SPI_TypeDef *SPIx) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  // (Display off)
  //hspi_cmd(SPIx, 0x28);
  // Issue a series of initialization commands from the
  // Adafruit library for a simple 'known good' test.
  // (TODO: Add named macro definitions for these hex values.)
  hspi_cmd(SPIx, 0xEF);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	21ef      	movs	r1, #239	; 0xef
 80067b4:	0018      	movs	r0, r3
 80067b6:	f7ff ff9a 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x03);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2103      	movs	r1, #3
 80067be:	0018      	movs	r0, r3
 80067c0:	f7ff ff5c 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x80);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2180      	movs	r1, #128	; 0x80
 80067c8:	0018      	movs	r0, r3
 80067ca:	f7ff ff57 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x02);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2102      	movs	r1, #2
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7ff ff52 	bl	800667c <hspi_w8>
  hspi_cmd(SPIx, 0xCF);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	21cf      	movs	r1, #207	; 0xcf
 80067dc:	0018      	movs	r0, r3
 80067de:	f7ff ff86 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2100      	movs	r1, #0
 80067e6:	0018      	movs	r0, r3
 80067e8:	f7ff ff48 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	21c1      	movs	r1, #193	; 0xc1
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7ff ff43 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x30);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2130      	movs	r1, #48	; 0x30
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7ff ff3e 	bl	800667c <hspi_w8>
  hspi_cmd(SPIx, 0xED);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	21ed      	movs	r1, #237	; 0xed
 8006804:	0018      	movs	r0, r3
 8006806:	f7ff ff72 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x64);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2164      	movs	r1, #100	; 0x64
 800680e:	0018      	movs	r0, r3
 8006810:	f7ff ff34 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2103      	movs	r1, #3
 8006818:	0018      	movs	r0, r3
 800681a:	f7ff ff2f 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x12);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2112      	movs	r1, #18
 8006822:	0018      	movs	r0, r3
 8006824:	f7ff ff2a 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x81);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2181      	movs	r1, #129	; 0x81
 800682c:	0018      	movs	r0, r3
 800682e:	f7ff ff25 	bl	800667c <hspi_w8>
  hspi_cmd(SPIx, 0xE8);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	21e8      	movs	r1, #232	; 0xe8
 8006836:	0018      	movs	r0, r3
 8006838:	f7ff ff59 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x85);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2185      	movs	r1, #133	; 0x85
 8006840:	0018      	movs	r0, r3
 8006842:	f7ff ff1b 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2100      	movs	r1, #0
 800684a:	0018      	movs	r0, r3
 800684c:	f7ff ff16 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x78);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2178      	movs	r1, #120	; 0x78
 8006854:	0018      	movs	r0, r3
 8006856:	f7ff ff11 	bl	800667c <hspi_w8>
  hspi_cmd(SPIx, 0xCB);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	21cb      	movs	r1, #203	; 0xcb
 800685e:	0018      	movs	r0, r3
 8006860:	f7ff ff45 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x39);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2139      	movs	r1, #57	; 0x39
 8006868:	0018      	movs	r0, r3
 800686a:	f7ff ff07 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x2C);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	212c      	movs	r1, #44	; 0x2c
 8006872:	0018      	movs	r0, r3
 8006874:	f7ff ff02 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2100      	movs	r1, #0
 800687c:	0018      	movs	r0, r3
 800687e:	f7ff fefd 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x34);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2134      	movs	r1, #52	; 0x34
 8006886:	0018      	movs	r0, r3
 8006888:	f7ff fef8 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x02);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2102      	movs	r1, #2
 8006890:	0018      	movs	r0, r3
 8006892:	f7ff fef3 	bl	800667c <hspi_w8>
  hspi_cmd(SPIx, 0xF7);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	21f7      	movs	r1, #247	; 0xf7
 800689a:	0018      	movs	r0, r3
 800689c:	f7ff ff27 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x20);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2120      	movs	r1, #32
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7ff fee9 	bl	800667c <hspi_w8>
  hspi_cmd(SPIx, 0xEA);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	21ea      	movs	r1, #234	; 0xea
 80068ae:	0018      	movs	r0, r3
 80068b0:	f7ff ff1d 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2100      	movs	r1, #0
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7ff fedf 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2100      	movs	r1, #0
 80068c2:	0018      	movs	r0, r3
 80068c4:	f7ff feda 	bl	800667c <hspi_w8>
  // PWCTR1
  hspi_cmd(SPIx, 0xC0);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	21c0      	movs	r1, #192	; 0xc0
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7ff ff0e 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x23);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2123      	movs	r1, #35	; 0x23
 80068d6:	0018      	movs	r0, r3
 80068d8:	f7ff fed0 	bl	800667c <hspi_w8>
  // PWCTR2
  hspi_cmd(SPIx, 0xC1);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	21c1      	movs	r1, #193	; 0xc1
 80068e0:	0018      	movs	r0, r3
 80068e2:	f7ff ff04 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x10);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2110      	movs	r1, #16
 80068ea:	0018      	movs	r0, r3
 80068ec:	f7ff fec6 	bl	800667c <hspi_w8>
  // VMCTR1
  hspi_cmd(SPIx, 0xC5);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	21c5      	movs	r1, #197	; 0xc5
 80068f4:	0018      	movs	r0, r3
 80068f6:	f7ff fefa 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x3E);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	213e      	movs	r1, #62	; 0x3e
 80068fe:	0018      	movs	r0, r3
 8006900:	f7ff febc 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x28);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2128      	movs	r1, #40	; 0x28
 8006908:	0018      	movs	r0, r3
 800690a:	f7ff feb7 	bl	800667c <hspi_w8>
  // VMCTR2
  hspi_cmd(SPIx, 0xC7);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	21c7      	movs	r1, #199	; 0xc7
 8006912:	0018      	movs	r0, r3
 8006914:	f7ff feeb 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x86);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2186      	movs	r1, #134	; 0x86
 800691c:	0018      	movs	r0, r3
 800691e:	f7ff fead 	bl	800667c <hspi_w8>
  // MADCTL
  hspi_cmd(SPIx, 0x36);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2136      	movs	r1, #54	; 0x36
 8006926:	0018      	movs	r0, r3
 8006928:	f7ff fee1 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x48);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2148      	movs	r1, #72	; 0x48
 8006930:	0018      	movs	r0, r3
 8006932:	f7ff fea3 	bl	800667c <hspi_w8>
  // VSCRSADD
  hspi_cmd(SPIx, 0x37);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2137      	movs	r1, #55	; 0x37
 800693a:	0018      	movs	r0, r3
 800693c:	f7ff fed7 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2100      	movs	r1, #0
 8006944:	0018      	movs	r0, r3
 8006946:	f7ff fe99 	bl	800667c <hspi_w8>
  // PIXFMT
  hspi_cmd(SPIx, 0x3A);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	213a      	movs	r1, #58	; 0x3a
 800694e:	0018      	movs	r0, r3
 8006950:	f7ff fecd 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x55);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2155      	movs	r1, #85	; 0x55
 8006958:	0018      	movs	r0, r3
 800695a:	f7ff fe8f 	bl	800667c <hspi_w8>
  // FRMCTR1
  hspi_cmd(SPIx, 0xB1);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	21b1      	movs	r1, #177	; 0xb1
 8006962:	0018      	movs	r0, r3
 8006964:	f7ff fec3 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2100      	movs	r1, #0
 800696c:	0018      	movs	r0, r3
 800696e:	f7ff fe85 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x18);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2118      	movs	r1, #24
 8006976:	0018      	movs	r0, r3
 8006978:	f7ff fe80 	bl	800667c <hspi_w8>
  // DFUNCTR
  hspi_cmd(SPIx, 0xB6);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	21b6      	movs	r1, #182	; 0xb6
 8006980:	0018      	movs	r0, r3
 8006982:	f7ff feb4 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x08);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2108      	movs	r1, #8
 800698a:	0018      	movs	r0, r3
 800698c:	f7ff fe76 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x82);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2182      	movs	r1, #130	; 0x82
 8006994:	0018      	movs	r0, r3
 8006996:	f7ff fe71 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x27);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2127      	movs	r1, #39	; 0x27
 800699e:	0018      	movs	r0, r3
 80069a0:	f7ff fe6c 	bl	800667c <hspi_w8>
  hspi_cmd(SPIx, 0xF2);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	21f2      	movs	r1, #242	; 0xf2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f7ff fea0 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2100      	movs	r1, #0
 80069b2:	0018      	movs	r0, r3
 80069b4:	f7ff fe62 	bl	800667c <hspi_w8>
  // GAMMASET
  hspi_cmd(SPIx, 0x26);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2126      	movs	r1, #38	; 0x26
 80069bc:	0018      	movs	r0, r3
 80069be:	f7ff fe96 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x01);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2101      	movs	r1, #1
 80069c6:	0018      	movs	r0, r3
 80069c8:	f7ff fe58 	bl	800667c <hspi_w8>
  // (Actual gamma settings)
  hspi_cmd(SPIx, 0xE0);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	21e0      	movs	r1, #224	; 0xe0
 80069d0:	0018      	movs	r0, r3
 80069d2:	f7ff fe8c 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x0F);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	210f      	movs	r1, #15
 80069da:	0018      	movs	r0, r3
 80069dc:	f7ff fe4e 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x31);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2131      	movs	r1, #49	; 0x31
 80069e4:	0018      	movs	r0, r3
 80069e6:	f7ff fe49 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x2B);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	212b      	movs	r1, #43	; 0x2b
 80069ee:	0018      	movs	r0, r3
 80069f0:	f7ff fe44 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	210c      	movs	r1, #12
 80069f8:	0018      	movs	r0, r3
 80069fa:	f7ff fe3f 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	210e      	movs	r1, #14
 8006a02:	0018      	movs	r0, r3
 8006a04:	f7ff fe3a 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x08);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2108      	movs	r1, #8
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f7ff fe35 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x4E);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	214e      	movs	r1, #78	; 0x4e
 8006a16:	0018      	movs	r0, r3
 8006a18:	f7ff fe30 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0xF1);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	21f1      	movs	r1, #241	; 0xf1
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7ff fe2b 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x37);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2137      	movs	r1, #55	; 0x37
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f7ff fe26 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x07);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2107      	movs	r1, #7
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7ff fe21 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x10);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2110      	movs	r1, #16
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7ff fe1c 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2103      	movs	r1, #3
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f7ff fe17 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	210e      	movs	r1, #14
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7ff fe12 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x09);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2109      	movs	r1, #9
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f7ff fe0d 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2100      	movs	r1, #0
 8006a66:	0018      	movs	r0, r3
 8006a68:	f7ff fe08 	bl	800667c <hspi_w8>
  hspi_cmd(SPIx, 0xE1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	21e1      	movs	r1, #225	; 0xe1
 8006a70:	0018      	movs	r0, r3
 8006a72:	f7ff fe3c 	bl	80066ee <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f7ff fdfe 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	210e      	movs	r1, #14
 8006a84:	0018      	movs	r0, r3
 8006a86:	f7ff fdf9 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x14);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2114      	movs	r1, #20
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f7ff fdf4 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2103      	movs	r1, #3
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7ff fdef 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x11);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2111      	movs	r1, #17
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f7ff fdea 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x07);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2107      	movs	r1, #7
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7ff fde5 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2131      	movs	r1, #49	; 0x31
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f7ff fde0 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	21c1      	movs	r1, #193	; 0xc1
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7ff fddb 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x48);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2148      	movs	r1, #72	; 0x48
 8006aca:	0018      	movs	r0, r3
 8006acc:	f7ff fdd6 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x08);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2108      	movs	r1, #8
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f7ff fdd1 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	210f      	movs	r1, #15
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7ff fdcc 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	210c      	movs	r1, #12
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7ff fdc7 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2131      	movs	r1, #49	; 0x31
 8006af2:	0018      	movs	r0, r3
 8006af4:	f7ff fdc2 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x36);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2136      	movs	r1, #54	; 0x36
 8006afc:	0018      	movs	r0, r3
 8006afe:	f7ff fdbd 	bl	800667c <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	210f      	movs	r1, #15
 8006b06:	0018      	movs	r0, r3
 8006b08:	f7ff fdb8 	bl	800667c <hspi_w8>
  // Exit sleep mode.
  hspi_cmd(SPIx, 0x11);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2111      	movs	r1, #17
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7ff fdec 	bl	80066ee <hspi_cmd>
  HAL_Delay(150);
 8006b16:	2096      	movs	r0, #150	; 0x96
 8006b18:	f7fb ff0a 	bl	8002930 <HAL_Delay>
  // Display on.
  hspi_cmd(SPIx, 0x29);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2129      	movs	r1, #41	; 0x29
 8006b20:	0018      	movs	r0, r3
 8006b22:	f7ff fde4 	bl	80066ee <hspi_cmd>
	HAL_Delay(150);
 8006b26:	2096      	movs	r0, #150	; 0x96
 8006b28:	f7fb ff02 	bl	8002930 <HAL_Delay>
  // 'Normal' display mode.
  hspi_cmd(SPIx, 0x13);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2113      	movs	r1, #19
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7ff fddc 	bl	80066ee <hspi_cmd>
}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b002      	add	sp, #8
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>:
	drawSelectionLines(tftDisplay, backgroundColor, fontColor, lineColor, lineThickness);
	writeSelectionWords(instructionBox, mainTitle, stateSelector, fontColor, stateSelectorFontSize);
}

void drawSelectionLines(TFT_GFX& tftDisplay,const uint16_t backgroundColor,const uint16_t fontColor,const uint16_t lineColor,const uint16_t lineThickness)
{
 8006b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	000c      	movs	r4, r1
 8006b48:	0010      	movs	r0, r2
 8006b4a:	0019      	movs	r1, r3
 8006b4c:	230a      	movs	r3, #10
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	1c22      	adds	r2, r4, #0
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	2408      	movs	r4, #8
 8006b56:	193b      	adds	r3, r7, r4
 8006b58:	1c02      	adds	r2, r0, #0
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	1dbb      	adds	r3, r7, #6
 8006b5e:	1c0a      	adds	r2, r1, #0
 8006b60:	801a      	strh	r2, [r3, #0]

	//for the love of god don't touch these plz

	//Set background to correct color and add outline
	tftDisplay.writeFillRect(0, 0, tftDisplay.width(), tftDisplay.height(), lineColor);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	0018      	movs	r0, r3
 8006b66:	f7ff fd4c 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006b6a:	0003      	movs	r3, r0
 8006b6c:	b21c      	sxth	r4, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	0018      	movs	r0, r3
 8006b72:	f7ff fd50 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8006b76:	0003      	movs	r3, r0
 8006b78:	b21b      	sxth	r3, r3
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	1dba      	adds	r2, r7, #6
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	9201      	str	r2, [sp, #4]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	0023      	movs	r3, r4
 8006b86:	2200      	movs	r2, #0
 8006b88:	2100      	movs	r1, #0
 8006b8a:	f7fe ff6c 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width() - lineThickness * 2, tftDisplay.height() - lineThickness * 2, backgroundColor);
 8006b8e:	2628      	movs	r6, #40	; 0x28
 8006b90:	19bb      	adds	r3, r7, r6
 8006b92:	2100      	movs	r1, #0
 8006b94:	5e5c      	ldrsh	r4, [r3, r1]
 8006b96:	19bb      	adds	r3, r7, r6
 8006b98:	2100      	movs	r1, #0
 8006b9a:	5e5d      	ldrsh	r5, [r3, r1]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7ff fd2f 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	19bb      	adds	r3, r7, r6
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	18db      	adds	r3, r3, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	b21e      	sxth	r6, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f7ff fd2c 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8006bbe:	0003      	movs	r3, r0
 8006bc0:	001a      	movs	r2, r3
 8006bc2:	2328      	movs	r3, #40	; 0x28
 8006bc4:	18fb      	adds	r3, r7, r3
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	18db      	adds	r3, r3, r3
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	b21b      	sxth	r3, r3
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	220a      	movs	r2, #10
 8006bd6:	18ba      	adds	r2, r7, r2
 8006bd8:	8812      	ldrh	r2, [r2, #0]
 8006bda:	9201      	str	r2, [sp, #4]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	0033      	movs	r3, r6
 8006be0:	002a      	movs	r2, r5
 8006be2:	0021      	movs	r1, r4
 8006be4:	f7fe ff3f 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>

	//Upper Left Border Box
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width()/2, tftDisplay.height()/2, lineColor);
 8006be8:	2628      	movs	r6, #40	; 0x28
 8006bea:	19bb      	adds	r3, r7, r6
 8006bec:	2100      	movs	r1, #0
 8006bee:	5e5c      	ldrsh	r4, [r3, r1]
 8006bf0:	19bb      	adds	r3, r7, r6
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	5e5d      	ldrsh	r5, [r3, r1]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f7ff fd02 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006bfe:	0003      	movs	r3, r0
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	b21e      	sxth	r6, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f7ff fd04 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8006c0e:	0003      	movs	r3, r0
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	b21b      	sxth	r3, r3
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	1dba      	adds	r2, r7, #6
 8006c1a:	8812      	ldrh	r2, [r2, #0]
 8006c1c:	9201      	str	r2, [sp, #4]
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	0033      	movs	r3, r6
 8006c22:	002a      	movs	r2, r5
 8006c24:	0021      	movs	r1, r4
 8006c26:	f7fe ff1e 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width()/2-lineThickness, tftDisplay.height()/2-lineThickness, backgroundColor);
 8006c2a:	2628      	movs	r6, #40	; 0x28
 8006c2c:	19bb      	adds	r3, r7, r6
 8006c2e:	2100      	movs	r1, #0
 8006c30:	5e5c      	ldrsh	r4, [r3, r1]
 8006c32:	19bb      	adds	r3, r7, r6
 8006c34:	2100      	movs	r1, #0
 8006c36:	5e5d      	ldrsh	r5, [r3, r1]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f7ff fce1 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006c40:	0003      	movs	r3, r0
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	19bb      	adds	r3, r7, r6
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	b21e      	sxth	r6, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f7ff fcdf 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8006c58:	0003      	movs	r3, r0
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	2328      	movs	r3, #40	; 0x28
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	b21b      	sxth	r3, r3
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	220a      	movs	r2, #10
 8006c6e:	18ba      	adds	r2, r7, r2
 8006c70:	8812      	ldrh	r2, [r2, #0]
 8006c72:	9201      	str	r2, [sp, #4]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	0033      	movs	r3, r6
 8006c78:	002a      	movs	r2, r5
 8006c7a:	0021      	movs	r1, r4
 8006c7c:	f7fe fef3 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>

	//Bottom Right Border Box
	tftDisplay.writeFillRect(tftDisplay.width()/2, tftDisplay.height()/2, tftDisplay.width(), tftDisplay.height(), lineColor);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	0018      	movs	r0, r3
 8006c84:	f7ff fcbd 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006c88:	0003      	movs	r3, r0
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	b21c      	sxth	r4, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f7ff fcbf 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8006c98:	0003      	movs	r3, r0
 8006c9a:	085b      	lsrs	r3, r3, #1
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	b21d      	sxth	r5, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f7ff fcad 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	b21e      	sxth	r6, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f7ff fcb1 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8006cb4:	0003      	movs	r3, r0
 8006cb6:	b21b      	sxth	r3, r3
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	1dba      	adds	r2, r7, #6
 8006cbc:	8812      	ldrh	r2, [r2, #0]
 8006cbe:	9201      	str	r2, [sp, #4]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	0033      	movs	r3, r6
 8006cc4:	002a      	movs	r2, r5
 8006cc6:	0021      	movs	r1, r4
 8006cc8:	f7fe fecd 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(tftDisplay.width()/2+lineThickness, tftDisplay.height()/2+lineThickness, (tftDisplay.width() / 2 ) - (2 * lineThickness), (tftDisplay.height() / 2 ) - (2 * lineThickness), backgroundColor);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f7ff fc97 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006cd4:	0003      	movs	r3, r0
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	2628      	movs	r6, #40	; 0x28
 8006cdc:	19bb      	adds	r3, r7, r6
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	18d3      	adds	r3, r2, r3
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	b21c      	sxth	r4, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7ff fc94 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8006cee:	0003      	movs	r3, r0
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	19bb      	adds	r3, r7, r6
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	18d3      	adds	r3, r2, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	b21d      	sxth	r5, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	0018      	movs	r0, r3
 8006d02:	f7ff fc7e 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006d06:	0003      	movs	r3, r0
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	19bb      	adds	r3, r7, r6
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	18db      	adds	r3, r3, r3
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	b21e      	sxth	r6, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7ff fc7a 	bl	8006616 <_ZN7TFT_GFX6heightEv>
 8006d22:	0003      	movs	r3, r0
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	2328      	movs	r3, #40	; 0x28
 8006d2a:	18fb      	adds	r3, r7, r3
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	18db      	adds	r3, r3, r3
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	b21b      	sxth	r3, r3
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	220a      	movs	r2, #10
 8006d3c:	18ba      	adds	r2, r7, r2
 8006d3e:	8812      	ldrh	r2, [r2, #0]
 8006d40:	9201      	str	r2, [sp, #4]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	0033      	movs	r3, r6
 8006d46:	002a      	movs	r2, r5
 8006d48:	0021      	movs	r1, r4
 8006d4a:	f7fe fe8c 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>
	//	}

	//Draw Segment Lines

	//	tftDisplay.writeFillRect(tftDisplay.width()/2, tftDisplay.height(), lineThickness, tftDisplay.height(), lineColor);
}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	46bd      	mov	sp, r7
 8006d52:	b005      	add	sp, #20
 8006d54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d56 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>:
//Public Function Prototypes

//Private Function Definitions

//Public Function Definitions
TFT_TEXT_BOX::TFT_TEXT_BOX(TFT_GFX* display, uint16_t bg_color, uint16_t x_pos, uint16_t y_pos, int16_t x_edge, bool is_centered):
 8006d56:	b590      	push	{r4, r7, lr}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	0019      	movs	r1, r3
 8006d62:	1dbb      	adds	r3, r7, #6
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	1d3b      	adds	r3, r7, #4
 8006d68:	1c0a      	adds	r2, r1, #0
 8006d6a:	801a      	strh	r2, [r3, #0]
main_display{display}, xPos{x_pos}, yPos{y_pos}, prevMaxX{x_pos}, prevMaxY{y_pos}, bgColor{bg_color}, isCentered{is_centered}
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1d3a      	adds	r2, r7, #4
 8006d76:	8812      	ldrh	r2, [r2, #0]
 8006d78:	809a      	strh	r2, [r3, #4]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2120      	movs	r1, #32
 8006d7e:	187a      	adds	r2, r7, r1
 8006d80:	8812      	ldrh	r2, [r2, #0]
 8006d82:	80da      	strh	r2, [r3, #6]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	1d3a      	adds	r2, r7, #4
 8006d88:	8812      	ldrh	r2, [r2, #0]
 8006d8a:	811a      	strh	r2, [r3, #8]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	187a      	adds	r2, r7, r1
 8006d90:	8812      	ldrh	r2, [r2, #0]
 8006d92:	815a      	strh	r2, [r3, #10]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	1dba      	adds	r2, r7, #6
 8006d98:	8812      	ldrh	r2, [r2, #0]
 8006d9a:	819a      	strh	r2, [r3, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2228      	movs	r2, #40	; 0x28
 8006da0:	18ba      	adds	r2, r7, r2
 8006da2:	7812      	ldrb	r2, [r2, #0]
 8006da4:	741a      	strb	r2, [r3, #16]
{
	if(x_edge <= x_pos || x_edge > display->width())
 8006da6:	2324      	movs	r3, #36	; 0x24
 8006da8:	18fb      	adds	r3, r7, r3
 8006daa:	2200      	movs	r2, #0
 8006dac:	5e9a      	ldrsh	r2, [r3, r2]
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	dd0a      	ble.n	8006dcc <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x76>
 8006db6:	2324      	movs	r3, #36	; 0x24
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	2400      	movs	r4, #0
 8006dbc:	5f1c      	ldrsh	r4, [r3, r4]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f7ff fc1e 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	dd01      	ble.n	8006dd0 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x7a>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x7c>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d008      	beq.n	8006de8 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x92>
	{
		this->wrapXEdge = display->width();
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f7ff fc12 	bl	8006602 <_ZN7TFT_GFX5widthEv>
 8006dde:	0003      	movs	r3, r0
 8006de0:	001a      	movs	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	81da      	strh	r2, [r3, #14]
 8006de6:	e004      	b.n	8006df2 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x9c>
	}else{
		this->wrapXEdge = x_edge;
 8006de8:	2324      	movs	r3, #36	; 0x24
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	81da      	strh	r2, [r3, #14]
	}
}
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	0018      	movs	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b005      	add	sp, #20
 8006dfa:	bd90      	pop	{r4, r7, pc}

08006dfc <_ZN12TFT_TEXT_BOX5writeEPKcth>:
TFT_TEXT_BOX::TFT_TEXT_BOX(void):
main_display{nullptr}, xPos{0}, yPos{0}, prevMaxX{0}, prevMaxY{0}, bgColor{0},wrapXEdge{0}, isCentered{0}
{}

uint16_t TFT_TEXT_BOX::write(const char* string, uint16_t font_color, uint8_t font_size)
{
 8006dfc:	b5b0      	push	{r4, r5, r7, lr}
 8006dfe:	b08c      	sub	sp, #48	; 0x30
 8006e00:	af06      	add	r7, sp, #24
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	0019      	movs	r1, r3
 8006e08:	1dbb      	adds	r3, r7, #6
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	1d7b      	adds	r3, r7, #5
 8006e0e:	1c0a      	adds	r2, r1, #0
 8006e10:	701a      	strb	r2, [r3, #0]
    //First clear previous text
    this->clear();
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	0018      	movs	r0, r3
 8006e16:	f000 f832 	bl	8006e7e <_ZN12TFT_TEXT_BOX5clearEv>
    //Then draw new text
	std::pair<uint16_t, uint16_t> drawStringRet = this->main_display->drawString(this->xPos, this->yPos, string, font_color, font_color, font_size, font_size, this->wrapXEdge, this->isCentered);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	889b      	ldrh	r3, [r3, #4]
 8006e22:	b219      	sxth	r1, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	88db      	ldrh	r3, [r3, #6]
 8006e28:	b21c      	sxth	r4, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	89db      	ldrh	r3, [r3, #14]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	7c12      	ldrb	r2, [r2, #16]
 8006e32:	68bd      	ldr	r5, [r7, #8]
 8006e34:	9205      	str	r2, [sp, #20]
 8006e36:	9304      	str	r3, [sp, #16]
 8006e38:	1d7b      	adds	r3, r7, #5
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	9303      	str	r3, [sp, #12]
 8006e3e:	1d7b      	adds	r3, r7, #5
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	9302      	str	r3, [sp, #8]
 8006e44:	1dbb      	adds	r3, r7, #6
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	1dbb      	adds	r3, r7, #6
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	002b      	movs	r3, r5
 8006e52:	0022      	movs	r2, r4
 8006e54:	f7ff fa01 	bl	800625a <_ZN7TFT_GFX10drawStringEssPKctthhtb>
 8006e58:	0003      	movs	r3, r0
 8006e5a:	001a      	movs	r2, r3
 8006e5c:	2114      	movs	r1, #20
 8006e5e:	187b      	adds	r3, r7, r1
 8006e60:	601a      	str	r2, [r3, #0]
	this->prevMaxX = drawStringRet.first;
 8006e62:	187b      	adds	r3, r7, r1
 8006e64:	881a      	ldrh	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	811a      	strh	r2, [r3, #8]
	this->prevMaxY = drawStringRet.second;
 8006e6a:	187b      	adds	r3, r7, r1
 8006e6c:	885a      	ldrh	r2, [r3, #2]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	815a      	strh	r2, [r3, #10]
	return this->prevMaxY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	895b      	ldrh	r3, [r3, #10]
}
 8006e76:	0018      	movs	r0, r3
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	b006      	add	sp, #24
 8006e7c:	bdb0      	pop	{r4, r5, r7, pc}

08006e7e <_ZN12TFT_TEXT_BOX5clearEv>:

void TFT_TEXT_BOX::clear(void)
{
 8006e7e:	b5b0      	push	{r4, r5, r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af02      	add	r7, sp, #8
 8006e84:	6078      	str	r0, [r7, #4]
    this->main_display->writeFillRect(this->xPos, this->yPos, this->prevMaxX - this->xPos, this->prevMaxY - this->yPos, this->bgColor);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	889b      	ldrh	r3, [r3, #4]
 8006e8e:	b219      	sxth	r1, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	88db      	ldrh	r3, [r3, #6]
 8006e94:	b21c      	sxth	r4, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	891a      	ldrh	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	889b      	ldrh	r3, [r3, #4]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	b21d      	sxth	r5, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	895a      	ldrh	r2, [r3, #10]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	88db      	ldrh	r3, [r3, #6]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	b21b      	sxth	r3, r3
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	8992      	ldrh	r2, [r2, #12]
 8006eb6:	9201      	str	r2, [sp, #4]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	002b      	movs	r3, r5
 8006ebc:	0022      	movs	r2, r4
 8006ebe:	f7fe fdd2 	bl	8005a66 <_ZN7TFT_GFX13writeFillRectEsssst>
}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	b002      	add	sp, #8
 8006ec8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006ecc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ecc:	480d      	ldr	r0, [pc, #52]	; (8006f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006ece:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ed0:	480d      	ldr	r0, [pc, #52]	; (8006f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8006ed2:	490e      	ldr	r1, [pc, #56]	; (8006f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006ed4:	4a0e      	ldr	r2, [pc, #56]	; (8006f10 <LoopForever+0xe>)
  movs r3, #0
 8006ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ed8:	e002      	b.n	8006ee0 <LoopCopyDataInit>

08006eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ede:	3304      	adds	r3, #4

08006ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ee4:	d3f9      	bcc.n	8006eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ee6:	4a0b      	ldr	r2, [pc, #44]	; (8006f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006ee8:	4c0b      	ldr	r4, [pc, #44]	; (8006f18 <LoopForever+0x16>)
  movs r3, #0
 8006eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006eec:	e001      	b.n	8006ef2 <LoopFillZerobss>

08006eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ef0:	3204      	adds	r2, #4

08006ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ef4:	d3fb      	bcc.n	8006eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006ef6:	f7fe fb35 	bl	8005564 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006efa:	f001 fb91 	bl	8008620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006efe:	f7fd f9f7 	bl	80042f0 <main>

08006f02 <LoopForever>:

LoopForever:
    b LoopForever
 8006f02:	e7fe      	b.n	8006f02 <LoopForever>
  ldr   r0, =_estack
 8006f04:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8006f10:	08009120 	.word	0x08009120
  ldr r2, =_sbss
 8006f14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8006f18:	20000154 	.word	0x20000154

08006f1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f1c:	e7fe      	b.n	8006f1c <ADC1_COMP_IRQHandler>
	...

08006f20 <floor>:
 8006f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f22:	004b      	lsls	r3, r1, #1
 8006f24:	4a39      	ldr	r2, [pc, #228]	; (800700c <floor+0xec>)
 8006f26:	0d5b      	lsrs	r3, r3, #21
 8006f28:	b085      	sub	sp, #20
 8006f2a:	189e      	adds	r6, r3, r2
 8006f2c:	000c      	movs	r4, r1
 8006f2e:	0005      	movs	r5, r0
 8006f30:	9003      	str	r0, [sp, #12]
 8006f32:	2e13      	cmp	r6, #19
 8006f34:	dc34      	bgt.n	8006fa0 <floor+0x80>
 8006f36:	2e00      	cmp	r6, #0
 8006f38:	da15      	bge.n	8006f66 <floor+0x46>
 8006f3a:	4a35      	ldr	r2, [pc, #212]	; (8007010 <floor+0xf0>)
 8006f3c:	4b35      	ldr	r3, [pc, #212]	; (8007014 <floor+0xf4>)
 8006f3e:	f7f9 fed5 	bl	8000cec <__aeabi_dadd>
 8006f42:	2200      	movs	r2, #0
 8006f44:	2300      	movs	r3, #0
 8006f46:	f7f9 fa7f 	bl	8000448 <__aeabi_dcmpgt>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d008      	beq.n	8006f60 <floor+0x40>
 8006f4e:	2c00      	cmp	r4, #0
 8006f50:	da59      	bge.n	8007006 <floor+0xe6>
 8006f52:	0063      	lsls	r3, r4, #1
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	432b      	orrs	r3, r5
 8006f58:	2500      	movs	r5, #0
 8006f5a:	42ab      	cmp	r3, r5
 8006f5c:	d000      	beq.n	8006f60 <floor+0x40>
 8006f5e:	4c2e      	ldr	r4, [pc, #184]	; (8007018 <floor+0xf8>)
 8006f60:	0028      	movs	r0, r5
 8006f62:	0021      	movs	r1, r4
 8006f64:	e026      	b.n	8006fb4 <floor+0x94>
 8006f66:	4f2d      	ldr	r7, [pc, #180]	; (800701c <floor+0xfc>)
 8006f68:	4137      	asrs	r7, r6
 8006f6a:	003b      	movs	r3, r7
 8006f6c:	400b      	ands	r3, r1
 8006f6e:	4303      	orrs	r3, r0
 8006f70:	d020      	beq.n	8006fb4 <floor+0x94>
 8006f72:	9000      	str	r0, [sp, #0]
 8006f74:	9101      	str	r1, [sp, #4]
 8006f76:	4a26      	ldr	r2, [pc, #152]	; (8007010 <floor+0xf0>)
 8006f78:	4b26      	ldr	r3, [pc, #152]	; (8007014 <floor+0xf4>)
 8006f7a:	9800      	ldr	r0, [sp, #0]
 8006f7c:	9901      	ldr	r1, [sp, #4]
 8006f7e:	f7f9 feb5 	bl	8000cec <__aeabi_dadd>
 8006f82:	2200      	movs	r2, #0
 8006f84:	2300      	movs	r3, #0
 8006f86:	f7f9 fa5f 	bl	8000448 <__aeabi_dcmpgt>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d0e8      	beq.n	8006f60 <floor+0x40>
 8006f8e:	2c00      	cmp	r4, #0
 8006f90:	da03      	bge.n	8006f9a <floor+0x7a>
 8006f92:	2380      	movs	r3, #128	; 0x80
 8006f94:	035b      	lsls	r3, r3, #13
 8006f96:	4133      	asrs	r3, r6
 8006f98:	18e4      	adds	r4, r4, r3
 8006f9a:	43bc      	bics	r4, r7
 8006f9c:	2500      	movs	r5, #0
 8006f9e:	e7df      	b.n	8006f60 <floor+0x40>
 8006fa0:	2e33      	cmp	r6, #51	; 0x33
 8006fa2:	dd09      	ble.n	8006fb8 <floor+0x98>
 8006fa4:	2380      	movs	r3, #128	; 0x80
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	429e      	cmp	r6, r3
 8006faa:	d103      	bne.n	8006fb4 <floor+0x94>
 8006fac:	0002      	movs	r2, r0
 8006fae:	000b      	movs	r3, r1
 8006fb0:	f7f9 fe9c 	bl	8000cec <__aeabi_dadd>
 8006fb4:	b005      	add	sp, #20
 8006fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb8:	2701      	movs	r7, #1
 8006fba:	4a19      	ldr	r2, [pc, #100]	; (8007020 <floor+0x100>)
 8006fbc:	427f      	negs	r7, r7
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	40df      	lsrs	r7, r3
 8006fc2:	4238      	tst	r0, r7
 8006fc4:	d0f6      	beq.n	8006fb4 <floor+0x94>
 8006fc6:	9000      	str	r0, [sp, #0]
 8006fc8:	9101      	str	r1, [sp, #4]
 8006fca:	4a11      	ldr	r2, [pc, #68]	; (8007010 <floor+0xf0>)
 8006fcc:	4b11      	ldr	r3, [pc, #68]	; (8007014 <floor+0xf4>)
 8006fce:	9800      	ldr	r0, [sp, #0]
 8006fd0:	9901      	ldr	r1, [sp, #4]
 8006fd2:	f7f9 fe8b 	bl	8000cec <__aeabi_dadd>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f7f9 fa35 	bl	8000448 <__aeabi_dcmpgt>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d0be      	beq.n	8006f60 <floor+0x40>
 8006fe2:	2c00      	cmp	r4, #0
 8006fe4:	da02      	bge.n	8006fec <floor+0xcc>
 8006fe6:	2e14      	cmp	r6, #20
 8006fe8:	d102      	bne.n	8006ff0 <floor+0xd0>
 8006fea:	3401      	adds	r4, #1
 8006fec:	43bd      	bics	r5, r7
 8006fee:	e7b7      	b.n	8006f60 <floor+0x40>
 8006ff0:	2334      	movs	r3, #52	; 0x34
 8006ff2:	1b9e      	subs	r6, r3, r6
 8006ff4:	3b33      	subs	r3, #51	; 0x33
 8006ff6:	40b3      	lsls	r3, r6
 8006ff8:	18ed      	adds	r5, r5, r3
 8006ffa:	9b03      	ldr	r3, [sp, #12]
 8006ffc:	429d      	cmp	r5, r3
 8006ffe:	419b      	sbcs	r3, r3
 8007000:	425b      	negs	r3, r3
 8007002:	18e4      	adds	r4, r4, r3
 8007004:	e7f2      	b.n	8006fec <floor+0xcc>
 8007006:	2500      	movs	r5, #0
 8007008:	002c      	movs	r4, r5
 800700a:	e7a9      	b.n	8006f60 <floor+0x40>
 800700c:	fffffc01 	.word	0xfffffc01
 8007010:	8800759c 	.word	0x8800759c
 8007014:	7e37e43c 	.word	0x7e37e43c
 8007018:	bff00000 	.word	0xbff00000
 800701c:	000fffff 	.word	0x000fffff
 8007020:	fffffbed 	.word	0xfffffbed

08007024 <log10>:
 8007024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007026:	2600      	movs	r6, #0
 8007028:	b08d      	sub	sp, #52	; 0x34
 800702a:	0004      	movs	r4, r0
 800702c:	000d      	movs	r5, r1
 800702e:	f000 fa0d 	bl	800744c <__ieee754_log10>
 8007032:	4b36      	ldr	r3, [pc, #216]	; (800710c <log10+0xe8>)
 8007034:	9000      	str	r0, [sp, #0]
 8007036:	9101      	str	r1, [sp, #4]
 8007038:	579e      	ldrsb	r6, [r3, r6]
 800703a:	1c73      	adds	r3, r6, #1
 800703c:	d062      	beq.n	8007104 <log10+0xe0>
 800703e:	0022      	movs	r2, r4
 8007040:	002b      	movs	r3, r5
 8007042:	0020      	movs	r0, r4
 8007044:	0029      	movs	r1, r5
 8007046:	f7fb fb31 	bl	80026ac <__aeabi_dcmpun>
 800704a:	1e07      	subs	r7, r0, #0
 800704c:	d15a      	bne.n	8007104 <log10+0xe0>
 800704e:	2200      	movs	r2, #0
 8007050:	2300      	movs	r3, #0
 8007052:	0020      	movs	r0, r4
 8007054:	0029      	movs	r1, r5
 8007056:	f7f9 f9ed 	bl	8000434 <__aeabi_dcmple>
 800705a:	2800      	cmp	r0, #0
 800705c:	d052      	beq.n	8007104 <log10+0xe0>
 800705e:	4b2c      	ldr	r3, [pc, #176]	; (8007110 <log10+0xec>)
 8007060:	970a      	str	r7, [sp, #40]	; 0x28
 8007062:	9303      	str	r3, [sp, #12]
 8007064:	9404      	str	r4, [sp, #16]
 8007066:	9505      	str	r5, [sp, #20]
 8007068:	9406      	str	r4, [sp, #24]
 800706a:	9507      	str	r5, [sp, #28]
 800706c:	2e00      	cmp	r6, #0
 800706e:	d115      	bne.n	800709c <log10+0x78>
 8007070:	22e0      	movs	r2, #224	; 0xe0
 8007072:	4b28      	ldr	r3, [pc, #160]	; (8007114 <log10+0xf0>)
 8007074:	0612      	lsls	r2, r2, #24
 8007076:	9208      	str	r2, [sp, #32]
 8007078:	9309      	str	r3, [sp, #36]	; 0x24
 800707a:	0020      	movs	r0, r4
 800707c:	2200      	movs	r2, #0
 800707e:	2300      	movs	r3, #0
 8007080:	0029      	movs	r1, r5
 8007082:	f7f9 f9c7 	bl	8000414 <__aeabi_dcmpeq>
 8007086:	2800      	cmp	r0, #0
 8007088:	d128      	bne.n	80070dc <log10+0xb8>
 800708a:	2301      	movs	r3, #1
 800708c:	9302      	str	r3, [sp, #8]
 800708e:	2e02      	cmp	r6, #2
 8007090:	d119      	bne.n	80070c6 <log10+0xa2>
 8007092:	f001 fabf 	bl	8008614 <__errno>
 8007096:	2321      	movs	r3, #33	; 0x21
 8007098:	6003      	str	r3, [r0, #0]
 800709a:	e019      	b.n	80070d0 <log10+0xac>
 800709c:	2200      	movs	r2, #0
 800709e:	4b1e      	ldr	r3, [pc, #120]	; (8007118 <log10+0xf4>)
 80070a0:	0020      	movs	r0, r4
 80070a2:	9208      	str	r2, [sp, #32]
 80070a4:	9309      	str	r3, [sp, #36]	; 0x24
 80070a6:	0029      	movs	r1, r5
 80070a8:	2200      	movs	r2, #0
 80070aa:	2300      	movs	r3, #0
 80070ac:	f7f9 f9b2 	bl	8000414 <__aeabi_dcmpeq>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d0ea      	beq.n	800708a <log10+0x66>
 80070b4:	2302      	movs	r3, #2
 80070b6:	9302      	str	r3, [sp, #8]
 80070b8:	429e      	cmp	r6, r3
 80070ba:	d111      	bne.n	80070e0 <log10+0xbc>
 80070bc:	f001 faaa 	bl	8008614 <__errno>
 80070c0:	2322      	movs	r3, #34	; 0x22
 80070c2:	6003      	str	r3, [r0, #0]
 80070c4:	e011      	b.n	80070ea <log10+0xc6>
 80070c6:	a802      	add	r0, sp, #8
 80070c8:	f000 fff6 	bl	80080b8 <matherr>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d0e0      	beq.n	8007092 <log10+0x6e>
 80070d0:	4812      	ldr	r0, [pc, #72]	; (800711c <log10+0xf8>)
 80070d2:	f000 fff3 	bl	80080bc <nan>
 80070d6:	9008      	str	r0, [sp, #32]
 80070d8:	9109      	str	r1, [sp, #36]	; 0x24
 80070da:	e006      	b.n	80070ea <log10+0xc6>
 80070dc:	2302      	movs	r3, #2
 80070de:	9302      	str	r3, [sp, #8]
 80070e0:	a802      	add	r0, sp, #8
 80070e2:	f000 ffe9 	bl	80080b8 <matherr>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d0e8      	beq.n	80070bc <log10+0x98>
 80070ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <log10+0xd8>
 80070f2:	f001 fa8f 	bl	8008614 <__errno>
 80070f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	6003      	str	r3, [r0, #0]
 80070fc:	9b08      	ldr	r3, [sp, #32]
 80070fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	9401      	str	r4, [sp, #4]
 8007104:	9800      	ldr	r0, [sp, #0]
 8007106:	9901      	ldr	r1, [sp, #4]
 8007108:	b00d      	add	sp, #52	; 0x34
 800710a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710c:	2000000c 	.word	0x2000000c
 8007110:	080090c8 	.word	0x080090c8
 8007114:	c7efffff 	.word	0xc7efffff
 8007118:	fff00000 	.word	0xfff00000
 800711c:	080090cd 	.word	0x080090cd

08007120 <pow>:
 8007120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007122:	2400      	movs	r4, #0
 8007124:	b091      	sub	sp, #68	; 0x44
 8007126:	001f      	movs	r7, r3
 8007128:	9000      	str	r0, [sp, #0]
 800712a:	9101      	str	r1, [sp, #4]
 800712c:	0016      	movs	r6, r2
 800712e:	f000 fa0f 	bl	8007550 <__ieee754_pow>
 8007132:	4bbe      	ldr	r3, [pc, #760]	; (800742c <pow+0x30c>)
 8007134:	9002      	str	r0, [sp, #8]
 8007136:	9103      	str	r1, [sp, #12]
 8007138:	571c      	ldrsb	r4, [r3, r4]
 800713a:	1c63      	adds	r3, r4, #1
 800713c:	d100      	bne.n	8007140 <pow+0x20>
 800713e:	e0d4      	b.n	80072ea <pow+0x1ca>
 8007140:	0032      	movs	r2, r6
 8007142:	003b      	movs	r3, r7
 8007144:	0030      	movs	r0, r6
 8007146:	0039      	movs	r1, r7
 8007148:	f7fb fab0 	bl	80026ac <__aeabi_dcmpun>
 800714c:	1e05      	subs	r5, r0, #0
 800714e:	d000      	beq.n	8007152 <pow+0x32>
 8007150:	e0cb      	b.n	80072ea <pow+0x1ca>
 8007152:	9a00      	ldr	r2, [sp, #0]
 8007154:	9b01      	ldr	r3, [sp, #4]
 8007156:	0010      	movs	r0, r2
 8007158:	0019      	movs	r1, r3
 800715a:	f7fb faa7 	bl	80026ac <__aeabi_dcmpun>
 800715e:	2200      	movs	r2, #0
 8007160:	9005      	str	r0, [sp, #20]
 8007162:	2800      	cmp	r0, #0
 8007164:	d01e      	beq.n	80071a4 <pow+0x84>
 8007166:	2300      	movs	r3, #0
 8007168:	0030      	movs	r0, r6
 800716a:	0039      	movs	r1, r7
 800716c:	f7f9 f952 	bl	8000414 <__aeabi_dcmpeq>
 8007170:	2800      	cmp	r0, #0
 8007172:	d100      	bne.n	8007176 <pow+0x56>
 8007174:	e0b9      	b.n	80072ea <pow+0x1ca>
 8007176:	2301      	movs	r3, #1
 8007178:	9306      	str	r3, [sp, #24]
 800717a:	4bad      	ldr	r3, [pc, #692]	; (8007430 <pow+0x310>)
 800717c:	950e      	str	r5, [sp, #56]	; 0x38
 800717e:	9307      	str	r3, [sp, #28]
 8007180:	9a00      	ldr	r2, [sp, #0]
 8007182:	9b01      	ldr	r3, [sp, #4]
 8007184:	9208      	str	r2, [sp, #32]
 8007186:	9309      	str	r3, [sp, #36]	; 0x24
 8007188:	2200      	movs	r2, #0
 800718a:	4baa      	ldr	r3, [pc, #680]	; (8007434 <pow+0x314>)
 800718c:	960a      	str	r6, [sp, #40]	; 0x28
 800718e:	970b      	str	r7, [sp, #44]	; 0x2c
 8007190:	920c      	str	r2, [sp, #48]	; 0x30
 8007192:	930d      	str	r3, [sp, #52]	; 0x34
 8007194:	2c02      	cmp	r4, #2
 8007196:	d033      	beq.n	8007200 <pow+0xe0>
 8007198:	a806      	add	r0, sp, #24
 800719a:	f000 ff8d 	bl	80080b8 <matherr>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d125      	bne.n	80071ee <pow+0xce>
 80071a2:	e059      	b.n	8007258 <pow+0x138>
 80071a4:	2300      	movs	r3, #0
 80071a6:	9800      	ldr	r0, [sp, #0]
 80071a8:	9901      	ldr	r1, [sp, #4]
 80071aa:	f7f9 f933 	bl	8000414 <__aeabi_dcmpeq>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d057      	beq.n	8007262 <pow+0x142>
 80071b2:	2200      	movs	r2, #0
 80071b4:	2300      	movs	r3, #0
 80071b6:	0030      	movs	r0, r6
 80071b8:	0039      	movs	r1, r7
 80071ba:	f7f9 f92b 	bl	8000414 <__aeabi_dcmpeq>
 80071be:	1e05      	subs	r5, r0, #0
 80071c0:	d021      	beq.n	8007206 <pow+0xe6>
 80071c2:	2301      	movs	r3, #1
 80071c4:	9306      	str	r3, [sp, #24]
 80071c6:	4b9a      	ldr	r3, [pc, #616]	; (8007430 <pow+0x310>)
 80071c8:	960a      	str	r6, [sp, #40]	; 0x28
 80071ca:	970b      	str	r7, [sp, #44]	; 0x2c
 80071cc:	9307      	str	r3, [sp, #28]
 80071ce:	9b05      	ldr	r3, [sp, #20]
 80071d0:	930e      	str	r3, [sp, #56]	; 0x38
 80071d2:	9a00      	ldr	r2, [sp, #0]
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	9208      	str	r2, [sp, #32]
 80071d8:	9309      	str	r3, [sp, #36]	; 0x24
 80071da:	2200      	movs	r2, #0
 80071dc:	2300      	movs	r3, #0
 80071de:	920c      	str	r2, [sp, #48]	; 0x30
 80071e0:	930d      	str	r3, [sp, #52]	; 0x34
 80071e2:	2c00      	cmp	r4, #0
 80071e4:	d0d8      	beq.n	8007198 <pow+0x78>
 80071e6:	2200      	movs	r2, #0
 80071e8:	4b92      	ldr	r3, [pc, #584]	; (8007434 <pow+0x314>)
 80071ea:	920c      	str	r2, [sp, #48]	; 0x30
 80071ec:	930d      	str	r3, [sp, #52]	; 0x34
 80071ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d004      	beq.n	8007200 <pow+0xe0>
 80071f6:	f001 fa0d 	bl	8008614 <__errno>
 80071fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	6003      	str	r3, [r0, #0]
 8007200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007202:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007204:	e06f      	b.n	80072e6 <pow+0x1c6>
 8007206:	0030      	movs	r0, r6
 8007208:	0039      	movs	r1, r7
 800720a:	f000 ff4d 	bl	80080a8 <finite>
 800720e:	2800      	cmp	r0, #0
 8007210:	d06b      	beq.n	80072ea <pow+0x1ca>
 8007212:	2200      	movs	r2, #0
 8007214:	2300      	movs	r3, #0
 8007216:	0030      	movs	r0, r6
 8007218:	0039      	movs	r1, r7
 800721a:	f7f9 f901 	bl	8000420 <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	d063      	beq.n	80072ea <pow+0x1ca>
 8007222:	2301      	movs	r3, #1
 8007224:	9306      	str	r3, [sp, #24]
 8007226:	4b82      	ldr	r3, [pc, #520]	; (8007430 <pow+0x310>)
 8007228:	950e      	str	r5, [sp, #56]	; 0x38
 800722a:	9307      	str	r3, [sp, #28]
 800722c:	9b00      	ldr	r3, [sp, #0]
 800722e:	9c01      	ldr	r4, [sp, #4]
 8007230:	9308      	str	r3, [sp, #32]
 8007232:	9409      	str	r4, [sp, #36]	; 0x24
 8007234:	4b7d      	ldr	r3, [pc, #500]	; (800742c <pow+0x30c>)
 8007236:	960a      	str	r6, [sp, #40]	; 0x28
 8007238:	970b      	str	r7, [sp, #44]	; 0x2c
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	b25b      	sxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <pow+0x12c>
 8007242:	2300      	movs	r3, #0
 8007244:	2400      	movs	r4, #0
 8007246:	930c      	str	r3, [sp, #48]	; 0x30
 8007248:	940d      	str	r4, [sp, #52]	; 0x34
 800724a:	e7a5      	b.n	8007198 <pow+0x78>
 800724c:	2000      	movs	r0, #0
 800724e:	497a      	ldr	r1, [pc, #488]	; (8007438 <pow+0x318>)
 8007250:	900c      	str	r0, [sp, #48]	; 0x30
 8007252:	910d      	str	r1, [sp, #52]	; 0x34
 8007254:	2b02      	cmp	r3, #2
 8007256:	d19f      	bne.n	8007198 <pow+0x78>
 8007258:	f001 f9dc 	bl	8008614 <__errno>
 800725c:	2321      	movs	r3, #33	; 0x21
 800725e:	6003      	str	r3, [r0, #0]
 8007260:	e7c5      	b.n	80071ee <pow+0xce>
 8007262:	9802      	ldr	r0, [sp, #8]
 8007264:	9903      	ldr	r1, [sp, #12]
 8007266:	f000 ff1f 	bl	80080a8 <finite>
 800726a:	9005      	str	r0, [sp, #20]
 800726c:	2800      	cmp	r0, #0
 800726e:	d000      	beq.n	8007272 <pow+0x152>
 8007270:	e0a5      	b.n	80073be <pow+0x29e>
 8007272:	9800      	ldr	r0, [sp, #0]
 8007274:	9901      	ldr	r1, [sp, #4]
 8007276:	f000 ff17 	bl	80080a8 <finite>
 800727a:	2800      	cmp	r0, #0
 800727c:	d100      	bne.n	8007280 <pow+0x160>
 800727e:	e09e      	b.n	80073be <pow+0x29e>
 8007280:	0030      	movs	r0, r6
 8007282:	0039      	movs	r1, r7
 8007284:	f000 ff10 	bl	80080a8 <finite>
 8007288:	2800      	cmp	r0, #0
 800728a:	d100      	bne.n	800728e <pow+0x16e>
 800728c:	e097      	b.n	80073be <pow+0x29e>
 800728e:	2500      	movs	r5, #0
 8007290:	4b66      	ldr	r3, [pc, #408]	; (800742c <pow+0x30c>)
 8007292:	ac06      	add	r4, sp, #24
 8007294:	575d      	ldrsb	r5, [r3, r5]
 8007296:	9a02      	ldr	r2, [sp, #8]
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	0019      	movs	r1, r3
 800729c:	0010      	movs	r0, r2
 800729e:	f7fb fa05 	bl	80026ac <__aeabi_dcmpun>
 80072a2:	4b63      	ldr	r3, [pc, #396]	; (8007430 <pow+0x310>)
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d031      	beq.n	800730c <pow+0x1ec>
 80072a8:	2201      	movs	r2, #1
 80072aa:	6063      	str	r3, [r4, #4]
 80072ac:	9b05      	ldr	r3, [sp, #20]
 80072ae:	9206      	str	r2, [sp, #24]
 80072b0:	6223      	str	r3, [r4, #32]
 80072b2:	6126      	str	r6, [r4, #16]
 80072b4:	6167      	str	r7, [r4, #20]
 80072b6:	9a00      	ldr	r2, [sp, #0]
 80072b8:	9b01      	ldr	r3, [sp, #4]
 80072ba:	60a2      	str	r2, [r4, #8]
 80072bc:	60e3      	str	r3, [r4, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	2300      	movs	r3, #0
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	d115      	bne.n	80072f2 <pow+0x1d2>
 80072c6:	61a2      	str	r2, [r4, #24]
 80072c8:	61e3      	str	r3, [r4, #28]
 80072ca:	0020      	movs	r0, r4
 80072cc:	f000 fef4 	bl	80080b8 <matherr>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d016      	beq.n	8007302 <pow+0x1e2>
 80072d4:	6a23      	ldr	r3, [r4, #32]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <pow+0x1c2>
 80072da:	f001 f99b 	bl	8008614 <__errno>
 80072de:	6a23      	ldr	r3, [r4, #32]
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	69a3      	ldr	r3, [r4, #24]
 80072e4:	69e4      	ldr	r4, [r4, #28]
 80072e6:	9302      	str	r3, [sp, #8]
 80072e8:	9403      	str	r4, [sp, #12]
 80072ea:	9802      	ldr	r0, [sp, #8]
 80072ec:	9903      	ldr	r1, [sp, #12]
 80072ee:	b011      	add	sp, #68	; 0x44
 80072f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f2:	0010      	movs	r0, r2
 80072f4:	0019      	movs	r1, r3
 80072f6:	f7fa f815 	bl	8001324 <__aeabi_ddiv>
 80072fa:	61a0      	str	r0, [r4, #24]
 80072fc:	61e1      	str	r1, [r4, #28]
 80072fe:	2d02      	cmp	r5, #2
 8007300:	d1e3      	bne.n	80072ca <pow+0x1aa>
 8007302:	f001 f987 	bl	8008614 <__errno>
 8007306:	2321      	movs	r3, #33	; 0x21
 8007308:	6003      	str	r3, [r0, #0]
 800730a:	e7e3      	b.n	80072d4 <pow+0x1b4>
 800730c:	2203      	movs	r2, #3
 800730e:	6126      	str	r6, [r4, #16]
 8007310:	6167      	str	r7, [r4, #20]
 8007312:	9206      	str	r2, [sp, #24]
 8007314:	6063      	str	r3, [r4, #4]
 8007316:	6220      	str	r0, [r4, #32]
 8007318:	9a00      	ldr	r2, [sp, #0]
 800731a:	9b01      	ldr	r3, [sp, #4]
 800731c:	0030      	movs	r0, r6
 800731e:	60a2      	str	r2, [r4, #8]
 8007320:	60e3      	str	r3, [r4, #12]
 8007322:	0039      	movs	r1, r7
 8007324:	2200      	movs	r2, #0
 8007326:	4b45      	ldr	r3, [pc, #276]	; (800743c <pow+0x31c>)
 8007328:	f7fa fc06 	bl	8001b38 <__aeabi_dmul>
 800732c:	0006      	movs	r6, r0
 800732e:	000f      	movs	r7, r1
 8007330:	2d00      	cmp	r5, #0
 8007332:	d124      	bne.n	800737e <pow+0x25e>
 8007334:	9800      	ldr	r0, [sp, #0]
 8007336:	9901      	ldr	r1, [sp, #4]
 8007338:	22e0      	movs	r2, #224	; 0xe0
 800733a:	4b41      	ldr	r3, [pc, #260]	; (8007440 <pow+0x320>)
 800733c:	0612      	lsls	r2, r2, #24
 800733e:	61a2      	str	r2, [r4, #24]
 8007340:	61e3      	str	r3, [r4, #28]
 8007342:	2200      	movs	r2, #0
 8007344:	2300      	movs	r3, #0
 8007346:	f7f9 f86b 	bl	8000420 <__aeabi_dcmplt>
 800734a:	2800      	cmp	r0, #0
 800734c:	d030      	beq.n	80073b0 <pow+0x290>
 800734e:	0030      	movs	r0, r6
 8007350:	0039      	movs	r1, r7
 8007352:	f000 feb9 	bl	80080c8 <rint>
 8007356:	0032      	movs	r2, r6
 8007358:	003b      	movs	r3, r7
 800735a:	f7f9 f85b 	bl	8000414 <__aeabi_dcmpeq>
 800735e:	2800      	cmp	r0, #0
 8007360:	d104      	bne.n	800736c <pow+0x24c>
 8007362:	22e0      	movs	r2, #224	; 0xe0
 8007364:	4b37      	ldr	r3, [pc, #220]	; (8007444 <pow+0x324>)
 8007366:	0612      	lsls	r2, r2, #24
 8007368:	61a2      	str	r2, [r4, #24]
 800736a:	61e3      	str	r3, [r4, #28]
 800736c:	4b2f      	ldr	r3, [pc, #188]	; (800742c <pow+0x30c>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	b25b      	sxtb	r3, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d11c      	bne.n	80073b0 <pow+0x290>
 8007376:	f001 f94d 	bl	8008614 <__errno>
 800737a:	2322      	movs	r3, #34	; 0x22
 800737c:	e7c4      	b.n	8007308 <pow+0x1e8>
 800737e:	2200      	movs	r2, #0
 8007380:	9800      	ldr	r0, [sp, #0]
 8007382:	9901      	ldr	r1, [sp, #4]
 8007384:	4b30      	ldr	r3, [pc, #192]	; (8007448 <pow+0x328>)
 8007386:	61a2      	str	r2, [r4, #24]
 8007388:	61e3      	str	r3, [r4, #28]
 800738a:	2200      	movs	r2, #0
 800738c:	2300      	movs	r3, #0
 800738e:	f7f9 f847 	bl	8000420 <__aeabi_dcmplt>
 8007392:	2800      	cmp	r0, #0
 8007394:	d0ea      	beq.n	800736c <pow+0x24c>
 8007396:	0030      	movs	r0, r6
 8007398:	0039      	movs	r1, r7
 800739a:	f000 fe95 	bl	80080c8 <rint>
 800739e:	0032      	movs	r2, r6
 80073a0:	003b      	movs	r3, r7
 80073a2:	f7f9 f837 	bl	8000414 <__aeabi_dcmpeq>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d1e0      	bne.n	800736c <pow+0x24c>
 80073aa:	2200      	movs	r2, #0
 80073ac:	4b22      	ldr	r3, [pc, #136]	; (8007438 <pow+0x318>)
 80073ae:	e7db      	b.n	8007368 <pow+0x248>
 80073b0:	0020      	movs	r0, r4
 80073b2:	f000 fe81 	bl	80080b8 <matherr>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d000      	beq.n	80073bc <pow+0x29c>
 80073ba:	e78b      	b.n	80072d4 <pow+0x1b4>
 80073bc:	e7db      	b.n	8007376 <pow+0x256>
 80073be:	2200      	movs	r2, #0
 80073c0:	9802      	ldr	r0, [sp, #8]
 80073c2:	9903      	ldr	r1, [sp, #12]
 80073c4:	2300      	movs	r3, #0
 80073c6:	f7f9 f825 	bl	8000414 <__aeabi_dcmpeq>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d100      	bne.n	80073d0 <pow+0x2b0>
 80073ce:	e78c      	b.n	80072ea <pow+0x1ca>
 80073d0:	9800      	ldr	r0, [sp, #0]
 80073d2:	9901      	ldr	r1, [sp, #4]
 80073d4:	f000 fe68 	bl	80080a8 <finite>
 80073d8:	2800      	cmp	r0, #0
 80073da:	d100      	bne.n	80073de <pow+0x2be>
 80073dc:	e785      	b.n	80072ea <pow+0x1ca>
 80073de:	0030      	movs	r0, r6
 80073e0:	0039      	movs	r1, r7
 80073e2:	f000 fe61 	bl	80080a8 <finite>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d100      	bne.n	80073ec <pow+0x2cc>
 80073ea:	e77e      	b.n	80072ea <pow+0x1ca>
 80073ec:	2304      	movs	r3, #4
 80073ee:	9306      	str	r3, [sp, #24]
 80073f0:	4b0f      	ldr	r3, [pc, #60]	; (8007430 <pow+0x310>)
 80073f2:	960a      	str	r6, [sp, #40]	; 0x28
 80073f4:	970b      	str	r7, [sp, #44]	; 0x2c
 80073f6:	9307      	str	r3, [sp, #28]
 80073f8:	2300      	movs	r3, #0
 80073fa:	930e      	str	r3, [sp, #56]	; 0x38
 80073fc:	9b00      	ldr	r3, [sp, #0]
 80073fe:	9c01      	ldr	r4, [sp, #4]
 8007400:	9308      	str	r3, [sp, #32]
 8007402:	9409      	str	r4, [sp, #36]	; 0x24
 8007404:	2300      	movs	r3, #0
 8007406:	2400      	movs	r4, #0
 8007408:	930c      	str	r3, [sp, #48]	; 0x30
 800740a:	940d      	str	r4, [sp, #52]	; 0x34
 800740c:	4b07      	ldr	r3, [pc, #28]	; (800742c <pow+0x30c>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	b25b      	sxtb	r3, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d103      	bne.n	800741e <pow+0x2fe>
 8007416:	f001 f8fd 	bl	8008614 <__errno>
 800741a:	2322      	movs	r3, #34	; 0x22
 800741c:	e71f      	b.n	800725e <pow+0x13e>
 800741e:	a806      	add	r0, sp, #24
 8007420:	f000 fe4a 	bl	80080b8 <matherr>
 8007424:	2800      	cmp	r0, #0
 8007426:	d000      	beq.n	800742a <pow+0x30a>
 8007428:	e6e1      	b.n	80071ee <pow+0xce>
 800742a:	e7f4      	b.n	8007416 <pow+0x2f6>
 800742c:	2000000c 	.word	0x2000000c
 8007430:	080090ce 	.word	0x080090ce
 8007434:	3ff00000 	.word	0x3ff00000
 8007438:	fff00000 	.word	0xfff00000
 800743c:	3fe00000 	.word	0x3fe00000
 8007440:	47efffff 	.word	0x47efffff
 8007444:	c7efffff 	.word	0xc7efffff
 8007448:	7ff00000 	.word	0x7ff00000

0800744c <__ieee754_log10>:
 800744c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744e:	4a34      	ldr	r2, [pc, #208]	; (8007520 <__ieee754_log10+0xd4>)
 8007450:	b085      	sub	sp, #20
 8007452:	0004      	movs	r4, r0
 8007454:	000d      	movs	r5, r1
 8007456:	000b      	movs	r3, r1
 8007458:	4291      	cmp	r1, r2
 800745a:	dc26      	bgt.n	80074aa <__ieee754_log10+0x5e>
 800745c:	004a      	lsls	r2, r1, #1
 800745e:	0852      	lsrs	r2, r2, #1
 8007460:	4302      	orrs	r2, r0
 8007462:	d107      	bne.n	8007474 <__ieee754_log10+0x28>
 8007464:	2200      	movs	r2, #0
 8007466:	2300      	movs	r3, #0
 8007468:	2000      	movs	r0, #0
 800746a:	492e      	ldr	r1, [pc, #184]	; (8007524 <__ieee754_log10+0xd8>)
 800746c:	f7f9 ff5a 	bl	8001324 <__aeabi_ddiv>
 8007470:	b005      	add	sp, #20
 8007472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007474:	2900      	cmp	r1, #0
 8007476:	da05      	bge.n	8007484 <__ieee754_log10+0x38>
 8007478:	0002      	movs	r2, r0
 800747a:	f7fa fdcf 	bl	800201c <__aeabi_dsub>
 800747e:	2200      	movs	r2, #0
 8007480:	2300      	movs	r3, #0
 8007482:	e7f3      	b.n	800746c <__ieee754_log10+0x20>
 8007484:	2200      	movs	r2, #0
 8007486:	4b28      	ldr	r3, [pc, #160]	; (8007528 <__ieee754_log10+0xdc>)
 8007488:	f7fa fb56 	bl	8001b38 <__aeabi_dmul>
 800748c:	2236      	movs	r2, #54	; 0x36
 800748e:	0004      	movs	r4, r0
 8007490:	000d      	movs	r5, r1
 8007492:	000b      	movs	r3, r1
 8007494:	4252      	negs	r2, r2
 8007496:	4925      	ldr	r1, [pc, #148]	; (800752c <__ieee754_log10+0xe0>)
 8007498:	428b      	cmp	r3, r1
 800749a:	dd08      	ble.n	80074ae <__ieee754_log10+0x62>
 800749c:	0022      	movs	r2, r4
 800749e:	002b      	movs	r3, r5
 80074a0:	0020      	movs	r0, r4
 80074a2:	0029      	movs	r1, r5
 80074a4:	f7f9 fc22 	bl	8000cec <__aeabi_dadd>
 80074a8:	e7e2      	b.n	8007470 <__ieee754_log10+0x24>
 80074aa:	2200      	movs	r2, #0
 80074ac:	e7f3      	b.n	8007496 <__ieee754_log10+0x4a>
 80074ae:	4920      	ldr	r1, [pc, #128]	; (8007530 <__ieee754_log10+0xe4>)
 80074b0:	1518      	asrs	r0, r3, #20
 80074b2:	1840      	adds	r0, r0, r1
 80074b4:	1880      	adds	r0, r0, r2
 80074b6:	0fc2      	lsrs	r2, r0, #31
 80074b8:	031b      	lsls	r3, r3, #12
 80074ba:	0b1b      	lsrs	r3, r3, #12
 80074bc:	1880      	adds	r0, r0, r2
 80074be:	9203      	str	r2, [sp, #12]
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	f7fb f945 	bl	8002750 <__aeabi_i2d>
 80074c6:	9a03      	ldr	r2, [sp, #12]
 80074c8:	4b1a      	ldr	r3, [pc, #104]	; (8007534 <__ieee754_log10+0xe8>)
 80074ca:	0006      	movs	r6, r0
 80074cc:	1a9b      	subs	r3, r3, r2
 80074ce:	9a00      	ldr	r2, [sp, #0]
 80074d0:	051b      	lsls	r3, r3, #20
 80074d2:	431a      	orrs	r2, r3
 80074d4:	000f      	movs	r7, r1
 80074d6:	0020      	movs	r0, r4
 80074d8:	0011      	movs	r1, r2
 80074da:	f000 fee1 	bl	80082a0 <__ieee754_log>
 80074de:	4a16      	ldr	r2, [pc, #88]	; (8007538 <__ieee754_log10+0xec>)
 80074e0:	0004      	movs	r4, r0
 80074e2:	000d      	movs	r5, r1
 80074e4:	4b15      	ldr	r3, [pc, #84]	; (800753c <__ieee754_log10+0xf0>)
 80074e6:	0030      	movs	r0, r6
 80074e8:	0039      	movs	r1, r7
 80074ea:	f7fa fb25 	bl	8001b38 <__aeabi_dmul>
 80074ee:	4a14      	ldr	r2, [pc, #80]	; (8007540 <__ieee754_log10+0xf4>)
 80074f0:	9000      	str	r0, [sp, #0]
 80074f2:	9101      	str	r1, [sp, #4]
 80074f4:	4b13      	ldr	r3, [pc, #76]	; (8007544 <__ieee754_log10+0xf8>)
 80074f6:	0020      	movs	r0, r4
 80074f8:	0029      	movs	r1, r5
 80074fa:	f7fa fb1d 	bl	8001b38 <__aeabi_dmul>
 80074fe:	0002      	movs	r2, r0
 8007500:	000b      	movs	r3, r1
 8007502:	9800      	ldr	r0, [sp, #0]
 8007504:	9901      	ldr	r1, [sp, #4]
 8007506:	f7f9 fbf1 	bl	8000cec <__aeabi_dadd>
 800750a:	4a0f      	ldr	r2, [pc, #60]	; (8007548 <__ieee754_log10+0xfc>)
 800750c:	4b0f      	ldr	r3, [pc, #60]	; (800754c <__ieee754_log10+0x100>)
 800750e:	0004      	movs	r4, r0
 8007510:	000d      	movs	r5, r1
 8007512:	0030      	movs	r0, r6
 8007514:	0039      	movs	r1, r7
 8007516:	f7fa fb0f 	bl	8001b38 <__aeabi_dmul>
 800751a:	0002      	movs	r2, r0
 800751c:	000b      	movs	r3, r1
 800751e:	e7bf      	b.n	80074a0 <__ieee754_log10+0x54>
 8007520:	000fffff 	.word	0x000fffff
 8007524:	c3500000 	.word	0xc3500000
 8007528:	43500000 	.word	0x43500000
 800752c:	7fefffff 	.word	0x7fefffff
 8007530:	fffffc01 	.word	0xfffffc01
 8007534:	000003ff 	.word	0x000003ff
 8007538:	11f12b36 	.word	0x11f12b36
 800753c:	3d59fef3 	.word	0x3d59fef3
 8007540:	1526e50e 	.word	0x1526e50e
 8007544:	3fdbcb7b 	.word	0x3fdbcb7b
 8007548:	509f6000 	.word	0x509f6000
 800754c:	3fd34413 	.word	0x3fd34413

08007550 <__ieee754_pow>:
 8007550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007552:	b095      	sub	sp, #84	; 0x54
 8007554:	9202      	str	r2, [sp, #8]
 8007556:	9303      	str	r3, [sp, #12]
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	000e      	movs	r6, r1
 800755c:	9902      	ldr	r1, [sp, #8]
 800755e:	005d      	lsls	r5, r3, #1
 8007560:	9304      	str	r3, [sp, #16]
 8007562:	000b      	movs	r3, r1
 8007564:	086d      	lsrs	r5, r5, #1
 8007566:	0007      	movs	r7, r0
 8007568:	432b      	orrs	r3, r5
 800756a:	d101      	bne.n	8007570 <__ieee754_pow+0x20>
 800756c:	f000 fcad 	bl	8007eca <__ieee754_pow+0x97a>
 8007570:	4b7e      	ldr	r3, [pc, #504]	; (800776c <__ieee754_pow+0x21c>)
 8007572:	0074      	lsls	r4, r6, #1
 8007574:	9608      	str	r6, [sp, #32]
 8007576:	9000      	str	r0, [sp, #0]
 8007578:	0864      	lsrs	r4, r4, #1
 800757a:	469c      	mov	ip, r3
 800757c:	429c      	cmp	r4, r3
 800757e:	dc0b      	bgt.n	8007598 <__ieee754_pow+0x48>
 8007580:	d104      	bne.n	800758c <__ieee754_pow+0x3c>
 8007582:	2800      	cmp	r0, #0
 8007584:	d108      	bne.n	8007598 <__ieee754_pow+0x48>
 8007586:	42a5      	cmp	r5, r4
 8007588:	dc0c      	bgt.n	80075a4 <__ieee754_pow+0x54>
 800758a:	e001      	b.n	8007590 <__ieee754_pow+0x40>
 800758c:	429d      	cmp	r5, r3
 800758e:	dc03      	bgt.n	8007598 <__ieee754_pow+0x48>
 8007590:	4565      	cmp	r5, ip
 8007592:	d10d      	bne.n	80075b0 <__ieee754_pow+0x60>
 8007594:	2900      	cmp	r1, #0
 8007596:	d00b      	beq.n	80075b0 <__ieee754_pow+0x60>
 8007598:	4b75      	ldr	r3, [pc, #468]	; (8007770 <__ieee754_pow+0x220>)
 800759a:	18e4      	adds	r4, r4, r3
 800759c:	4327      	orrs	r7, r4
 800759e:	d101      	bne.n	80075a4 <__ieee754_pow+0x54>
 80075a0:	f000 fc93 	bl	8007eca <__ieee754_pow+0x97a>
 80075a4:	4873      	ldr	r0, [pc, #460]	; (8007774 <__ieee754_pow+0x224>)
 80075a6:	f000 fd89 	bl	80080bc <nan>
 80075aa:	9000      	str	r0, [sp, #0]
 80075ac:	9101      	str	r1, [sp, #4]
 80075ae:	e061      	b.n	8007674 <__ieee754_pow+0x124>
 80075b0:	2300      	movs	r3, #0
 80075b2:	9306      	str	r3, [sp, #24]
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	da17      	bge.n	80075e8 <__ieee754_pow+0x98>
 80075b8:	4a6f      	ldr	r2, [pc, #444]	; (8007778 <__ieee754_pow+0x228>)
 80075ba:	4295      	cmp	r5, r2
 80075bc:	dc4d      	bgt.n	800765a <__ieee754_pow+0x10a>
 80075be:	4a6f      	ldr	r2, [pc, #444]	; (800777c <__ieee754_pow+0x22c>)
 80075c0:	4295      	cmp	r5, r2
 80075c2:	dd11      	ble.n	80075e8 <__ieee754_pow+0x98>
 80075c4:	4b6e      	ldr	r3, [pc, #440]	; (8007780 <__ieee754_pow+0x230>)
 80075c6:	152a      	asrs	r2, r5, #20
 80075c8:	18d2      	adds	r2, r2, r3
 80075ca:	2a14      	cmp	r2, #20
 80075cc:	dd25      	ble.n	800761a <__ieee754_pow+0xca>
 80075ce:	2034      	movs	r0, #52	; 0x34
 80075d0:	1a82      	subs	r2, r0, r2
 80075d2:	9802      	ldr	r0, [sp, #8]
 80075d4:	40d0      	lsrs	r0, r2
 80075d6:	0003      	movs	r3, r0
 80075d8:	4093      	lsls	r3, r2
 80075da:	428b      	cmp	r3, r1
 80075dc:	d104      	bne.n	80075e8 <__ieee754_pow+0x98>
 80075de:	2201      	movs	r2, #1
 80075e0:	4010      	ands	r0, r2
 80075e2:	1892      	adds	r2, r2, r2
 80075e4:	1a13      	subs	r3, r2, r0
 80075e6:	9306      	str	r3, [sp, #24]
 80075e8:	2900      	cmp	r1, #0
 80075ea:	d15e      	bne.n	80076aa <__ieee754_pow+0x15a>
 80075ec:	4565      	cmp	r5, ip
 80075ee:	d123      	bne.n	8007638 <__ieee754_pow+0xe8>
 80075f0:	4b5f      	ldr	r3, [pc, #380]	; (8007770 <__ieee754_pow+0x220>)
 80075f2:	18e3      	adds	r3, r4, r3
 80075f4:	431f      	orrs	r7, r3
 80075f6:	d101      	bne.n	80075fc <__ieee754_pow+0xac>
 80075f8:	f000 fc67 	bl	8007eca <__ieee754_pow+0x97a>
 80075fc:	4b5f      	ldr	r3, [pc, #380]	; (800777c <__ieee754_pow+0x22c>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	dd2d      	ble.n	800765e <__ieee754_pow+0x10e>
 8007602:	9b02      	ldr	r3, [sp, #8]
 8007604:	9c03      	ldr	r4, [sp, #12]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	9401      	str	r4, [sp, #4]
 800760a:	9b04      	ldr	r3, [sp, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	da31      	bge.n	8007674 <__ieee754_pow+0x124>
 8007610:	2300      	movs	r3, #0
 8007612:	2400      	movs	r4, #0
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	9401      	str	r4, [sp, #4]
 8007618:	e02c      	b.n	8007674 <__ieee754_pow+0x124>
 800761a:	2900      	cmp	r1, #0
 800761c:	d145      	bne.n	80076aa <__ieee754_pow+0x15a>
 800761e:	2314      	movs	r3, #20
 8007620:	1a9a      	subs	r2, r3, r2
 8007622:	002b      	movs	r3, r5
 8007624:	4113      	asrs	r3, r2
 8007626:	0019      	movs	r1, r3
 8007628:	4091      	lsls	r1, r2
 800762a:	42a9      	cmp	r1, r5
 800762c:	d104      	bne.n	8007638 <__ieee754_pow+0xe8>
 800762e:	2201      	movs	r2, #1
 8007630:	4013      	ands	r3, r2
 8007632:	1892      	adds	r2, r2, r2
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	9306      	str	r3, [sp, #24]
 8007638:	4b52      	ldr	r3, [pc, #328]	; (8007784 <__ieee754_pow+0x234>)
 800763a:	429d      	cmp	r5, r3
 800763c:	d11e      	bne.n	800767c <__ieee754_pow+0x12c>
 800763e:	0038      	movs	r0, r7
 8007640:	0031      	movs	r1, r6
 8007642:	9b04      	ldr	r3, [sp, #16]
 8007644:	9000      	str	r0, [sp, #0]
 8007646:	9101      	str	r1, [sp, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	da13      	bge.n	8007674 <__ieee754_pow+0x124>
 800764c:	003a      	movs	r2, r7
 800764e:	0033      	movs	r3, r6
 8007650:	2000      	movs	r0, #0
 8007652:	494c      	ldr	r1, [pc, #304]	; (8007784 <__ieee754_pow+0x234>)
 8007654:	f7f9 fe66 	bl	8001324 <__aeabi_ddiv>
 8007658:	e7a7      	b.n	80075aa <__ieee754_pow+0x5a>
 800765a:	2302      	movs	r3, #2
 800765c:	e7c3      	b.n	80075e6 <__ieee754_pow+0x96>
 800765e:	9b04      	ldr	r3, [sp, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dad5      	bge.n	8007610 <__ieee754_pow+0xc0>
 8007664:	2280      	movs	r2, #128	; 0x80
 8007666:	0612      	lsls	r2, r2, #24
 8007668:	4694      	mov	ip, r2
 800766a:	9b02      	ldr	r3, [sp, #8]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	4463      	add	r3, ip
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	9800      	ldr	r0, [sp, #0]
 8007676:	9901      	ldr	r1, [sp, #4]
 8007678:	b015      	add	sp, #84	; 0x54
 800767a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800767c:	2380      	movs	r3, #128	; 0x80
 800767e:	9a04      	ldr	r2, [sp, #16]
 8007680:	05db      	lsls	r3, r3, #23
 8007682:	429a      	cmp	r2, r3
 8007684:	d106      	bne.n	8007694 <__ieee754_pow+0x144>
 8007686:	003a      	movs	r2, r7
 8007688:	0033      	movs	r3, r6
 800768a:	0038      	movs	r0, r7
 800768c:	0031      	movs	r1, r6
 800768e:	f7fa fa53 	bl	8001b38 <__aeabi_dmul>
 8007692:	e78a      	b.n	80075aa <__ieee754_pow+0x5a>
 8007694:	4b3c      	ldr	r3, [pc, #240]	; (8007788 <__ieee754_pow+0x238>)
 8007696:	9a04      	ldr	r2, [sp, #16]
 8007698:	429a      	cmp	r2, r3
 800769a:	d106      	bne.n	80076aa <__ieee754_pow+0x15a>
 800769c:	2e00      	cmp	r6, #0
 800769e:	db04      	blt.n	80076aa <__ieee754_pow+0x15a>
 80076a0:	0038      	movs	r0, r7
 80076a2:	0031      	movs	r1, r6
 80076a4:	f000 fc4a 	bl	8007f3c <__ieee754_sqrt>
 80076a8:	e77f      	b.n	80075aa <__ieee754_pow+0x5a>
 80076aa:	0038      	movs	r0, r7
 80076ac:	0031      	movs	r1, r6
 80076ae:	f000 fcf7 	bl	80080a0 <fabs>
 80076b2:	9000      	str	r0, [sp, #0]
 80076b4:	9101      	str	r1, [sp, #4]
 80076b6:	2f00      	cmp	r7, #0
 80076b8:	d12e      	bne.n	8007718 <__ieee754_pow+0x1c8>
 80076ba:	2c00      	cmp	r4, #0
 80076bc:	d004      	beq.n	80076c8 <__ieee754_pow+0x178>
 80076be:	4a31      	ldr	r2, [pc, #196]	; (8007784 <__ieee754_pow+0x234>)
 80076c0:	00b3      	lsls	r3, r6, #2
 80076c2:	089b      	lsrs	r3, r3, #2
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d127      	bne.n	8007718 <__ieee754_pow+0x1c8>
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	da07      	bge.n	80076de <__ieee754_pow+0x18e>
 80076ce:	9a00      	ldr	r2, [sp, #0]
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	2000      	movs	r0, #0
 80076d4:	492b      	ldr	r1, [pc, #172]	; (8007784 <__ieee754_pow+0x234>)
 80076d6:	f7f9 fe25 	bl	8001324 <__aeabi_ddiv>
 80076da:	9000      	str	r0, [sp, #0]
 80076dc:	9101      	str	r1, [sp, #4]
 80076de:	9b08      	ldr	r3, [sp, #32]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dac7      	bge.n	8007674 <__ieee754_pow+0x124>
 80076e4:	4b22      	ldr	r3, [pc, #136]	; (8007770 <__ieee754_pow+0x220>)
 80076e6:	18e4      	adds	r4, r4, r3
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	431c      	orrs	r4, r3
 80076ec:	d108      	bne.n	8007700 <__ieee754_pow+0x1b0>
 80076ee:	9a00      	ldr	r2, [sp, #0]
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	0010      	movs	r0, r2
 80076f4:	0019      	movs	r1, r3
 80076f6:	f7fa fc91 	bl	800201c <__aeabi_dsub>
 80076fa:	0002      	movs	r2, r0
 80076fc:	000b      	movs	r3, r1
 80076fe:	e7a9      	b.n	8007654 <__ieee754_pow+0x104>
 8007700:	9b06      	ldr	r3, [sp, #24]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d1b6      	bne.n	8007674 <__ieee754_pow+0x124>
 8007706:	9800      	ldr	r0, [sp, #0]
 8007708:	2180      	movs	r1, #128	; 0x80
 800770a:	0002      	movs	r2, r0
 800770c:	9801      	ldr	r0, [sp, #4]
 800770e:	0609      	lsls	r1, r1, #24
 8007710:	1843      	adds	r3, r0, r1
 8007712:	9200      	str	r2, [sp, #0]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	e7ad      	b.n	8007674 <__ieee754_pow+0x124>
 8007718:	0ff3      	lsrs	r3, r6, #31
 800771a:	3b01      	subs	r3, #1
 800771c:	9310      	str	r3, [sp, #64]	; 0x40
 800771e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007720:	9b06      	ldr	r3, [sp, #24]
 8007722:	4313      	orrs	r3, r2
 8007724:	d104      	bne.n	8007730 <__ieee754_pow+0x1e0>
 8007726:	003a      	movs	r2, r7
 8007728:	0033      	movs	r3, r6
 800772a:	0038      	movs	r0, r7
 800772c:	0031      	movs	r1, r6
 800772e:	e7e2      	b.n	80076f6 <__ieee754_pow+0x1a6>
 8007730:	4b16      	ldr	r3, [pc, #88]	; (800778c <__ieee754_pow+0x23c>)
 8007732:	429d      	cmp	r5, r3
 8007734:	dc00      	bgt.n	8007738 <__ieee754_pow+0x1e8>
 8007736:	e0f7      	b.n	8007928 <__ieee754_pow+0x3d8>
 8007738:	4b15      	ldr	r3, [pc, #84]	; (8007790 <__ieee754_pow+0x240>)
 800773a:	429d      	cmp	r5, r3
 800773c:	dd0b      	ble.n	8007756 <__ieee754_pow+0x206>
 800773e:	4b0f      	ldr	r3, [pc, #60]	; (800777c <__ieee754_pow+0x22c>)
 8007740:	429c      	cmp	r4, r3
 8007742:	dc0e      	bgt.n	8007762 <__ieee754_pow+0x212>
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	db00      	blt.n	800774c <__ieee754_pow+0x1fc>
 800774a:	e761      	b.n	8007610 <__ieee754_pow+0xc0>
 800774c:	4a11      	ldr	r2, [pc, #68]	; (8007794 <__ieee754_pow+0x244>)
 800774e:	4b12      	ldr	r3, [pc, #72]	; (8007798 <__ieee754_pow+0x248>)
 8007750:	0010      	movs	r0, r2
 8007752:	0019      	movs	r1, r3
 8007754:	e79b      	b.n	800768e <__ieee754_pow+0x13e>
 8007756:	4b11      	ldr	r3, [pc, #68]	; (800779c <__ieee754_pow+0x24c>)
 8007758:	429c      	cmp	r4, r3
 800775a:	ddf3      	ble.n	8007744 <__ieee754_pow+0x1f4>
 800775c:	4b09      	ldr	r3, [pc, #36]	; (8007784 <__ieee754_pow+0x234>)
 800775e:	429c      	cmp	r4, r3
 8007760:	dd1e      	ble.n	80077a0 <__ieee754_pow+0x250>
 8007762:	9b04      	ldr	r3, [sp, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dcf1      	bgt.n	800774c <__ieee754_pow+0x1fc>
 8007768:	e752      	b.n	8007610 <__ieee754_pow+0xc0>
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	7ff00000 	.word	0x7ff00000
 8007770:	c0100000 	.word	0xc0100000
 8007774:	080090cd 	.word	0x080090cd
 8007778:	433fffff 	.word	0x433fffff
 800777c:	3fefffff 	.word	0x3fefffff
 8007780:	fffffc01 	.word	0xfffffc01
 8007784:	3ff00000 	.word	0x3ff00000
 8007788:	3fe00000 	.word	0x3fe00000
 800778c:	41e00000 	.word	0x41e00000
 8007790:	43f00000 	.word	0x43f00000
 8007794:	8800759c 	.word	0x8800759c
 8007798:	7e37e43c 	.word	0x7e37e43c
 800779c:	3feffffe 	.word	0x3feffffe
 80077a0:	2200      	movs	r2, #0
 80077a2:	9800      	ldr	r0, [sp, #0]
 80077a4:	9901      	ldr	r1, [sp, #4]
 80077a6:	4b52      	ldr	r3, [pc, #328]	; (80078f0 <__ieee754_pow+0x3a0>)
 80077a8:	f7fa fc38 	bl	800201c <__aeabi_dsub>
 80077ac:	22c0      	movs	r2, #192	; 0xc0
 80077ae:	4b51      	ldr	r3, [pc, #324]	; (80078f4 <__ieee754_pow+0x3a4>)
 80077b0:	05d2      	lsls	r2, r2, #23
 80077b2:	0006      	movs	r6, r0
 80077b4:	000f      	movs	r7, r1
 80077b6:	f7fa f9bf 	bl	8001b38 <__aeabi_dmul>
 80077ba:	4a4f      	ldr	r2, [pc, #316]	; (80078f8 <__ieee754_pow+0x3a8>)
 80077bc:	9000      	str	r0, [sp, #0]
 80077be:	9101      	str	r1, [sp, #4]
 80077c0:	4b4e      	ldr	r3, [pc, #312]	; (80078fc <__ieee754_pow+0x3ac>)
 80077c2:	0030      	movs	r0, r6
 80077c4:	0039      	movs	r1, r7
 80077c6:	f7fa f9b7 	bl	8001b38 <__aeabi_dmul>
 80077ca:	2200      	movs	r2, #0
 80077cc:	9004      	str	r0, [sp, #16]
 80077ce:	9105      	str	r1, [sp, #20]
 80077d0:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <__ieee754_pow+0x3b0>)
 80077d2:	0030      	movs	r0, r6
 80077d4:	0039      	movs	r1, r7
 80077d6:	f7fa f9af 	bl	8001b38 <__aeabi_dmul>
 80077da:	0002      	movs	r2, r0
 80077dc:	000b      	movs	r3, r1
 80077de:	4849      	ldr	r0, [pc, #292]	; (8007904 <__ieee754_pow+0x3b4>)
 80077e0:	4949      	ldr	r1, [pc, #292]	; (8007908 <__ieee754_pow+0x3b8>)
 80077e2:	f7fa fc1b 	bl	800201c <__aeabi_dsub>
 80077e6:	0032      	movs	r2, r6
 80077e8:	003b      	movs	r3, r7
 80077ea:	f7fa f9a5 	bl	8001b38 <__aeabi_dmul>
 80077ee:	0002      	movs	r2, r0
 80077f0:	000b      	movs	r3, r1
 80077f2:	2000      	movs	r0, #0
 80077f4:	4945      	ldr	r1, [pc, #276]	; (800790c <__ieee754_pow+0x3bc>)
 80077f6:	f7fa fc11 	bl	800201c <__aeabi_dsub>
 80077fa:	0032      	movs	r2, r6
 80077fc:	0004      	movs	r4, r0
 80077fe:	000d      	movs	r5, r1
 8007800:	003b      	movs	r3, r7
 8007802:	0030      	movs	r0, r6
 8007804:	0039      	movs	r1, r7
 8007806:	f7fa f997 	bl	8001b38 <__aeabi_dmul>
 800780a:	0002      	movs	r2, r0
 800780c:	000b      	movs	r3, r1
 800780e:	0020      	movs	r0, r4
 8007810:	0029      	movs	r1, r5
 8007812:	f7fa f991 	bl	8001b38 <__aeabi_dmul>
 8007816:	4a3e      	ldr	r2, [pc, #248]	; (8007910 <__ieee754_pow+0x3c0>)
 8007818:	4b36      	ldr	r3, [pc, #216]	; (80078f4 <__ieee754_pow+0x3a4>)
 800781a:	f7fa f98d 	bl	8001b38 <__aeabi_dmul>
 800781e:	0002      	movs	r2, r0
 8007820:	000b      	movs	r3, r1
 8007822:	9804      	ldr	r0, [sp, #16]
 8007824:	9905      	ldr	r1, [sp, #20]
 8007826:	f7fa fbf9 	bl	800201c <__aeabi_dsub>
 800782a:	0002      	movs	r2, r0
 800782c:	000b      	movs	r3, r1
 800782e:	0004      	movs	r4, r0
 8007830:	000d      	movs	r5, r1
 8007832:	9800      	ldr	r0, [sp, #0]
 8007834:	9901      	ldr	r1, [sp, #4]
 8007836:	f7f9 fa59 	bl	8000cec <__aeabi_dadd>
 800783a:	9a00      	ldr	r2, [sp, #0]
 800783c:	9b01      	ldr	r3, [sp, #4]
 800783e:	2000      	movs	r0, #0
 8007840:	9004      	str	r0, [sp, #16]
 8007842:	9105      	str	r1, [sp, #20]
 8007844:	f7fa fbea 	bl	800201c <__aeabi_dsub>
 8007848:	0002      	movs	r2, r0
 800784a:	000b      	movs	r3, r1
 800784c:	0020      	movs	r0, r4
 800784e:	0029      	movs	r1, r5
 8007850:	f7fa fbe4 	bl	800201c <__aeabi_dsub>
 8007854:	9b06      	ldr	r3, [sp, #24]
 8007856:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007858:	3b01      	subs	r3, #1
 800785a:	0006      	movs	r6, r0
 800785c:	000f      	movs	r7, r1
 800785e:	4313      	orrs	r3, r2
 8007860:	d000      	beq.n	8007864 <__ieee754_pow+0x314>
 8007862:	e1de      	b.n	8007c22 <__ieee754_pow+0x6d2>
 8007864:	2300      	movs	r3, #0
 8007866:	4c2b      	ldr	r4, [pc, #172]	; (8007914 <__ieee754_pow+0x3c4>)
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	9401      	str	r4, [sp, #4]
 800786c:	9c02      	ldr	r4, [sp, #8]
 800786e:	9d03      	ldr	r5, [sp, #12]
 8007870:	9802      	ldr	r0, [sp, #8]
 8007872:	9903      	ldr	r1, [sp, #12]
 8007874:	2400      	movs	r4, #0
 8007876:	002b      	movs	r3, r5
 8007878:	0022      	movs	r2, r4
 800787a:	f7fa fbcf 	bl	800201c <__aeabi_dsub>
 800787e:	9a04      	ldr	r2, [sp, #16]
 8007880:	9b05      	ldr	r3, [sp, #20]
 8007882:	f7fa f959 	bl	8001b38 <__aeabi_dmul>
 8007886:	9a02      	ldr	r2, [sp, #8]
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	9006      	str	r0, [sp, #24]
 800788c:	9107      	str	r1, [sp, #28]
 800788e:	0030      	movs	r0, r6
 8007890:	0039      	movs	r1, r7
 8007892:	f7fa f951 	bl	8001b38 <__aeabi_dmul>
 8007896:	0002      	movs	r2, r0
 8007898:	000b      	movs	r3, r1
 800789a:	9806      	ldr	r0, [sp, #24]
 800789c:	9907      	ldr	r1, [sp, #28]
 800789e:	f7f9 fa25 	bl	8000cec <__aeabi_dadd>
 80078a2:	0022      	movs	r2, r4
 80078a4:	002b      	movs	r3, r5
 80078a6:	9006      	str	r0, [sp, #24]
 80078a8:	9107      	str	r1, [sp, #28]
 80078aa:	9804      	ldr	r0, [sp, #16]
 80078ac:	9905      	ldr	r1, [sp, #20]
 80078ae:	f7fa f943 	bl	8001b38 <__aeabi_dmul>
 80078b2:	0006      	movs	r6, r0
 80078b4:	000f      	movs	r7, r1
 80078b6:	000b      	movs	r3, r1
 80078b8:	0002      	movs	r2, r0
 80078ba:	9806      	ldr	r0, [sp, #24]
 80078bc:	9907      	ldr	r1, [sp, #28]
 80078be:	9604      	str	r6, [sp, #16]
 80078c0:	9705      	str	r7, [sp, #20]
 80078c2:	f7f9 fa13 	bl	8000cec <__aeabi_dadd>
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <__ieee754_pow+0x3c8>)
 80078c8:	0005      	movs	r5, r0
 80078ca:	000c      	movs	r4, r1
 80078cc:	9108      	str	r1, [sp, #32]
 80078ce:	4299      	cmp	r1, r3
 80078d0:	dc00      	bgt.n	80078d4 <__ieee754_pow+0x384>
 80078d2:	e2d8      	b.n	8007e86 <__ieee754_pow+0x936>
 80078d4:	4b11      	ldr	r3, [pc, #68]	; (800791c <__ieee754_pow+0x3cc>)
 80078d6:	18cb      	adds	r3, r1, r3
 80078d8:	4303      	orrs	r3, r0
 80078da:	d100      	bne.n	80078de <__ieee754_pow+0x38e>
 80078dc:	e1da      	b.n	8007c94 <__ieee754_pow+0x744>
 80078de:	9800      	ldr	r0, [sp, #0]
 80078e0:	9901      	ldr	r1, [sp, #4]
 80078e2:	4a0f      	ldr	r2, [pc, #60]	; (8007920 <__ieee754_pow+0x3d0>)
 80078e4:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <__ieee754_pow+0x3d4>)
 80078e6:	f7fa f927 	bl	8001b38 <__aeabi_dmul>
 80078ea:	4a0d      	ldr	r2, [pc, #52]	; (8007920 <__ieee754_pow+0x3d0>)
 80078ec:	4b0d      	ldr	r3, [pc, #52]	; (8007924 <__ieee754_pow+0x3d4>)
 80078ee:	e6ce      	b.n	800768e <__ieee754_pow+0x13e>
 80078f0:	3ff00000 	.word	0x3ff00000
 80078f4:	3ff71547 	.word	0x3ff71547
 80078f8:	f85ddf44 	.word	0xf85ddf44
 80078fc:	3e54ae0b 	.word	0x3e54ae0b
 8007900:	3fd00000 	.word	0x3fd00000
 8007904:	55555555 	.word	0x55555555
 8007908:	3fd55555 	.word	0x3fd55555
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	652b82fe 	.word	0x652b82fe
 8007914:	bff00000 	.word	0xbff00000
 8007918:	408fffff 	.word	0x408fffff
 800791c:	bf700000 	.word	0xbf700000
 8007920:	8800759c 	.word	0x8800759c
 8007924:	7e37e43c 	.word	0x7e37e43c
 8007928:	4bbf      	ldr	r3, [pc, #764]	; (8007c28 <__ieee754_pow+0x6d8>)
 800792a:	2200      	movs	r2, #0
 800792c:	429c      	cmp	r4, r3
 800792e:	dc0a      	bgt.n	8007946 <__ieee754_pow+0x3f6>
 8007930:	9800      	ldr	r0, [sp, #0]
 8007932:	9901      	ldr	r1, [sp, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	4bbd      	ldr	r3, [pc, #756]	; (8007c2c <__ieee754_pow+0x6dc>)
 8007938:	f7fa f8fe 	bl	8001b38 <__aeabi_dmul>
 800793c:	2235      	movs	r2, #53	; 0x35
 800793e:	9000      	str	r0, [sp, #0]
 8007940:	9101      	str	r1, [sp, #4]
 8007942:	9c01      	ldr	r4, [sp, #4]
 8007944:	4252      	negs	r2, r2
 8007946:	49ba      	ldr	r1, [pc, #744]	; (8007c30 <__ieee754_pow+0x6e0>)
 8007948:	1523      	asrs	r3, r4, #20
 800794a:	185b      	adds	r3, r3, r1
 800794c:	189b      	adds	r3, r3, r2
 800794e:	0324      	lsls	r4, r4, #12
 8007950:	4db8      	ldr	r5, [pc, #736]	; (8007c34 <__ieee754_pow+0x6e4>)
 8007952:	4ab9      	ldr	r2, [pc, #740]	; (8007c38 <__ieee754_pow+0x6e8>)
 8007954:	930d      	str	r3, [sp, #52]	; 0x34
 8007956:	0b23      	lsrs	r3, r4, #12
 8007958:	431d      	orrs	r5, r3
 800795a:	2400      	movs	r4, #0
 800795c:	4293      	cmp	r3, r2
 800795e:	dd09      	ble.n	8007974 <__ieee754_pow+0x424>
 8007960:	4ab6      	ldr	r2, [pc, #728]	; (8007c3c <__ieee754_pow+0x6ec>)
 8007962:	3401      	adds	r4, #1
 8007964:	4293      	cmp	r3, r2
 8007966:	dd05      	ble.n	8007974 <__ieee754_pow+0x424>
 8007968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800796a:	191b      	adds	r3, r3, r4
 800796c:	2400      	movs	r4, #0
 800796e:	930d      	str	r3, [sp, #52]	; 0x34
 8007970:	4bb3      	ldr	r3, [pc, #716]	; (8007c40 <__ieee754_pow+0x6f0>)
 8007972:	18ed      	adds	r5, r5, r3
 8007974:	9800      	ldr	r0, [sp, #0]
 8007976:	9901      	ldr	r1, [sp, #4]
 8007978:	0029      	movs	r1, r5
 800797a:	00e3      	lsls	r3, r4, #3
 800797c:	9311      	str	r3, [sp, #68]	; 0x44
 800797e:	4bb1      	ldr	r3, [pc, #708]	; (8007c44 <__ieee754_pow+0x6f4>)
 8007980:	00e2      	lsls	r2, r4, #3
 8007982:	189b      	adds	r3, r3, r2
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	900e      	str	r0, [sp, #56]	; 0x38
 800798a:	910f      	str	r1, [sp, #60]	; 0x3c
 800798c:	920a      	str	r2, [sp, #40]	; 0x28
 800798e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007990:	f7fa fb44 	bl	800201c <__aeabi_dsub>
 8007994:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007998:	0006      	movs	r6, r0
 800799a:	000f      	movs	r7, r1
 800799c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800799e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079a0:	f7f9 f9a4 	bl	8000cec <__aeabi_dadd>
 80079a4:	0002      	movs	r2, r0
 80079a6:	000b      	movs	r3, r1
 80079a8:	2000      	movs	r0, #0
 80079aa:	49a2      	ldr	r1, [pc, #648]	; (8007c34 <__ieee754_pow+0x6e4>)
 80079ac:	f7f9 fcba 	bl	8001324 <__aeabi_ddiv>
 80079b0:	9012      	str	r0, [sp, #72]	; 0x48
 80079b2:	9113      	str	r1, [sp, #76]	; 0x4c
 80079b4:	0002      	movs	r2, r0
 80079b6:	000b      	movs	r3, r1
 80079b8:	0030      	movs	r0, r6
 80079ba:	0039      	movs	r1, r7
 80079bc:	f7fa f8bc 	bl	8001b38 <__aeabi_dmul>
 80079c0:	9008      	str	r0, [sp, #32]
 80079c2:	9109      	str	r1, [sp, #36]	; 0x24
 80079c4:	9a08      	ldr	r2, [sp, #32]
 80079c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c8:	2180      	movs	r1, #128	; 0x80
 80079ca:	9204      	str	r2, [sp, #16]
 80079cc:	9305      	str	r3, [sp, #20]
 80079ce:	2300      	movs	r3, #0
 80079d0:	0589      	lsls	r1, r1, #22
 80079d2:	106d      	asrs	r5, r5, #1
 80079d4:	430d      	orrs	r5, r1
 80079d6:	2180      	movs	r1, #128	; 0x80
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	9a04      	ldr	r2, [sp, #16]
 80079dc:	9b05      	ldr	r3, [sp, #20]
 80079de:	9200      	str	r2, [sp, #0]
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	0309      	lsls	r1, r1, #12
 80079e6:	186d      	adds	r5, r5, r1
 80079e8:	04a4      	lsls	r4, r4, #18
 80079ea:	192b      	adds	r3, r5, r4
 80079ec:	9800      	ldr	r0, [sp, #0]
 80079ee:	9901      	ldr	r1, [sp, #4]
 80079f0:	0014      	movs	r4, r2
 80079f2:	001d      	movs	r5, r3
 80079f4:	f7fa f8a0 	bl	8001b38 <__aeabi_dmul>
 80079f8:	0002      	movs	r2, r0
 80079fa:	000b      	movs	r3, r1
 80079fc:	0030      	movs	r0, r6
 80079fe:	0039      	movs	r1, r7
 8007a00:	f7fa fb0c 	bl	800201c <__aeabi_dsub>
 8007a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a08:	0006      	movs	r6, r0
 8007a0a:	000f      	movs	r7, r1
 8007a0c:	0020      	movs	r0, r4
 8007a0e:	0029      	movs	r1, r5
 8007a10:	f7fa fb04 	bl	800201c <__aeabi_dsub>
 8007a14:	0002      	movs	r2, r0
 8007a16:	000b      	movs	r3, r1
 8007a18:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a1c:	f7fa fafe 	bl	800201c <__aeabi_dsub>
 8007a20:	9a00      	ldr	r2, [sp, #0]
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	f7fa f888 	bl	8001b38 <__aeabi_dmul>
 8007a28:	0002      	movs	r2, r0
 8007a2a:	000b      	movs	r3, r1
 8007a2c:	0030      	movs	r0, r6
 8007a2e:	0039      	movs	r1, r7
 8007a30:	f7fa faf4 	bl	800201c <__aeabi_dsub>
 8007a34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a38:	f7fa f87e 	bl	8001b38 <__aeabi_dmul>
 8007a3c:	9a08      	ldr	r2, [sp, #32]
 8007a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a40:	900a      	str	r0, [sp, #40]	; 0x28
 8007a42:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a44:	0010      	movs	r0, r2
 8007a46:	0019      	movs	r1, r3
 8007a48:	f7fa f876 	bl	8001b38 <__aeabi_dmul>
 8007a4c:	0006      	movs	r6, r0
 8007a4e:	000f      	movs	r7, r1
 8007a50:	4a7d      	ldr	r2, [pc, #500]	; (8007c48 <__ieee754_pow+0x6f8>)
 8007a52:	4b7e      	ldr	r3, [pc, #504]	; (8007c4c <__ieee754_pow+0x6fc>)
 8007a54:	f7fa f870 	bl	8001b38 <__aeabi_dmul>
 8007a58:	4a7d      	ldr	r2, [pc, #500]	; (8007c50 <__ieee754_pow+0x700>)
 8007a5a:	4b7e      	ldr	r3, [pc, #504]	; (8007c54 <__ieee754_pow+0x704>)
 8007a5c:	f7f9 f946 	bl	8000cec <__aeabi_dadd>
 8007a60:	0032      	movs	r2, r6
 8007a62:	003b      	movs	r3, r7
 8007a64:	f7fa f868 	bl	8001b38 <__aeabi_dmul>
 8007a68:	4a7b      	ldr	r2, [pc, #492]	; (8007c58 <__ieee754_pow+0x708>)
 8007a6a:	4b7c      	ldr	r3, [pc, #496]	; (8007c5c <__ieee754_pow+0x70c>)
 8007a6c:	f7f9 f93e 	bl	8000cec <__aeabi_dadd>
 8007a70:	0032      	movs	r2, r6
 8007a72:	003b      	movs	r3, r7
 8007a74:	f7fa f860 	bl	8001b38 <__aeabi_dmul>
 8007a78:	4a79      	ldr	r2, [pc, #484]	; (8007c60 <__ieee754_pow+0x710>)
 8007a7a:	4b7a      	ldr	r3, [pc, #488]	; (8007c64 <__ieee754_pow+0x714>)
 8007a7c:	f7f9 f936 	bl	8000cec <__aeabi_dadd>
 8007a80:	0032      	movs	r2, r6
 8007a82:	003b      	movs	r3, r7
 8007a84:	f7fa f858 	bl	8001b38 <__aeabi_dmul>
 8007a88:	4a77      	ldr	r2, [pc, #476]	; (8007c68 <__ieee754_pow+0x718>)
 8007a8a:	4b78      	ldr	r3, [pc, #480]	; (8007c6c <__ieee754_pow+0x71c>)
 8007a8c:	f7f9 f92e 	bl	8000cec <__aeabi_dadd>
 8007a90:	0032      	movs	r2, r6
 8007a92:	003b      	movs	r3, r7
 8007a94:	f7fa f850 	bl	8001b38 <__aeabi_dmul>
 8007a98:	4a75      	ldr	r2, [pc, #468]	; (8007c70 <__ieee754_pow+0x720>)
 8007a9a:	4b76      	ldr	r3, [pc, #472]	; (8007c74 <__ieee754_pow+0x724>)
 8007a9c:	f7f9 f926 	bl	8000cec <__aeabi_dadd>
 8007aa0:	0032      	movs	r2, r6
 8007aa2:	0004      	movs	r4, r0
 8007aa4:	000d      	movs	r5, r1
 8007aa6:	003b      	movs	r3, r7
 8007aa8:	0030      	movs	r0, r6
 8007aaa:	0039      	movs	r1, r7
 8007aac:	f7fa f844 	bl	8001b38 <__aeabi_dmul>
 8007ab0:	0002      	movs	r2, r0
 8007ab2:	000b      	movs	r3, r1
 8007ab4:	0020      	movs	r0, r4
 8007ab6:	0029      	movs	r1, r5
 8007ab8:	f7fa f83e 	bl	8001b38 <__aeabi_dmul>
 8007abc:	9a00      	ldr	r2, [sp, #0]
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	0004      	movs	r4, r0
 8007ac2:	000d      	movs	r5, r1
 8007ac4:	9808      	ldr	r0, [sp, #32]
 8007ac6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ac8:	f7f9 f910 	bl	8000cec <__aeabi_dadd>
 8007acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ad0:	f7fa f832 	bl	8001b38 <__aeabi_dmul>
 8007ad4:	0022      	movs	r2, r4
 8007ad6:	002b      	movs	r3, r5
 8007ad8:	f7f9 f908 	bl	8000cec <__aeabi_dadd>
 8007adc:	9a00      	ldr	r2, [sp, #0]
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	900e      	str	r0, [sp, #56]	; 0x38
 8007ae2:	910f      	str	r1, [sp, #60]	; 0x3c
 8007ae4:	0010      	movs	r0, r2
 8007ae6:	0019      	movs	r1, r3
 8007ae8:	f7fa f826 	bl	8001b38 <__aeabi_dmul>
 8007aec:	2200      	movs	r2, #0
 8007aee:	4b62      	ldr	r3, [pc, #392]	; (8007c78 <__ieee754_pow+0x728>)
 8007af0:	0004      	movs	r4, r0
 8007af2:	000d      	movs	r5, r1
 8007af4:	f7f9 f8fa 	bl	8000cec <__aeabi_dadd>
 8007af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007afa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007afc:	f7f9 f8f6 	bl	8000cec <__aeabi_dadd>
 8007b00:	9e04      	ldr	r6, [sp, #16]
 8007b02:	000f      	movs	r7, r1
 8007b04:	0032      	movs	r2, r6
 8007b06:	000b      	movs	r3, r1
 8007b08:	9800      	ldr	r0, [sp, #0]
 8007b0a:	9901      	ldr	r1, [sp, #4]
 8007b0c:	f7fa f814 	bl	8001b38 <__aeabi_dmul>
 8007b10:	2200      	movs	r2, #0
 8007b12:	9000      	str	r0, [sp, #0]
 8007b14:	9101      	str	r1, [sp, #4]
 8007b16:	4b58      	ldr	r3, [pc, #352]	; (8007c78 <__ieee754_pow+0x728>)
 8007b18:	0030      	movs	r0, r6
 8007b1a:	0039      	movs	r1, r7
 8007b1c:	f7fa fa7e 	bl	800201c <__aeabi_dsub>
 8007b20:	0022      	movs	r2, r4
 8007b22:	002b      	movs	r3, r5
 8007b24:	f7fa fa7a 	bl	800201c <__aeabi_dsub>
 8007b28:	0002      	movs	r2, r0
 8007b2a:	000b      	movs	r3, r1
 8007b2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007b2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b30:	f7fa fa74 	bl	800201c <__aeabi_dsub>
 8007b34:	9a08      	ldr	r2, [sp, #32]
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	f7f9 fffe 	bl	8001b38 <__aeabi_dmul>
 8007b3c:	0032      	movs	r2, r6
 8007b3e:	0004      	movs	r4, r0
 8007b40:	000d      	movs	r5, r1
 8007b42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b46:	003b      	movs	r3, r7
 8007b48:	f7f9 fff6 	bl	8001b38 <__aeabi_dmul>
 8007b4c:	0002      	movs	r2, r0
 8007b4e:	000b      	movs	r3, r1
 8007b50:	0020      	movs	r0, r4
 8007b52:	0029      	movs	r1, r5
 8007b54:	f7f9 f8ca 	bl	8000cec <__aeabi_dadd>
 8007b58:	0004      	movs	r4, r0
 8007b5a:	000d      	movs	r5, r1
 8007b5c:	0002      	movs	r2, r0
 8007b5e:	000b      	movs	r3, r1
 8007b60:	9800      	ldr	r0, [sp, #0]
 8007b62:	9901      	ldr	r1, [sp, #4]
 8007b64:	f7f9 f8c2 	bl	8000cec <__aeabi_dadd>
 8007b68:	22e0      	movs	r2, #224	; 0xe0
 8007b6a:	9e04      	ldr	r6, [sp, #16]
 8007b6c:	0612      	lsls	r2, r2, #24
 8007b6e:	4b43      	ldr	r3, [pc, #268]	; (8007c7c <__ieee754_pow+0x72c>)
 8007b70:	0030      	movs	r0, r6
 8007b72:	000f      	movs	r7, r1
 8007b74:	f7f9 ffe0 	bl	8001b38 <__aeabi_dmul>
 8007b78:	9008      	str	r0, [sp, #32]
 8007b7a:	9109      	str	r1, [sp, #36]	; 0x24
 8007b7c:	9a00      	ldr	r2, [sp, #0]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	0030      	movs	r0, r6
 8007b82:	0039      	movs	r1, r7
 8007b84:	f7fa fa4a 	bl	800201c <__aeabi_dsub>
 8007b88:	0002      	movs	r2, r0
 8007b8a:	000b      	movs	r3, r1
 8007b8c:	0020      	movs	r0, r4
 8007b8e:	0029      	movs	r1, r5
 8007b90:	f7fa fa44 	bl	800201c <__aeabi_dsub>
 8007b94:	4a3a      	ldr	r2, [pc, #232]	; (8007c80 <__ieee754_pow+0x730>)
 8007b96:	4b39      	ldr	r3, [pc, #228]	; (8007c7c <__ieee754_pow+0x72c>)
 8007b98:	f7f9 ffce 	bl	8001b38 <__aeabi_dmul>
 8007b9c:	4a39      	ldr	r2, [pc, #228]	; (8007c84 <__ieee754_pow+0x734>)
 8007b9e:	0004      	movs	r4, r0
 8007ba0:	000d      	movs	r5, r1
 8007ba2:	4b39      	ldr	r3, [pc, #228]	; (8007c88 <__ieee754_pow+0x738>)
 8007ba4:	0030      	movs	r0, r6
 8007ba6:	0039      	movs	r1, r7
 8007ba8:	f7f9 ffc6 	bl	8001b38 <__aeabi_dmul>
 8007bac:	0002      	movs	r2, r0
 8007bae:	000b      	movs	r3, r1
 8007bb0:	0020      	movs	r0, r4
 8007bb2:	0029      	movs	r1, r5
 8007bb4:	f7f9 f89a 	bl	8000cec <__aeabi_dadd>
 8007bb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007bba:	4b34      	ldr	r3, [pc, #208]	; (8007c8c <__ieee754_pow+0x73c>)
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f7f9 f893 	bl	8000cec <__aeabi_dadd>
 8007bc6:	9000      	str	r0, [sp, #0]
 8007bc8:	9101      	str	r1, [sp, #4]
 8007bca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007bcc:	f7fa fdc0 	bl	8002750 <__aeabi_i2d>
 8007bd0:	0004      	movs	r4, r0
 8007bd2:	000d      	movs	r5, r1
 8007bd4:	9808      	ldr	r0, [sp, #32]
 8007bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007bda:	4b2d      	ldr	r3, [pc, #180]	; (8007c90 <__ieee754_pow+0x740>)
 8007bdc:	189b      	adds	r3, r3, r2
 8007bde:	681e      	ldr	r6, [r3, #0]
 8007be0:	685f      	ldr	r7, [r3, #4]
 8007be2:	9a00      	ldr	r2, [sp, #0]
 8007be4:	9b01      	ldr	r3, [sp, #4]
 8007be6:	f7f9 f881 	bl	8000cec <__aeabi_dadd>
 8007bea:	0032      	movs	r2, r6
 8007bec:	003b      	movs	r3, r7
 8007bee:	f7f9 f87d 	bl	8000cec <__aeabi_dadd>
 8007bf2:	0022      	movs	r2, r4
 8007bf4:	002b      	movs	r3, r5
 8007bf6:	f7f9 f879 	bl	8000cec <__aeabi_dadd>
 8007bfa:	9804      	ldr	r0, [sp, #16]
 8007bfc:	0022      	movs	r2, r4
 8007bfe:	002b      	movs	r3, r5
 8007c00:	9004      	str	r0, [sp, #16]
 8007c02:	9105      	str	r1, [sp, #20]
 8007c04:	f7fa fa0a 	bl	800201c <__aeabi_dsub>
 8007c08:	0032      	movs	r2, r6
 8007c0a:	003b      	movs	r3, r7
 8007c0c:	f7fa fa06 	bl	800201c <__aeabi_dsub>
 8007c10:	9a08      	ldr	r2, [sp, #32]
 8007c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c14:	f7fa fa02 	bl	800201c <__aeabi_dsub>
 8007c18:	0002      	movs	r2, r0
 8007c1a:	000b      	movs	r3, r1
 8007c1c:	9800      	ldr	r0, [sp, #0]
 8007c1e:	9901      	ldr	r1, [sp, #4]
 8007c20:	e616      	b.n	8007850 <__ieee754_pow+0x300>
 8007c22:	2300      	movs	r3, #0
 8007c24:	4c03      	ldr	r4, [pc, #12]	; (8007c34 <__ieee754_pow+0x6e4>)
 8007c26:	e61f      	b.n	8007868 <__ieee754_pow+0x318>
 8007c28:	000fffff 	.word	0x000fffff
 8007c2c:	43400000 	.word	0x43400000
 8007c30:	fffffc01 	.word	0xfffffc01
 8007c34:	3ff00000 	.word	0x3ff00000
 8007c38:	0003988e 	.word	0x0003988e
 8007c3c:	000bb679 	.word	0x000bb679
 8007c40:	fff00000 	.word	0xfff00000
 8007c44:	080090d8 	.word	0x080090d8
 8007c48:	4a454eef 	.word	0x4a454eef
 8007c4c:	3fca7e28 	.word	0x3fca7e28
 8007c50:	93c9db65 	.word	0x93c9db65
 8007c54:	3fcd864a 	.word	0x3fcd864a
 8007c58:	a91d4101 	.word	0xa91d4101
 8007c5c:	3fd17460 	.word	0x3fd17460
 8007c60:	518f264d 	.word	0x518f264d
 8007c64:	3fd55555 	.word	0x3fd55555
 8007c68:	db6fabff 	.word	0xdb6fabff
 8007c6c:	3fdb6db6 	.word	0x3fdb6db6
 8007c70:	33333303 	.word	0x33333303
 8007c74:	3fe33333 	.word	0x3fe33333
 8007c78:	40080000 	.word	0x40080000
 8007c7c:	3feec709 	.word	0x3feec709
 8007c80:	dc3a03fd 	.word	0xdc3a03fd
 8007c84:	145b01f5 	.word	0x145b01f5
 8007c88:	be3e2fe0 	.word	0xbe3e2fe0
 8007c8c:	080090f8 	.word	0x080090f8
 8007c90:	080090e8 	.word	0x080090e8
 8007c94:	4a8f      	ldr	r2, [pc, #572]	; (8007ed4 <__ieee754_pow+0x984>)
 8007c96:	4b90      	ldr	r3, [pc, #576]	; (8007ed8 <__ieee754_pow+0x988>)
 8007c98:	9806      	ldr	r0, [sp, #24]
 8007c9a:	9907      	ldr	r1, [sp, #28]
 8007c9c:	f7f9 f826 	bl	8000cec <__aeabi_dadd>
 8007ca0:	0032      	movs	r2, r6
 8007ca2:	9002      	str	r0, [sp, #8]
 8007ca4:	9103      	str	r1, [sp, #12]
 8007ca6:	003b      	movs	r3, r7
 8007ca8:	0028      	movs	r0, r5
 8007caa:	0021      	movs	r1, r4
 8007cac:	f7fa f9b6 	bl	800201c <__aeabi_dsub>
 8007cb0:	0002      	movs	r2, r0
 8007cb2:	000b      	movs	r3, r1
 8007cb4:	9802      	ldr	r0, [sp, #8]
 8007cb6:	9903      	ldr	r1, [sp, #12]
 8007cb8:	f7f8 fbc6 	bl	8000448 <__aeabi_dcmpgt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d000      	beq.n	8007cc2 <__ieee754_pow+0x772>
 8007cc0:	e60d      	b.n	80078de <__ieee754_pow+0x38e>
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4a85      	ldr	r2, [pc, #532]	; (8007edc <__ieee754_pow+0x98c>)
 8007cc6:	0063      	lsls	r3, r4, #1
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	9102      	str	r1, [sp, #8]
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	dd25      	ble.n	8007d1c <__ieee754_pow+0x7cc>
 8007cd0:	4a83      	ldr	r2, [pc, #524]	; (8007ee0 <__ieee754_pow+0x990>)
 8007cd2:	151b      	asrs	r3, r3, #20
 8007cd4:	189b      	adds	r3, r3, r2
 8007cd6:	2280      	movs	r2, #128	; 0x80
 8007cd8:	0352      	lsls	r2, r2, #13
 8007cda:	4694      	mov	ip, r2
 8007cdc:	411a      	asrs	r2, r3
 8007cde:	1914      	adds	r4, r2, r4
 8007ce0:	0060      	lsls	r0, r4, #1
 8007ce2:	4b80      	ldr	r3, [pc, #512]	; (8007ee4 <__ieee754_pow+0x994>)
 8007ce4:	0d40      	lsrs	r0, r0, #21
 8007ce6:	4d80      	ldr	r5, [pc, #512]	; (8007ee8 <__ieee754_pow+0x998>)
 8007ce8:	18c0      	adds	r0, r0, r3
 8007cea:	4105      	asrs	r5, r0
 8007cec:	0021      	movs	r1, r4
 8007cee:	43a9      	bics	r1, r5
 8007cf0:	000b      	movs	r3, r1
 8007cf2:	4661      	mov	r1, ip
 8007cf4:	0324      	lsls	r4, r4, #12
 8007cf6:	0b24      	lsrs	r4, r4, #12
 8007cf8:	4321      	orrs	r1, r4
 8007cfa:	2414      	movs	r4, #20
 8007cfc:	1a20      	subs	r0, r4, r0
 8007cfe:	4101      	asrs	r1, r0
 8007d00:	9102      	str	r1, [sp, #8]
 8007d02:	9908      	ldr	r1, [sp, #32]
 8007d04:	2200      	movs	r2, #0
 8007d06:	2900      	cmp	r1, #0
 8007d08:	da02      	bge.n	8007d10 <__ieee754_pow+0x7c0>
 8007d0a:	9902      	ldr	r1, [sp, #8]
 8007d0c:	4249      	negs	r1, r1
 8007d0e:	9102      	str	r1, [sp, #8]
 8007d10:	0030      	movs	r0, r6
 8007d12:	0039      	movs	r1, r7
 8007d14:	f7fa f982 	bl	800201c <__aeabi_dsub>
 8007d18:	9004      	str	r0, [sp, #16]
 8007d1a:	9105      	str	r1, [sp, #20]
 8007d1c:	9a06      	ldr	r2, [sp, #24]
 8007d1e:	9b07      	ldr	r3, [sp, #28]
 8007d20:	9804      	ldr	r0, [sp, #16]
 8007d22:	9905      	ldr	r1, [sp, #20]
 8007d24:	2600      	movs	r6, #0
 8007d26:	f7f8 ffe1 	bl	8000cec <__aeabi_dadd>
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	4b6f      	ldr	r3, [pc, #444]	; (8007eec <__ieee754_pow+0x99c>)
 8007d2e:	0030      	movs	r0, r6
 8007d30:	000f      	movs	r7, r1
 8007d32:	f7f9 ff01 	bl	8001b38 <__aeabi_dmul>
 8007d36:	9a04      	ldr	r2, [sp, #16]
 8007d38:	9b05      	ldr	r3, [sp, #20]
 8007d3a:	9008      	str	r0, [sp, #32]
 8007d3c:	9109      	str	r1, [sp, #36]	; 0x24
 8007d3e:	0030      	movs	r0, r6
 8007d40:	0039      	movs	r1, r7
 8007d42:	f7fa f96b 	bl	800201c <__aeabi_dsub>
 8007d46:	0002      	movs	r2, r0
 8007d48:	000b      	movs	r3, r1
 8007d4a:	9806      	ldr	r0, [sp, #24]
 8007d4c:	9907      	ldr	r1, [sp, #28]
 8007d4e:	f7fa f965 	bl	800201c <__aeabi_dsub>
 8007d52:	4a67      	ldr	r2, [pc, #412]	; (8007ef0 <__ieee754_pow+0x9a0>)
 8007d54:	4b67      	ldr	r3, [pc, #412]	; (8007ef4 <__ieee754_pow+0x9a4>)
 8007d56:	f7f9 feef 	bl	8001b38 <__aeabi_dmul>
 8007d5a:	4a67      	ldr	r2, [pc, #412]	; (8007ef8 <__ieee754_pow+0x9a8>)
 8007d5c:	0004      	movs	r4, r0
 8007d5e:	000d      	movs	r5, r1
 8007d60:	4b66      	ldr	r3, [pc, #408]	; (8007efc <__ieee754_pow+0x9ac>)
 8007d62:	0030      	movs	r0, r6
 8007d64:	0039      	movs	r1, r7
 8007d66:	f7f9 fee7 	bl	8001b38 <__aeabi_dmul>
 8007d6a:	0002      	movs	r2, r0
 8007d6c:	000b      	movs	r3, r1
 8007d6e:	0020      	movs	r0, r4
 8007d70:	0029      	movs	r1, r5
 8007d72:	f7f8 ffbb 	bl	8000cec <__aeabi_dadd>
 8007d76:	0004      	movs	r4, r0
 8007d78:	000d      	movs	r5, r1
 8007d7a:	0002      	movs	r2, r0
 8007d7c:	000b      	movs	r3, r1
 8007d7e:	9808      	ldr	r0, [sp, #32]
 8007d80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d82:	f7f8 ffb3 	bl	8000cec <__aeabi_dadd>
 8007d86:	9a08      	ldr	r2, [sp, #32]
 8007d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8a:	0006      	movs	r6, r0
 8007d8c:	000f      	movs	r7, r1
 8007d8e:	f7fa f945 	bl	800201c <__aeabi_dsub>
 8007d92:	0002      	movs	r2, r0
 8007d94:	000b      	movs	r3, r1
 8007d96:	0020      	movs	r0, r4
 8007d98:	0029      	movs	r1, r5
 8007d9a:	f7fa f93f 	bl	800201c <__aeabi_dsub>
 8007d9e:	0032      	movs	r2, r6
 8007da0:	9004      	str	r0, [sp, #16]
 8007da2:	9105      	str	r1, [sp, #20]
 8007da4:	003b      	movs	r3, r7
 8007da6:	0030      	movs	r0, r6
 8007da8:	0039      	movs	r1, r7
 8007daa:	f7f9 fec5 	bl	8001b38 <__aeabi_dmul>
 8007dae:	0004      	movs	r4, r0
 8007db0:	000d      	movs	r5, r1
 8007db2:	4a53      	ldr	r2, [pc, #332]	; (8007f00 <__ieee754_pow+0x9b0>)
 8007db4:	4b53      	ldr	r3, [pc, #332]	; (8007f04 <__ieee754_pow+0x9b4>)
 8007db6:	f7f9 febf 	bl	8001b38 <__aeabi_dmul>
 8007dba:	4a53      	ldr	r2, [pc, #332]	; (8007f08 <__ieee754_pow+0x9b8>)
 8007dbc:	4b53      	ldr	r3, [pc, #332]	; (8007f0c <__ieee754_pow+0x9bc>)
 8007dbe:	f7fa f92d 	bl	800201c <__aeabi_dsub>
 8007dc2:	0022      	movs	r2, r4
 8007dc4:	002b      	movs	r3, r5
 8007dc6:	f7f9 feb7 	bl	8001b38 <__aeabi_dmul>
 8007dca:	4a51      	ldr	r2, [pc, #324]	; (8007f10 <__ieee754_pow+0x9c0>)
 8007dcc:	4b51      	ldr	r3, [pc, #324]	; (8007f14 <__ieee754_pow+0x9c4>)
 8007dce:	f7f8 ff8d 	bl	8000cec <__aeabi_dadd>
 8007dd2:	0022      	movs	r2, r4
 8007dd4:	002b      	movs	r3, r5
 8007dd6:	f7f9 feaf 	bl	8001b38 <__aeabi_dmul>
 8007dda:	4a4f      	ldr	r2, [pc, #316]	; (8007f18 <__ieee754_pow+0x9c8>)
 8007ddc:	4b4f      	ldr	r3, [pc, #316]	; (8007f1c <__ieee754_pow+0x9cc>)
 8007dde:	f7fa f91d 	bl	800201c <__aeabi_dsub>
 8007de2:	0022      	movs	r2, r4
 8007de4:	002b      	movs	r3, r5
 8007de6:	f7f9 fea7 	bl	8001b38 <__aeabi_dmul>
 8007dea:	4a4d      	ldr	r2, [pc, #308]	; (8007f20 <__ieee754_pow+0x9d0>)
 8007dec:	4b4d      	ldr	r3, [pc, #308]	; (8007f24 <__ieee754_pow+0x9d4>)
 8007dee:	f7f8 ff7d 	bl	8000cec <__aeabi_dadd>
 8007df2:	0022      	movs	r2, r4
 8007df4:	002b      	movs	r3, r5
 8007df6:	f7f9 fe9f 	bl	8001b38 <__aeabi_dmul>
 8007dfa:	0002      	movs	r2, r0
 8007dfc:	000b      	movs	r3, r1
 8007dfe:	0030      	movs	r0, r6
 8007e00:	0039      	movs	r1, r7
 8007e02:	f7fa f90b 	bl	800201c <__aeabi_dsub>
 8007e06:	0004      	movs	r4, r0
 8007e08:	000d      	movs	r5, r1
 8007e0a:	0002      	movs	r2, r0
 8007e0c:	000b      	movs	r3, r1
 8007e0e:	0030      	movs	r0, r6
 8007e10:	0039      	movs	r1, r7
 8007e12:	f7f9 fe91 	bl	8001b38 <__aeabi_dmul>
 8007e16:	2380      	movs	r3, #128	; 0x80
 8007e18:	9006      	str	r0, [sp, #24]
 8007e1a:	9107      	str	r1, [sp, #28]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	05db      	lsls	r3, r3, #23
 8007e20:	0020      	movs	r0, r4
 8007e22:	0029      	movs	r1, r5
 8007e24:	f7fa f8fa 	bl	800201c <__aeabi_dsub>
 8007e28:	0002      	movs	r2, r0
 8007e2a:	000b      	movs	r3, r1
 8007e2c:	9806      	ldr	r0, [sp, #24]
 8007e2e:	9907      	ldr	r1, [sp, #28]
 8007e30:	f7f9 fa78 	bl	8001324 <__aeabi_ddiv>
 8007e34:	9a04      	ldr	r2, [sp, #16]
 8007e36:	9b05      	ldr	r3, [sp, #20]
 8007e38:	0004      	movs	r4, r0
 8007e3a:	000d      	movs	r5, r1
 8007e3c:	0030      	movs	r0, r6
 8007e3e:	0039      	movs	r1, r7
 8007e40:	f7f9 fe7a 	bl	8001b38 <__aeabi_dmul>
 8007e44:	9a04      	ldr	r2, [sp, #16]
 8007e46:	9b05      	ldr	r3, [sp, #20]
 8007e48:	f7f8 ff50 	bl	8000cec <__aeabi_dadd>
 8007e4c:	0002      	movs	r2, r0
 8007e4e:	000b      	movs	r3, r1
 8007e50:	0020      	movs	r0, r4
 8007e52:	0029      	movs	r1, r5
 8007e54:	f7fa f8e2 	bl	800201c <__aeabi_dsub>
 8007e58:	0032      	movs	r2, r6
 8007e5a:	003b      	movs	r3, r7
 8007e5c:	f7fa f8de 	bl	800201c <__aeabi_dsub>
 8007e60:	0002      	movs	r2, r0
 8007e62:	000b      	movs	r3, r1
 8007e64:	2000      	movs	r0, #0
 8007e66:	4930      	ldr	r1, [pc, #192]	; (8007f28 <__ieee754_pow+0x9d8>)
 8007e68:	f7fa f8d8 	bl	800201c <__aeabi_dsub>
 8007e6c:	9b02      	ldr	r3, [sp, #8]
 8007e6e:	051b      	lsls	r3, r3, #20
 8007e70:	185b      	adds	r3, r3, r1
 8007e72:	151a      	asrs	r2, r3, #20
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	dc26      	bgt.n	8007ec6 <__ieee754_pow+0x976>
 8007e78:	9a02      	ldr	r2, [sp, #8]
 8007e7a:	f000 f9ad 	bl	80081d8 <scalbn>
 8007e7e:	9a00      	ldr	r2, [sp, #0]
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	f7ff fc04 	bl	800768e <__ieee754_pow+0x13e>
 8007e86:	4a29      	ldr	r2, [pc, #164]	; (8007f2c <__ieee754_pow+0x9dc>)
 8007e88:	004b      	lsls	r3, r1, #1
 8007e8a:	085b      	lsrs	r3, r3, #1
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	dc00      	bgt.n	8007e92 <__ieee754_pow+0x942>
 8007e90:	e717      	b.n	8007cc2 <__ieee754_pow+0x772>
 8007e92:	4b27      	ldr	r3, [pc, #156]	; (8007f30 <__ieee754_pow+0x9e0>)
 8007e94:	18cb      	adds	r3, r1, r3
 8007e96:	4303      	orrs	r3, r0
 8007e98:	d009      	beq.n	8007eae <__ieee754_pow+0x95e>
 8007e9a:	9800      	ldr	r0, [sp, #0]
 8007e9c:	9901      	ldr	r1, [sp, #4]
 8007e9e:	4a25      	ldr	r2, [pc, #148]	; (8007f34 <__ieee754_pow+0x9e4>)
 8007ea0:	4b25      	ldr	r3, [pc, #148]	; (8007f38 <__ieee754_pow+0x9e8>)
 8007ea2:	f7f9 fe49 	bl	8001b38 <__aeabi_dmul>
 8007ea6:	4a23      	ldr	r2, [pc, #140]	; (8007f34 <__ieee754_pow+0x9e4>)
 8007ea8:	4b23      	ldr	r3, [pc, #140]	; (8007f38 <__ieee754_pow+0x9e8>)
 8007eaa:	f7ff fbf0 	bl	800768e <__ieee754_pow+0x13e>
 8007eae:	0032      	movs	r2, r6
 8007eb0:	003b      	movs	r3, r7
 8007eb2:	f7fa f8b3 	bl	800201c <__aeabi_dsub>
 8007eb6:	9a06      	ldr	r2, [sp, #24]
 8007eb8:	9b07      	ldr	r3, [sp, #28]
 8007eba:	f7f8 facf 	bl	800045c <__aeabi_dcmpge>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d100      	bne.n	8007ec4 <__ieee754_pow+0x974>
 8007ec2:	e6fe      	b.n	8007cc2 <__ieee754_pow+0x772>
 8007ec4:	e7e9      	b.n	8007e9a <__ieee754_pow+0x94a>
 8007ec6:	0019      	movs	r1, r3
 8007ec8:	e7d9      	b.n	8007e7e <__ieee754_pow+0x92e>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	4c16      	ldr	r4, [pc, #88]	; (8007f28 <__ieee754_pow+0x9d8>)
 8007ece:	f7ff fba1 	bl	8007614 <__ieee754_pow+0xc4>
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	652b82fe 	.word	0x652b82fe
 8007ed8:	3c971547 	.word	0x3c971547
 8007edc:	3fe00000 	.word	0x3fe00000
 8007ee0:	fffffc02 	.word	0xfffffc02
 8007ee4:	fffffc01 	.word	0xfffffc01
 8007ee8:	000fffff 	.word	0x000fffff
 8007eec:	3fe62e43 	.word	0x3fe62e43
 8007ef0:	fefa39ef 	.word	0xfefa39ef
 8007ef4:	3fe62e42 	.word	0x3fe62e42
 8007ef8:	0ca86c39 	.word	0x0ca86c39
 8007efc:	be205c61 	.word	0xbe205c61
 8007f00:	72bea4d0 	.word	0x72bea4d0
 8007f04:	3e663769 	.word	0x3e663769
 8007f08:	c5d26bf1 	.word	0xc5d26bf1
 8007f0c:	3ebbbd41 	.word	0x3ebbbd41
 8007f10:	af25de2c 	.word	0xaf25de2c
 8007f14:	3f11566a 	.word	0x3f11566a
 8007f18:	16bebd93 	.word	0x16bebd93
 8007f1c:	3f66c16c 	.word	0x3f66c16c
 8007f20:	5555553e 	.word	0x5555553e
 8007f24:	3fc55555 	.word	0x3fc55555
 8007f28:	3ff00000 	.word	0x3ff00000
 8007f2c:	4090cbff 	.word	0x4090cbff
 8007f30:	3f6f3400 	.word	0x3f6f3400
 8007f34:	c2f8f359 	.word	0xc2f8f359
 8007f38:	01a56e1f 	.word	0x01a56e1f

08007f3c <__ieee754_sqrt>:
 8007f3c:	4b55      	ldr	r3, [pc, #340]	; (8008094 <__ieee754_sqrt+0x158>)
 8007f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f40:	001a      	movs	r2, r3
 8007f42:	0005      	movs	r5, r0
 8007f44:	000c      	movs	r4, r1
 8007f46:	400a      	ands	r2, r1
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d10f      	bne.n	8007f6c <__ieee754_sqrt+0x30>
 8007f4c:	0002      	movs	r2, r0
 8007f4e:	000b      	movs	r3, r1
 8007f50:	f7f9 fdf2 	bl	8001b38 <__aeabi_dmul>
 8007f54:	0002      	movs	r2, r0
 8007f56:	000b      	movs	r3, r1
 8007f58:	0028      	movs	r0, r5
 8007f5a:	0021      	movs	r1, r4
 8007f5c:	f7f8 fec6 	bl	8000cec <__aeabi_dadd>
 8007f60:	0005      	movs	r5, r0
 8007f62:	000c      	movs	r4, r1
 8007f64:	0028      	movs	r0, r5
 8007f66:	0021      	movs	r1, r4
 8007f68:	b003      	add	sp, #12
 8007f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6c:	0002      	movs	r2, r0
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	dc10      	bgt.n	8007f94 <__ieee754_sqrt+0x58>
 8007f72:	004b      	lsls	r3, r1, #1
 8007f74:	085b      	lsrs	r3, r3, #1
 8007f76:	4303      	orrs	r3, r0
 8007f78:	d0f4      	beq.n	8007f64 <__ieee754_sqrt+0x28>
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	4281      	cmp	r1, r0
 8007f7e:	d100      	bne.n	8007f82 <__ieee754_sqrt+0x46>
 8007f80:	e07f      	b.n	8008082 <__ieee754_sqrt+0x146>
 8007f82:	000b      	movs	r3, r1
 8007f84:	0028      	movs	r0, r5
 8007f86:	f7fa f849 	bl	800201c <__aeabi_dsub>
 8007f8a:	0002      	movs	r2, r0
 8007f8c:	000b      	movs	r3, r1
 8007f8e:	f7f9 f9c9 	bl	8001324 <__aeabi_ddiv>
 8007f92:	e7e5      	b.n	8007f60 <__ieee754_sqrt+0x24>
 8007f94:	1508      	asrs	r0, r1, #20
 8007f96:	d074      	beq.n	8008082 <__ieee754_sqrt+0x146>
 8007f98:	4b3f      	ldr	r3, [pc, #252]	; (8008098 <__ieee754_sqrt+0x15c>)
 8007f9a:	0309      	lsls	r1, r1, #12
 8007f9c:	18c0      	adds	r0, r0, r3
 8007f9e:	2380      	movs	r3, #128	; 0x80
 8007fa0:	0b09      	lsrs	r1, r1, #12
 8007fa2:	035b      	lsls	r3, r3, #13
 8007fa4:	4319      	orrs	r1, r3
 8007fa6:	07c3      	lsls	r3, r0, #31
 8007fa8:	d503      	bpl.n	8007fb2 <__ieee754_sqrt+0x76>
 8007faa:	0fd3      	lsrs	r3, r2, #31
 8007fac:	0049      	lsls	r1, r1, #1
 8007fae:	18c9      	adds	r1, r1, r3
 8007fb0:	0052      	lsls	r2, r2, #1
 8007fb2:	2400      	movs	r4, #0
 8007fb4:	1043      	asrs	r3, r0, #1
 8007fb6:	0049      	lsls	r1, r1, #1
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	2580      	movs	r5, #128	; 0x80
 8007fbc:	0fd3      	lsrs	r3, r2, #31
 8007fbe:	18cb      	adds	r3, r1, r3
 8007fc0:	0020      	movs	r0, r4
 8007fc2:	2116      	movs	r1, #22
 8007fc4:	0052      	lsls	r2, r2, #1
 8007fc6:	03ad      	lsls	r5, r5, #14
 8007fc8:	1946      	adds	r6, r0, r5
 8007fca:	429e      	cmp	r6, r3
 8007fcc:	dc02      	bgt.n	8007fd4 <__ieee754_sqrt+0x98>
 8007fce:	1970      	adds	r0, r6, r5
 8007fd0:	1b9b      	subs	r3, r3, r6
 8007fd2:	1964      	adds	r4, r4, r5
 8007fd4:	0fd6      	lsrs	r6, r2, #31
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	3901      	subs	r1, #1
 8007fda:	199b      	adds	r3, r3, r6
 8007fdc:	0052      	lsls	r2, r2, #1
 8007fde:	086d      	lsrs	r5, r5, #1
 8007fe0:	2900      	cmp	r1, #0
 8007fe2:	d1f1      	bne.n	8007fc8 <__ieee754_sqrt+0x8c>
 8007fe4:	2520      	movs	r5, #32
 8007fe6:	2680      	movs	r6, #128	; 0x80
 8007fe8:	46ac      	mov	ip, r5
 8007fea:	9100      	str	r1, [sp, #0]
 8007fec:	0636      	lsls	r6, r6, #24
 8007fee:	9d00      	ldr	r5, [sp, #0]
 8007ff0:	1977      	adds	r7, r6, r5
 8007ff2:	4283      	cmp	r3, r0
 8007ff4:	dc02      	bgt.n	8007ffc <__ieee754_sqrt+0xc0>
 8007ff6:	d112      	bne.n	800801e <__ieee754_sqrt+0xe2>
 8007ff8:	4297      	cmp	r7, r2
 8007ffa:	d810      	bhi.n	800801e <__ieee754_sqrt+0xe2>
 8007ffc:	19bd      	adds	r5, r7, r6
 8007ffe:	9500      	str	r5, [sp, #0]
 8008000:	0005      	movs	r5, r0
 8008002:	2f00      	cmp	r7, #0
 8008004:	da03      	bge.n	800800e <__ieee754_sqrt+0xd2>
 8008006:	9d00      	ldr	r5, [sp, #0]
 8008008:	43ed      	mvns	r5, r5
 800800a:	0fed      	lsrs	r5, r5, #31
 800800c:	1945      	adds	r5, r0, r5
 800800e:	1a1b      	subs	r3, r3, r0
 8008010:	42ba      	cmp	r2, r7
 8008012:	4180      	sbcs	r0, r0
 8008014:	4240      	negs	r0, r0
 8008016:	1a1b      	subs	r3, r3, r0
 8008018:	0028      	movs	r0, r5
 800801a:	1bd2      	subs	r2, r2, r7
 800801c:	1989      	adds	r1, r1, r6
 800801e:	0fd5      	lsrs	r5, r2, #31
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	18eb      	adds	r3, r5, r3
 8008024:	2501      	movs	r5, #1
 8008026:	426d      	negs	r5, r5
 8008028:	44ac      	add	ip, r5
 800802a:	4665      	mov	r5, ip
 800802c:	0052      	lsls	r2, r2, #1
 800802e:	0876      	lsrs	r6, r6, #1
 8008030:	2d00      	cmp	r5, #0
 8008032:	d1dc      	bne.n	8007fee <__ieee754_sqrt+0xb2>
 8008034:	4313      	orrs	r3, r2
 8008036:	d003      	beq.n	8008040 <__ieee754_sqrt+0x104>
 8008038:	1c4b      	adds	r3, r1, #1
 800803a:	d127      	bne.n	800808c <__ieee754_sqrt+0x150>
 800803c:	4661      	mov	r1, ip
 800803e:	3401      	adds	r4, #1
 8008040:	4b16      	ldr	r3, [pc, #88]	; (800809c <__ieee754_sqrt+0x160>)
 8008042:	1060      	asrs	r0, r4, #1
 8008044:	18c0      	adds	r0, r0, r3
 8008046:	0849      	lsrs	r1, r1, #1
 8008048:	07e3      	lsls	r3, r4, #31
 800804a:	d502      	bpl.n	8008052 <__ieee754_sqrt+0x116>
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	061b      	lsls	r3, r3, #24
 8008050:	4319      	orrs	r1, r3
 8008052:	9b01      	ldr	r3, [sp, #4]
 8008054:	000d      	movs	r5, r1
 8008056:	051c      	lsls	r4, r3, #20
 8008058:	1823      	adds	r3, r4, r0
 800805a:	001c      	movs	r4, r3
 800805c:	e782      	b.n	8007f64 <__ieee754_sqrt+0x28>
 800805e:	0ad1      	lsrs	r1, r2, #11
 8008060:	3b15      	subs	r3, #21
 8008062:	0552      	lsls	r2, r2, #21
 8008064:	2900      	cmp	r1, #0
 8008066:	d0fa      	beq.n	800805e <__ieee754_sqrt+0x122>
 8008068:	2480      	movs	r4, #128	; 0x80
 800806a:	0364      	lsls	r4, r4, #13
 800806c:	4221      	tst	r1, r4
 800806e:	d00a      	beq.n	8008086 <__ieee754_sqrt+0x14a>
 8008070:	2420      	movs	r4, #32
 8008072:	0016      	movs	r6, r2
 8008074:	1a24      	subs	r4, r4, r0
 8008076:	40e6      	lsrs	r6, r4
 8008078:	1e45      	subs	r5, r0, #1
 800807a:	4082      	lsls	r2, r0
 800807c:	4331      	orrs	r1, r6
 800807e:	1b58      	subs	r0, r3, r5
 8008080:	e78a      	b.n	8007f98 <__ieee754_sqrt+0x5c>
 8008082:	2300      	movs	r3, #0
 8008084:	e7ee      	b.n	8008064 <__ieee754_sqrt+0x128>
 8008086:	0049      	lsls	r1, r1, #1
 8008088:	3001      	adds	r0, #1
 800808a:	e7ef      	b.n	800806c <__ieee754_sqrt+0x130>
 800808c:	2301      	movs	r3, #1
 800808e:	3101      	adds	r1, #1
 8008090:	4399      	bics	r1, r3
 8008092:	e7d5      	b.n	8008040 <__ieee754_sqrt+0x104>
 8008094:	7ff00000 	.word	0x7ff00000
 8008098:	fffffc01 	.word	0xfffffc01
 800809c:	3fe00000 	.word	0x3fe00000

080080a0 <fabs>:
 80080a0:	0049      	lsls	r1, r1, #1
 80080a2:	084b      	lsrs	r3, r1, #1
 80080a4:	0019      	movs	r1, r3
 80080a6:	4770      	bx	lr

080080a8 <finite>:
 80080a8:	0048      	lsls	r0, r1, #1
 80080aa:	4b02      	ldr	r3, [pc, #8]	; (80080b4 <finite+0xc>)
 80080ac:	0840      	lsrs	r0, r0, #1
 80080ae:	18c0      	adds	r0, r0, r3
 80080b0:	0fc0      	lsrs	r0, r0, #31
 80080b2:	4770      	bx	lr
 80080b4:	80100000 	.word	0x80100000

080080b8 <matherr>:
 80080b8:	2000      	movs	r0, #0
 80080ba:	4770      	bx	lr

080080bc <nan>:
 80080bc:	2000      	movs	r0, #0
 80080be:	4901      	ldr	r1, [pc, #4]	; (80080c4 <nan+0x8>)
 80080c0:	4770      	bx	lr
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	7ff80000 	.word	0x7ff80000

080080c8 <rint>:
 80080c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ca:	004a      	lsls	r2, r1, #1
 80080cc:	4e3e      	ldr	r6, [pc, #248]	; (80081c8 <rint+0x100>)
 80080ce:	0d52      	lsrs	r2, r2, #21
 80080d0:	b085      	sub	sp, #20
 80080d2:	1996      	adds	r6, r2, r6
 80080d4:	000d      	movs	r5, r1
 80080d6:	9101      	str	r1, [sp, #4]
 80080d8:	0003      	movs	r3, r0
 80080da:	0fcc      	lsrs	r4, r1, #31
 80080dc:	2e13      	cmp	r6, #19
 80080de:	dc57      	bgt.n	8008190 <rint+0xc8>
 80080e0:	2e00      	cmp	r6, #0
 80080e2:	da2a      	bge.n	800813a <rint+0x72>
 80080e4:	004a      	lsls	r2, r1, #1
 80080e6:	0852      	lsrs	r2, r2, #1
 80080e8:	4302      	orrs	r2, r0
 80080ea:	d024      	beq.n	8008136 <rint+0x6e>
 80080ec:	030a      	lsls	r2, r1, #12
 80080ee:	0b12      	lsrs	r2, r2, #12
 80080f0:	4302      	orrs	r2, r0
 80080f2:	4253      	negs	r3, r2
 80080f4:	4313      	orrs	r3, r2
 80080f6:	2280      	movs	r2, #128	; 0x80
 80080f8:	0c4d      	lsrs	r5, r1, #17
 80080fa:	0312      	lsls	r2, r2, #12
 80080fc:	0b1b      	lsrs	r3, r3, #12
 80080fe:	4013      	ands	r3, r2
 8008100:	046d      	lsls	r5, r5, #17
 8008102:	432b      	orrs	r3, r5
 8008104:	0019      	movs	r1, r3
 8008106:	4b31      	ldr	r3, [pc, #196]	; (80081cc <rint+0x104>)
 8008108:	00e2      	lsls	r2, r4, #3
 800810a:	189b      	adds	r3, r3, r2
 800810c:	681e      	ldr	r6, [r3, #0]
 800810e:	685f      	ldr	r7, [r3, #4]
 8008110:	0002      	movs	r2, r0
 8008112:	000b      	movs	r3, r1
 8008114:	0030      	movs	r0, r6
 8008116:	0039      	movs	r1, r7
 8008118:	f7f8 fde8 	bl	8000cec <__aeabi_dadd>
 800811c:	9002      	str	r0, [sp, #8]
 800811e:	9103      	str	r1, [sp, #12]
 8008120:	9802      	ldr	r0, [sp, #8]
 8008122:	9903      	ldr	r1, [sp, #12]
 8008124:	003b      	movs	r3, r7
 8008126:	0032      	movs	r2, r6
 8008128:	f7f9 ff78 	bl	800201c <__aeabi_dsub>
 800812c:	004b      	lsls	r3, r1, #1
 800812e:	085b      	lsrs	r3, r3, #1
 8008130:	07e4      	lsls	r4, r4, #31
 8008132:	4323      	orrs	r3, r4
 8008134:	0019      	movs	r1, r3
 8008136:	b005      	add	sp, #20
 8008138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800813a:	4a25      	ldr	r2, [pc, #148]	; (80081d0 <rint+0x108>)
 800813c:	4132      	asrs	r2, r6
 800813e:	0017      	movs	r7, r2
 8008140:	400f      	ands	r7, r1
 8008142:	4307      	orrs	r7, r0
 8008144:	d0f7      	beq.n	8008136 <rint+0x6e>
 8008146:	0852      	lsrs	r2, r2, #1
 8008148:	0011      	movs	r1, r2
 800814a:	4029      	ands	r1, r5
 800814c:	430b      	orrs	r3, r1
 800814e:	d00a      	beq.n	8008166 <rint+0x9e>
 8008150:	2300      	movs	r3, #0
 8008152:	2e13      	cmp	r6, #19
 8008154:	d101      	bne.n	800815a <rint+0x92>
 8008156:	2380      	movs	r3, #128	; 0x80
 8008158:	061b      	lsls	r3, r3, #24
 800815a:	2780      	movs	r7, #128	; 0x80
 800815c:	02ff      	lsls	r7, r7, #11
 800815e:	4137      	asrs	r7, r6
 8008160:	4395      	bics	r5, r2
 8008162:	432f      	orrs	r7, r5
 8008164:	9701      	str	r7, [sp, #4]
 8008166:	9901      	ldr	r1, [sp, #4]
 8008168:	001a      	movs	r2, r3
 800816a:	000b      	movs	r3, r1
 800816c:	4917      	ldr	r1, [pc, #92]	; (80081cc <rint+0x104>)
 800816e:	00e4      	lsls	r4, r4, #3
 8008170:	190c      	adds	r4, r1, r4
 8008172:	6865      	ldr	r5, [r4, #4]
 8008174:	6824      	ldr	r4, [r4, #0]
 8008176:	0020      	movs	r0, r4
 8008178:	0029      	movs	r1, r5
 800817a:	f7f8 fdb7 	bl	8000cec <__aeabi_dadd>
 800817e:	9002      	str	r0, [sp, #8]
 8008180:	9103      	str	r1, [sp, #12]
 8008182:	9802      	ldr	r0, [sp, #8]
 8008184:	9903      	ldr	r1, [sp, #12]
 8008186:	0022      	movs	r2, r4
 8008188:	002b      	movs	r3, r5
 800818a:	f7f9 ff47 	bl	800201c <__aeabi_dsub>
 800818e:	e7d2      	b.n	8008136 <rint+0x6e>
 8008190:	2e33      	cmp	r6, #51	; 0x33
 8008192:	dd08      	ble.n	80081a6 <rint+0xde>
 8008194:	2380      	movs	r3, #128	; 0x80
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	429e      	cmp	r6, r3
 800819a:	d1cc      	bne.n	8008136 <rint+0x6e>
 800819c:	0002      	movs	r2, r0
 800819e:	000b      	movs	r3, r1
 80081a0:	f7f8 fda4 	bl	8000cec <__aeabi_dadd>
 80081a4:	e7c7      	b.n	8008136 <rint+0x6e>
 80081a6:	2601      	movs	r6, #1
 80081a8:	4d0a      	ldr	r5, [pc, #40]	; (80081d4 <rint+0x10c>)
 80081aa:	4276      	negs	r6, r6
 80081ac:	1952      	adds	r2, r2, r5
 80081ae:	40d6      	lsrs	r6, r2
 80081b0:	4206      	tst	r6, r0
 80081b2:	d0c0      	beq.n	8008136 <rint+0x6e>
 80081b4:	0876      	lsrs	r6, r6, #1
 80081b6:	4206      	tst	r6, r0
 80081b8:	d0d5      	beq.n	8008166 <rint+0x9e>
 80081ba:	2180      	movs	r1, #128	; 0x80
 80081bc:	05c9      	lsls	r1, r1, #23
 80081be:	4111      	asrs	r1, r2
 80081c0:	43b3      	bics	r3, r6
 80081c2:	430b      	orrs	r3, r1
 80081c4:	e7cf      	b.n	8008166 <rint+0x9e>
 80081c6:	46c0      	nop			; (mov r8, r8)
 80081c8:	fffffc01 	.word	0xfffffc01
 80081cc:	08009108 	.word	0x08009108
 80081d0:	000fffff 	.word	0x000fffff
 80081d4:	fffffbed 	.word	0xfffffbed

080081d8 <scalbn>:
 80081d8:	004b      	lsls	r3, r1, #1
 80081da:	b570      	push	{r4, r5, r6, lr}
 80081dc:	0d5b      	lsrs	r3, r3, #21
 80081de:	0014      	movs	r4, r2
 80081e0:	000a      	movs	r2, r1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10d      	bne.n	8008202 <scalbn+0x2a>
 80081e6:	004b      	lsls	r3, r1, #1
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	4303      	orrs	r3, r0
 80081ec:	d010      	beq.n	8008210 <scalbn+0x38>
 80081ee:	4b21      	ldr	r3, [pc, #132]	; (8008274 <scalbn+0x9c>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	f7f9 fca1 	bl	8001b38 <__aeabi_dmul>
 80081f6:	4b20      	ldr	r3, [pc, #128]	; (8008278 <scalbn+0xa0>)
 80081f8:	429c      	cmp	r4, r3
 80081fa:	da0a      	bge.n	8008212 <scalbn+0x3a>
 80081fc:	4a1f      	ldr	r2, [pc, #124]	; (800827c <scalbn+0xa4>)
 80081fe:	4b20      	ldr	r3, [pc, #128]	; (8008280 <scalbn+0xa8>)
 8008200:	e017      	b.n	8008232 <scalbn+0x5a>
 8008202:	4d20      	ldr	r5, [pc, #128]	; (8008284 <scalbn+0xac>)
 8008204:	42ab      	cmp	r3, r5
 8008206:	d108      	bne.n	800821a <scalbn+0x42>
 8008208:	0002      	movs	r2, r0
 800820a:	000b      	movs	r3, r1
 800820c:	f7f8 fd6e 	bl	8000cec <__aeabi_dadd>
 8008210:	bd70      	pop	{r4, r5, r6, pc}
 8008212:	000a      	movs	r2, r1
 8008214:	004b      	lsls	r3, r1, #1
 8008216:	0d5b      	lsrs	r3, r3, #21
 8008218:	3b36      	subs	r3, #54	; 0x36
 800821a:	4d1b      	ldr	r5, [pc, #108]	; (8008288 <scalbn+0xb0>)
 800821c:	18e3      	adds	r3, r4, r3
 800821e:	42ab      	cmp	r3, r5
 8008220:	dd0a      	ble.n	8008238 <scalbn+0x60>
 8008222:	0002      	movs	r2, r0
 8008224:	000b      	movs	r3, r1
 8008226:	4819      	ldr	r0, [pc, #100]	; (800828c <scalbn+0xb4>)
 8008228:	4919      	ldr	r1, [pc, #100]	; (8008290 <scalbn+0xb8>)
 800822a:	f000 f9eb 	bl	8008604 <copysign>
 800822e:	4a17      	ldr	r2, [pc, #92]	; (800828c <scalbn+0xb4>)
 8008230:	4b17      	ldr	r3, [pc, #92]	; (8008290 <scalbn+0xb8>)
 8008232:	f7f9 fc81 	bl	8001b38 <__aeabi_dmul>
 8008236:	e7eb      	b.n	8008210 <scalbn+0x38>
 8008238:	2b00      	cmp	r3, #0
 800823a:	dd05      	ble.n	8008248 <scalbn+0x70>
 800823c:	4c15      	ldr	r4, [pc, #84]	; (8008294 <scalbn+0xbc>)
 800823e:	051b      	lsls	r3, r3, #20
 8008240:	4022      	ands	r2, r4
 8008242:	431a      	orrs	r2, r3
 8008244:	0011      	movs	r1, r2
 8008246:	e7e3      	b.n	8008210 <scalbn+0x38>
 8008248:	001d      	movs	r5, r3
 800824a:	3535      	adds	r5, #53	; 0x35
 800824c:	da09      	bge.n	8008262 <scalbn+0x8a>
 800824e:	4b12      	ldr	r3, [pc, #72]	; (8008298 <scalbn+0xc0>)
 8008250:	0002      	movs	r2, r0
 8008252:	429c      	cmp	r4, r3
 8008254:	dce6      	bgt.n	8008224 <scalbn+0x4c>
 8008256:	000b      	movs	r3, r1
 8008258:	4808      	ldr	r0, [pc, #32]	; (800827c <scalbn+0xa4>)
 800825a:	4909      	ldr	r1, [pc, #36]	; (8008280 <scalbn+0xa8>)
 800825c:	f000 f9d2 	bl	8008604 <copysign>
 8008260:	e7cc      	b.n	80081fc <scalbn+0x24>
 8008262:	4c0c      	ldr	r4, [pc, #48]	; (8008294 <scalbn+0xbc>)
 8008264:	3336      	adds	r3, #54	; 0x36
 8008266:	4022      	ands	r2, r4
 8008268:	051b      	lsls	r3, r3, #20
 800826a:	4313      	orrs	r3, r2
 800826c:	0019      	movs	r1, r3
 800826e:	2200      	movs	r2, #0
 8008270:	4b0a      	ldr	r3, [pc, #40]	; (800829c <scalbn+0xc4>)
 8008272:	e7de      	b.n	8008232 <scalbn+0x5a>
 8008274:	43500000 	.word	0x43500000
 8008278:	ffff3cb0 	.word	0xffff3cb0
 800827c:	c2f8f359 	.word	0xc2f8f359
 8008280:	01a56e1f 	.word	0x01a56e1f
 8008284:	000007ff 	.word	0x000007ff
 8008288:	000007fe 	.word	0x000007fe
 800828c:	8800759c 	.word	0x8800759c
 8008290:	7e37e43c 	.word	0x7e37e43c
 8008294:	800fffff 	.word	0x800fffff
 8008298:	0000c350 	.word	0x0000c350
 800829c:	3c900000 	.word	0x3c900000

080082a0 <__ieee754_log>:
 80082a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082a2:	4bba      	ldr	r3, [pc, #744]	; (800858c <__ieee754_log+0x2ec>)
 80082a4:	b08d      	sub	sp, #52	; 0x34
 80082a6:	000e      	movs	r6, r1
 80082a8:	4299      	cmp	r1, r3
 80082aa:	dc23      	bgt.n	80082f4 <__ieee754_log+0x54>
 80082ac:	004b      	lsls	r3, r1, #1
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	4303      	orrs	r3, r0
 80082b2:	d107      	bne.n	80082c4 <__ieee754_log+0x24>
 80082b4:	2200      	movs	r2, #0
 80082b6:	2300      	movs	r3, #0
 80082b8:	2000      	movs	r0, #0
 80082ba:	49b5      	ldr	r1, [pc, #724]	; (8008590 <__ieee754_log+0x2f0>)
 80082bc:	f7f9 f832 	bl	8001324 <__aeabi_ddiv>
 80082c0:	b00d      	add	sp, #52	; 0x34
 80082c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c4:	2900      	cmp	r1, #0
 80082c6:	da06      	bge.n	80082d6 <__ieee754_log+0x36>
 80082c8:	0002      	movs	r2, r0
 80082ca:	000b      	movs	r3, r1
 80082cc:	f7f9 fea6 	bl	800201c <__aeabi_dsub>
 80082d0:	2200      	movs	r2, #0
 80082d2:	2300      	movs	r3, #0
 80082d4:	e7f2      	b.n	80082bc <__ieee754_log+0x1c>
 80082d6:	4baf      	ldr	r3, [pc, #700]	; (8008594 <__ieee754_log+0x2f4>)
 80082d8:	2200      	movs	r2, #0
 80082da:	f7f9 fc2d 	bl	8001b38 <__aeabi_dmul>
 80082de:	2336      	movs	r3, #54	; 0x36
 80082e0:	000e      	movs	r6, r1
 80082e2:	425b      	negs	r3, r3
 80082e4:	4aac      	ldr	r2, [pc, #688]	; (8008598 <__ieee754_log+0x2f8>)
 80082e6:	4296      	cmp	r6, r2
 80082e8:	dd06      	ble.n	80082f8 <__ieee754_log+0x58>
 80082ea:	0002      	movs	r2, r0
 80082ec:	000b      	movs	r3, r1
 80082ee:	f7f8 fcfd 	bl	8000cec <__aeabi_dadd>
 80082f2:	e7e5      	b.n	80082c0 <__ieee754_log+0x20>
 80082f4:	2300      	movs	r3, #0
 80082f6:	e7f5      	b.n	80082e4 <__ieee754_log+0x44>
 80082f8:	4ca8      	ldr	r4, [pc, #672]	; (800859c <__ieee754_log+0x2fc>)
 80082fa:	1532      	asrs	r2, r6, #20
 80082fc:	1912      	adds	r2, r2, r4
 80082fe:	0336      	lsls	r6, r6, #12
 8008300:	4ca7      	ldr	r4, [pc, #668]	; (80085a0 <__ieee754_log+0x300>)
 8008302:	18d2      	adds	r2, r2, r3
 8008304:	0b33      	lsrs	r3, r6, #12
 8008306:	9302      	str	r3, [sp, #8]
 8008308:	191c      	adds	r4, r3, r4
 800830a:	2380      	movs	r3, #128	; 0x80
 800830c:	035b      	lsls	r3, r3, #13
 800830e:	4023      	ands	r3, r4
 8008310:	4ca4      	ldr	r4, [pc, #656]	; (80085a4 <__ieee754_log+0x304>)
 8008312:	9d02      	ldr	r5, [sp, #8]
 8008314:	405c      	eors	r4, r3
 8008316:	151b      	asrs	r3, r3, #20
 8008318:	189b      	adds	r3, r3, r2
 800831a:	4325      	orrs	r5, r4
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2200      	movs	r2, #0
 8008320:	4ba0      	ldr	r3, [pc, #640]	; (80085a4 <__ieee754_log+0x304>)
 8008322:	0029      	movs	r1, r5
 8008324:	f7f9 fe7a 	bl	800201c <__aeabi_dsub>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	0006      	movs	r6, r0
 800832c:	3302      	adds	r3, #2
 800832e:	031b      	lsls	r3, r3, #12
 8008330:	000f      	movs	r7, r1
 8008332:	0b1b      	lsrs	r3, r3, #12
 8008334:	2200      	movs	r2, #0
 8008336:	2b02      	cmp	r3, #2
 8008338:	dc64      	bgt.n	8008404 <__ieee754_log+0x164>
 800833a:	2300      	movs	r3, #0
 800833c:	f7f8 f86a 	bl	8000414 <__aeabi_dcmpeq>
 8008340:	2800      	cmp	r0, #0
 8008342:	d019      	beq.n	8008378 <__ieee754_log+0xd8>
 8008344:	9b00      	ldr	r3, [sp, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d100      	bne.n	800834c <__ieee754_log+0xac>
 800834a:	e11c      	b.n	8008586 <__ieee754_log+0x2e6>
 800834c:	0018      	movs	r0, r3
 800834e:	f7fa f9ff 	bl	8002750 <__aeabi_i2d>
 8008352:	4a95      	ldr	r2, [pc, #596]	; (80085a8 <__ieee754_log+0x308>)
 8008354:	4b95      	ldr	r3, [pc, #596]	; (80085ac <__ieee754_log+0x30c>)
 8008356:	0004      	movs	r4, r0
 8008358:	000d      	movs	r5, r1
 800835a:	f7f9 fbed 	bl	8001b38 <__aeabi_dmul>
 800835e:	4a94      	ldr	r2, [pc, #592]	; (80085b0 <__ieee754_log+0x310>)
 8008360:	0006      	movs	r6, r0
 8008362:	000f      	movs	r7, r1
 8008364:	4b93      	ldr	r3, [pc, #588]	; (80085b4 <__ieee754_log+0x314>)
 8008366:	0020      	movs	r0, r4
 8008368:	0029      	movs	r1, r5
 800836a:	f7f9 fbe5 	bl	8001b38 <__aeabi_dmul>
 800836e:	0002      	movs	r2, r0
 8008370:	000b      	movs	r3, r1
 8008372:	0030      	movs	r0, r6
 8008374:	0039      	movs	r1, r7
 8008376:	e7ba      	b.n	80082ee <__ieee754_log+0x4e>
 8008378:	4a8f      	ldr	r2, [pc, #572]	; (80085b8 <__ieee754_log+0x318>)
 800837a:	4b90      	ldr	r3, [pc, #576]	; (80085bc <__ieee754_log+0x31c>)
 800837c:	0030      	movs	r0, r6
 800837e:	0039      	movs	r1, r7
 8008380:	f7f9 fbda 	bl	8001b38 <__aeabi_dmul>
 8008384:	0002      	movs	r2, r0
 8008386:	000b      	movs	r3, r1
 8008388:	2000      	movs	r0, #0
 800838a:	498d      	ldr	r1, [pc, #564]	; (80085c0 <__ieee754_log+0x320>)
 800838c:	f7f9 fe46 	bl	800201c <__aeabi_dsub>
 8008390:	0032      	movs	r2, r6
 8008392:	0004      	movs	r4, r0
 8008394:	000d      	movs	r5, r1
 8008396:	003b      	movs	r3, r7
 8008398:	0030      	movs	r0, r6
 800839a:	0039      	movs	r1, r7
 800839c:	f7f9 fbcc 	bl	8001b38 <__aeabi_dmul>
 80083a0:	000b      	movs	r3, r1
 80083a2:	0002      	movs	r2, r0
 80083a4:	0029      	movs	r1, r5
 80083a6:	0020      	movs	r0, r4
 80083a8:	f7f9 fbc6 	bl	8001b38 <__aeabi_dmul>
 80083ac:	9b00      	ldr	r3, [sp, #0]
 80083ae:	9002      	str	r0, [sp, #8]
 80083b0:	9103      	str	r1, [sp, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <__ieee754_log+0x124>
 80083b6:	0002      	movs	r2, r0
 80083b8:	000b      	movs	r3, r1
 80083ba:	0030      	movs	r0, r6
 80083bc:	0039      	movs	r1, r7
 80083be:	f7f9 fe2d 	bl	800201c <__aeabi_dsub>
 80083c2:	e77d      	b.n	80082c0 <__ieee754_log+0x20>
 80083c4:	9800      	ldr	r0, [sp, #0]
 80083c6:	f7fa f9c3 	bl	8002750 <__aeabi_i2d>
 80083ca:	4a77      	ldr	r2, [pc, #476]	; (80085a8 <__ieee754_log+0x308>)
 80083cc:	4b77      	ldr	r3, [pc, #476]	; (80085ac <__ieee754_log+0x30c>)
 80083ce:	0004      	movs	r4, r0
 80083d0:	000d      	movs	r5, r1
 80083d2:	f7f9 fbb1 	bl	8001b38 <__aeabi_dmul>
 80083d6:	4a76      	ldr	r2, [pc, #472]	; (80085b0 <__ieee754_log+0x310>)
 80083d8:	9000      	str	r0, [sp, #0]
 80083da:	9101      	str	r1, [sp, #4]
 80083dc:	4b75      	ldr	r3, [pc, #468]	; (80085b4 <__ieee754_log+0x314>)
 80083de:	0020      	movs	r0, r4
 80083e0:	0029      	movs	r1, r5
 80083e2:	f7f9 fba9 	bl	8001b38 <__aeabi_dmul>
 80083e6:	0002      	movs	r2, r0
 80083e8:	000b      	movs	r3, r1
 80083ea:	9802      	ldr	r0, [sp, #8]
 80083ec:	9903      	ldr	r1, [sp, #12]
 80083ee:	f7f9 fe15 	bl	800201c <__aeabi_dsub>
 80083f2:	0032      	movs	r2, r6
 80083f4:	003b      	movs	r3, r7
 80083f6:	f7f9 fe11 	bl	800201c <__aeabi_dsub>
 80083fa:	0002      	movs	r2, r0
 80083fc:	000b      	movs	r3, r1
 80083fe:	9800      	ldr	r0, [sp, #0]
 8008400:	9901      	ldr	r1, [sp, #4]
 8008402:	e7dc      	b.n	80083be <__ieee754_log+0x11e>
 8008404:	2380      	movs	r3, #128	; 0x80
 8008406:	05db      	lsls	r3, r3, #23
 8008408:	f7f8 fc70 	bl	8000cec <__aeabi_dadd>
 800840c:	0002      	movs	r2, r0
 800840e:	000b      	movs	r3, r1
 8008410:	0030      	movs	r0, r6
 8008412:	0039      	movs	r1, r7
 8008414:	f7f8 ff86 	bl	8001324 <__aeabi_ddiv>
 8008418:	9004      	str	r0, [sp, #16]
 800841a:	9105      	str	r1, [sp, #20]
 800841c:	9800      	ldr	r0, [sp, #0]
 800841e:	f7fa f997 	bl	8002750 <__aeabi_i2d>
 8008422:	9a04      	ldr	r2, [sp, #16]
 8008424:	9b05      	ldr	r3, [sp, #20]
 8008426:	9006      	str	r0, [sp, #24]
 8008428:	9107      	str	r1, [sp, #28]
 800842a:	0010      	movs	r0, r2
 800842c:	0019      	movs	r1, r3
 800842e:	f7f9 fb83 	bl	8001b38 <__aeabi_dmul>
 8008432:	4a64      	ldr	r2, [pc, #400]	; (80085c4 <__ieee754_log+0x324>)
 8008434:	9b02      	ldr	r3, [sp, #8]
 8008436:	4694      	mov	ip, r2
 8008438:	4463      	add	r3, ip
 800843a:	930b      	str	r3, [sp, #44]	; 0x2c
 800843c:	0002      	movs	r2, r0
 800843e:	000b      	movs	r3, r1
 8008440:	9008      	str	r0, [sp, #32]
 8008442:	9109      	str	r1, [sp, #36]	; 0x24
 8008444:	f7f9 fb78 	bl	8001b38 <__aeabi_dmul>
 8008448:	0004      	movs	r4, r0
 800844a:	000d      	movs	r5, r1
 800844c:	4a5e      	ldr	r2, [pc, #376]	; (80085c8 <__ieee754_log+0x328>)
 800844e:	4b5f      	ldr	r3, [pc, #380]	; (80085cc <__ieee754_log+0x32c>)
 8008450:	f7f9 fb72 	bl	8001b38 <__aeabi_dmul>
 8008454:	4a5e      	ldr	r2, [pc, #376]	; (80085d0 <__ieee754_log+0x330>)
 8008456:	4b5f      	ldr	r3, [pc, #380]	; (80085d4 <__ieee754_log+0x334>)
 8008458:	f7f8 fc48 	bl	8000cec <__aeabi_dadd>
 800845c:	0022      	movs	r2, r4
 800845e:	002b      	movs	r3, r5
 8008460:	f7f9 fb6a 	bl	8001b38 <__aeabi_dmul>
 8008464:	4a5c      	ldr	r2, [pc, #368]	; (80085d8 <__ieee754_log+0x338>)
 8008466:	4b5d      	ldr	r3, [pc, #372]	; (80085dc <__ieee754_log+0x33c>)
 8008468:	f7f8 fc40 	bl	8000cec <__aeabi_dadd>
 800846c:	0022      	movs	r2, r4
 800846e:	002b      	movs	r3, r5
 8008470:	f7f9 fb62 	bl	8001b38 <__aeabi_dmul>
 8008474:	4a5a      	ldr	r2, [pc, #360]	; (80085e0 <__ieee754_log+0x340>)
 8008476:	4b5b      	ldr	r3, [pc, #364]	; (80085e4 <__ieee754_log+0x344>)
 8008478:	f7f8 fc38 	bl	8000cec <__aeabi_dadd>
 800847c:	9a08      	ldr	r2, [sp, #32]
 800847e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008480:	f7f9 fb5a 	bl	8001b38 <__aeabi_dmul>
 8008484:	4a58      	ldr	r2, [pc, #352]	; (80085e8 <__ieee754_log+0x348>)
 8008486:	9008      	str	r0, [sp, #32]
 8008488:	9109      	str	r1, [sp, #36]	; 0x24
 800848a:	4b58      	ldr	r3, [pc, #352]	; (80085ec <__ieee754_log+0x34c>)
 800848c:	0020      	movs	r0, r4
 800848e:	0029      	movs	r1, r5
 8008490:	f7f9 fb52 	bl	8001b38 <__aeabi_dmul>
 8008494:	4a56      	ldr	r2, [pc, #344]	; (80085f0 <__ieee754_log+0x350>)
 8008496:	4b57      	ldr	r3, [pc, #348]	; (80085f4 <__ieee754_log+0x354>)
 8008498:	f7f8 fc28 	bl	8000cec <__aeabi_dadd>
 800849c:	0022      	movs	r2, r4
 800849e:	002b      	movs	r3, r5
 80084a0:	f7f9 fb4a 	bl	8001b38 <__aeabi_dmul>
 80084a4:	4a54      	ldr	r2, [pc, #336]	; (80085f8 <__ieee754_log+0x358>)
 80084a6:	4b55      	ldr	r3, [pc, #340]	; (80085fc <__ieee754_log+0x35c>)
 80084a8:	f7f8 fc20 	bl	8000cec <__aeabi_dadd>
 80084ac:	0022      	movs	r2, r4
 80084ae:	002b      	movs	r3, r5
 80084b0:	f7f9 fb42 	bl	8001b38 <__aeabi_dmul>
 80084b4:	0002      	movs	r2, r0
 80084b6:	000b      	movs	r3, r1
 80084b8:	9808      	ldr	r0, [sp, #32]
 80084ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084bc:	f7f8 fc16 	bl	8000cec <__aeabi_dadd>
 80084c0:	9a02      	ldr	r2, [sp, #8]
 80084c2:	4b4f      	ldr	r3, [pc, #316]	; (8008600 <__ieee754_log+0x360>)
 80084c4:	0004      	movs	r4, r0
 80084c6:	1a9b      	subs	r3, r3, r2
 80084c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084ca:	000d      	movs	r5, r1
 80084cc:	4313      	orrs	r3, r2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd34      	ble.n	800853c <__ieee754_log+0x29c>
 80084d2:	2200      	movs	r2, #0
 80084d4:	4b3a      	ldr	r3, [pc, #232]	; (80085c0 <__ieee754_log+0x320>)
 80084d6:	0030      	movs	r0, r6
 80084d8:	0039      	movs	r1, r7
 80084da:	f7f9 fb2d 	bl	8001b38 <__aeabi_dmul>
 80084de:	0032      	movs	r2, r6
 80084e0:	003b      	movs	r3, r7
 80084e2:	f7f9 fb29 	bl	8001b38 <__aeabi_dmul>
 80084e6:	9002      	str	r0, [sp, #8]
 80084e8:	9103      	str	r1, [sp, #12]
 80084ea:	0002      	movs	r2, r0
 80084ec:	000b      	movs	r3, r1
 80084ee:	0020      	movs	r0, r4
 80084f0:	0029      	movs	r1, r5
 80084f2:	f7f8 fbfb 	bl	8000cec <__aeabi_dadd>
 80084f6:	9a04      	ldr	r2, [sp, #16]
 80084f8:	9b05      	ldr	r3, [sp, #20]
 80084fa:	f7f9 fb1d 	bl	8001b38 <__aeabi_dmul>
 80084fe:	9b00      	ldr	r3, [sp, #0]
 8008500:	0004      	movs	r4, r0
 8008502:	000d      	movs	r5, r1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d106      	bne.n	8008516 <__ieee754_log+0x276>
 8008508:	0002      	movs	r2, r0
 800850a:	000b      	movs	r3, r1
 800850c:	9802      	ldr	r0, [sp, #8]
 800850e:	9903      	ldr	r1, [sp, #12]
 8008510:	f7f9 fd84 	bl	800201c <__aeabi_dsub>
 8008514:	e74f      	b.n	80083b6 <__ieee754_log+0x116>
 8008516:	4a24      	ldr	r2, [pc, #144]	; (80085a8 <__ieee754_log+0x308>)
 8008518:	4b24      	ldr	r3, [pc, #144]	; (80085ac <__ieee754_log+0x30c>)
 800851a:	9806      	ldr	r0, [sp, #24]
 800851c:	9907      	ldr	r1, [sp, #28]
 800851e:	f7f9 fb0b 	bl	8001b38 <__aeabi_dmul>
 8008522:	4a23      	ldr	r2, [pc, #140]	; (80085b0 <__ieee754_log+0x310>)
 8008524:	9000      	str	r0, [sp, #0]
 8008526:	9101      	str	r1, [sp, #4]
 8008528:	9806      	ldr	r0, [sp, #24]
 800852a:	9907      	ldr	r1, [sp, #28]
 800852c:	4b21      	ldr	r3, [pc, #132]	; (80085b4 <__ieee754_log+0x314>)
 800852e:	f7f9 fb03 	bl	8001b38 <__aeabi_dmul>
 8008532:	0022      	movs	r2, r4
 8008534:	002b      	movs	r3, r5
 8008536:	f7f8 fbd9 	bl	8000cec <__aeabi_dadd>
 800853a:	e754      	b.n	80083e6 <__ieee754_log+0x146>
 800853c:	0002      	movs	r2, r0
 800853e:	000b      	movs	r3, r1
 8008540:	0030      	movs	r0, r6
 8008542:	0039      	movs	r1, r7
 8008544:	f7f9 fd6a 	bl	800201c <__aeabi_dsub>
 8008548:	9a04      	ldr	r2, [sp, #16]
 800854a:	9b05      	ldr	r3, [sp, #20]
 800854c:	f7f9 faf4 	bl	8001b38 <__aeabi_dmul>
 8008550:	9b00      	ldr	r3, [sp, #0]
 8008552:	0004      	movs	r4, r0
 8008554:	000d      	movs	r5, r1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <__ieee754_log+0x2c0>
 800855a:	0002      	movs	r2, r0
 800855c:	000b      	movs	r3, r1
 800855e:	e72c      	b.n	80083ba <__ieee754_log+0x11a>
 8008560:	4a11      	ldr	r2, [pc, #68]	; (80085a8 <__ieee754_log+0x308>)
 8008562:	4b12      	ldr	r3, [pc, #72]	; (80085ac <__ieee754_log+0x30c>)
 8008564:	9806      	ldr	r0, [sp, #24]
 8008566:	9907      	ldr	r1, [sp, #28]
 8008568:	f7f9 fae6 	bl	8001b38 <__aeabi_dmul>
 800856c:	4a10      	ldr	r2, [pc, #64]	; (80085b0 <__ieee754_log+0x310>)
 800856e:	9000      	str	r0, [sp, #0]
 8008570:	9101      	str	r1, [sp, #4]
 8008572:	9806      	ldr	r0, [sp, #24]
 8008574:	9907      	ldr	r1, [sp, #28]
 8008576:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <__ieee754_log+0x314>)
 8008578:	f7f9 fade 	bl	8001b38 <__aeabi_dmul>
 800857c:	0002      	movs	r2, r0
 800857e:	000b      	movs	r3, r1
 8008580:	0020      	movs	r0, r4
 8008582:	0029      	movs	r1, r5
 8008584:	e733      	b.n	80083ee <__ieee754_log+0x14e>
 8008586:	2000      	movs	r0, #0
 8008588:	2100      	movs	r1, #0
 800858a:	e699      	b.n	80082c0 <__ieee754_log+0x20>
 800858c:	000fffff 	.word	0x000fffff
 8008590:	c3500000 	.word	0xc3500000
 8008594:	43500000 	.word	0x43500000
 8008598:	7fefffff 	.word	0x7fefffff
 800859c:	fffffc01 	.word	0xfffffc01
 80085a0:	00095f64 	.word	0x00095f64
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	fee00000 	.word	0xfee00000
 80085ac:	3fe62e42 	.word	0x3fe62e42
 80085b0:	35793c76 	.word	0x35793c76
 80085b4:	3dea39ef 	.word	0x3dea39ef
 80085b8:	55555555 	.word	0x55555555
 80085bc:	3fd55555 	.word	0x3fd55555
 80085c0:	3fe00000 	.word	0x3fe00000
 80085c4:	fff9eb86 	.word	0xfff9eb86
 80085c8:	df3e5244 	.word	0xdf3e5244
 80085cc:	3fc2f112 	.word	0x3fc2f112
 80085d0:	96cb03de 	.word	0x96cb03de
 80085d4:	3fc74664 	.word	0x3fc74664
 80085d8:	94229359 	.word	0x94229359
 80085dc:	3fd24924 	.word	0x3fd24924
 80085e0:	55555593 	.word	0x55555593
 80085e4:	3fe55555 	.word	0x3fe55555
 80085e8:	d078c69f 	.word	0xd078c69f
 80085ec:	3fc39a09 	.word	0x3fc39a09
 80085f0:	1d8e78af 	.word	0x1d8e78af
 80085f4:	3fcc71c5 	.word	0x3fcc71c5
 80085f8:	9997fa04 	.word	0x9997fa04
 80085fc:	3fd99999 	.word	0x3fd99999
 8008600:	0006b851 	.word	0x0006b851

08008604 <copysign>:
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	004a      	lsls	r2, r1, #1
 8008608:	0fdb      	lsrs	r3, r3, #31
 800860a:	07db      	lsls	r3, r3, #31
 800860c:	0852      	lsrs	r2, r2, #1
 800860e:	431a      	orrs	r2, r3
 8008610:	0011      	movs	r1, r2
 8008612:	bd30      	pop	{r4, r5, pc}

08008614 <__errno>:
 8008614:	4b01      	ldr	r3, [pc, #4]	; (800861c <__errno+0x8>)
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	4770      	bx	lr
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	20000010 	.word	0x20000010

08008620 <__libc_init_array>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	2600      	movs	r6, #0
 8008624:	4d0c      	ldr	r5, [pc, #48]	; (8008658 <__libc_init_array+0x38>)
 8008626:	4c0d      	ldr	r4, [pc, #52]	; (800865c <__libc_init_array+0x3c>)
 8008628:	1b64      	subs	r4, r4, r5
 800862a:	10a4      	asrs	r4, r4, #2
 800862c:	42a6      	cmp	r6, r4
 800862e:	d109      	bne.n	8008644 <__libc_init_array+0x24>
 8008630:	2600      	movs	r6, #0
 8008632:	f000 f8d9 	bl	80087e8 <_init>
 8008636:	4d0a      	ldr	r5, [pc, #40]	; (8008660 <__libc_init_array+0x40>)
 8008638:	4c0a      	ldr	r4, [pc, #40]	; (8008664 <__libc_init_array+0x44>)
 800863a:	1b64      	subs	r4, r4, r5
 800863c:	10a4      	asrs	r4, r4, #2
 800863e:	42a6      	cmp	r6, r4
 8008640:	d105      	bne.n	800864e <__libc_init_array+0x2e>
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	00b3      	lsls	r3, r6, #2
 8008646:	58eb      	ldr	r3, [r5, r3]
 8008648:	4798      	blx	r3
 800864a:	3601      	adds	r6, #1
 800864c:	e7ee      	b.n	800862c <__libc_init_array+0xc>
 800864e:	00b3      	lsls	r3, r6, #2
 8008650:	58eb      	ldr	r3, [r5, r3]
 8008652:	4798      	blx	r3
 8008654:	3601      	adds	r6, #1
 8008656:	e7f2      	b.n	800863e <__libc_init_array+0x1e>
 8008658:	08009118 	.word	0x08009118
 800865c:	08009118 	.word	0x08009118
 8008660:	08009118 	.word	0x08009118
 8008664:	0800911c 	.word	0x0800911c

08008668 <memcpy>:
 8008668:	2300      	movs	r3, #0
 800866a:	b510      	push	{r4, lr}
 800866c:	429a      	cmp	r2, r3
 800866e:	d100      	bne.n	8008672 <memcpy+0xa>
 8008670:	bd10      	pop	{r4, pc}
 8008672:	5ccc      	ldrb	r4, [r1, r3]
 8008674:	54c4      	strb	r4, [r0, r3]
 8008676:	3301      	adds	r3, #1
 8008678:	e7f8      	b.n	800866c <memcpy+0x4>

0800867a <memset>:
 800867a:	0003      	movs	r3, r0
 800867c:	1812      	adds	r2, r2, r0
 800867e:	4293      	cmp	r3, r2
 8008680:	d100      	bne.n	8008684 <memset+0xa>
 8008682:	4770      	bx	lr
 8008684:	7019      	strb	r1, [r3, #0]
 8008686:	3301      	adds	r3, #1
 8008688:	e7f9      	b.n	800867e <memset+0x4>
	...

0800868c <rand>:
 800868c:	4b12      	ldr	r3, [pc, #72]	; (80086d8 <rand+0x4c>)
 800868e:	b510      	push	{r4, lr}
 8008690:	681c      	ldr	r4, [r3, #0]
 8008692:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10f      	bne.n	80086b8 <rand+0x2c>
 8008698:	2018      	movs	r0, #24
 800869a:	f000 f829 	bl	80086f0 <malloc>
 800869e:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <rand+0x50>)
 80086a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80086a2:	6003      	str	r3, [r0, #0]
 80086a4:	4b0e      	ldr	r3, [pc, #56]	; (80086e0 <rand+0x54>)
 80086a6:	2201      	movs	r2, #1
 80086a8:	6043      	str	r3, [r0, #4]
 80086aa:	4b0e      	ldr	r3, [pc, #56]	; (80086e4 <rand+0x58>)
 80086ac:	6083      	str	r3, [r0, #8]
 80086ae:	230b      	movs	r3, #11
 80086b0:	8183      	strh	r3, [r0, #12]
 80086b2:	2300      	movs	r3, #0
 80086b4:	6102      	str	r2, [r0, #16]
 80086b6:	6143      	str	r3, [r0, #20]
 80086b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80086ba:	4a0b      	ldr	r2, [pc, #44]	; (80086e8 <rand+0x5c>)
 80086bc:	6920      	ldr	r0, [r4, #16]
 80086be:	6961      	ldr	r1, [r4, #20]
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <rand+0x60>)
 80086c2:	f7f7 ff0f 	bl	80004e4 <__aeabi_lmul>
 80086c6:	2201      	movs	r2, #1
 80086c8:	2300      	movs	r3, #0
 80086ca:	1880      	adds	r0, r0, r2
 80086cc:	4159      	adcs	r1, r3
 80086ce:	6120      	str	r0, [r4, #16]
 80086d0:	6161      	str	r1, [r4, #20]
 80086d2:	0048      	lsls	r0, r1, #1
 80086d4:	0840      	lsrs	r0, r0, #1
 80086d6:	bd10      	pop	{r4, pc}
 80086d8:	20000010 	.word	0x20000010
 80086dc:	abcd330e 	.word	0xabcd330e
 80086e0:	e66d1234 	.word	0xe66d1234
 80086e4:	0005deec 	.word	0x0005deec
 80086e8:	4c957f2d 	.word	0x4c957f2d
 80086ec:	5851f42d 	.word	0x5851f42d

080086f0 <malloc>:
 80086f0:	b510      	push	{r4, lr}
 80086f2:	4b03      	ldr	r3, [pc, #12]	; (8008700 <malloc+0x10>)
 80086f4:	0001      	movs	r1, r0
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	f000 f804 	bl	8008704 <_malloc_r>
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	20000010 	.word	0x20000010

08008704 <_malloc_r>:
 8008704:	2303      	movs	r3, #3
 8008706:	b570      	push	{r4, r5, r6, lr}
 8008708:	1ccd      	adds	r5, r1, #3
 800870a:	439d      	bics	r5, r3
 800870c:	3508      	adds	r5, #8
 800870e:	0006      	movs	r6, r0
 8008710:	2d0c      	cmp	r5, #12
 8008712:	d21e      	bcs.n	8008752 <_malloc_r+0x4e>
 8008714:	250c      	movs	r5, #12
 8008716:	42a9      	cmp	r1, r5
 8008718:	d81d      	bhi.n	8008756 <_malloc_r+0x52>
 800871a:	0030      	movs	r0, r6
 800871c:	f000 f862 	bl	80087e4 <__malloc_lock>
 8008720:	4a25      	ldr	r2, [pc, #148]	; (80087b8 <_malloc_r+0xb4>)
 8008722:	6814      	ldr	r4, [r2, #0]
 8008724:	0021      	movs	r1, r4
 8008726:	2900      	cmp	r1, #0
 8008728:	d119      	bne.n	800875e <_malloc_r+0x5a>
 800872a:	4c24      	ldr	r4, [pc, #144]	; (80087bc <_malloc_r+0xb8>)
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d103      	bne.n	800873a <_malloc_r+0x36>
 8008732:	0030      	movs	r0, r6
 8008734:	f000 f844 	bl	80087c0 <_sbrk_r>
 8008738:	6020      	str	r0, [r4, #0]
 800873a:	0029      	movs	r1, r5
 800873c:	0030      	movs	r0, r6
 800873e:	f000 f83f 	bl	80087c0 <_sbrk_r>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	d12b      	bne.n	800879e <_malloc_r+0x9a>
 8008746:	230c      	movs	r3, #12
 8008748:	0030      	movs	r0, r6
 800874a:	6033      	str	r3, [r6, #0]
 800874c:	f000 f84b 	bl	80087e6 <__malloc_unlock>
 8008750:	e003      	b.n	800875a <_malloc_r+0x56>
 8008752:	2d00      	cmp	r5, #0
 8008754:	dadf      	bge.n	8008716 <_malloc_r+0x12>
 8008756:	230c      	movs	r3, #12
 8008758:	6033      	str	r3, [r6, #0]
 800875a:	2000      	movs	r0, #0
 800875c:	bd70      	pop	{r4, r5, r6, pc}
 800875e:	680b      	ldr	r3, [r1, #0]
 8008760:	1b5b      	subs	r3, r3, r5
 8008762:	d419      	bmi.n	8008798 <_malloc_r+0x94>
 8008764:	2b0b      	cmp	r3, #11
 8008766:	d903      	bls.n	8008770 <_malloc_r+0x6c>
 8008768:	600b      	str	r3, [r1, #0]
 800876a:	18cc      	adds	r4, r1, r3
 800876c:	6025      	str	r5, [r4, #0]
 800876e:	e003      	b.n	8008778 <_malloc_r+0x74>
 8008770:	684b      	ldr	r3, [r1, #4]
 8008772:	428c      	cmp	r4, r1
 8008774:	d10d      	bne.n	8008792 <_malloc_r+0x8e>
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	0030      	movs	r0, r6
 800877a:	f000 f834 	bl	80087e6 <__malloc_unlock>
 800877e:	0020      	movs	r0, r4
 8008780:	2207      	movs	r2, #7
 8008782:	300b      	adds	r0, #11
 8008784:	1d23      	adds	r3, r4, #4
 8008786:	4390      	bics	r0, r2
 8008788:	1ac3      	subs	r3, r0, r3
 800878a:	d0e7      	beq.n	800875c <_malloc_r+0x58>
 800878c:	425a      	negs	r2, r3
 800878e:	50e2      	str	r2, [r4, r3]
 8008790:	e7e4      	b.n	800875c <_malloc_r+0x58>
 8008792:	6063      	str	r3, [r4, #4]
 8008794:	000c      	movs	r4, r1
 8008796:	e7ef      	b.n	8008778 <_malloc_r+0x74>
 8008798:	000c      	movs	r4, r1
 800879a:	6849      	ldr	r1, [r1, #4]
 800879c:	e7c3      	b.n	8008726 <_malloc_r+0x22>
 800879e:	2303      	movs	r3, #3
 80087a0:	1cc4      	adds	r4, r0, #3
 80087a2:	439c      	bics	r4, r3
 80087a4:	42a0      	cmp	r0, r4
 80087a6:	d0e1      	beq.n	800876c <_malloc_r+0x68>
 80087a8:	1a21      	subs	r1, r4, r0
 80087aa:	0030      	movs	r0, r6
 80087ac:	f000 f808 	bl	80087c0 <_sbrk_r>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d1db      	bne.n	800876c <_malloc_r+0x68>
 80087b4:	e7c7      	b.n	8008746 <_malloc_r+0x42>
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	20000144 	.word	0x20000144
 80087bc:	20000148 	.word	0x20000148

080087c0 <_sbrk_r>:
 80087c0:	2300      	movs	r3, #0
 80087c2:	b570      	push	{r4, r5, r6, lr}
 80087c4:	4c06      	ldr	r4, [pc, #24]	; (80087e0 <_sbrk_r+0x20>)
 80087c6:	0005      	movs	r5, r0
 80087c8:	0008      	movs	r0, r1
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	f7fc fe9e 	bl	800550c <_sbrk>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d103      	bne.n	80087dc <_sbrk_r+0x1c>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d000      	beq.n	80087dc <_sbrk_r+0x1c>
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	46c0      	nop			; (mov r8, r8)
 80087e0:	20000150 	.word	0x20000150

080087e4 <__malloc_lock>:
 80087e4:	4770      	bx	lr

080087e6 <__malloc_unlock>:
 80087e6:	4770      	bx	lr

080087e8 <_init>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr

080087f4 <_fini>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fa:	bc08      	pop	{r3}
 80087fc:	469e      	mov	lr, r3
 80087fe:	4770      	bx	lr
