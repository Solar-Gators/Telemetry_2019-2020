
telemetry-dev-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f0  080050f0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080050f0  080050f0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050f0  080050f0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000006c  0800516c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  0800516c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f36  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000367b  00000000  00000000  00035fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  00039648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0003a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019bfb  00000000  00000000  0003aa20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bba0  00000000  00000000  0005461b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c809  00000000  00000000  000601bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc9c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000285c  00000000  00000000  000dca40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f9c 	.word	0x08004f9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08004f9c 	.word	0x08004f9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_f2uiz>:
 80003f4:	219e      	movs	r1, #158	; 0x9e
 80003f6:	b510      	push	{r4, lr}
 80003f8:	05c9      	lsls	r1, r1, #23
 80003fa:	1c04      	adds	r4, r0, #0
 80003fc:	f000 fb98 	bl	8000b30 <__aeabi_fcmpge>
 8000400:	2800      	cmp	r0, #0
 8000402:	d103      	bne.n	800040c <__aeabi_f2uiz+0x18>
 8000404:	1c20      	adds	r0, r4, #0
 8000406:	f000 fb03 	bl	8000a10 <__aeabi_f2iz>
 800040a:	bd10      	pop	{r4, pc}
 800040c:	219e      	movs	r1, #158	; 0x9e
 800040e:	1c20      	adds	r0, r4, #0
 8000410:	05c9      	lsls	r1, r1, #23
 8000412:	f000 f939 	bl	8000688 <__aeabi_fsub>
 8000416:	f000 fafb 	bl	8000a10 <__aeabi_f2iz>
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	061b      	lsls	r3, r3, #24
 800041e:	469c      	mov	ip, r3
 8000420:	4460      	add	r0, ip
 8000422:	e7f2      	b.n	800040a <__aeabi_f2uiz+0x16>

08000424 <__aeabi_fmul>:
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	464e      	mov	r6, r9
 8000428:	4657      	mov	r7, sl
 800042a:	4645      	mov	r5, r8
 800042c:	46de      	mov	lr, fp
 800042e:	b5e0      	push	{r5, r6, r7, lr}
 8000430:	0243      	lsls	r3, r0, #9
 8000432:	0a5b      	lsrs	r3, r3, #9
 8000434:	0045      	lsls	r5, r0, #1
 8000436:	b083      	sub	sp, #12
 8000438:	1c0f      	adds	r7, r1, #0
 800043a:	4699      	mov	r9, r3
 800043c:	0e2d      	lsrs	r5, r5, #24
 800043e:	0fc6      	lsrs	r6, r0, #31
 8000440:	2d00      	cmp	r5, #0
 8000442:	d057      	beq.n	80004f4 <__aeabi_fmul+0xd0>
 8000444:	2dff      	cmp	r5, #255	; 0xff
 8000446:	d024      	beq.n	8000492 <__aeabi_fmul+0x6e>
 8000448:	2080      	movs	r0, #128	; 0x80
 800044a:	00db      	lsls	r3, r3, #3
 800044c:	04c0      	lsls	r0, r0, #19
 800044e:	4318      	orrs	r0, r3
 8000450:	2300      	movs	r3, #0
 8000452:	4681      	mov	r9, r0
 8000454:	469a      	mov	sl, r3
 8000456:	469b      	mov	fp, r3
 8000458:	3d7f      	subs	r5, #127	; 0x7f
 800045a:	027c      	lsls	r4, r7, #9
 800045c:	007a      	lsls	r2, r7, #1
 800045e:	0ffb      	lsrs	r3, r7, #31
 8000460:	0a64      	lsrs	r4, r4, #9
 8000462:	0e12      	lsrs	r2, r2, #24
 8000464:	4698      	mov	r8, r3
 8000466:	d023      	beq.n	80004b0 <__aeabi_fmul+0x8c>
 8000468:	2aff      	cmp	r2, #255	; 0xff
 800046a:	d04b      	beq.n	8000504 <__aeabi_fmul+0xe0>
 800046c:	00e3      	lsls	r3, r4, #3
 800046e:	2480      	movs	r4, #128	; 0x80
 8000470:	2000      	movs	r0, #0
 8000472:	04e4      	lsls	r4, r4, #19
 8000474:	3a7f      	subs	r2, #127	; 0x7f
 8000476:	431c      	orrs	r4, r3
 8000478:	18ad      	adds	r5, r5, r2
 800047a:	1c6b      	adds	r3, r5, #1
 800047c:	4647      	mov	r7, r8
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	4653      	mov	r3, sl
 8000482:	4077      	eors	r7, r6
 8000484:	003a      	movs	r2, r7
 8000486:	2b0f      	cmp	r3, #15
 8000488:	d848      	bhi.n	800051c <__aeabi_fmul+0xf8>
 800048a:	497d      	ldr	r1, [pc, #500]	; (8000680 <__aeabi_fmul+0x25c>)
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	58cb      	ldr	r3, [r1, r3]
 8000490:	469f      	mov	pc, r3
 8000492:	2b00      	cmp	r3, #0
 8000494:	d000      	beq.n	8000498 <__aeabi_fmul+0x74>
 8000496:	e085      	b.n	80005a4 <__aeabi_fmul+0x180>
 8000498:	3308      	adds	r3, #8
 800049a:	469a      	mov	sl, r3
 800049c:	3b06      	subs	r3, #6
 800049e:	469b      	mov	fp, r3
 80004a0:	027c      	lsls	r4, r7, #9
 80004a2:	007a      	lsls	r2, r7, #1
 80004a4:	0ffb      	lsrs	r3, r7, #31
 80004a6:	25ff      	movs	r5, #255	; 0xff
 80004a8:	0a64      	lsrs	r4, r4, #9
 80004aa:	0e12      	lsrs	r2, r2, #24
 80004ac:	4698      	mov	r8, r3
 80004ae:	d1db      	bne.n	8000468 <__aeabi_fmul+0x44>
 80004b0:	2c00      	cmp	r4, #0
 80004b2:	d000      	beq.n	80004b6 <__aeabi_fmul+0x92>
 80004b4:	e090      	b.n	80005d8 <__aeabi_fmul+0x1b4>
 80004b6:	4652      	mov	r2, sl
 80004b8:	2301      	movs	r3, #1
 80004ba:	431a      	orrs	r2, r3
 80004bc:	4692      	mov	sl, r2
 80004be:	2001      	movs	r0, #1
 80004c0:	e7db      	b.n	800047a <__aeabi_fmul+0x56>
 80004c2:	464c      	mov	r4, r9
 80004c4:	4658      	mov	r0, fp
 80004c6:	0017      	movs	r7, r2
 80004c8:	2802      	cmp	r0, #2
 80004ca:	d024      	beq.n	8000516 <__aeabi_fmul+0xf2>
 80004cc:	2803      	cmp	r0, #3
 80004ce:	d100      	bne.n	80004d2 <__aeabi_fmul+0xae>
 80004d0:	e0cf      	b.n	8000672 <__aeabi_fmul+0x24e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	2801      	cmp	r0, #1
 80004d8:	d14d      	bne.n	8000576 <__aeabi_fmul+0x152>
 80004da:	0258      	lsls	r0, r3, #9
 80004dc:	05d2      	lsls	r2, r2, #23
 80004de:	0a40      	lsrs	r0, r0, #9
 80004e0:	07ff      	lsls	r7, r7, #31
 80004e2:	4310      	orrs	r0, r2
 80004e4:	4338      	orrs	r0, r7
 80004e6:	b003      	add	sp, #12
 80004e8:	bc3c      	pop	{r2, r3, r4, r5}
 80004ea:	4690      	mov	r8, r2
 80004ec:	4699      	mov	r9, r3
 80004ee:	46a2      	mov	sl, r4
 80004f0:	46ab      	mov	fp, r5
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d15b      	bne.n	80005b0 <__aeabi_fmul+0x18c>
 80004f8:	2304      	movs	r3, #4
 80004fa:	469a      	mov	sl, r3
 80004fc:	3b03      	subs	r3, #3
 80004fe:	2500      	movs	r5, #0
 8000500:	469b      	mov	fp, r3
 8000502:	e7aa      	b.n	800045a <__aeabi_fmul+0x36>
 8000504:	35ff      	adds	r5, #255	; 0xff
 8000506:	2c00      	cmp	r4, #0
 8000508:	d160      	bne.n	80005cc <__aeabi_fmul+0x1a8>
 800050a:	4652      	mov	r2, sl
 800050c:	2302      	movs	r3, #2
 800050e:	431a      	orrs	r2, r3
 8000510:	4692      	mov	sl, r2
 8000512:	2002      	movs	r0, #2
 8000514:	e7b1      	b.n	800047a <__aeabi_fmul+0x56>
 8000516:	22ff      	movs	r2, #255	; 0xff
 8000518:	2300      	movs	r3, #0
 800051a:	e7de      	b.n	80004da <__aeabi_fmul+0xb6>
 800051c:	464b      	mov	r3, r9
 800051e:	0c1b      	lsrs	r3, r3, #16
 8000520:	469c      	mov	ip, r3
 8000522:	464b      	mov	r3, r9
 8000524:	0426      	lsls	r6, r4, #16
 8000526:	0c36      	lsrs	r6, r6, #16
 8000528:	0418      	lsls	r0, r3, #16
 800052a:	4661      	mov	r1, ip
 800052c:	0033      	movs	r3, r6
 800052e:	0c22      	lsrs	r2, r4, #16
 8000530:	4664      	mov	r4, ip
 8000532:	0c00      	lsrs	r0, r0, #16
 8000534:	4343      	muls	r3, r0
 8000536:	434e      	muls	r6, r1
 8000538:	4350      	muls	r0, r2
 800053a:	4354      	muls	r4, r2
 800053c:	1980      	adds	r0, r0, r6
 800053e:	0c1a      	lsrs	r2, r3, #16
 8000540:	1812      	adds	r2, r2, r0
 8000542:	4296      	cmp	r6, r2
 8000544:	d903      	bls.n	800054e <__aeabi_fmul+0x12a>
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	0249      	lsls	r1, r1, #9
 800054a:	468c      	mov	ip, r1
 800054c:	4464      	add	r4, ip
 800054e:	041b      	lsls	r3, r3, #16
 8000550:	0c1b      	lsrs	r3, r3, #16
 8000552:	0410      	lsls	r0, r2, #16
 8000554:	18c0      	adds	r0, r0, r3
 8000556:	0183      	lsls	r3, r0, #6
 8000558:	1e5e      	subs	r6, r3, #1
 800055a:	41b3      	sbcs	r3, r6
 800055c:	0e80      	lsrs	r0, r0, #26
 800055e:	4318      	orrs	r0, r3
 8000560:	0c13      	lsrs	r3, r2, #16
 8000562:	191b      	adds	r3, r3, r4
 8000564:	019b      	lsls	r3, r3, #6
 8000566:	4303      	orrs	r3, r0
 8000568:	001c      	movs	r4, r3
 800056a:	0123      	lsls	r3, r4, #4
 800056c:	d579      	bpl.n	8000662 <__aeabi_fmul+0x23e>
 800056e:	2301      	movs	r3, #1
 8000570:	0862      	lsrs	r2, r4, #1
 8000572:	401c      	ands	r4, r3
 8000574:	4314      	orrs	r4, r2
 8000576:	9a01      	ldr	r2, [sp, #4]
 8000578:	327f      	adds	r2, #127	; 0x7f
 800057a:	2a00      	cmp	r2, #0
 800057c:	dd4d      	ble.n	800061a <__aeabi_fmul+0x1f6>
 800057e:	0763      	lsls	r3, r4, #29
 8000580:	d004      	beq.n	800058c <__aeabi_fmul+0x168>
 8000582:	230f      	movs	r3, #15
 8000584:	4023      	ands	r3, r4
 8000586:	2b04      	cmp	r3, #4
 8000588:	d000      	beq.n	800058c <__aeabi_fmul+0x168>
 800058a:	3404      	adds	r4, #4
 800058c:	0123      	lsls	r3, r4, #4
 800058e:	d503      	bpl.n	8000598 <__aeabi_fmul+0x174>
 8000590:	4b3c      	ldr	r3, [pc, #240]	; (8000684 <__aeabi_fmul+0x260>)
 8000592:	9a01      	ldr	r2, [sp, #4]
 8000594:	401c      	ands	r4, r3
 8000596:	3280      	adds	r2, #128	; 0x80
 8000598:	2afe      	cmp	r2, #254	; 0xfe
 800059a:	dcbc      	bgt.n	8000516 <__aeabi_fmul+0xf2>
 800059c:	01a3      	lsls	r3, r4, #6
 800059e:	0a5b      	lsrs	r3, r3, #9
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	e79a      	b.n	80004da <__aeabi_fmul+0xb6>
 80005a4:	230c      	movs	r3, #12
 80005a6:	469a      	mov	sl, r3
 80005a8:	3b09      	subs	r3, #9
 80005aa:	25ff      	movs	r5, #255	; 0xff
 80005ac:	469b      	mov	fp, r3
 80005ae:	e754      	b.n	800045a <__aeabi_fmul+0x36>
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fac7 	bl	8000b44 <__clzsi2>
 80005b6:	464a      	mov	r2, r9
 80005b8:	1f43      	subs	r3, r0, #5
 80005ba:	2576      	movs	r5, #118	; 0x76
 80005bc:	409a      	lsls	r2, r3
 80005be:	2300      	movs	r3, #0
 80005c0:	426d      	negs	r5, r5
 80005c2:	4691      	mov	r9, r2
 80005c4:	1a2d      	subs	r5, r5, r0
 80005c6:	469a      	mov	sl, r3
 80005c8:	469b      	mov	fp, r3
 80005ca:	e746      	b.n	800045a <__aeabi_fmul+0x36>
 80005cc:	4652      	mov	r2, sl
 80005ce:	2303      	movs	r3, #3
 80005d0:	431a      	orrs	r2, r3
 80005d2:	4692      	mov	sl, r2
 80005d4:	2003      	movs	r0, #3
 80005d6:	e750      	b.n	800047a <__aeabi_fmul+0x56>
 80005d8:	0020      	movs	r0, r4
 80005da:	f000 fab3 	bl	8000b44 <__clzsi2>
 80005de:	1f43      	subs	r3, r0, #5
 80005e0:	1a2d      	subs	r5, r5, r0
 80005e2:	409c      	lsls	r4, r3
 80005e4:	3d76      	subs	r5, #118	; 0x76
 80005e6:	2000      	movs	r0, #0
 80005e8:	e747      	b.n	800047a <__aeabi_fmul+0x56>
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	2700      	movs	r7, #0
 80005ee:	03db      	lsls	r3, r3, #15
 80005f0:	22ff      	movs	r2, #255	; 0xff
 80005f2:	e772      	b.n	80004da <__aeabi_fmul+0xb6>
 80005f4:	4642      	mov	r2, r8
 80005f6:	e766      	b.n	80004c6 <__aeabi_fmul+0xa2>
 80005f8:	464c      	mov	r4, r9
 80005fa:	0032      	movs	r2, r6
 80005fc:	4658      	mov	r0, fp
 80005fe:	e762      	b.n	80004c6 <__aeabi_fmul+0xa2>
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	464a      	mov	r2, r9
 8000604:	03db      	lsls	r3, r3, #15
 8000606:	421a      	tst	r2, r3
 8000608:	d022      	beq.n	8000650 <__aeabi_fmul+0x22c>
 800060a:	421c      	tst	r4, r3
 800060c:	d120      	bne.n	8000650 <__aeabi_fmul+0x22c>
 800060e:	4323      	orrs	r3, r4
 8000610:	025b      	lsls	r3, r3, #9
 8000612:	0a5b      	lsrs	r3, r3, #9
 8000614:	4647      	mov	r7, r8
 8000616:	22ff      	movs	r2, #255	; 0xff
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0xb6>
 800061a:	2301      	movs	r3, #1
 800061c:	1a9a      	subs	r2, r3, r2
 800061e:	2a1b      	cmp	r2, #27
 8000620:	dc21      	bgt.n	8000666 <__aeabi_fmul+0x242>
 8000622:	0023      	movs	r3, r4
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	40d3      	lsrs	r3, r2
 8000628:	319e      	adds	r1, #158	; 0x9e
 800062a:	408c      	lsls	r4, r1
 800062c:	001a      	movs	r2, r3
 800062e:	0023      	movs	r3, r4
 8000630:	1e5c      	subs	r4, r3, #1
 8000632:	41a3      	sbcs	r3, r4
 8000634:	4313      	orrs	r3, r2
 8000636:	075a      	lsls	r2, r3, #29
 8000638:	d004      	beq.n	8000644 <__aeabi_fmul+0x220>
 800063a:	220f      	movs	r2, #15
 800063c:	401a      	ands	r2, r3
 800063e:	2a04      	cmp	r2, #4
 8000640:	d000      	beq.n	8000644 <__aeabi_fmul+0x220>
 8000642:	3304      	adds	r3, #4
 8000644:	015a      	lsls	r2, r3, #5
 8000646:	d411      	bmi.n	800066c <__aeabi_fmul+0x248>
 8000648:	019b      	lsls	r3, r3, #6
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	2200      	movs	r2, #0
 800064e:	e744      	b.n	80004da <__aeabi_fmul+0xb6>
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	464a      	mov	r2, r9
 8000654:	03db      	lsls	r3, r3, #15
 8000656:	4313      	orrs	r3, r2
 8000658:	025b      	lsls	r3, r3, #9
 800065a:	0a5b      	lsrs	r3, r3, #9
 800065c:	0037      	movs	r7, r6
 800065e:	22ff      	movs	r2, #255	; 0xff
 8000660:	e73b      	b.n	80004da <__aeabi_fmul+0xb6>
 8000662:	9501      	str	r5, [sp, #4]
 8000664:	e787      	b.n	8000576 <__aeabi_fmul+0x152>
 8000666:	2200      	movs	r2, #0
 8000668:	2300      	movs	r3, #0
 800066a:	e736      	b.n	80004da <__aeabi_fmul+0xb6>
 800066c:	2201      	movs	r2, #1
 800066e:	2300      	movs	r3, #0
 8000670:	e733      	b.n	80004da <__aeabi_fmul+0xb6>
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	03db      	lsls	r3, r3, #15
 8000676:	4323      	orrs	r3, r4
 8000678:	025b      	lsls	r3, r3, #9
 800067a:	0a5b      	lsrs	r3, r3, #9
 800067c:	22ff      	movs	r2, #255	; 0xff
 800067e:	e72c      	b.n	80004da <__aeabi_fmul+0xb6>
 8000680:	08005044 	.word	0x08005044
 8000684:	f7ffffff 	.word	0xf7ffffff

08000688 <__aeabi_fsub>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	4647      	mov	r7, r8
 800068c:	46ce      	mov	lr, r9
 800068e:	0044      	lsls	r4, r0, #1
 8000690:	0fc2      	lsrs	r2, r0, #31
 8000692:	b580      	push	{r7, lr}
 8000694:	0247      	lsls	r7, r0, #9
 8000696:	0248      	lsls	r0, r1, #9
 8000698:	0a40      	lsrs	r0, r0, #9
 800069a:	4684      	mov	ip, r0
 800069c:	4666      	mov	r6, ip
 800069e:	0048      	lsls	r0, r1, #1
 80006a0:	0a7f      	lsrs	r7, r7, #9
 80006a2:	0e24      	lsrs	r4, r4, #24
 80006a4:	00f6      	lsls	r6, r6, #3
 80006a6:	0025      	movs	r5, r4
 80006a8:	4690      	mov	r8, r2
 80006aa:	00fb      	lsls	r3, r7, #3
 80006ac:	0e00      	lsrs	r0, r0, #24
 80006ae:	0fc9      	lsrs	r1, r1, #31
 80006b0:	46b1      	mov	r9, r6
 80006b2:	28ff      	cmp	r0, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fsub+0x30>
 80006b6:	e085      	b.n	80007c4 <__aeabi_fsub+0x13c>
 80006b8:	2601      	movs	r6, #1
 80006ba:	4071      	eors	r1, r6
 80006bc:	1a26      	subs	r6, r4, r0
 80006be:	4291      	cmp	r1, r2
 80006c0:	d057      	beq.n	8000772 <__aeabi_fsub+0xea>
 80006c2:	2e00      	cmp	r6, #0
 80006c4:	dd43      	ble.n	800074e <__aeabi_fsub+0xc6>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d000      	beq.n	80006cc <__aeabi_fsub+0x44>
 80006ca:	e07f      	b.n	80007cc <__aeabi_fsub+0x144>
 80006cc:	4649      	mov	r1, r9
 80006ce:	2900      	cmp	r1, #0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fsub+0x4c>
 80006d2:	e0aa      	b.n	800082a <__aeabi_fsub+0x1a2>
 80006d4:	3e01      	subs	r6, #1
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_fsub+0x54>
 80006da:	e0f7      	b.n	80008cc <__aeabi_fsub+0x244>
 80006dc:	1a5b      	subs	r3, r3, r1
 80006de:	015a      	lsls	r2, r3, #5
 80006e0:	d400      	bmi.n	80006e4 <__aeabi_fsub+0x5c>
 80006e2:	e08b      	b.n	80007fc <__aeabi_fsub+0x174>
 80006e4:	019b      	lsls	r3, r3, #6
 80006e6:	099c      	lsrs	r4, r3, #6
 80006e8:	0020      	movs	r0, r4
 80006ea:	f000 fa2b 	bl	8000b44 <__clzsi2>
 80006ee:	3805      	subs	r0, #5
 80006f0:	4084      	lsls	r4, r0
 80006f2:	4285      	cmp	r5, r0
 80006f4:	dd00      	ble.n	80006f8 <__aeabi_fsub+0x70>
 80006f6:	e0d3      	b.n	80008a0 <__aeabi_fsub+0x218>
 80006f8:	1b45      	subs	r5, r0, r5
 80006fa:	0023      	movs	r3, r4
 80006fc:	2020      	movs	r0, #32
 80006fe:	3501      	adds	r5, #1
 8000700:	40eb      	lsrs	r3, r5
 8000702:	1b45      	subs	r5, r0, r5
 8000704:	40ac      	lsls	r4, r5
 8000706:	1e62      	subs	r2, r4, #1
 8000708:	4194      	sbcs	r4, r2
 800070a:	4323      	orrs	r3, r4
 800070c:	2407      	movs	r4, #7
 800070e:	2500      	movs	r5, #0
 8000710:	401c      	ands	r4, r3
 8000712:	2201      	movs	r2, #1
 8000714:	4641      	mov	r1, r8
 8000716:	400a      	ands	r2, r1
 8000718:	2c00      	cmp	r4, #0
 800071a:	d004      	beq.n	8000726 <__aeabi_fsub+0x9e>
 800071c:	210f      	movs	r1, #15
 800071e:	4019      	ands	r1, r3
 8000720:	2904      	cmp	r1, #4
 8000722:	d000      	beq.n	8000726 <__aeabi_fsub+0x9e>
 8000724:	3304      	adds	r3, #4
 8000726:	0159      	lsls	r1, r3, #5
 8000728:	d400      	bmi.n	800072c <__aeabi_fsub+0xa4>
 800072a:	e080      	b.n	800082e <__aeabi_fsub+0x1a6>
 800072c:	3501      	adds	r5, #1
 800072e:	b2ec      	uxtb	r4, r5
 8000730:	2dff      	cmp	r5, #255	; 0xff
 8000732:	d000      	beq.n	8000736 <__aeabi_fsub+0xae>
 8000734:	e0a3      	b.n	800087e <__aeabi_fsub+0x1f6>
 8000736:	24ff      	movs	r4, #255	; 0xff
 8000738:	2300      	movs	r3, #0
 800073a:	025b      	lsls	r3, r3, #9
 800073c:	05e4      	lsls	r4, r4, #23
 800073e:	0a58      	lsrs	r0, r3, #9
 8000740:	07d2      	lsls	r2, r2, #31
 8000742:	4320      	orrs	r0, r4
 8000744:	4310      	orrs	r0, r2
 8000746:	bc0c      	pop	{r2, r3}
 8000748:	4690      	mov	r8, r2
 800074a:	4699      	mov	r9, r3
 800074c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800074e:	2e00      	cmp	r6, #0
 8000750:	d174      	bne.n	800083c <__aeabi_fsub+0x1b4>
 8000752:	1c60      	adds	r0, r4, #1
 8000754:	b2c0      	uxtb	r0, r0
 8000756:	2801      	cmp	r0, #1
 8000758:	dc00      	bgt.n	800075c <__aeabi_fsub+0xd4>
 800075a:	e0a7      	b.n	80008ac <__aeabi_fsub+0x224>
 800075c:	464a      	mov	r2, r9
 800075e:	1a9c      	subs	r4, r3, r2
 8000760:	0162      	lsls	r2, r4, #5
 8000762:	d500      	bpl.n	8000766 <__aeabi_fsub+0xde>
 8000764:	e0b6      	b.n	80008d4 <__aeabi_fsub+0x24c>
 8000766:	2c00      	cmp	r4, #0
 8000768:	d1be      	bne.n	80006e8 <__aeabi_fsub+0x60>
 800076a:	2200      	movs	r2, #0
 800076c:	2400      	movs	r4, #0
 800076e:	2300      	movs	r3, #0
 8000770:	e7e3      	b.n	800073a <__aeabi_fsub+0xb2>
 8000772:	2e00      	cmp	r6, #0
 8000774:	dc00      	bgt.n	8000778 <__aeabi_fsub+0xf0>
 8000776:	e085      	b.n	8000884 <__aeabi_fsub+0x1fc>
 8000778:	2800      	cmp	r0, #0
 800077a:	d046      	beq.n	800080a <__aeabi_fsub+0x182>
 800077c:	2cff      	cmp	r4, #255	; 0xff
 800077e:	d049      	beq.n	8000814 <__aeabi_fsub+0x18c>
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	4648      	mov	r0, r9
 8000784:	04d2      	lsls	r2, r2, #19
 8000786:	4310      	orrs	r0, r2
 8000788:	4681      	mov	r9, r0
 800078a:	2201      	movs	r2, #1
 800078c:	2e1b      	cmp	r6, #27
 800078e:	dc09      	bgt.n	80007a4 <__aeabi_fsub+0x11c>
 8000790:	2020      	movs	r0, #32
 8000792:	464c      	mov	r4, r9
 8000794:	1b80      	subs	r0, r0, r6
 8000796:	4084      	lsls	r4, r0
 8000798:	464a      	mov	r2, r9
 800079a:	0020      	movs	r0, r4
 800079c:	40f2      	lsrs	r2, r6
 800079e:	1e44      	subs	r4, r0, #1
 80007a0:	41a0      	sbcs	r0, r4
 80007a2:	4302      	orrs	r2, r0
 80007a4:	189b      	adds	r3, r3, r2
 80007a6:	015a      	lsls	r2, r3, #5
 80007a8:	d528      	bpl.n	80007fc <__aeabi_fsub+0x174>
 80007aa:	3501      	adds	r5, #1
 80007ac:	2dff      	cmp	r5, #255	; 0xff
 80007ae:	d100      	bne.n	80007b2 <__aeabi_fsub+0x12a>
 80007b0:	e0a8      	b.n	8000904 <__aeabi_fsub+0x27c>
 80007b2:	2201      	movs	r2, #1
 80007b4:	2407      	movs	r4, #7
 80007b6:	4994      	ldr	r1, [pc, #592]	; (8000a08 <__aeabi_fsub+0x380>)
 80007b8:	401a      	ands	r2, r3
 80007ba:	085b      	lsrs	r3, r3, #1
 80007bc:	400b      	ands	r3, r1
 80007be:	4313      	orrs	r3, r2
 80007c0:	401c      	ands	r4, r3
 80007c2:	e7a6      	b.n	8000712 <__aeabi_fsub+0x8a>
 80007c4:	2e00      	cmp	r6, #0
 80007c6:	d000      	beq.n	80007ca <__aeabi_fsub+0x142>
 80007c8:	e778      	b.n	80006bc <__aeabi_fsub+0x34>
 80007ca:	e775      	b.n	80006b8 <__aeabi_fsub+0x30>
 80007cc:	2cff      	cmp	r4, #255	; 0xff
 80007ce:	d054      	beq.n	800087a <__aeabi_fsub+0x1f2>
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	4649      	mov	r1, r9
 80007d4:	04d2      	lsls	r2, r2, #19
 80007d6:	4311      	orrs	r1, r2
 80007d8:	4689      	mov	r9, r1
 80007da:	2201      	movs	r2, #1
 80007dc:	2e1b      	cmp	r6, #27
 80007de:	dc09      	bgt.n	80007f4 <__aeabi_fsub+0x16c>
 80007e0:	2120      	movs	r1, #32
 80007e2:	4648      	mov	r0, r9
 80007e4:	1b89      	subs	r1, r1, r6
 80007e6:	4088      	lsls	r0, r1
 80007e8:	464a      	mov	r2, r9
 80007ea:	0001      	movs	r1, r0
 80007ec:	40f2      	lsrs	r2, r6
 80007ee:	1e48      	subs	r0, r1, #1
 80007f0:	4181      	sbcs	r1, r0
 80007f2:	430a      	orrs	r2, r1
 80007f4:	1a9b      	subs	r3, r3, r2
 80007f6:	015a      	lsls	r2, r3, #5
 80007f8:	d500      	bpl.n	80007fc <__aeabi_fsub+0x174>
 80007fa:	e773      	b.n	80006e4 <__aeabi_fsub+0x5c>
 80007fc:	2201      	movs	r2, #1
 80007fe:	4641      	mov	r1, r8
 8000800:	400a      	ands	r2, r1
 8000802:	0759      	lsls	r1, r3, #29
 8000804:	d000      	beq.n	8000808 <__aeabi_fsub+0x180>
 8000806:	e789      	b.n	800071c <__aeabi_fsub+0x94>
 8000808:	e011      	b.n	800082e <__aeabi_fsub+0x1a6>
 800080a:	4648      	mov	r0, r9
 800080c:	2800      	cmp	r0, #0
 800080e:	d158      	bne.n	80008c2 <__aeabi_fsub+0x23a>
 8000810:	2cff      	cmp	r4, #255	; 0xff
 8000812:	d10c      	bne.n	800082e <__aeabi_fsub+0x1a6>
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fsub+0x194>
 800081a:	e78c      	b.n	8000736 <__aeabi_fsub+0xae>
 800081c:	2080      	movs	r0, #128	; 0x80
 800081e:	03c0      	lsls	r0, r0, #15
 8000820:	4303      	orrs	r3, r0
 8000822:	025b      	lsls	r3, r3, #9
 8000824:	0a5b      	lsrs	r3, r3, #9
 8000826:	24ff      	movs	r4, #255	; 0xff
 8000828:	e787      	b.n	800073a <__aeabi_fsub+0xb2>
 800082a:	2cff      	cmp	r4, #255	; 0xff
 800082c:	d025      	beq.n	800087a <__aeabi_fsub+0x1f2>
 800082e:	08db      	lsrs	r3, r3, #3
 8000830:	2dff      	cmp	r5, #255	; 0xff
 8000832:	d0f0      	beq.n	8000816 <__aeabi_fsub+0x18e>
 8000834:	025b      	lsls	r3, r3, #9
 8000836:	0a5b      	lsrs	r3, r3, #9
 8000838:	b2ec      	uxtb	r4, r5
 800083a:	e77e      	b.n	800073a <__aeabi_fsub+0xb2>
 800083c:	2c00      	cmp	r4, #0
 800083e:	d04d      	beq.n	80008dc <__aeabi_fsub+0x254>
 8000840:	28ff      	cmp	r0, #255	; 0xff
 8000842:	d018      	beq.n	8000876 <__aeabi_fsub+0x1ee>
 8000844:	2480      	movs	r4, #128	; 0x80
 8000846:	04e4      	lsls	r4, r4, #19
 8000848:	4272      	negs	r2, r6
 800084a:	4323      	orrs	r3, r4
 800084c:	2a1b      	cmp	r2, #27
 800084e:	dd00      	ble.n	8000852 <__aeabi_fsub+0x1ca>
 8000850:	e0c4      	b.n	80009dc <__aeabi_fsub+0x354>
 8000852:	001c      	movs	r4, r3
 8000854:	2520      	movs	r5, #32
 8000856:	40d4      	lsrs	r4, r2
 8000858:	1aaa      	subs	r2, r5, r2
 800085a:	4093      	lsls	r3, r2
 800085c:	1e5a      	subs	r2, r3, #1
 800085e:	4193      	sbcs	r3, r2
 8000860:	4323      	orrs	r3, r4
 8000862:	464a      	mov	r2, r9
 8000864:	0005      	movs	r5, r0
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	4688      	mov	r8, r1
 800086a:	e738      	b.n	80006de <__aeabi_fsub+0x56>
 800086c:	1c72      	adds	r2, r6, #1
 800086e:	d0f8      	beq.n	8000862 <__aeabi_fsub+0x1da>
 8000870:	43f2      	mvns	r2, r6
 8000872:	28ff      	cmp	r0, #255	; 0xff
 8000874:	d1ea      	bne.n	800084c <__aeabi_fsub+0x1c4>
 8000876:	000a      	movs	r2, r1
 8000878:	464b      	mov	r3, r9
 800087a:	25ff      	movs	r5, #255	; 0xff
 800087c:	e7d7      	b.n	800082e <__aeabi_fsub+0x1a6>
 800087e:	019b      	lsls	r3, r3, #6
 8000880:	0a5b      	lsrs	r3, r3, #9
 8000882:	e75a      	b.n	800073a <__aeabi_fsub+0xb2>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d141      	bne.n	800090c <__aeabi_fsub+0x284>
 8000888:	1c65      	adds	r5, r4, #1
 800088a:	b2e9      	uxtb	r1, r5
 800088c:	2901      	cmp	r1, #1
 800088e:	dd45      	ble.n	800091c <__aeabi_fsub+0x294>
 8000890:	2dff      	cmp	r5, #255	; 0xff
 8000892:	d100      	bne.n	8000896 <__aeabi_fsub+0x20e>
 8000894:	e74f      	b.n	8000736 <__aeabi_fsub+0xae>
 8000896:	2407      	movs	r4, #7
 8000898:	444b      	add	r3, r9
 800089a:	085b      	lsrs	r3, r3, #1
 800089c:	401c      	ands	r4, r3
 800089e:	e738      	b.n	8000712 <__aeabi_fsub+0x8a>
 80008a0:	2207      	movs	r2, #7
 80008a2:	4b5a      	ldr	r3, [pc, #360]	; (8000a0c <__aeabi_fsub+0x384>)
 80008a4:	1a2d      	subs	r5, r5, r0
 80008a6:	4023      	ands	r3, r4
 80008a8:	4014      	ands	r4, r2
 80008aa:	e732      	b.n	8000712 <__aeabi_fsub+0x8a>
 80008ac:	2c00      	cmp	r4, #0
 80008ae:	d11d      	bne.n	80008ec <__aeabi_fsub+0x264>
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d17a      	bne.n	80009aa <__aeabi_fsub+0x322>
 80008b4:	464b      	mov	r3, r9
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_fsub+0x234>
 80008ba:	e091      	b.n	80009e0 <__aeabi_fsub+0x358>
 80008bc:	000a      	movs	r2, r1
 80008be:	2500      	movs	r5, #0
 80008c0:	e7b5      	b.n	800082e <__aeabi_fsub+0x1a6>
 80008c2:	3e01      	subs	r6, #1
 80008c4:	2e00      	cmp	r6, #0
 80008c6:	d119      	bne.n	80008fc <__aeabi_fsub+0x274>
 80008c8:	444b      	add	r3, r9
 80008ca:	e76c      	b.n	80007a6 <__aeabi_fsub+0x11e>
 80008cc:	2cff      	cmp	r4, #255	; 0xff
 80008ce:	d184      	bne.n	80007da <__aeabi_fsub+0x152>
 80008d0:	25ff      	movs	r5, #255	; 0xff
 80008d2:	e7ac      	b.n	800082e <__aeabi_fsub+0x1a6>
 80008d4:	464a      	mov	r2, r9
 80008d6:	4688      	mov	r8, r1
 80008d8:	1ad4      	subs	r4, r2, r3
 80008da:	e705      	b.n	80006e8 <__aeabi_fsub+0x60>
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1c5      	bne.n	800086c <__aeabi_fsub+0x1e4>
 80008e0:	000a      	movs	r2, r1
 80008e2:	28ff      	cmp	r0, #255	; 0xff
 80008e4:	d0c8      	beq.n	8000878 <__aeabi_fsub+0x1f0>
 80008e6:	0005      	movs	r5, r0
 80008e8:	464b      	mov	r3, r9
 80008ea:	e7a0      	b.n	800082e <__aeabi_fsub+0x1a6>
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d149      	bne.n	8000984 <__aeabi_fsub+0x2fc>
 80008f0:	464b      	mov	r3, r9
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d077      	beq.n	80009e6 <__aeabi_fsub+0x35e>
 80008f6:	000a      	movs	r2, r1
 80008f8:	25ff      	movs	r5, #255	; 0xff
 80008fa:	e798      	b.n	800082e <__aeabi_fsub+0x1a6>
 80008fc:	2cff      	cmp	r4, #255	; 0xff
 80008fe:	d000      	beq.n	8000902 <__aeabi_fsub+0x27a>
 8000900:	e743      	b.n	800078a <__aeabi_fsub+0x102>
 8000902:	e787      	b.n	8000814 <__aeabi_fsub+0x18c>
 8000904:	000a      	movs	r2, r1
 8000906:	24ff      	movs	r4, #255	; 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e716      	b.n	800073a <__aeabi_fsub+0xb2>
 800090c:	2c00      	cmp	r4, #0
 800090e:	d115      	bne.n	800093c <__aeabi_fsub+0x2b4>
 8000910:	2b00      	cmp	r3, #0
 8000912:	d157      	bne.n	80009c4 <__aeabi_fsub+0x33c>
 8000914:	28ff      	cmp	r0, #255	; 0xff
 8000916:	d1e6      	bne.n	80008e6 <__aeabi_fsub+0x25e>
 8000918:	464b      	mov	r3, r9
 800091a:	e77b      	b.n	8000814 <__aeabi_fsub+0x18c>
 800091c:	2c00      	cmp	r4, #0
 800091e:	d120      	bne.n	8000962 <__aeabi_fsub+0x2da>
 8000920:	2b00      	cmp	r3, #0
 8000922:	d057      	beq.n	80009d4 <__aeabi_fsub+0x34c>
 8000924:	4649      	mov	r1, r9
 8000926:	2900      	cmp	r1, #0
 8000928:	d053      	beq.n	80009d2 <__aeabi_fsub+0x34a>
 800092a:	444b      	add	r3, r9
 800092c:	015a      	lsls	r2, r3, #5
 800092e:	d568      	bpl.n	8000a02 <__aeabi_fsub+0x37a>
 8000930:	2407      	movs	r4, #7
 8000932:	4a36      	ldr	r2, [pc, #216]	; (8000a0c <__aeabi_fsub+0x384>)
 8000934:	401c      	ands	r4, r3
 8000936:	2501      	movs	r5, #1
 8000938:	4013      	ands	r3, r2
 800093a:	e6ea      	b.n	8000712 <__aeabi_fsub+0x8a>
 800093c:	28ff      	cmp	r0, #255	; 0xff
 800093e:	d0eb      	beq.n	8000918 <__aeabi_fsub+0x290>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	04d2      	lsls	r2, r2, #19
 8000944:	4276      	negs	r6, r6
 8000946:	4313      	orrs	r3, r2
 8000948:	2e1b      	cmp	r6, #27
 800094a:	dc53      	bgt.n	80009f4 <__aeabi_fsub+0x36c>
 800094c:	2520      	movs	r5, #32
 800094e:	1bad      	subs	r5, r5, r6
 8000950:	001a      	movs	r2, r3
 8000952:	40ab      	lsls	r3, r5
 8000954:	40f2      	lsrs	r2, r6
 8000956:	1e5c      	subs	r4, r3, #1
 8000958:	41a3      	sbcs	r3, r4
 800095a:	4313      	orrs	r3, r2
 800095c:	444b      	add	r3, r9
 800095e:	0005      	movs	r5, r0
 8000960:	e721      	b.n	80007a6 <__aeabi_fsub+0x11e>
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0d8      	beq.n	8000918 <__aeabi_fsub+0x290>
 8000966:	4649      	mov	r1, r9
 8000968:	2900      	cmp	r1, #0
 800096a:	d100      	bne.n	800096e <__aeabi_fsub+0x2e6>
 800096c:	e752      	b.n	8000814 <__aeabi_fsub+0x18c>
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	03c9      	lsls	r1, r1, #15
 8000972:	420f      	tst	r7, r1
 8000974:	d100      	bne.n	8000978 <__aeabi_fsub+0x2f0>
 8000976:	e74d      	b.n	8000814 <__aeabi_fsub+0x18c>
 8000978:	4660      	mov	r0, ip
 800097a:	4208      	tst	r0, r1
 800097c:	d000      	beq.n	8000980 <__aeabi_fsub+0x2f8>
 800097e:	e749      	b.n	8000814 <__aeabi_fsub+0x18c>
 8000980:	464b      	mov	r3, r9
 8000982:	e747      	b.n	8000814 <__aeabi_fsub+0x18c>
 8000984:	4648      	mov	r0, r9
 8000986:	25ff      	movs	r5, #255	; 0xff
 8000988:	2800      	cmp	r0, #0
 800098a:	d100      	bne.n	800098e <__aeabi_fsub+0x306>
 800098c:	e74f      	b.n	800082e <__aeabi_fsub+0x1a6>
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	03d2      	lsls	r2, r2, #15
 8000992:	4217      	tst	r7, r2
 8000994:	d004      	beq.n	80009a0 <__aeabi_fsub+0x318>
 8000996:	4660      	mov	r0, ip
 8000998:	4210      	tst	r0, r2
 800099a:	d101      	bne.n	80009a0 <__aeabi_fsub+0x318>
 800099c:	464b      	mov	r3, r9
 800099e:	4688      	mov	r8, r1
 80009a0:	2201      	movs	r2, #1
 80009a2:	4641      	mov	r1, r8
 80009a4:	25ff      	movs	r5, #255	; 0xff
 80009a6:	400a      	ands	r2, r1
 80009a8:	e741      	b.n	800082e <__aeabi_fsub+0x1a6>
 80009aa:	4648      	mov	r0, r9
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d01f      	beq.n	80009f0 <__aeabi_fsub+0x368>
 80009b0:	1a1a      	subs	r2, r3, r0
 80009b2:	0150      	lsls	r0, r2, #5
 80009b4:	d520      	bpl.n	80009f8 <__aeabi_fsub+0x370>
 80009b6:	464a      	mov	r2, r9
 80009b8:	2407      	movs	r4, #7
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	401c      	ands	r4, r3
 80009be:	4688      	mov	r8, r1
 80009c0:	2500      	movs	r5, #0
 80009c2:	e6a6      	b.n	8000712 <__aeabi_fsub+0x8a>
 80009c4:	1c74      	adds	r4, r6, #1
 80009c6:	d0c9      	beq.n	800095c <__aeabi_fsub+0x2d4>
 80009c8:	43f6      	mvns	r6, r6
 80009ca:	28ff      	cmp	r0, #255	; 0xff
 80009cc:	d1bc      	bne.n	8000948 <__aeabi_fsub+0x2c0>
 80009ce:	464b      	mov	r3, r9
 80009d0:	e720      	b.n	8000814 <__aeabi_fsub+0x18c>
 80009d2:	4699      	mov	r9, r3
 80009d4:	464b      	mov	r3, r9
 80009d6:	2500      	movs	r5, #0
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	e72b      	b.n	8000834 <__aeabi_fsub+0x1ac>
 80009dc:	2301      	movs	r3, #1
 80009de:	e740      	b.n	8000862 <__aeabi_fsub+0x1da>
 80009e0:	2200      	movs	r2, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e6a9      	b.n	800073a <__aeabi_fsub+0xb2>
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	2200      	movs	r2, #0
 80009ea:	03db      	lsls	r3, r3, #15
 80009ec:	24ff      	movs	r4, #255	; 0xff
 80009ee:	e6a4      	b.n	800073a <__aeabi_fsub+0xb2>
 80009f0:	2500      	movs	r5, #0
 80009f2:	e71c      	b.n	800082e <__aeabi_fsub+0x1a6>
 80009f4:	2301      	movs	r3, #1
 80009f6:	e7b1      	b.n	800095c <__aeabi_fsub+0x2d4>
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d0f1      	beq.n	80009e0 <__aeabi_fsub+0x358>
 80009fc:	0013      	movs	r3, r2
 80009fe:	2500      	movs	r5, #0
 8000a00:	e6fc      	b.n	80007fc <__aeabi_fsub+0x174>
 8000a02:	2500      	movs	r5, #0
 8000a04:	e6fa      	b.n	80007fc <__aeabi_fsub+0x174>
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	7dffffff 	.word	0x7dffffff
 8000a0c:	fbffffff 	.word	0xfbffffff

08000a10 <__aeabi_f2iz>:
 8000a10:	0241      	lsls	r1, r0, #9
 8000a12:	0042      	lsls	r2, r0, #1
 8000a14:	0fc3      	lsrs	r3, r0, #31
 8000a16:	0a49      	lsrs	r1, r1, #9
 8000a18:	0e12      	lsrs	r2, r2, #24
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_f2iz+0x2c>
 8000a20:	2a9d      	cmp	r2, #157	; 0x9d
 8000a22:	d80c      	bhi.n	8000a3e <__aeabi_f2iz+0x2e>
 8000a24:	2080      	movs	r0, #128	; 0x80
 8000a26:	0400      	lsls	r0, r0, #16
 8000a28:	4301      	orrs	r1, r0
 8000a2a:	2a95      	cmp	r2, #149	; 0x95
 8000a2c:	dc0a      	bgt.n	8000a44 <__aeabi_f2iz+0x34>
 8000a2e:	2096      	movs	r0, #150	; 0x96
 8000a30:	1a82      	subs	r2, r0, r2
 8000a32:	40d1      	lsrs	r1, r2
 8000a34:	4248      	negs	r0, r1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_f2iz+0x2c>
 8000a3a:	0008      	movs	r0, r1
 8000a3c:	4770      	bx	lr
 8000a3e:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <__aeabi_f2iz+0x3c>)
 8000a40:	1898      	adds	r0, r3, r2
 8000a42:	e7fb      	b.n	8000a3c <__aeabi_f2iz+0x2c>
 8000a44:	3a96      	subs	r2, #150	; 0x96
 8000a46:	4091      	lsls	r1, r2
 8000a48:	e7f4      	b.n	8000a34 <__aeabi_f2iz+0x24>
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	7fffffff 	.word	0x7fffffff

08000a50 <__aeabi_ui2f>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	1e04      	subs	r4, r0, #0
 8000a54:	d034      	beq.n	8000ac0 <__aeabi_ui2f+0x70>
 8000a56:	f000 f875 	bl	8000b44 <__clzsi2>
 8000a5a:	229e      	movs	r2, #158	; 0x9e
 8000a5c:	1a12      	subs	r2, r2, r0
 8000a5e:	2a96      	cmp	r2, #150	; 0x96
 8000a60:	dc07      	bgt.n	8000a72 <__aeabi_ui2f+0x22>
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	2808      	cmp	r0, #8
 8000a66:	dd2e      	ble.n	8000ac6 <__aeabi_ui2f+0x76>
 8000a68:	3808      	subs	r0, #8
 8000a6a:	4084      	lsls	r4, r0
 8000a6c:	0260      	lsls	r0, r4, #9
 8000a6e:	0a40      	lsrs	r0, r0, #9
 8000a70:	e021      	b.n	8000ab6 <__aeabi_ui2f+0x66>
 8000a72:	2a99      	cmp	r2, #153	; 0x99
 8000a74:	dd09      	ble.n	8000a8a <__aeabi_ui2f+0x3a>
 8000a76:	0003      	movs	r3, r0
 8000a78:	0021      	movs	r1, r4
 8000a7a:	331b      	adds	r3, #27
 8000a7c:	4099      	lsls	r1, r3
 8000a7e:	1e4b      	subs	r3, r1, #1
 8000a80:	4199      	sbcs	r1, r3
 8000a82:	2305      	movs	r3, #5
 8000a84:	1a1b      	subs	r3, r3, r0
 8000a86:	40dc      	lsrs	r4, r3
 8000a88:	430c      	orrs	r4, r1
 8000a8a:	2805      	cmp	r0, #5
 8000a8c:	dd01      	ble.n	8000a92 <__aeabi_ui2f+0x42>
 8000a8e:	1f43      	subs	r3, r0, #5
 8000a90:	409c      	lsls	r4, r3
 8000a92:	0023      	movs	r3, r4
 8000a94:	490d      	ldr	r1, [pc, #52]	; (8000acc <__aeabi_ui2f+0x7c>)
 8000a96:	400b      	ands	r3, r1
 8000a98:	0765      	lsls	r5, r4, #29
 8000a9a:	d009      	beq.n	8000ab0 <__aeabi_ui2f+0x60>
 8000a9c:	250f      	movs	r5, #15
 8000a9e:	402c      	ands	r4, r5
 8000aa0:	2c04      	cmp	r4, #4
 8000aa2:	d005      	beq.n	8000ab0 <__aeabi_ui2f+0x60>
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	015c      	lsls	r4, r3, #5
 8000aa8:	d502      	bpl.n	8000ab0 <__aeabi_ui2f+0x60>
 8000aaa:	229f      	movs	r2, #159	; 0x9f
 8000aac:	400b      	ands	r3, r1
 8000aae:	1a12      	subs	r2, r2, r0
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	0a58      	lsrs	r0, r3, #9
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	0240      	lsls	r0, r0, #9
 8000ab8:	05d2      	lsls	r2, r2, #23
 8000aba:	0a40      	lsrs	r0, r0, #9
 8000abc:	4310      	orrs	r0, r2
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	e7f7      	b.n	8000ab6 <__aeabi_ui2f+0x66>
 8000ac6:	0260      	lsls	r0, r4, #9
 8000ac8:	0a40      	lsrs	r0, r0, #9
 8000aca:	e7f4      	b.n	8000ab6 <__aeabi_ui2f+0x66>
 8000acc:	fbffffff 	.word	0xfbffffff

08000ad0 <__aeabi_cfrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	1c08      	adds	r0, r1, #0
 8000ad4:	4661      	mov	r1, ip
 8000ad6:	e7ff      	b.n	8000ad8 <__aeabi_cfcmpeq>

08000ad8 <__aeabi_cfcmpeq>:
 8000ad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ada:	f000 f8c7 	bl	8000c6c <__lesf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	d401      	bmi.n	8000ae6 <__aeabi_cfcmpeq+0xe>
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	42c8      	cmn	r0, r1
 8000ae6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ae8 <__aeabi_fcmpeq>:
 8000ae8:	b510      	push	{r4, lr}
 8000aea:	f000 f849 	bl	8000b80 <__eqsf2>
 8000aee:	4240      	negs	r0, r0
 8000af0:	3001      	adds	r0, #1
 8000af2:	bd10      	pop	{r4, pc}

08000af4 <__aeabi_fcmplt>:
 8000af4:	b510      	push	{r4, lr}
 8000af6:	f000 f8b9 	bl	8000c6c <__lesf2>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	db01      	blt.n	8000b02 <__aeabi_fcmplt+0xe>
 8000afe:	2000      	movs	r0, #0
 8000b00:	bd10      	pop	{r4, pc}
 8000b02:	2001      	movs	r0, #1
 8000b04:	bd10      	pop	{r4, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)

08000b08 <__aeabi_fcmple>:
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	f000 f8af 	bl	8000c6c <__lesf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	dd01      	ble.n	8000b16 <__aeabi_fcmple+0xe>
 8000b12:	2000      	movs	r0, #0
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	2001      	movs	r0, #1
 8000b18:	bd10      	pop	{r4, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)

08000b1c <__aeabi_fcmpgt>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	f000 f857 	bl	8000bd0 <__gesf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	dc01      	bgt.n	8000b2a <__aeabi_fcmpgt+0xe>
 8000b26:	2000      	movs	r0, #0
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)

08000b30 <__aeabi_fcmpge>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	f000 f84d 	bl	8000bd0 <__gesf2>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	da01      	bge.n	8000b3e <__aeabi_fcmpge+0xe>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	bd10      	pop	{r4, pc}
 8000b3e:	2001      	movs	r0, #1
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)

08000b44 <__clzsi2>:
 8000b44:	211c      	movs	r1, #28
 8000b46:	2301      	movs	r3, #1
 8000b48:	041b      	lsls	r3, r3, #16
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d301      	bcc.n	8000b52 <__clzsi2+0xe>
 8000b4e:	0c00      	lsrs	r0, r0, #16
 8000b50:	3910      	subs	r1, #16
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	4298      	cmp	r0, r3
 8000b56:	d301      	bcc.n	8000b5c <__clzsi2+0x18>
 8000b58:	0a00      	lsrs	r0, r0, #8
 8000b5a:	3908      	subs	r1, #8
 8000b5c:	091b      	lsrs	r3, r3, #4
 8000b5e:	4298      	cmp	r0, r3
 8000b60:	d301      	bcc.n	8000b66 <__clzsi2+0x22>
 8000b62:	0900      	lsrs	r0, r0, #4
 8000b64:	3904      	subs	r1, #4
 8000b66:	a202      	add	r2, pc, #8	; (adr r2, 8000b70 <__clzsi2+0x2c>)
 8000b68:	5c10      	ldrb	r0, [r2, r0]
 8000b6a:	1840      	adds	r0, r0, r1
 8000b6c:	4770      	bx	lr
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	02020304 	.word	0x02020304
 8000b74:	01010101 	.word	0x01010101
	...

08000b80 <__eqsf2>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	0042      	lsls	r2, r0, #1
 8000b84:	024e      	lsls	r6, r1, #9
 8000b86:	004c      	lsls	r4, r1, #1
 8000b88:	0245      	lsls	r5, r0, #9
 8000b8a:	0a6d      	lsrs	r5, r5, #9
 8000b8c:	0e12      	lsrs	r2, r2, #24
 8000b8e:	0fc3      	lsrs	r3, r0, #31
 8000b90:	0a76      	lsrs	r6, r6, #9
 8000b92:	0e24      	lsrs	r4, r4, #24
 8000b94:	0fc9      	lsrs	r1, r1, #31
 8000b96:	2aff      	cmp	r2, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <__eqsf2+0x3a>
 8000b9a:	2cff      	cmp	r4, #255	; 0xff
 8000b9c:	d011      	beq.n	8000bc2 <__eqsf2+0x42>
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	42a2      	cmp	r2, r4
 8000ba2:	d000      	beq.n	8000ba6 <__eqsf2+0x26>
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	42b5      	cmp	r5, r6
 8000ba8:	d1fc      	bne.n	8000ba4 <__eqsf2+0x24>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d00d      	beq.n	8000bca <__eqsf2+0x4a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d1f8      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	1e45      	subs	r5, r0, #1
 8000bb6:	41a8      	sbcs	r0, r5
 8000bb8:	e7f4      	b.n	8000ba4 <__eqsf2+0x24>
 8000bba:	2001      	movs	r0, #1
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc0:	e7eb      	b.n	8000b9a <__eqsf2+0x1a>
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d1ed      	bne.n	8000ba4 <__eqsf2+0x24>
 8000bc8:	e7e9      	b.n	8000b9e <__eqsf2+0x1e>
 8000bca:	2000      	movs	r0, #0
 8000bcc:	e7ea      	b.n	8000ba4 <__eqsf2+0x24>
 8000bce:	46c0      	nop			; (mov r8, r8)

08000bd0 <__gesf2>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	004a      	lsls	r2, r1, #1
 8000bd4:	024e      	lsls	r6, r1, #9
 8000bd6:	0245      	lsls	r5, r0, #9
 8000bd8:	0044      	lsls	r4, r0, #1
 8000bda:	0a6d      	lsrs	r5, r5, #9
 8000bdc:	0e24      	lsrs	r4, r4, #24
 8000bde:	0fc3      	lsrs	r3, r0, #31
 8000be0:	0a76      	lsrs	r6, r6, #9
 8000be2:	0e12      	lsrs	r2, r2, #24
 8000be4:	0fc9      	lsrs	r1, r1, #31
 8000be6:	2cff      	cmp	r4, #255	; 0xff
 8000be8:	d015      	beq.n	8000c16 <__gesf2+0x46>
 8000bea:	2aff      	cmp	r2, #255	; 0xff
 8000bec:	d00e      	beq.n	8000c0c <__gesf2+0x3c>
 8000bee:	2c00      	cmp	r4, #0
 8000bf0:	d115      	bne.n	8000c1e <__gesf2+0x4e>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d101      	bne.n	8000bfa <__gesf2+0x2a>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d01c      	beq.n	8000c34 <__gesf2+0x64>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d014      	beq.n	8000c28 <__gesf2+0x58>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d027      	beq.n	8000c52 <__gesf2+0x82>
 8000c02:	2002      	movs	r0, #2
 8000c04:	3b01      	subs	r3, #1
 8000c06:	4018      	ands	r0, r3
 8000c08:	3801      	subs	r0, #1
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d0ee      	beq.n	8000bee <__gesf2+0x1e>
 8000c10:	2002      	movs	r0, #2
 8000c12:	4240      	negs	r0, r0
 8000c14:	e7f9      	b.n	8000c0a <__gesf2+0x3a>
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d1fa      	bne.n	8000c10 <__gesf2+0x40>
 8000c1a:	2aff      	cmp	r2, #255	; 0xff
 8000c1c:	d00e      	beq.n	8000c3c <__gesf2+0x6c>
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d10e      	bne.n	8000c40 <__gesf2+0x70>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d0ed      	beq.n	8000c02 <__gesf2+0x32>
 8000c26:	e00b      	b.n	8000c40 <__gesf2+0x70>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	3901      	subs	r1, #1
 8000c2c:	4399      	bics	r1, r3
 8000c2e:	0008      	movs	r0, r1
 8000c30:	3001      	adds	r0, #1
 8000c32:	e7ea      	b.n	8000c0a <__gesf2+0x3a>
 8000c34:	2000      	movs	r0, #0
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0e7      	beq.n	8000c0a <__gesf2+0x3a>
 8000c3a:	e7e2      	b.n	8000c02 <__gesf2+0x32>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d1e7      	bne.n	8000c10 <__gesf2+0x40>
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d1de      	bne.n	8000c02 <__gesf2+0x32>
 8000c44:	4294      	cmp	r4, r2
 8000c46:	dd05      	ble.n	8000c54 <__gesf2+0x84>
 8000c48:	2102      	movs	r1, #2
 8000c4a:	1e58      	subs	r0, r3, #1
 8000c4c:	4008      	ands	r0, r1
 8000c4e:	3801      	subs	r0, #1
 8000c50:	e7db      	b.n	8000c0a <__gesf2+0x3a>
 8000c52:	2400      	movs	r4, #0
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	dc04      	bgt.n	8000c62 <__gesf2+0x92>
 8000c58:	42b5      	cmp	r5, r6
 8000c5a:	d8d2      	bhi.n	8000c02 <__gesf2+0x32>
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	42b5      	cmp	r5, r6
 8000c60:	d2d3      	bcs.n	8000c0a <__gesf2+0x3a>
 8000c62:	1e58      	subs	r0, r3, #1
 8000c64:	2301      	movs	r3, #1
 8000c66:	4398      	bics	r0, r3
 8000c68:	3001      	adds	r0, #1
 8000c6a:	e7ce      	b.n	8000c0a <__gesf2+0x3a>

08000c6c <__lesf2>:
 8000c6c:	b530      	push	{r4, r5, lr}
 8000c6e:	0042      	lsls	r2, r0, #1
 8000c70:	0244      	lsls	r4, r0, #9
 8000c72:	024d      	lsls	r5, r1, #9
 8000c74:	0fc3      	lsrs	r3, r0, #31
 8000c76:	0048      	lsls	r0, r1, #1
 8000c78:	0a64      	lsrs	r4, r4, #9
 8000c7a:	0e12      	lsrs	r2, r2, #24
 8000c7c:	0a6d      	lsrs	r5, r5, #9
 8000c7e:	0e00      	lsrs	r0, r0, #24
 8000c80:	0fc9      	lsrs	r1, r1, #31
 8000c82:	2aff      	cmp	r2, #255	; 0xff
 8000c84:	d012      	beq.n	8000cac <__lesf2+0x40>
 8000c86:	28ff      	cmp	r0, #255	; 0xff
 8000c88:	d00c      	beq.n	8000ca4 <__lesf2+0x38>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d112      	bne.n	8000cb4 <__lesf2+0x48>
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d119      	bne.n	8000cc6 <__lesf2+0x5a>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d117      	bne.n	8000cc6 <__lesf2+0x5a>
 8000c96:	2c00      	cmp	r4, #0
 8000c98:	d02b      	beq.n	8000cf2 <__lesf2+0x86>
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	4018      	ands	r0, r3
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e026      	b.n	8000cf2 <__lesf2+0x86>
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d0f0      	beq.n	8000c8a <__lesf2+0x1e>
 8000ca8:	2002      	movs	r0, #2
 8000caa:	e022      	b.n	8000cf2 <__lesf2+0x86>
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d1fb      	bne.n	8000ca8 <__lesf2+0x3c>
 8000cb0:	28ff      	cmp	r0, #255	; 0xff
 8000cb2:	d01f      	beq.n	8000cf4 <__lesf2+0x88>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d11f      	bne.n	8000cf8 <__lesf2+0x8c>
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d11d      	bne.n	8000cf8 <__lesf2+0x8c>
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4018      	ands	r0, r3
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	e015      	b.n	8000cf2 <__lesf2+0x86>
 8000cc6:	2c00      	cmp	r4, #0
 8000cc8:	d00e      	beq.n	8000ce8 <__lesf2+0x7c>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d1e5      	bne.n	8000c9a <__lesf2+0x2e>
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	dc04      	bgt.n	8000cde <__lesf2+0x72>
 8000cd4:	42ac      	cmp	r4, r5
 8000cd6:	d8e0      	bhi.n	8000c9a <__lesf2+0x2e>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	42ac      	cmp	r4, r5
 8000cdc:	d209      	bcs.n	8000cf2 <__lesf2+0x86>
 8000cde:	1e58      	subs	r0, r3, #1
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	4398      	bics	r0, r3
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	e004      	b.n	8000cf2 <__lesf2+0x86>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	3901      	subs	r1, #1
 8000cec:	4399      	bics	r1, r3
 8000cee:	0008      	movs	r0, r1
 8000cf0:	3001      	adds	r0, #1
 8000cf2:	bd30      	pop	{r4, r5, pc}
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d1d7      	bne.n	8000ca8 <__lesf2+0x3c>
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d1ce      	bne.n	8000c9a <__lesf2+0x2e>
 8000cfc:	4282      	cmp	r2, r0
 8000cfe:	dde7      	ble.n	8000cd0 <__lesf2+0x64>
 8000d00:	2102      	movs	r1, #2
 8000d02:	1e58      	subs	r0, r3, #1
 8000d04:	4008      	ands	r0, r1
 8000d06:	3801      	subs	r0, #1
 8000d08:	e7f3      	b.n	8000cf2 <__lesf2+0x86>
 8000d0a:	46c0      	nop			; (mov r8, r8)

08000d0c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_Init+0x24>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_Init+0x24>)
 8000d16:	2110      	movs	r1, #16
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f809 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f002 fedf 	bl	8003ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40022000 	.word	0x40022000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000d3c:	f001 fe58 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8000d40:	0002      	movs	r2, r0
 8000d42:	23fa      	movs	r3, #250	; 0xfa
 8000d44:	0099      	lsls	r1, r3, #2
 8000d46:	0010      	movs	r0, r2
 8000d48:	f7ff f9de 	bl	8000108 <__udivsi3>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 ffbf 	bl	8001cd2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	2301      	movs	r3, #1
 8000d58:	425b      	negs	r3, r3
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 ff93 	bl	8001c88 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick++;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_IncTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <HAL_IncTick+0x14>)
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000354 	.word	0x20000354

08000d84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <HAL_GetTick+0x10>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	20000354 	.word	0x20000354

08000d98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e0f0      	b.n	8000f8c <HAL_CAN_Init+0x1f4>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2220      	movs	r2, #32
 8000dae:	5c9b      	ldrb	r3, [r3, r2]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d103      	bne.n	8000dbe <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0018      	movs	r0, r3
 8000dba:	f003 fa49 	bl	8004250 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2102      	movs	r1, #2
 8000dca:	438a      	bics	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dce:	f7ff ffd9 	bl	8000d84 <HAL_GetTick>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dd6:	e013      	b.n	8000e00 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dd8:	f7ff ffd4 	bl	8000d84 <HAL_GetTick>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b0a      	cmp	r3, #10
 8000de4:	d90c      	bls.n	8000e00 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	0292      	lsls	r2, r2, #10
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2220      	movs	r2, #32
 8000df8:	2105      	movs	r1, #5
 8000dfa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e0c5      	b.n	8000f8c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2202      	movs	r2, #2
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d1e5      	bne.n	8000dd8 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e1c:	f7ff ffb2 	bl	8000d84 <HAL_GetTick>
 8000e20:	0003      	movs	r3, r0
 8000e22:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e24:	e013      	b.n	8000e4e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e26:	f7ff ffad 	bl	8000d84 <HAL_GetTick>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b0a      	cmp	r3, #10
 8000e32:	d90c      	bls.n	8000e4e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0292      	lsls	r2, r2, #10
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2220      	movs	r2, #32
 8000e46:	2105      	movs	r1, #5
 8000e48:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e09e      	b.n	8000f8c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	d0e5      	beq.n	8000e26 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7e1b      	ldrb	r3, [r3, #24]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	438a      	bics	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e5b      	ldrb	r3, [r3, #25]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2140      	movs	r1, #64	; 0x40
 8000eaa:	438a      	bics	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7e9b      	ldrb	r3, [r3, #26]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7edb      	ldrb	r3, [r3, #27]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2110      	movs	r1, #16
 8000eec:	438a      	bics	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2110      	movs	r1, #16
 8000efe:	430a      	orrs	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7f1b      	ldrb	r3, [r3, #28]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2108      	movs	r1, #8
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2108      	movs	r1, #8
 8000f28:	438a      	bics	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7f5b      	ldrb	r3, [r3, #29]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d108      	bne.n	8000f46 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2104      	movs	r1, #4
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e007      	b.n	8000f56 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2104      	movs	r1, #4
 8000f52:	438a      	bics	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2220      	movs	r2, #32
 8000f86:	2101      	movs	r1, #1
 8000f88:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b004      	add	sp, #16
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fa4:	2013      	movs	r0, #19
 8000fa6:	183b      	adds	r3, r7, r0
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	2120      	movs	r1, #32
 8000fac:	5c52      	ldrb	r2, [r2, r1]
 8000fae:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fb0:	183b      	adds	r3, r7, r0
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d005      	beq.n	8000fc4 <HAL_CAN_ConfigFilter+0x30>
 8000fb8:	2313      	movs	r3, #19
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d000      	beq.n	8000fc4 <HAL_CAN_ConfigFilter+0x30>
 8000fc2:	e0cd      	b.n	8001160 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	58d3      	ldr	r3, [r2, r3]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	221f      	movs	r2, #31
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	2387      	movs	r3, #135	; 0x87
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	58d3      	ldr	r3, [r2, r3]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	43d2      	mvns	r2, r2
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	0011      	movs	r1, r2
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	2387      	movs	r3, #135	; 0x87
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d129      	bne.n	800105e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	2383      	movs	r3, #131	; 0x83
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	58d3      	ldr	r3, [r2, r3]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	43d2      	mvns	r2, r2
 8001016:	401a      	ands	r2, r3
 8001018:	0011      	movs	r1, r2
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	2383      	movs	r3, #131	; 0x83
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	041b      	lsls	r3, r3, #16
 800102e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001034:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3248      	adds	r2, #72	; 0x48
 800103a:	00d2      	lsls	r2, r2, #3
 800103c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001050:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001052:	6979      	ldr	r1, [r7, #20]
 8001054:	3348      	adds	r3, #72	; 0x48
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	18cb      	adds	r3, r1, r3
 800105a:	3304      	adds	r3, #4
 800105c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d128      	bne.n	80010b8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	2383      	movs	r3, #131	; 0x83
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	58d2      	ldr	r2, [r2, r3]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	431a      	orrs	r2, r3
 8001072:	0011      	movs	r1, r2
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	2383      	movs	r3, #131	; 0x83
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	041b      	lsls	r3, r3, #16
 8001088:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800108e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3248      	adds	r2, #72	; 0x48
 8001094:	00d2      	lsls	r2, r2, #3
 8001096:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ac:	6979      	ldr	r1, [r7, #20]
 80010ae:	3348      	adds	r3, #72	; 0x48
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	18cb      	adds	r3, r1, r3
 80010b4:	3304      	adds	r3, #4
 80010b6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10c      	bne.n	80010da <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	2381      	movs	r3, #129	; 0x81
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	58d3      	ldr	r3, [r2, r3]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	43d2      	mvns	r2, r2
 80010cc:	401a      	ands	r2, r3
 80010ce:	0011      	movs	r1, r2
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	2381      	movs	r3, #129	; 0x81
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	50d1      	str	r1, [r2, r3]
 80010d8:	e00a      	b.n	80010f0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	2381      	movs	r3, #129	; 0x81
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	58d2      	ldr	r2, [r2, r3]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	0011      	movs	r1, r2
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	2381      	movs	r3, #129	; 0x81
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10c      	bne.n	8001112 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	2385      	movs	r3, #133	; 0x85
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	58d3      	ldr	r3, [r2, r3]
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	43d2      	mvns	r2, r2
 8001104:	401a      	ands	r2, r3
 8001106:	0011      	movs	r1, r2
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	2385      	movs	r3, #133	; 0x85
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	50d1      	str	r1, [r2, r3]
 8001110:	e00a      	b.n	8001128 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	2385      	movs	r3, #133	; 0x85
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	58d2      	ldr	r2, [r2, r3]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	431a      	orrs	r2, r3
 800111e:	0011      	movs	r1, r2
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	2385      	movs	r3, #133	; 0x85
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d10a      	bne.n	8001146 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	2387      	movs	r3, #135	; 0x87
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	58d2      	ldr	r2, [r2, r3]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	431a      	orrs	r2, r3
 800113c:	0011      	movs	r1, r2
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	2387      	movs	r3, #135	; 0x87
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	58d3      	ldr	r3, [r2, r3]
 800114e:	2201      	movs	r2, #1
 8001150:	4393      	bics	r3, r2
 8001152:	0019      	movs	r1, r3
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	e007      	b.n	8001170 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	02d2      	lsls	r2, r2, #11
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
  }
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b006      	add	sp, #24
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2220      	movs	r2, #32
 8001184:	5c9b      	ldrb	r3, [r3, r2]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d12f      	bne.n	80011ec <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2220      	movs	r2, #32
 8001190:	2102      	movs	r1, #2
 8001192:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2101      	movs	r1, #1
 80011a0:	438a      	bics	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011a4:	f7ff fdee 	bl	8000d84 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011ac:	e013      	b.n	80011d6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011ae:	f7ff fde9 	bl	8000d84 <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b0a      	cmp	r3, #10
 80011ba:	d90c      	bls.n	80011d6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	0292      	lsls	r2, r2, #10
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2220      	movs	r2, #32
 80011ce:	2105      	movs	r1, #5
 80011d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e012      	b.n	80011fc <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	4013      	ands	r3, r2
 80011e0:	d1e5      	bne.n	80011ae <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e007      	b.n	80011fc <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0312      	lsls	r2, r2, #12
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
  }
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001212:	201f      	movs	r0, #31
 8001214:	183b      	adds	r3, r7, r0
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	2120      	movs	r1, #32
 800121a:	5c52      	ldrb	r2, [r2, r1]
 800121c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001226:	183b      	adds	r3, r7, r0
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_CAN_AddTxMessage+0x36>
 800122e:	231f      	movs	r3, #31
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d000      	beq.n	800123a <HAL_CAN_AddTxMessage+0x36>
 8001238:	e0b7      	b.n	80013aa <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	04db      	lsls	r3, r3, #19
 8001240:	4013      	ands	r3, r2
 8001242:	d10a      	bne.n	800125a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	051b      	lsls	r3, r3, #20
 800124a:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800124c:	d105      	bne.n	800125a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	055b      	lsls	r3, r3, #21
 8001254:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001256:	d100      	bne.n	800125a <HAL_CAN_AddTxMessage+0x56>
 8001258:	e09e      	b.n	8001398 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	0e1b      	lsrs	r3, r3, #24
 800125e:	2203      	movs	r2, #3
 8001260:	4013      	ands	r3, r2
 8001262:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d908      	bls.n	800127c <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	0412      	lsls	r2, r2, #16
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e09e      	b.n	80013ba <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800127c:	2201      	movs	r2, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	409a      	lsls	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4311      	orrs	r1, r2
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	3218      	adds	r2, #24
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	50d1      	str	r1, [r2, r3]
 80012a6:	e00f      	b.n	80012c8 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b2:	431a      	orrs	r2, r3
 80012b4:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80012be:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	3218      	adds	r2, #24
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6819      	ldr	r1, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3318      	adds	r3, #24
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	18cb      	adds	r3, r1, r3
 80012d8:	3304      	adds	r3, #4
 80012da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	7d1b      	ldrb	r3, [r3, #20]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d112      	bne.n	800130a <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3318      	adds	r3, #24
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	18d3      	adds	r3, r2, r3
 80012f0:	3304      	adds	r3, #4
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3318      	adds	r3, #24
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	18cb      	adds	r3, r1, r3
 8001306:	3304      	adds	r3, #4
 8001308:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3307      	adds	r3, #7
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	061a      	lsls	r2, r3, #24
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3306      	adds	r3, #6
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	041b      	lsls	r3, r3, #16
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3305      	adds	r3, #5
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3304      	adds	r3, #4
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	0019      	movs	r1, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	6979      	ldr	r1, [r7, #20]
 8001336:	23c6      	movs	r3, #198	; 0xc6
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	0109      	lsls	r1, r1, #4
 800133c:	1841      	adds	r1, r0, r1
 800133e:	18cb      	adds	r3, r1, r3
 8001340:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3303      	adds	r3, #3
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	061a      	lsls	r2, r3, #24
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3302      	adds	r3, #2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	041b      	lsls	r3, r3, #16
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3301      	adds	r3, #1
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0019      	movs	r1, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	6979      	ldr	r1, [r7, #20]
 800136c:	23c4      	movs	r3, #196	; 0xc4
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	0109      	lsls	r1, r1, #4
 8001372:	1841      	adds	r1, r0, r1
 8001374:	18cb      	adds	r3, r1, r3
 8001376:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	3218      	adds	r2, #24
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	58d2      	ldr	r2, [r2, r3]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2101      	movs	r1, #1
 800138a:	4311      	orrs	r1, r2
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	3218      	adds	r2, #24
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e010      	b.n	80013ba <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	0392      	lsls	r2, r2, #14
 80013a0:	431a      	orrs	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e007      	b.n	80013ba <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	02d2      	lsls	r2, r2, #11
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
  }
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b008      	add	sp, #32
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ce:	200b      	movs	r0, #11
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	2120      	movs	r1, #32
 80013d6:	5c52      	ldrb	r2, [r2, r1]
 80013d8:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80013da:	183b      	adds	r3, r7, r0
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d004      	beq.n	80013ec <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 80013e2:	230b      	movs	r3, #11
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d11d      	bne.n	8001428 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	04db      	lsls	r3, r3, #19
 80013f6:	4013      	ands	r3, r2
 80013f8:	d002      	beq.n	8001400 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3301      	adds	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	051b      	lsls	r3, r3, #20
 800140a:	4013      	ands	r3, r2
 800140c:	d002      	beq.n	8001414 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3301      	adds	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	055b      	lsls	r3, r3, #21
 800141e:	4013      	ands	r3, r2
 8001420:	d002      	beq.n	8001428 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3301      	adds	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001428:	68fb      	ldr	r3, [r7, #12]
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b004      	add	sp, #16
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001440:	2017      	movs	r0, #23
 8001442:	183b      	adds	r3, r7, r0
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	2120      	movs	r1, #32
 8001448:	5c52      	ldrb	r2, [r2, r1]
 800144a:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800144c:	183b      	adds	r3, r7, r0
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d005      	beq.n	8001460 <HAL_CAN_GetRxMessage+0x2e>
 8001454:	2317      	movs	r3, #23
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d000      	beq.n	8001460 <HAL_CAN_GetRxMessage+0x2e>
 800145e:	e0f9      	b.n	8001654 <HAL_CAN_GetRxMessage+0x222>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10e      	bne.n	8001484 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2203      	movs	r2, #3
 800146e:	4013      	ands	r3, r2
 8001470:	d117      	bne.n	80014a2 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	0392      	lsls	r2, r2, #14
 800147a:	431a      	orrs	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0ef      	b.n	8001664 <HAL_CAN_GetRxMessage+0x232>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	2203      	movs	r2, #3
 800148c:	4013      	ands	r3, r2
 800148e:	d108      	bne.n	80014a2 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0392      	lsls	r2, r2, #14
 8001498:	431a      	orrs	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0e0      	b.n	8001664 <HAL_CAN_GetRxMessage+0x232>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	321b      	adds	r2, #27
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	58d3      	ldr	r3, [r2, r3]
 80014ae:	2204      	movs	r2, #4
 80014b0:	401a      	ands	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10b      	bne.n	80014d6 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	321b      	adds	r2, #27
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	58d3      	ldr	r3, [r2, r3]
 80014ca:	0d5b      	lsrs	r3, r3, #21
 80014cc:	055b      	lsls	r3, r3, #21
 80014ce:	0d5a      	lsrs	r2, r3, #21
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e00a      	b.n	80014ec <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	321b      	adds	r2, #27
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	58d3      	ldr	r3, [r2, r3]
 80014e2:	08db      	lsrs	r3, r3, #3
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	321b      	adds	r2, #27
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	58d3      	ldr	r3, [r2, r3]
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	2201      	movs	r2, #1
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	331b      	adds	r3, #27
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	3304      	adds	r3, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	220f      	movs	r2, #15
 8001514:	401a      	ands	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	331b      	adds	r3, #27
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	3304      	adds	r3, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	22ff      	movs	r2, #255	; 0xff
 800152e:	401a      	ands	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	331b      	adds	r3, #27
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	18d3      	adds	r3, r2, r3
 8001540:	3304      	adds	r3, #4
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0c1b      	lsrs	r3, r3, #16
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	0c1a      	lsrs	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	23dc      	movs	r3, #220	; 0xdc
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	188a      	adds	r2, r1, r2
 800155c:	18d3      	adds	r3, r2, r3
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6819      	ldr	r1, [r3, #0]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	23dc      	movs	r3, #220	; 0xdc
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	188a      	adds	r2, r1, r2
 8001574:	18d3      	adds	r3, r2, r3
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0a1a      	lsrs	r2, r3, #8
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	23dc      	movs	r3, #220	; 0xdc
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	188a      	adds	r2, r1, r2
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0c1a      	lsrs	r2, r3, #16
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3302      	adds	r3, #2
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	23dc      	movs	r3, #220	; 0xdc
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	188a      	adds	r2, r1, r2
 80015ac:	18d3      	adds	r3, r2, r3
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0e1a      	lsrs	r2, r3, #24
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3303      	adds	r3, #3
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	23de      	movs	r3, #222	; 0xde
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	188a      	adds	r2, r1, r2
 80015c8:	18d3      	adds	r3, r2, r3
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	3304      	adds	r3, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	23de      	movs	r3, #222	; 0xde
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	188a      	adds	r2, r1, r2
 80015e2:	18d3      	adds	r3, r2, r3
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0a1a      	lsrs	r2, r3, #8
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	3305      	adds	r3, #5
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6819      	ldr	r1, [r3, #0]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	23de      	movs	r3, #222	; 0xde
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	188a      	adds	r2, r1, r2
 80015fe:	18d3      	adds	r3, r2, r3
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0c1a      	lsrs	r2, r3, #16
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3306      	adds	r3, #6
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	23de      	movs	r3, #222	; 0xde
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	188a      	adds	r2, r1, r2
 800161a:	18d3      	adds	r3, r2, r3
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0e1a      	lsrs	r2, r3, #24
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3307      	adds	r3, #7
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <HAL_CAN_GetRxMessage+0x20e>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2120      	movs	r1, #32
 800163a:	430a      	orrs	r2, r1
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	e007      	b.n	8001650 <HAL_CAN_GetRxMessage+0x21e>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2120      	movs	r1, #32
 800164c:	430a      	orrs	r2, r1
 800164e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e007      	b.n	8001664 <HAL_CAN_GetRxMessage+0x232>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	02d2      	lsls	r2, r2, #11
 800165c:	431a      	orrs	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
  }
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b006      	add	sp, #24
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800167a:	200b      	movs	r0, #11
 800167c:	183b      	adds	r3, r7, r0
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	2120      	movs	r1, #32
 8001682:	5c52      	ldrb	r2, [r2, r1]
 8001684:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001686:	183b      	adds	r3, r7, r0
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d004      	beq.n	8001698 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 800168e:	230b      	movs	r3, #11
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d10f      	bne.n	80016b8 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d106      	bne.n	80016ac <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2203      	movs	r2, #3
 80016a6:	4013      	ands	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e005      	b.n	80016b8 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2203      	movs	r2, #3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80016b8:	68fb      	ldr	r3, [r7, #12]
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b004      	add	sp, #16
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016cc:	200f      	movs	r0, #15
 80016ce:	183b      	adds	r3, r7, r0
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	2120      	movs	r1, #32
 80016d4:	5c52      	ldrb	r2, [r2, r1]
 80016d6:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016d8:	183b      	adds	r3, r7, r0
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d004      	beq.n	80016ea <HAL_CAN_ActivateNotification+0x28>
 80016e0:	230f      	movs	r3, #15
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d109      	bne.n	80016fe <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6959      	ldr	r1, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e007      	b.n	800170e <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	02d2      	lsls	r2, r2, #11
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
  }
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b08a      	sub	sp, #40	; 0x28
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	d100      	bne.n	800175c <HAL_CAN_IRQHandler+0x46>
 800175a:	e084      	b.n	8001866 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2201      	movs	r2, #1
 8001760:	4013      	ands	r3, r2
 8001762:	d024      	beq.n	80017ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2201      	movs	r2, #1
 800176a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d004      	beq.n	800177e <HAL_CAN_IRQHandler+0x68>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	0018      	movs	r0, r3
 8001778:	f000 f97e 	bl	8001a78 <HAL_CAN_TxMailbox0CompleteCallback>
 800177c:	e017      	b.n	80017ae <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2204      	movs	r2, #4
 8001782:	4013      	ands	r3, r2
 8001784:	d005      	beq.n	8001792 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	4313      	orrs	r3, r2
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
 8001790:	e00d      	b.n	80017ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2208      	movs	r2, #8
 8001796:	4013      	ands	r3, r2
 8001798:	d005      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	0152      	lsls	r2, r2, #5
 80017a0:	4313      	orrs	r3, r2
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
 80017a4:	e003      	b.n	80017ae <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f000 f97d 	bl	8001aa8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4013      	ands	r3, r2
 80017b6:	d028      	beq.n	800180a <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	0052      	lsls	r2, r2, #1
 80017c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	d004      	beq.n	80017d6 <HAL_CAN_IRQHandler+0xc0>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 f95a 	bl	8001a88 <HAL_CAN_TxMailbox1CompleteCallback>
 80017d4:	e019      	b.n	800180a <HAL_CAN_IRQHandler+0xf4>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	d005      	beq.n	80017ec <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0192      	lsls	r2, r2, #6
 80017e6:	4313      	orrs	r3, r2
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	e00e      	b.n	800180a <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4013      	ands	r3, r2
 80017f4:	d005      	beq.n	8001802 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	01d2      	lsls	r2, r2, #7
 80017fc:	4313      	orrs	r3, r2
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001800:	e003      	b.n	800180a <HAL_CAN_IRQHandler+0xf4>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0018      	movs	r0, r3
 8001806:	f000 f957 	bl	8001ab8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	4013      	ands	r3, r2
 8001812:	d028      	beq.n	8001866 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	0252      	lsls	r2, r2, #9
 800181c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	d004      	beq.n	8001832 <HAL_CAN_IRQHandler+0x11c>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0018      	movs	r0, r3
 800182c:	f000 f934 	bl	8001a98 <HAL_CAN_TxMailbox2CompleteCallback>
 8001830:	e019      	b.n	8001866 <HAL_CAN_IRQHandler+0x150>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	02db      	lsls	r3, r3, #11
 8001838:	4013      	ands	r3, r2
 800183a:	d005      	beq.n	8001848 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	0212      	lsls	r2, r2, #8
 8001842:	4313      	orrs	r3, r2
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
 8001846:	e00e      	b.n	8001866 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	031b      	lsls	r3, r3, #12
 800184e:	4013      	ands	r3, r2
 8001850:	d005      	beq.n	800185e <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	0252      	lsls	r2, r2, #9
 8001858:	4313      	orrs	r3, r2
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
 800185c:	e003      	b.n	8001866 <HAL_CAN_IRQHandler+0x150>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0018      	movs	r0, r3
 8001862:	f000 f931 	bl	8001ac8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	2208      	movs	r2, #8
 800186a:	4013      	ands	r3, r2
 800186c:	d00c      	beq.n	8001888 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2210      	movs	r2, #16
 8001872:	4013      	ands	r3, r2
 8001874:	d008      	beq.n	8001888 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	0092      	lsls	r2, r2, #2
 800187c:	4313      	orrs	r3, r2
 800187e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2210      	movs	r2, #16
 8001886:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	2204      	movs	r2, #4
 800188c:	4013      	ands	r3, r2
 800188e:	d00b      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2208      	movs	r2, #8
 8001894:	4013      	ands	r3, r2
 8001896:	d007      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2208      	movs	r2, #8
 800189e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 f918 	bl	8001ad8 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	2202      	movs	r2, #2
 80018ac:	4013      	ands	r3, r2
 80018ae:	d009      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2203      	movs	r2, #3
 80018b8:	4013      	ands	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x1ae>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0018      	movs	r0, r3
 80018c0:	f002 fc77 	bl	80041b2 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2240      	movs	r2, #64	; 0x40
 80018c8:	4013      	ands	r3, r2
 80018ca:	d00c      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2210      	movs	r2, #16
 80018d0:	4013      	ands	r3, r2
 80018d2:	d008      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	00d2      	lsls	r2, r2, #3
 80018da:	4313      	orrs	r3, r2
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2210      	movs	r2, #16
 80018e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	2220      	movs	r2, #32
 80018ea:	4013      	ands	r3, r2
 80018ec:	d00b      	beq.n	8001906 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2208      	movs	r2, #8
 80018f2:	4013      	ands	r3, r2
 80018f4:	d007      	beq.n	8001906 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2208      	movs	r2, #8
 80018fc:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0018      	movs	r0, r3
 8001902:	f000 f8f9 	bl	8001af8 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	2210      	movs	r2, #16
 800190a:	4013      	ands	r3, r2
 800190c:	d009      	beq.n	8001922 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	2203      	movs	r2, #3
 8001916:	4013      	ands	r3, r2
 8001918:	d003      	beq.n	8001922 <HAL_CAN_IRQHandler+0x20c>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0018      	movs	r0, r3
 800191e:	f000 f8e3 	bl	8001ae8 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001922:	6a3a      	ldr	r2, [r7, #32]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	029b      	lsls	r3, r3, #10
 8001928:	4013      	ands	r3, r2
 800192a:	d00b      	beq.n	8001944 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2210      	movs	r2, #16
 8001930:	4013      	ands	r3, r2
 8001932:	d007      	beq.n	8001944 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2210      	movs	r2, #16
 800193a:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	0018      	movs	r0, r3
 8001940:	f000 f8e2 	bl	8001b08 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001944:	6a3a      	ldr	r2, [r7, #32]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	4013      	ands	r3, r2
 800194c:	d00b      	beq.n	8001966 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2208      	movs	r2, #8
 8001952:	4013      	ands	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2208      	movs	r2, #8
 800195c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f000 f8d9 	bl	8001b18 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001966:	6a3a      	ldr	r2, [r7, #32]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4013      	ands	r3, r2
 800196e:	d100      	bne.n	8001972 <HAL_CAN_IRQHandler+0x25c>
 8001970:	e071      	b.n	8001a56 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	2204      	movs	r2, #4
 8001976:	4013      	ands	r3, r2
 8001978:	d100      	bne.n	800197c <HAL_CAN_IRQHandler+0x266>
 800197a:	e068      	b.n	8001a4e <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800197c:	6a3a      	ldr	r2, [r7, #32]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4013      	ands	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800198c:	d003      	beq.n	8001996 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	2201      	movs	r2, #1
 8001992:	4313      	orrs	r3, r2
 8001994:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001996:	6a3a      	ldr	r2, [r7, #32]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d007      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019a6:	d003      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	2202      	movs	r2, #2
 80019ac:	4313      	orrs	r3, r2
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019b0:	6a3a      	ldr	r2, [r7, #32]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4013      	ands	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2204      	movs	r2, #4
 80019be:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019c0:	d003      	beq.n	80019ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	2204      	movs	r2, #4
 80019c6:	4313      	orrs	r3, r2
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ca:	6a3a      	ldr	r2, [r7, #32]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	4013      	ands	r3, r2
 80019d2:	d03c      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2270      	movs	r2, #112	; 0x70
 80019d8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019da:	d038      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2270      	movs	r2, #112	; 0x70
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b30      	cmp	r3, #48	; 0x30
 80019e4:	d016      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x2fe>
 80019e6:	d804      	bhi.n	80019f2 <HAL_CAN_IRQHandler+0x2dc>
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d009      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x2ea>
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d00c      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019f0:	e025      	b.n	8001a3e <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 80019f2:	2b50      	cmp	r3, #80	; 0x50
 80019f4:	d018      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x312>
 80019f6:	2b60      	cmp	r3, #96	; 0x60
 80019f8:	d01b      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x31c>
 80019fa:	2b40      	cmp	r3, #64	; 0x40
 80019fc:	d00f      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x308>
            break;
 80019fe:	e01e      	b.n	8001a3e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	2208      	movs	r2, #8
 8001a04:	4313      	orrs	r3, r2
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a08:	e019      	b.n	8001a3e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a12:	e014      	b.n	8001a3e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	2220      	movs	r2, #32
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a1c:	e00f      	b.n	8001a3e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	4313      	orrs	r3, r2
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a26:	e00a      	b.n	8001a3e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a30:	e005      	b.n	8001a3e <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	0052      	lsls	r2, r2, #1
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a3c:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2170      	movs	r1, #112	; 0x70
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2204      	movs	r2, #4
 8001a54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f000 f85c 	bl	8001b28 <HAL_CAN_ErrorCallback>
  }
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b00a      	add	sp, #40	; 0x28
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b002      	add	sp, #8
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b002      	add	sp, #8
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	0002      	movs	r2, r0
 8001b40:	1dfb      	adds	r3, r7, #7
 8001b42:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b44:	1dfb      	adds	r3, r7, #7
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	001a      	movs	r2, r3
 8001b4a:	231f      	movs	r3, #31
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <NVIC_EnableIRQ+0x28>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	4091      	lsls	r1, r2
 8001b54:	000a      	movs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b7f      	cmp	r3, #127	; 0x7f
 8001b78:	d932      	bls.n	8001be0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b7a:	4a2f      	ldr	r2, [pc, #188]	; (8001c38 <NVIC_SetPriority+0xd4>)
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	0019      	movs	r1, r3
 8001b82:	230f      	movs	r3, #15
 8001b84:	400b      	ands	r3, r1
 8001b86:	3b08      	subs	r3, #8
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3306      	adds	r3, #6
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	18d3      	adds	r3, r2, r3
 8001b90:	3304      	adds	r3, #4
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	1dfa      	adds	r2, r7, #7
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	0011      	movs	r1, r2
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	00d2      	lsls	r2, r2, #3
 8001ba0:	21ff      	movs	r1, #255	; 0xff
 8001ba2:	4091      	lsls	r1, r2
 8001ba4:	000a      	movs	r2, r1
 8001ba6:	43d2      	mvns	r2, r2
 8001ba8:	401a      	ands	r2, r3
 8001baa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	019b      	lsls	r3, r3, #6
 8001bb0:	22ff      	movs	r2, #255	; 0xff
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	1dfb      	adds	r3, r7, #7
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	2303      	movs	r3, #3
 8001bbc:	4003      	ands	r3, r0
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bc2:	481d      	ldr	r0, [pc, #116]	; (8001c38 <NVIC_SetPriority+0xd4>)
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	001c      	movs	r4, r3
 8001bca:	230f      	movs	r3, #15
 8001bcc:	4023      	ands	r3, r4
 8001bce:	3b08      	subs	r3, #8
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	3306      	adds	r3, #6
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	18c3      	adds	r3, r0, r3
 8001bda:	3304      	adds	r3, #4
 8001bdc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bde:	e027      	b.n	8001c30 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <NVIC_SetPriority+0xd8>)
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	33c0      	adds	r3, #192	; 0xc0
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	589b      	ldr	r3, [r3, r2]
 8001bf0:	1dfa      	adds	r2, r7, #7
 8001bf2:	7812      	ldrb	r2, [r2, #0]
 8001bf4:	0011      	movs	r1, r2
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	00d2      	lsls	r2, r2, #3
 8001bfc:	21ff      	movs	r1, #255	; 0xff
 8001bfe:	4091      	lsls	r1, r2
 8001c00:	000a      	movs	r2, r1
 8001c02:	43d2      	mvns	r2, r2
 8001c04:	401a      	ands	r2, r3
 8001c06:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	019b      	lsls	r3, r3, #6
 8001c0c:	22ff      	movs	r2, #255	; 0xff
 8001c0e:	401a      	ands	r2, r3
 8001c10:	1dfb      	adds	r3, r7, #7
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	0018      	movs	r0, r3
 8001c16:	2303      	movs	r3, #3
 8001c18:	4003      	ands	r3, r0
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c1e:	4807      	ldr	r0, [pc, #28]	; (8001c3c <NVIC_SetPriority+0xd8>)
 8001c20:	1dfb      	adds	r3, r7, #7
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	33c0      	adds	r3, #192	; 0xc0
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	501a      	str	r2, [r3, r0]
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b003      	add	sp, #12
 8001c36:	bd90      	pop	{r4, r7, pc}
 8001c38:	e000ed00 	.word	0xe000ed00
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <SysTick_Config+0x40>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e010      	b.n	8001c78 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <SysTick_Config+0x44>)
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	425b      	negs	r3, r3
 8001c62:	2103      	movs	r1, #3
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff ff7d 	bl	8001b64 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SysTick_Config+0x44>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <SysTick_Config+0x44>)
 8001c72:	2207      	movs	r2, #7
 8001c74:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	00ffffff 	.word	0x00ffffff
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	210f      	movs	r1, #15
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	1c02      	adds	r2, r0, #0
 8001c98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <NVIC_SetPriority>
}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b004      	add	sp, #16
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	0002      	movs	r2, r0
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff ff37 	bl	8001b38 <NVIC_EnableIRQ>
}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff ffaf 	bl	8001c40 <SysTick_Config>
 8001ce2:	0003      	movs	r3, r0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001d02:	e155      	b.n	8001fb0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4091      	lsls	r1, r2
 8001d0e:	000a      	movs	r2, r1
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d100      	bne.n	8001d1c <HAL_GPIO_Init+0x30>
 8001d1a:	e146      	b.n	8001faa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x40>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b12      	cmp	r3, #18
 8001d2a:	d123      	bne.n	8001d74 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	58d3      	ldr	r3, [r2, r3]
 8001d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	4013      	ands	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	409a      	lsls	r2, r3
 8001d46:	0013      	movs	r3, r2
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2107      	movs	r1, #7
 8001d58:	400b      	ands	r3, r1
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	0013      	movs	r3, r2
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	6939      	ldr	r1, [r7, #16]
 8001d72:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	409a      	lsls	r2, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	43da      	mvns	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	0013      	movs	r3, r2
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d00b      	beq.n	8001dc8 <HAL_GPIO_Init+0xdc>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d007      	beq.n	8001dc8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dbc:	2b11      	cmp	r3, #17
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d130      	bne.n	8001e2a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	2201      	movs	r2, #1
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	055b      	lsls	r3, r3, #21
 8001e62:	4013      	ands	r3, r2
 8001e64:	d100      	bne.n	8001e68 <HAL_GPIO_Init+0x17c>
 8001e66:	e0a0      	b.n	8001faa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_GPIO_Init+0x2dc>)
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <HAL_GPIO_Init+0x2dc>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	619a      	str	r2, [r3, #24]
 8001e74:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <HAL_GPIO_Init+0x2dc>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001e80:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	589b      	ldr	r3, [r3, r2]
 8001e8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2203      	movs	r2, #3
 8001e92:	4013      	ands	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	2390      	movs	r3, #144	; 0x90
 8001ea8:	05db      	lsls	r3, r3, #23
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d019      	beq.n	8001ee2 <HAL_GPIO_Init+0x1f6>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a47      	ldr	r2, [pc, #284]	; (8001fd0 <HAL_GPIO_Init+0x2e4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0x1f2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a46      	ldr	r2, [pc, #280]	; (8001fd4 <HAL_GPIO_Init+0x2e8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00d      	beq.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a45      	ldr	r2, [pc, #276]	; (8001fd8 <HAL_GPIO_Init+0x2ec>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <HAL_GPIO_Init+0x1ea>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a44      	ldr	r2, [pc, #272]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d101      	bne.n	8001ed2 <HAL_GPIO_Init+0x1e6>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e008      	b.n	8001ee4 <HAL_GPIO_Init+0x1f8>
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x1f8>
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e004      	b.n	8001ee4 <HAL_GPIO_Init+0x1f8>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e002      	b.n	8001ee4 <HAL_GPIO_Init+0x1f8>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x1f8>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	400a      	ands	r2, r1
 8001eea:	0092      	lsls	r2, r2, #2
 8001eec:	4093      	lsls	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ef4:	4935      	ldr	r1, [pc, #212]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	025b      	lsls	r3, r3, #9
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f26:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43da      	mvns	r2, r3
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	4013      	ands	r3, r2
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	035b      	lsls	r3, r3, #13
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43da      	mvns	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	039b      	lsls	r3, r3, #14
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	40da      	lsrs	r2, r3
 8001fb8:	1e13      	subs	r3, r2, #0
 8001fba:	d000      	beq.n	8001fbe <HAL_GPIO_Init+0x2d2>
 8001fbc:	e6a2      	b.n	8001d04 <HAL_GPIO_Init+0x18>
  } 
}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b006      	add	sp, #24
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	48000400 	.word	0x48000400
 8001fd4:	48000800 	.word	0x48000800
 8001fd8:	48000c00 	.word	0x48000c00
 8001fdc:	48001000 	.word	0x48001000
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	0008      	movs	r0, r1
 8001fee:	0011      	movs	r1, r2
 8001ff0:	1cbb      	adds	r3, r7, #2
 8001ff2:	1c02      	adds	r2, r0, #0
 8001ff4:	801a      	strh	r2, [r3, #0]
 8001ff6:	1c7b      	adds	r3, r7, #1
 8001ff8:	1c0a      	adds	r2, r1, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffc:	1c7b      	adds	r3, r7, #1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002004:	1cbb      	adds	r3, r7, #2
 8002006:	881a      	ldrh	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200c:	e003      	b.n	8002016 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200e:	1cbb      	adds	r3, r7, #2
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d100      	bne.n	8002038 <HAL_RCC_OscConfig+0x18>
 8002036:	e08d      	b.n	8002154 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002038:	4bc5      	ldr	r3, [pc, #788]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	220c      	movs	r2, #12
 800203e:	4013      	ands	r3, r2
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00e      	beq.n	8002062 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002044:	4bc2      	ldr	r3, [pc, #776]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	220c      	movs	r2, #12
 800204a:	4013      	ands	r3, r2
 800204c:	2b08      	cmp	r3, #8
 800204e:	d116      	bne.n	800207e <HAL_RCC_OscConfig+0x5e>
 8002050:	4bbf      	ldr	r3, [pc, #764]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	23c0      	movs	r3, #192	; 0xc0
 8002056:	025b      	lsls	r3, r3, #9
 8002058:	401a      	ands	r2, r3
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	429a      	cmp	r2, r3
 8002060:	d10d      	bne.n	800207e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002062:	4bbb      	ldr	r3, [pc, #748]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	4013      	ands	r3, r2
 800206c:	d100      	bne.n	8002070 <HAL_RCC_OscConfig+0x50>
 800206e:	e070      	b.n	8002152 <HAL_RCC_OscConfig+0x132>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d000      	beq.n	800207a <HAL_RCC_OscConfig+0x5a>
 8002078:	e06b      	b.n	8002152 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e329      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <HAL_RCC_OscConfig+0x76>
 8002086:	4bb2      	ldr	r3, [pc, #712]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4bb1      	ldr	r3, [pc, #708]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	0249      	lsls	r1, r1, #9
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e02f      	b.n	80020f6 <HAL_RCC_OscConfig+0xd6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x98>
 800209e:	4bac      	ldr	r3, [pc, #688]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4bab      	ldr	r3, [pc, #684]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020a4:	49ab      	ldr	r1, [pc, #684]	; (8002354 <HAL_RCC_OscConfig+0x334>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	4ba9      	ldr	r3, [pc, #676]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4ba8      	ldr	r3, [pc, #672]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020b0:	49a9      	ldr	r1, [pc, #676]	; (8002358 <HAL_RCC_OscConfig+0x338>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e01e      	b.n	80020f6 <HAL_RCC_OscConfig+0xd6>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d10e      	bne.n	80020de <HAL_RCC_OscConfig+0xbe>
 80020c0:	4ba3      	ldr	r3, [pc, #652]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4ba2      	ldr	r3, [pc, #648]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	02c9      	lsls	r1, r1, #11
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	4ba0      	ldr	r3, [pc, #640]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b9f      	ldr	r3, [pc, #636]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0249      	lsls	r1, r1, #9
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0xd6>
 80020de:	4b9c      	ldr	r3, [pc, #624]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b9b      	ldr	r3, [pc, #620]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020e4:	499b      	ldr	r1, [pc, #620]	; (8002354 <HAL_RCC_OscConfig+0x334>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	4b99      	ldr	r3, [pc, #612]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b98      	ldr	r3, [pc, #608]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80020f0:	4999      	ldr	r1, [pc, #612]	; (8002358 <HAL_RCC_OscConfig+0x338>)
 80020f2:	400a      	ands	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d014      	beq.n	8002128 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe fe41 	bl	8000d84 <HAL_GetTick>
 8002102:	0003      	movs	r3, r0
 8002104:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002108:	f7fe fe3c 	bl	8000d84 <HAL_GetTick>
 800210c:	0002      	movs	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e2db      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b8d      	ldr	r3, [pc, #564]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	029b      	lsls	r3, r3, #10
 8002122:	4013      	ands	r3, r2
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0xe8>
 8002126:	e015      	b.n	8002154 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe fe2c 	bl	8000d84 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002132:	f7fe fe27 	bl	8000d84 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	; 0x64
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e2c6      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002144:	4b82      	ldr	r3, [pc, #520]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x112>
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002152:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2202      	movs	r2, #2
 800215a:	4013      	ands	r3, r2
 800215c:	d100      	bne.n	8002160 <HAL_RCC_OscConfig+0x140>
 800215e:	e06c      	b.n	800223a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002160:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	220c      	movs	r2, #12
 8002166:	4013      	ands	r3, r2
 8002168:	d00e      	beq.n	8002188 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800216a:	4b79      	ldr	r3, [pc, #484]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	220c      	movs	r2, #12
 8002170:	4013      	ands	r3, r2
 8002172:	2b08      	cmp	r3, #8
 8002174:	d11f      	bne.n	80021b6 <HAL_RCC_OscConfig+0x196>
 8002176:	4b76      	ldr	r3, [pc, #472]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	23c0      	movs	r3, #192	; 0xc0
 800217c:	025b      	lsls	r3, r3, #9
 800217e:	401a      	ands	r2, r3
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	429a      	cmp	r2, r3
 8002186:	d116      	bne.n	80021b6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002188:	4b71      	ldr	r3, [pc, #452]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2202      	movs	r2, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x17e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e299      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	22f8      	movs	r2, #248	; 0xf8
 80021a4:	4393      	bics	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	00da      	lsls	r2, r3, #3
 80021ae:	4b68      	ldr	r3, [pc, #416]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b4:	e041      	b.n	800223a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d024      	beq.n	8002208 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021be:	4b64      	ldr	r3, [pc, #400]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7fe fddb 	bl	8000d84 <HAL_GetTick>
 80021ce:	0003      	movs	r3, r0
 80021d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d4:	f7fe fdd6 	bl	8000d84 <HAL_GetTick>
 80021d8:	0002      	movs	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e275      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2202      	movs	r2, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d0f1      	beq.n	80021d4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b57      	ldr	r3, [pc, #348]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	22f8      	movs	r2, #248	; 0xf8
 80021f6:	4393      	bics	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00da      	lsls	r2, r3, #3
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e018      	b.n	800223a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002208:	4b51      	ldr	r3, [pc, #324]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 800220e:	2101      	movs	r1, #1
 8002210:	438a      	bics	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe fdb6 	bl	8000d84 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221e:	f7fe fdb1 	bl	8000d84 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e250      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002230:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2202      	movs	r2, #2
 8002236:	4013      	ands	r3, r2
 8002238:	d1f1      	bne.n	800221e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2208      	movs	r2, #8
 8002240:	4013      	ands	r3, r2
 8002242:	d036      	beq.n	80022b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d019      	beq.n	8002280 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 800224e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002250:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002252:	2101      	movs	r1, #1
 8002254:	430a      	orrs	r2, r1
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7fe fd94 	bl	8000d84 <HAL_GetTick>
 800225c:	0003      	movs	r3, r0
 800225e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002262:	f7fe fd8f 	bl	8000d84 <HAL_GetTick>
 8002266:	0002      	movs	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e22e      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2202      	movs	r2, #2
 800227a:	4013      	ands	r3, r2
 800227c:	d0f1      	beq.n	8002262 <HAL_RCC_OscConfig+0x242>
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002284:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002286:	2101      	movs	r1, #1
 8002288:	438a      	bics	r2, r1
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7fe fd7a 	bl	8000d84 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7fe fd75 	bl	8000d84 <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e214      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d1f1      	bne.n	8002296 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2204      	movs	r2, #4
 80022b8:	4013      	ands	r3, r2
 80022ba:	d100      	bne.n	80022be <HAL_RCC_OscConfig+0x29e>
 80022bc:	e0b6      	b.n	800242c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2317      	movs	r3, #23
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	055b      	lsls	r3, r3, #21
 80022ce:	4013      	ands	r3, r2
 80022d0:	d111      	bne.n	80022f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0549      	lsls	r1, r1, #21
 80022dc:	430a      	orrs	r2, r1
 80022de:	61da      	str	r2, [r3, #28]
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	055b      	lsls	r3, r3, #21
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ee:	2317      	movs	r3, #23
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_RCC_OscConfig+0x33c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	d11a      	bne.n	8002338 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_RCC_OscConfig+0x33c>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_RCC_OscConfig+0x33c>)
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0049      	lsls	r1, r1, #1
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002310:	f7fe fd38 	bl	8000d84 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7fe fd33 	bl	8000d84 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1d2      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_OscConfig+0x33c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4013      	ands	r3, r2
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10f      	bne.n	8002360 <HAL_RCC_OscConfig+0x340>
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <HAL_RCC_OscConfig+0x330>)
 8002346:	2101      	movs	r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	621a      	str	r2, [r3, #32]
 800234c:	e036      	b.n	80023bc <HAL_RCC_OscConfig+0x39c>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	40021000 	.word	0x40021000
 8002354:	fffeffff 	.word	0xfffeffff
 8002358:	fffbffff 	.word	0xfffbffff
 800235c:	40007000 	.word	0x40007000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0x362>
 8002368:	4bca      	ldr	r3, [pc, #808]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	4bc9      	ldr	r3, [pc, #804]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800236e:	2101      	movs	r1, #1
 8002370:	438a      	bics	r2, r1
 8002372:	621a      	str	r2, [r3, #32]
 8002374:	4bc7      	ldr	r3, [pc, #796]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	4bc6      	ldr	r3, [pc, #792]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800237a:	2104      	movs	r1, #4
 800237c:	438a      	bics	r2, r1
 800237e:	621a      	str	r2, [r3, #32]
 8002380:	e01c      	b.n	80023bc <HAL_RCC_OscConfig+0x39c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x384>
 800238a:	4bc2      	ldr	r3, [pc, #776]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800238c:	6a1a      	ldr	r2, [r3, #32]
 800238e:	4bc1      	ldr	r3, [pc, #772]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002390:	2104      	movs	r1, #4
 8002392:	430a      	orrs	r2, r1
 8002394:	621a      	str	r2, [r3, #32]
 8002396:	4bbf      	ldr	r3, [pc, #764]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	4bbe      	ldr	r3, [pc, #760]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800239c:	2101      	movs	r1, #1
 800239e:	430a      	orrs	r2, r1
 80023a0:	621a      	str	r2, [r3, #32]
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0x39c>
 80023a4:	4bbb      	ldr	r3, [pc, #748]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	4bba      	ldr	r3, [pc, #744]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80023aa:	2101      	movs	r1, #1
 80023ac:	438a      	bics	r2, r1
 80023ae:	621a      	str	r2, [r3, #32]
 80023b0:	4bb8      	ldr	r3, [pc, #736]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	4bb7      	ldr	r3, [pc, #732]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80023b6:	2104      	movs	r1, #4
 80023b8:	438a      	bics	r2, r1
 80023ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d014      	beq.n	80023ee <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7fe fcde 	bl	8000d84 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	e009      	b.n	80023e2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe fcd9 	bl	8000d84 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4aaf      	ldr	r2, [pc, #700]	; (8002698 <HAL_RCC_OscConfig+0x678>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e177      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	4bac      	ldr	r3, [pc, #688]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	2202      	movs	r2, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x3ae>
 80023ec:	e013      	b.n	8002416 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fcc9 	bl	8000d84 <HAL_GetTick>
 80023f2:	0003      	movs	r3, r0
 80023f4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f6:	e009      	b.n	800240c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fcc4 	bl	8000d84 <HAL_GetTick>
 80023fc:	0002      	movs	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	4aa5      	ldr	r2, [pc, #660]	; (8002698 <HAL_RCC_OscConfig+0x678>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e162      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	4ba1      	ldr	r3, [pc, #644]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	2202      	movs	r2, #2
 8002412:	4013      	ands	r3, r2
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002416:	2317      	movs	r3, #23
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002420:	4b9c      	ldr	r3, [pc, #624]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	4b9b      	ldr	r3, [pc, #620]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002426:	499d      	ldr	r1, [pc, #628]	; (800269c <HAL_RCC_OscConfig+0x67c>)
 8002428:	400a      	ands	r2, r1
 800242a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2210      	movs	r2, #16
 8002432:	4013      	ands	r3, r2
 8002434:	d063      	beq.n	80024fe <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d12a      	bne.n	8002494 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800243e:	4b95      	ldr	r3, [pc, #596]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002442:	4b94      	ldr	r3, [pc, #592]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002444:	2104      	movs	r1, #4
 8002446:	430a      	orrs	r2, r1
 8002448:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800244a:	4b92      	ldr	r3, [pc, #584]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800244c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800244e:	4b91      	ldr	r3, [pc, #580]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002450:	2101      	movs	r1, #1
 8002452:	430a      	orrs	r2, r1
 8002454:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7fe fc95 	bl	8000d84 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002460:	f7fe fc90 	bl	8000d84 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e12f      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002472:	4b88      	ldr	r3, [pc, #544]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	d0f1      	beq.n	8002460 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800247c:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002480:	22f8      	movs	r2, #248	; 0xf8
 8002482:	4393      	bics	r3, r2
 8002484:	0019      	movs	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	00da      	lsls	r2, r3, #3
 800248c:	4b81      	ldr	r3, [pc, #516]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800248e:	430a      	orrs	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
 8002492:	e034      	b.n	80024fe <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	3305      	adds	r3, #5
 800249a:	d111      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800249c:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800249e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a0:	4b7c      	ldr	r3, [pc, #496]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80024a2:	2104      	movs	r1, #4
 80024a4:	438a      	bics	r2, r1
 80024a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024a8:	4b7a      	ldr	r3, [pc, #488]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	22f8      	movs	r2, #248	; 0xf8
 80024ae:	4393      	bics	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	00da      	lsls	r2, r3, #3
 80024b8:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	635a      	str	r2, [r3, #52]	; 0x34
 80024be:	e01e      	b.n	80024fe <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024c0:	4b74      	ldr	r3, [pc, #464]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80024c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c4:	4b73      	ldr	r3, [pc, #460]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80024c6:	2104      	movs	r1, #4
 80024c8:	430a      	orrs	r2, r1
 80024ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024cc:	4b71      	ldr	r3, [pc, #452]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80024ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d0:	4b70      	ldr	r3, [pc, #448]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80024d2:	2101      	movs	r1, #1
 80024d4:	438a      	bics	r2, r1
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7fe fc54 	bl	8000d84 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024e2:	f7fe fc4f 	bl	8000d84 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0ee      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024f4:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f8:	2202      	movs	r2, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d1f1      	bne.n	80024e2 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2220      	movs	r2, #32
 8002504:	4013      	ands	r3, r2
 8002506:	d05c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002508:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	220c      	movs	r2, #12
 800250e:	4013      	ands	r3, r2
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d00e      	beq.n	8002532 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002514:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	220c      	movs	r2, #12
 800251a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800251c:	2b08      	cmp	r3, #8
 800251e:	d114      	bne.n	800254a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002520:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	23c0      	movs	r3, #192	; 0xc0
 8002526:	025b      	lsls	r3, r3, #9
 8002528:	401a      	ands	r2, r3
 800252a:	23c0      	movs	r3, #192	; 0xc0
 800252c:	025b      	lsls	r3, r3, #9
 800252e:	429a      	cmp	r2, r3
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002532:	4b58      	ldr	r3, [pc, #352]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	025b      	lsls	r3, r3, #9
 800253a:	4013      	ands	r3, r2
 800253c:	d040      	beq.n	80025c0 <HAL_RCC_OscConfig+0x5a0>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d03c      	beq.n	80025c0 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0c3      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01b      	beq.n	800258a <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002552:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002556:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	0249      	lsls	r1, r1, #9
 800255c:	430a      	orrs	r2, r1
 800255e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fc10 	bl	8000d84 <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256a:	f7fe fc0b 	bl	8000d84 <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0aa      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800257c:	4b45      	ldr	r3, [pc, #276]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800257e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	025b      	lsls	r3, r3, #9
 8002584:	4013      	ands	r3, r2
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x54a>
 8002588:	e01b      	b.n	80025c2 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800258a:	4b42      	ldr	r3, [pc, #264]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800258c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002590:	4943      	ldr	r1, [pc, #268]	; (80026a0 <HAL_RCC_OscConfig+0x680>)
 8002592:	400a      	ands	r2, r1
 8002594:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe fbf5 	bl	8000d84 <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a0:	f7fe fbf0 	bl	8000d84 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e08f      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80025b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	025b      	lsls	r3, r3, #9
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x580>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025c0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d100      	bne.n	80025cc <HAL_RCC_OscConfig+0x5ac>
 80025ca:	e081      	b.n	80026d0 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	220c      	movs	r2, #12
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d100      	bne.n	80025da <HAL_RCC_OscConfig+0x5ba>
 80025d8:	e078      	b.n	80026cc <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d14c      	bne.n	800267c <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 80025e8:	492e      	ldr	r1, [pc, #184]	; (80026a4 <HAL_RCC_OscConfig+0x684>)
 80025ea:	400a      	ands	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fbc9 	bl	8000d84 <HAL_GetTick>
 80025f2:	0003      	movs	r3, r0
 80025f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fbc4 	bl	8000d84 <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e063      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	049b      	lsls	r3, r3, #18
 8002612:	4013      	ands	r3, r2
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	220f      	movs	r2, #15
 800261c:	4393      	bics	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002626:	430a      	orrs	r2, r1
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002630:	4013      	ands	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	431a      	orrs	r2, r3
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002640:	430a      	orrs	r2, r1
 8002642:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	0449      	lsls	r1, r1, #17
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7fe fb97 	bl	8000d84 <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe fb92 	bl	8000d84 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e031      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	049b      	lsls	r3, r3, #18
 8002676:	4013      	ands	r3, r2
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x63c>
 800267a:	e029      	b.n	80026d0 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_RCC_OscConfig+0x674>)
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <HAL_RCC_OscConfig+0x684>)
 8002684:	400a      	ands	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fb7c 	bl	8000d84 <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x69e>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	00001388 	.word	0x00001388
 800269c:	efffffff 	.word	0xefffffff
 80026a0:	fffeffff 	.word	0xfffeffff
 80026a4:	feffffff 	.word	0xfeffffff
 80026a8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fb6a 	bl	8000d84 <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e009      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_RCC_OscConfig+0x6bc>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	049b      	lsls	r3, r3, #18
 80026c6:	4013      	ands	r3, r2
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x68c>
 80026ca:	e001      	b.n	80026d0 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b006      	add	sp, #24
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80026ee:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <HAL_RCC_ClockConfig+0x1fc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	4013      	ands	r3, r2
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d911      	bls.n	8002720 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fc:	4b77      	ldr	r3, [pc, #476]	; (80028dc <HAL_RCC_ClockConfig+0x1fc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2201      	movs	r2, #1
 8002702:	4393      	bics	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	4b75      	ldr	r3, [pc, #468]	; (80028dc <HAL_RCC_ClockConfig+0x1fc>)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800270e:	4b73      	ldr	r3, [pc, #460]	; (80028dc <HAL_RCC_ClockConfig+0x1fc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0d8      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2202      	movs	r2, #2
 8002726:	4013      	ands	r3, r2
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272a:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	22f0      	movs	r2, #240	; 0xf0
 8002730:	4393      	bics	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2201      	movs	r2, #1
 8002744:	4013      	ands	r3, r2
 8002746:	d100      	bne.n	800274a <HAL_RCC_ClockConfig+0x6a>
 8002748:	e089      	b.n	800285e <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	4013      	ands	r3, r2
 800275c:	d120      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0b7      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	049b      	lsls	r3, r3, #18
 8002772:	4013      	ands	r3, r2
 8002774:	d114      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0ab      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002782:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 8002784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	4013      	ands	r3, r2
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e09f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002792:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2202      	movs	r2, #2
 8002798:	4013      	ands	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e098      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a0:	4b4f      	ldr	r3, [pc, #316]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2203      	movs	r2, #3
 80027a6:	4393      	bics	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b4:	f7fe fae6 	bl	8000d84 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d111      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c4:	e009      	b.n	80027da <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c6:	f7fe fadd 	bl	8000d84 <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	4a44      	ldr	r2, [pc, #272]	; (80028e4 <HAL_RCC_ClockConfig+0x204>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e07b      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	220c      	movs	r2, #12
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d1ef      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xe6>
 80027e6:	e03a      	b.n	800285e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d111      	bne.n	8002814 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f0:	e009      	b.n	8002806 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f2:	f7fe fac7 	bl	8000d84 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4a39      	ldr	r2, [pc, #228]	; (80028e4 <HAL_RCC_ClockConfig+0x204>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e065      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002806:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	220c      	movs	r2, #12
 800280c:	4013      	ands	r3, r2
 800280e:	2b08      	cmp	r3, #8
 8002810:	d1ef      	bne.n	80027f2 <HAL_RCC_ClockConfig+0x112>
 8002812:	e024      	b.n	800285e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d11b      	bne.n	8002854 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800281c:	e009      	b.n	8002832 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281e:	f7fe fab1 	bl	8000d84 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	4a2e      	ldr	r2, [pc, #184]	; (80028e4 <HAL_RCC_ClockConfig+0x204>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e04f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	220c      	movs	r2, #12
 8002838:	4013      	ands	r3, r2
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d1ef      	bne.n	800281e <HAL_RCC_ClockConfig+0x13e>
 800283e:	e00e      	b.n	800285e <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe faa0 	bl	8000d84 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <HAL_RCC_ClockConfig+0x204>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e03e      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	220c      	movs	r2, #12
 800285a:	4013      	ands	r3, r2
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800285e:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <HAL_RCC_ClockConfig+0x1fc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	4013      	ands	r3, r2
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d211      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCC_ClockConfig+0x1fc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	4393      	bics	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_ClockConfig+0x1fc>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_RCC_ClockConfig+0x1fc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	4013      	ands	r3, r2
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e020      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2204      	movs	r2, #4
 8002896:	4013      	ands	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <HAL_RCC_ClockConfig+0x208>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	0001      	movs	r1, r0
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x200>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	220f      	movs	r2, #15
 80028bc:	4013      	ands	r3, r2
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_RCC_ClockConfig+0x20c>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	000a      	movs	r2, r1
 80028c4:	40da      	lsrs	r2, r3
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_RCC_ClockConfig+0x210>)
 80028c8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe fa32 	bl	8000d34 <HAL_InitTick>
  
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b004      	add	sp, #16
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	40022000 	.word	0x40022000
 80028e0:	40021000 	.word	0x40021000
 80028e4:	00001388 	.word	0x00001388
 80028e8:	fffff8ff 	.word	0xfffff8ff
 80028ec:	08005084 	.word	0x08005084
 80028f0:	20000000 	.word	0x20000000

080028f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b08f      	sub	sp, #60	; 0x3c
 80028f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80028fa:	2314      	movs	r3, #20
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	4a37      	ldr	r2, [pc, #220]	; (80029dc <HAL_RCC_GetSysClockFreq+0xe8>)
 8002900:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002902:	c313      	stmia	r3!, {r0, r1, r4}
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	4a35      	ldr	r2, [pc, #212]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xec>)
 800290c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800290e:	c313      	stmia	r3!, {r0, r1, r4}
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002928:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	220c      	movs	r2, #12
 8002932:	4013      	ands	r3, r2
 8002934:	2b08      	cmp	r3, #8
 8002936:	d006      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0x52>
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d043      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0xd0>
 800293c:	2b04      	cmp	r3, #4
 800293e:	d144      	bne.n	80029ca <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002944:	e044      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	0c9b      	lsrs	r3, r3, #18
 800294a:	220f      	movs	r2, #15
 800294c:	4013      	ands	r3, r2
 800294e:	2214      	movs	r2, #20
 8002950:	18ba      	adds	r2, r7, r2
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002956:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	220f      	movs	r2, #15
 800295c:	4013      	ands	r3, r2
 800295e:	1d3a      	adds	r2, r7, #4
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002966:	23c0      	movs	r3, #192	; 0xc0
 8002968:	025b      	lsls	r3, r3, #9
 800296a:	401a      	ands	r2, r3
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	025b      	lsls	r3, r3, #9
 8002970:	429a      	cmp	r2, r3
 8002972:	d109      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002976:	481c      	ldr	r0, [pc, #112]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002978:	f7fd fbc6 	bl	8000108 <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	001a      	movs	r2, r3
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	4353      	muls	r3, r2
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
 8002986:	e01a      	b.n	80029be <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800298a:	23c0      	movs	r3, #192	; 0xc0
 800298c:	025b      	lsls	r3, r3, #9
 800298e:	401a      	ands	r2, r3
 8002990:	23c0      	movs	r3, #192	; 0xc0
 8002992:	025b      	lsls	r3, r3, #9
 8002994:	429a      	cmp	r2, r3
 8002996:	d109      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8002998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800299a:	4814      	ldr	r0, [pc, #80]	; (80029ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800299c:	f7fd fbb4 	bl	8000108 <__udivsi3>
 80029a0:	0003      	movs	r3, r0
 80029a2:	001a      	movs	r2, r3
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	4353      	muls	r3, r2
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
 80029aa:	e008      	b.n	80029be <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80029ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ae:	480e      	ldr	r0, [pc, #56]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80029b0:	f7fd fbaa 	bl	8000108 <__udivsi3>
 80029b4:	0003      	movs	r3, r0
 80029b6:	001a      	movs	r2, r3
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	4353      	muls	r3, r2
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029c2:	e005      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029c8:	e002      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b00f      	add	sp, #60	; 0x3c
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	08004fb4 	.word	0x08004fb4
 80029e0:	08004fc4 	.word	0x08004fc4
 80029e4:	40021000 	.word	0x40021000
 80029e8:	007a1200 	.word	0x007a1200
 80029ec:	02dc6c00 	.word	0x02dc6c00

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b02      	ldr	r3, [pc, #8]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	20000000 	.word	0x20000000

08002a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002a08:	f7ff fff2 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a0c:	0001      	movs	r1, r0
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	2207      	movs	r2, #7
 8002a16:	4013      	ands	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	40d9      	lsrs	r1, r3
 8002a1e:	000b      	movs	r3, r1
}    
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08005094 	.word	0x08005094

08002a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	025b      	lsls	r3, r3, #9
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a4c:	e08f      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a4e:	2317      	movs	r3, #23
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	055b      	lsls	r3, r3, #21
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d111      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	4b6b      	ldr	r3, [pc, #428]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	0549      	lsls	r1, r1, #21
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	61da      	str	r2, [r3, #28]
 8002a70:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	055b      	lsls	r3, r3, #21
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	2317      	movs	r3, #23
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a92:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b60      	ldr	r3, [pc, #384]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0049      	lsls	r1, r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa0:	f7fe f970 	bl	8000d84 <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	e008      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aaa:	f7fe f96b 	bl	8000d84 <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b64      	cmp	r3, #100	; 0x64
 8002ab6:	d901      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e0a6      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ac8:	4b52      	ldr	r3, [pc, #328]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aca:	6a1a      	ldr	r2, [r3, #32]
 8002acc:	23c0      	movs	r3, #192	; 0xc0
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d034      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	23c0      	movs	r3, #192	; 0xc0
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d02c      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aea:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4a4b      	ldr	r2, [pc, #300]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002af4:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	0249      	lsls	r1, r1, #9
 8002afe:	430a      	orrs	r2, r1
 8002b00:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b02:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b08:	4945      	ldr	r1, [pc, #276]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe f932 	bl	8000d84 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b24:	e009      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe f92d 	bl	8000d84 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	4a3c      	ldr	r2, [pc, #240]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e067      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b44:	4b33      	ldr	r3, [pc, #204]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b58:	2317      	movs	r3, #23
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b62:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b68:	492f      	ldr	r1, [pc, #188]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2201      	movs	r2, #1
 8002b74:	4013      	ands	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b78:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	4393      	bics	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2202      	movs	r2, #2
 8002b92:	4013      	ands	r3, r2
 8002b94:	d009      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b96:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	4a24      	ldr	r2, [pc, #144]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d009      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	2210      	movs	r2, #16
 8002bba:	4393      	bics	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	4393      	bics	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d009      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	0019      	movs	r1, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c04:	430a      	orrs	r2, r1
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b006      	add	sp, #24
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	fffffcff 	.word	0xfffffcff
 8002c20:	fffeffff 	.word	0xfffeffff
 8002c24:	00001388 	.word	0x00001388
 8002c28:	efffffff 	.word	0xefffffff
 8002c2c:	fffcffff 	.word	0xfffcffff

08002c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e047      	b.n	8002cd2 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2269      	movs	r2, #105	; 0x69
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2268      	movs	r2, #104	; 0x68
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 ff67 	bl	8003b2c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2269      	movs	r2, #105	; 0x69
 8002c62:	2124      	movs	r1, #36	; 0x24
 8002c64:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	438a      	bics	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f831 	bl	8002ce0 <UART_SetConfig>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e024      	b.n	8002cd2 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 f9e0 	bl	8003058 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	490e      	ldr	r1, [pc, #56]	; (8002cdc <HAL_UART_Init+0xac>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	212a      	movs	r1, #42	; 0x2a
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 fa78 	bl	80031c0 <UART_CheckIdleState>
 8002cd0:	0003      	movs	r3, r0
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	ffffb7ff 	.word	0xffffb7ff

08002ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002cec:	2317      	movs	r3, #23
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002cf4:	230a      	movs	r3, #10
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002cfc:	2314      	movs	r3, #20
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d04:	2313      	movs	r3, #19
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4ac1      	ldr	r2, [pc, #772]	; (8003030 <UART_SetConfig+0x350>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	0019      	movs	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4abc      	ldr	r2, [pc, #752]	; (8003034 <UART_SetConfig+0x354>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4ab4      	ldr	r2, [pc, #720]	; (8003038 <UART_SetConfig+0x358>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	0019      	movs	r1, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4ab0      	ldr	r2, [pc, #704]	; (800303c <UART_SetConfig+0x35c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d125      	bne.n	8002dca <UART_SetConfig+0xea>
 8002d7e:	4bb0      	ldr	r3, [pc, #704]	; (8003040 <UART_SetConfig+0x360>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	2203      	movs	r2, #3
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d00f      	beq.n	8002daa <UART_SetConfig+0xca>
 8002d8a:	d304      	bcc.n	8002d96 <UART_SetConfig+0xb6>
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d011      	beq.n	8002db4 <UART_SetConfig+0xd4>
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d005      	beq.n	8002da0 <UART_SetConfig+0xc0>
 8002d94:	e013      	b.n	8002dbe <UART_SetConfig+0xde>
 8002d96:	2317      	movs	r3, #23
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e064      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002da0:	2317      	movs	r3, #23
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	2202      	movs	r2, #2
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e05f      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002daa:	2317      	movs	r3, #23
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2204      	movs	r2, #4
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e05a      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002db4:	2317      	movs	r3, #23
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2208      	movs	r2, #8
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e055      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002dbe:	2317      	movs	r3, #23
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	e04f      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a9d      	ldr	r2, [pc, #628]	; (8003044 <UART_SetConfig+0x364>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d132      	bne.n	8002e3a <UART_SetConfig+0x15a>
 8002dd4:	4b9a      	ldr	r3, [pc, #616]	; (8003040 <UART_SetConfig+0x360>)
 8002dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd8:	23c0      	movs	r3, #192	; 0xc0
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	0252      	lsls	r2, r2, #9
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d019      	beq.n	8002e1a <UART_SetConfig+0x13a>
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	0252      	lsls	r2, r2, #9
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d802      	bhi.n	8002df4 <UART_SetConfig+0x114>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <UART_SetConfig+0x126>
 8002df2:	e01c      	b.n	8002e2e <UART_SetConfig+0x14e>
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	0292      	lsls	r2, r2, #10
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <UART_SetConfig+0x144>
 8002dfc:	22c0      	movs	r2, #192	; 0xc0
 8002dfe:	0292      	lsls	r2, r2, #10
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d005      	beq.n	8002e10 <UART_SetConfig+0x130>
 8002e04:	e013      	b.n	8002e2e <UART_SetConfig+0x14e>
 8002e06:	2317      	movs	r3, #23
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e02c      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002e10:	2317      	movs	r3, #23
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e027      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002e1a:	2317      	movs	r3, #23
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2204      	movs	r2, #4
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e022      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002e24:	2317      	movs	r3, #23
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2208      	movs	r2, #8
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e01d      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002e2e:	2317      	movs	r3, #23
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2210      	movs	r2, #16
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	e017      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a82      	ldr	r2, [pc, #520]	; (8003048 <UART_SetConfig+0x368>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d104      	bne.n	8002e4e <UART_SetConfig+0x16e>
 8002e44:	2317      	movs	r3, #23
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e00d      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7e      	ldr	r2, [pc, #504]	; (800304c <UART_SetConfig+0x36c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d104      	bne.n	8002e62 <UART_SetConfig+0x182>
 8002e58:	2317      	movs	r3, #23
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	e003      	b.n	8002e6a <UART_SetConfig+0x18a>
 8002e62:	2317      	movs	r3, #23
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	2210      	movs	r2, #16
 8002e68:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d000      	beq.n	8002e78 <UART_SetConfig+0x198>
 8002e76:	e077      	b.n	8002f68 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8002e78:	2317      	movs	r3, #23
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d01c      	beq.n	8002ebc <UART_SetConfig+0x1dc>
 8002e82:	dc02      	bgt.n	8002e8a <UART_SetConfig+0x1aa>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <UART_SetConfig+0x1b4>
 8002e88:	e04f      	b.n	8002f2a <UART_SetConfig+0x24a>
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d027      	beq.n	8002ede <UART_SetConfig+0x1fe>
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d039      	beq.n	8002f06 <UART_SetConfig+0x226>
 8002e92:	e04a      	b.n	8002f2a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e94:	f7ff fdb6 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	005a      	lsls	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	18d2      	adds	r2, r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	0010      	movs	r0, r2
 8002eac:	f7fd f92c 	bl	8000108 <__udivsi3>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	2314      	movs	r3, #20
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	801a      	strh	r2, [r3, #0]
        break;
 8002eba:	e03b      	b.n	8002f34 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	4a63      	ldr	r2, [pc, #396]	; (8003050 <UART_SetConfig+0x370>)
 8002ec4:	189a      	adds	r2, r3, r2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	0019      	movs	r1, r3
 8002ecc:	0010      	movs	r0, r2
 8002ece:	f7fd f91b 	bl	8000108 <__udivsi3>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2314      	movs	r3, #20
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	801a      	strh	r2, [r3, #0]
        break;
 8002edc:	e02a      	b.n	8002f34 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ede:	f7ff fd09 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	005a      	lsls	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	18d2      	adds	r2, r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	0010      	movs	r0, r2
 8002ef6:	f7fd f907 	bl	8000108 <__udivsi3>
 8002efa:	0003      	movs	r3, r0
 8002efc:	001a      	movs	r2, r3
 8002efe:	2314      	movs	r3, #20
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	801a      	strh	r2, [r3, #0]
        break;
 8002f04:	e016      	b.n	8002f34 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	0252      	lsls	r2, r2, #9
 8002f10:	189a      	adds	r2, r3, r2
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	0019      	movs	r1, r3
 8002f18:	0010      	movs	r0, r2
 8002f1a:	f7fd f8f5 	bl	8000108 <__udivsi3>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	001a      	movs	r2, r3
 8002f22:	2314      	movs	r3, #20
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	801a      	strh	r2, [r3, #0]
        break;
 8002f28:	e004      	b.n	8002f34 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f2a:	2313      	movs	r3, #19
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
        break;
 8002f32:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002f34:	200a      	movs	r0, #10
 8002f36:	183b      	adds	r3, r7, r0
 8002f38:	2414      	movs	r4, #20
 8002f3a:	193a      	adds	r2, r7, r4
 8002f3c:	8812      	ldrh	r2, [r2, #0]
 8002f3e:	210f      	movs	r1, #15
 8002f40:	438a      	bics	r2, r1
 8002f42:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	105b      	asrs	r3, r3, #1
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	4013      	ands	r3, r2
 8002f50:	b299      	uxth	r1, r3
 8002f52:	183b      	adds	r3, r7, r0
 8002f54:	183a      	adds	r2, r7, r0
 8002f56:	8812      	ldrh	r2, [r2, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	183a      	adds	r2, r7, r0
 8002f62:	8812      	ldrh	r2, [r2, #0]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	e05b      	b.n	8003020 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8002f68:	2317      	movs	r3, #23
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d01b      	beq.n	8002faa <UART_SetConfig+0x2ca>
 8002f72:	dc02      	bgt.n	8002f7a <UART_SetConfig+0x29a>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <UART_SetConfig+0x2a4>
 8002f78:	e04d      	b.n	8003016 <UART_SetConfig+0x336>
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d026      	beq.n	8002fcc <UART_SetConfig+0x2ec>
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d037      	beq.n	8002ff2 <UART_SetConfig+0x312>
 8002f82:	e048      	b.n	8003016 <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f84:	f7ff fd3e 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8002f88:	0002      	movs	r2, r0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	18d2      	adds	r2, r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	0019      	movs	r1, r3
 8002f98:	0010      	movs	r0, r2
 8002f9a:	f7fd f8b5 	bl	8000108 <__udivsi3>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60da      	str	r2, [r3, #12]
        break;
 8002fa8:	e03a      	b.n	8003020 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	4a28      	ldr	r2, [pc, #160]	; (8003054 <UART_SetConfig+0x374>)
 8002fb2:	189a      	adds	r2, r3, r2
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	0019      	movs	r1, r3
 8002fba:	0010      	movs	r0, r2
 8002fbc:	f7fd f8a4 	bl	8000108 <__udivsi3>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60da      	str	r2, [r3, #12]
        break;
 8002fca:	e029      	b.n	8003020 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fcc:	f7ff fc92 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	18d2      	adds	r2, r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	0019      	movs	r1, r3
 8002fe0:	0010      	movs	r0, r2
 8002fe2:	f7fd f891 	bl	8000108 <__udivsi3>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60da      	str	r2, [r3, #12]
        break;
 8002ff0:	e016      	b.n	8003020 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	0212      	lsls	r2, r2, #8
 8002ffc:	189a      	adds	r2, r3, r2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0019      	movs	r1, r3
 8003004:	0010      	movs	r0, r2
 8003006:	f7fd f87f 	bl	8000108 <__udivsi3>
 800300a:	0003      	movs	r3, r0
 800300c:	b29a      	uxth	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60da      	str	r2, [r3, #12]
        break;
 8003014:	e004      	b.n	8003020 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003016:	2313      	movs	r3, #19
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
        break;
 800301e:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8003020:	2313      	movs	r3, #19
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	781b      	ldrb	r3, [r3, #0]

}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b007      	add	sp, #28
 800302c:	bd90      	pop	{r4, r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	efff69f3 	.word	0xefff69f3
 8003034:	ffffcfff 	.word	0xffffcfff
 8003038:	fffff4ff 	.word	0xfffff4ff
 800303c:	40013800 	.word	0x40013800
 8003040:	40021000 	.word	0x40021000
 8003044:	40004400 	.word	0x40004400
 8003048:	40004800 	.word	0x40004800
 800304c:	40004c00 	.word	0x40004c00
 8003050:	00f42400 	.word	0x00f42400
 8003054:	007a1200 	.word	0x007a1200

08003058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2201      	movs	r2, #1
 8003066:	4013      	ands	r3, r2
 8003068:	d00b      	beq.n	8003082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a4a      	ldr	r2, [pc, #296]	; (800319c <UART_AdvFeatureConfig+0x144>)
 8003072:	4013      	ands	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	2202      	movs	r2, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d00b      	beq.n	80030a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4a43      	ldr	r2, [pc, #268]	; (80031a0 <UART_AdvFeatureConfig+0x148>)
 8003094:	4013      	ands	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2204      	movs	r2, #4
 80030aa:	4013      	ands	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a3b      	ldr	r2, [pc, #236]	; (80031a4 <UART_AdvFeatureConfig+0x14c>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	2208      	movs	r2, #8
 80030cc:	4013      	ands	r3, r2
 80030ce:	d00b      	beq.n	80030e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <UART_AdvFeatureConfig+0x150>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	2210      	movs	r2, #16
 80030ee:	4013      	ands	r3, r2
 80030f0:	d00b      	beq.n	800310a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <UART_AdvFeatureConfig+0x154>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	0019      	movs	r1, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2220      	movs	r2, #32
 8003110:	4013      	ands	r3, r2
 8003112:	d00b      	beq.n	800312c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <UART_AdvFeatureConfig+0x158>)
 800311c:	4013      	ands	r3, r2
 800311e:	0019      	movs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2240      	movs	r2, #64	; 0x40
 8003132:	4013      	ands	r3, r2
 8003134:	d01d      	beq.n	8003172 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <UART_AdvFeatureConfig+0x15c>)
 800313e:	4013      	ands	r3, r2
 8003140:	0019      	movs	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	035b      	lsls	r3, r3, #13
 8003156:	429a      	cmp	r2, r3
 8003158:	d10b      	bne.n	8003172 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <UART_AdvFeatureConfig+0x160>)
 8003162:	4013      	ands	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2280      	movs	r2, #128	; 0x80
 8003178:	4013      	ands	r3, r2
 800317a:	d00b      	beq.n	8003194 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <UART_AdvFeatureConfig+0x164>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
  }
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}
 800319c:	fffdffff 	.word	0xfffdffff
 80031a0:	fffeffff 	.word	0xfffeffff
 80031a4:	fffbffff 	.word	0xfffbffff
 80031a8:	ffff7fff 	.word	0xffff7fff
 80031ac:	ffffefff 	.word	0xffffefff
 80031b0:	ffffdfff 	.word	0xffffdfff
 80031b4:	ffefffff 	.word	0xffefffff
 80031b8:	ff9fffff 	.word	0xff9fffff
 80031bc:	fff7ffff 	.word	0xfff7ffff

080031c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80031d2:	f7fd fdd7 	bl	8000d84 <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a21      	ldr	r2, [pc, #132]	; (8003264 <UART_CheckIdleState+0xa4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <UART_CheckIdleState+0x2e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <UART_CheckIdleState+0xa8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d129      	bne.n	8003242 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2208      	movs	r2, #8
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d10d      	bne.n	8003218 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	0399      	lsls	r1, r3, #14
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <UART_CheckIdleState+0xac>)
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	0013      	movs	r3, r2
 800320a:	2200      	movs	r2, #0
 800320c:	f000 f830 	bl	8003270 <UART_WaitOnFlagUntilTimeout>
 8003210:	1e03      	subs	r3, r0, #0
 8003212:	d001      	beq.n	8003218 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e021      	b.n	800325c <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2204      	movs	r2, #4
 8003220:	4013      	ands	r3, r2
 8003222:	2b04      	cmp	r3, #4
 8003224:	d10d      	bne.n	8003242 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	03d9      	lsls	r1, r3, #15
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <UART_CheckIdleState+0xac>)
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	0013      	movs	r3, r2
 8003234:	2200      	movs	r2, #0
 8003236:	f000 f81b 	bl	8003270 <UART_WaitOnFlagUntilTimeout>
 800323a:	1e03      	subs	r3, r0, #0
 800323c:	d001      	beq.n	8003242 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e00c      	b.n	800325c <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2269      	movs	r2, #105	; 0x69
 8003246:	2120      	movs	r1, #32
 8003248:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	226a      	movs	r2, #106	; 0x6a
 800324e:	2120      	movs	r1, #32
 8003250:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2268      	movs	r2, #104	; 0x68
 8003256:	2100      	movs	r1, #0
 8003258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b004      	add	sp, #16
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40013800 	.word	0x40013800
 8003268:	40004400 	.word	0x40004400
 800326c:	01ffffff 	.word	0x01ffffff

08003270 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	1dfb      	adds	r3, r7, #7
 800327e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003280:	e02b      	b.n	80032da <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3301      	adds	r3, #1
 8003286:	d028      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0x2e>
 800328e:	f7fd fd79 	bl	8000d84 <HAL_GetTick>
 8003292:	0002      	movs	r2, r0
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	429a      	cmp	r2, r3
 800329c:	d21d      	bcs.n	80032da <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4916      	ldr	r1, [pc, #88]	; (8003304 <UART_WaitOnFlagUntilTimeout+0x94>)
 80032aa:	400a      	ands	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	438a      	bics	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2269      	movs	r2, #105	; 0x69
 80032c2:	2120      	movs	r1, #32
 80032c4:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	226a      	movs	r2, #106	; 0x6a
 80032ca:	2120      	movs	r1, #32
 80032cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2268      	movs	r2, #104	; 0x68
 80032d2:	2100      	movs	r1, #0
 80032d4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	425a      	negs	r2, r3
 80032ea:	4153      	adcs	r3, r2
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	001a      	movs	r2, r3
 80032f0:	1dfb      	adds	r3, r7, #7
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d0c4      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b004      	add	sp, #16
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	fffffe5f 	.word	0xfffffe5f

08003308 <_Z18GPS_RxCpltCallbackv>:
	bool success;
	return *dataFIFO.PopFront(&success);
}

void GPS_RxCpltCallback(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08c      	sub	sp, #48	; 0x30
 800330c:	af00      	add	r7, sp, #0
	char rxChar = (char)uartInstance->RDR;
 800330e:	4b23      	ldr	r3, [pc, #140]	; (800339c <_Z18GPS_RxCpltCallbackv+0x94>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003314:	b29a      	uxth	r2, r3
 8003316:	212f      	movs	r1, #47	; 0x2f
 8003318:	187b      	adds	r3, r7, r1
 800331a:	701a      	strb	r2, [r3, #0]
	if(rxChar == '$')
 800331c:	187b      	adds	r3, r7, r1
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b24      	cmp	r3, #36	; 0x24
 8003322:	d105      	bne.n	8003330 <_Z18GPS_RxCpltCallbackv+0x28>
	{
	  messageStart = 1;
 8003324:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <_Z18GPS_RxCpltCallbackv+0x98>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
	  rxMessageIndex = 0;
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <_Z18GPS_RxCpltCallbackv+0x9c>)
 800332c:	2200      	movs	r2, #0
 800332e:	801a      	strh	r2, [r3, #0]
	}
	if(messageStart)
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <_Z18GPS_RxCpltCallbackv+0x98>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <_Z18GPS_RxCpltCallbackv+0x48>
	{
	  rxMessage[rxMessageIndex++] = rxChar;
 8003338:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <_Z18GPS_RxCpltCallbackv+0x9c>)
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	b291      	uxth	r1, r2
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <_Z18GPS_RxCpltCallbackv+0x9c>)
 8003342:	8011      	strh	r1, [r2, #0]
 8003344:	0019      	movs	r1, r3
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <_Z18GPS_RxCpltCallbackv+0xa0>)
 8003348:	222f      	movs	r2, #47	; 0x2f
 800334a:	18ba      	adds	r2, r7, r2
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	545a      	strb	r2, [r3, r1]
	}
	if(rxChar == '\n')
 8003350:	232f      	movs	r3, #47	; 0x2f
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b0a      	cmp	r3, #10
 8003358:	d11b      	bne.n	8003392 <_Z18GPS_RxCpltCallbackv+0x8a>
	{
	  rxMessage[rxMessageIndex] = '\0';
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <_Z18GPS_RxCpltCallbackv+0x9c>)
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	001a      	movs	r2, r3
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <_Z18GPS_RxCpltCallbackv+0xa0>)
 8003362:	2100      	movs	r1, #0
 8003364:	5499      	strb	r1, [r3, r2]
	  messageStart = 0;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <_Z18GPS_RxCpltCallbackv+0x98>)
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
	  GPS_Data_t parsedMessage;
	  if(parseRMCString(rxMessage, &parsedMessage))
 800336c:	003a      	movs	r2, r7
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <_Z18GPS_RxCpltCallbackv+0xa0>)
 8003370:	0011      	movs	r1, r2
 8003372:	0018      	movs	r0, r3
 8003374:	f000 f81c 	bl	80033b0 <_ZL14parseRMCStringPKcP8gps_data>
 8003378:	0003      	movs	r3, r0
 800337a:	1e5a      	subs	r2, r3, #1
 800337c:	4193      	sbcs	r3, r2
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <_Z18GPS_RxCpltCallbackv+0x8a>
	  {
		  bool success;
		  dataFIFO.PushBack(&parsedMessage, &success);
 8003384:	232e      	movs	r3, #46	; 0x2e
 8003386:	18fa      	adds	r2, r7, r3
 8003388:	0039      	movs	r1, r7
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <_Z18GPS_RxCpltCallbackv+0xa4>)
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f8e8 	bl	8003562 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PushBackEPS0_Pb>
	  }
	}
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b00c      	add	sp, #48	; 0x30
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	20000088 	.word	0x20000088
 80033a0:	200001d0 	.word	0x200001d0
 80033a4:	200001d2 	.word	0x200001d2
 80033a8:	2000016c 	.word	0x2000016c
 80033ac:	2000008c 	.word	0x2000008c

080033b0 <_ZL14parseRMCStringPKcP8gps_data>:

static uint8_t parseRMCString(const char* input, GPS_Data_t* output)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
	if(!strstr(input, "$GPRMC"))
 80033ba:	4a5d      	ldr	r2, [pc, #372]	; (8003530 <_ZL14parseRMCStringPKcP8gps_data+0x180>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	0011      	movs	r1, r2
 80033c0:	0018      	movs	r0, r3
 80033c2:	f001 fdd2 	bl	8004f6a <strstr>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d101      	bne.n	80033ce <_ZL14parseRMCStringPKcP8gps_data+0x1e>
	{
		return 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e0ac      	b.n	8003528 <_ZL14parseRMCStringPKcP8gps_data+0x178>
	}
	const char* p = input;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
	p = strchr(p, ',') + 1; //Skip header
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	0018      	movs	r0, r3
 80033d8:	f001 fd94 	bl	8004f04 <strchr>
 80033dc:	0003      	movs	r3, r0
 80033de:	3301      	adds	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
	p = strchr(p, ',') + 1; //Skip date
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	0018      	movs	r0, r3
 80033e8:	f001 fd8c 	bl	8004f04 <strchr>
 80033ec:	0003      	movs	r3, r0
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
	//V == invalid
	if(p[0] == 'V')
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b56      	cmp	r3, #86	; 0x56
 80033f8:	d101      	bne.n	80033fe <_ZL14parseRMCStringPKcP8gps_data+0x4e>
	{
		return 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e094      	b.n	8003528 <_ZL14parseRMCStringPKcP8gps_data+0x178>
	}
	//Handle Latitude
	p = strchr(p, ',') + 1; //Go to lat
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	0018      	movs	r0, r3
 8003404:	f001 fd7e 	bl	8004f04 <strchr>
 8003408:	0003      	movs	r3, r0
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
	strncpy(output->latitude, p, 9);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68f9      	ldr	r1, [r7, #12]
 8003412:	2209      	movs	r2, #9
 8003414:	0018      	movs	r0, r3
 8003416:	f001 fd94 	bl	8004f42 <strncpy>
	p = strchr(p, ',') + 1; //Go to lat-dir
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	0018      	movs	r0, r3
 8003420:	f001 fd70 	bl	8004f04 <strchr>
 8003424:	0003      	movs	r3, r0
 8003426:	3301      	adds	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
	strncpy(output->latitude + 9, p, 1);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	3309      	adds	r3, #9
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	0018      	movs	r0, r3
 8003434:	f001 fd85 	bl	8004f42 <strncpy>
	*(output->latitude + 10) = '\0';
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2200      	movs	r2, #0
 800343c:	729a      	strb	r2, [r3, #10]
	//Handle Longitude
	p = strchr(p, ',') + 1; //Go to lon
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	0018      	movs	r0, r3
 8003444:	f001 fd5e 	bl	8004f04 <strchr>
 8003448:	0003      	movs	r3, r0
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
	strncpy(output->longitude, p, 10);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	330b      	adds	r3, #11
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	220a      	movs	r2, #10
 8003456:	0018      	movs	r0, r3
 8003458:	f001 fd73 	bl	8004f42 <strncpy>
	p = strchr(p, ',') + 1; //Go to lon-dir
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	0018      	movs	r0, r3
 8003462:	f001 fd4f 	bl	8004f04 <strchr>
 8003466:	0003      	movs	r3, r0
 8003468:	3301      	adds	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
	strncpy(output->longitude + 10, p, 1);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	330b      	adds	r3, #11
 8003470:	330a      	adds	r3, #10
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	0018      	movs	r0, r3
 8003478:	f001 fd63 	bl	8004f42 <strncpy>
	*(output->longitude + 11) = '\0';
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	759a      	strb	r2, [r3, #22]
	//Handle speed
	p = strchr(p, ',') + 1; //Go to speed
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	0018      	movs	r0, r3
 8003488:	f001 fd3c 	bl	8004f04 <strchr>
 800348c:	0003      	movs	r3, r0
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
	uint8_t speedDigits = 0;
 8003492:	210b      	movs	r1, #11
 8003494:	000c      	movs	r4, r1
 8003496:	187b      	adds	r3, r7, r1
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
	speedDigits = strcspn(p, ",");
 800349c:	4a25      	ldr	r2, [pc, #148]	; (8003534 <_ZL14parseRMCStringPKcP8gps_data+0x184>)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	0011      	movs	r1, r2
 80034a2:	0018      	movs	r0, r3
 80034a4:	f001 fd3c 	bl	8004f20 <strcspn>
 80034a8:	0002      	movs	r2, r0
 80034aa:	0021      	movs	r1, r4
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	701a      	strb	r2, [r3, #0]
	strncpy(output->speed, p, speedDigits); //Copy to speed
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	3317      	adds	r3, #23
 80034b4:	0018      	movs	r0, r3
 80034b6:	000c      	movs	r4, r1
 80034b8:	187b      	adds	r3, r7, r1
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	0019      	movs	r1, r3
 80034c0:	f001 fd3f 	bl	8004f42 <strncpy>
	output->speed[speedDigits] = '\0';
 80034c4:	0021      	movs	r1, r4
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	18d3      	adds	r3, r2, r3
 80034ce:	2200      	movs	r2, #0
 80034d0:	75da      	strb	r2, [r3, #23]
	//Handle true course
	p = strchr(p, ',') + 1; //Go to true course
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	0018      	movs	r0, r3
 80034d8:	f001 fd14 	bl	8004f04 <strchr>
 80034dc:	0003      	movs	r3, r0
 80034de:	3301      	adds	r3, #1
 80034e0:	60fb      	str	r3, [r7, #12]
	uint8_t trueCourseDigits = 0;
 80034e2:	210a      	movs	r1, #10
 80034e4:	000c      	movs	r4, r1
 80034e6:	187b      	adds	r3, r7, r1
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
	trueCourseDigits = strcspn(p, ",");
 80034ec:	4a11      	ldr	r2, [pc, #68]	; (8003534 <_ZL14parseRMCStringPKcP8gps_data+0x184>)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	0011      	movs	r1, r2
 80034f2:	0018      	movs	r0, r3
 80034f4:	f001 fd14 	bl	8004f20 <strcspn>
 80034f8:	0002      	movs	r2, r0
 80034fa:	0021      	movs	r1, r4
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	701a      	strb	r2, [r3, #0]
	strncpy(output->trueCourse, p, trueCourseDigits); //Copy to true course
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	3321      	adds	r3, #33	; 0x21
 8003504:	0018      	movs	r0, r3
 8003506:	000c      	movs	r4, r1
 8003508:	187b      	adds	r3, r7, r1
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	0019      	movs	r1, r3
 8003510:	f001 fd17 	bl	8004f42 <strncpy>
	output->trueCourse[trueCourseDigits] = '\0';
 8003514:	0021      	movs	r1, r4
 8003516:	187b      	adds	r3, r7, r1
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	2121      	movs	r1, #33	; 0x21
 800351e:	18d3      	adds	r3, r2, r3
 8003520:	185b      	adds	r3, r3, r1
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
	return 1;
 8003526:	2301      	movs	r3, #1
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b005      	add	sp, #20
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	08005008 	.word	0x08005008
 8003534:	08005010 	.word	0x08005010

08003538 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EEC1Ev>:
template <class T,uint16_t DEPTH, uint16_t SIZE>
class HELPER_FIFO
{
public:
    //Constructors
    HELPER_FIFO():
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	22d8      	movs	r2, #216	; 0xd8
 8003544:	2100      	movs	r1, #0
 8003546:	5299      	strh	r1, [r3, r2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	22da      	movs	r2, #218	; 0xda
 800354c:	2100      	movs	r1, #0
 800354e:	5299      	strh	r1, [r3, r2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	22dc      	movs	r2, #220	; 0xdc
 8003554:	2101      	movs	r1, #1
 8003556:	5499      	strb	r1, [r3, r2]
    {}
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}

08003562 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PushBackEPS0_Pb>:
    bool IsFull()
    {
        return (headIndex == tailIndex ? !emptyNotFull : false);
    }

    void PushBack(T* const next_element, bool* success)
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
    {
        if(tailIndex == headIndex && !emptyNotFull)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22da      	movs	r2, #218	; 0xda
 8003572:	5a9a      	ldrh	r2, [r3, r2]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	21d8      	movs	r1, #216	; 0xd8
 8003578:	5a5b      	ldrh	r3, [r3, r1]
 800357a:	429a      	cmp	r2, r3
 800357c:	d10e      	bne.n	800359c <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PushBackEPS0_Pb+0x3a>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22dc      	movs	r2, #220	; 0xdc
 8003582:	5c9b      	ldrb	r3, [r3, r2]
 8003584:	2201      	movs	r2, #1
 8003586:	4053      	eors	r3, r2
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PushBackEPS0_Pb+0x3a>
        {
            //Fail to write since we are full
            if(success)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02b      	beq.n	80035ec <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PushBackEPS0_Pb+0x8a>
            {
                *success = false;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
            if(success)
 800359a:	e027      	b.n	80035ec <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PushBackEPS0_Pb+0x8a>
            }
        }else
        {
            if(success)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PushBackEPS0_Pb+0x46>
            {
                *success = true;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
            }
            copyArrayData(headIndex,next_element);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	22d8      	movs	r2, #216	; 0xd8
 80035ac:	5a99      	ldrh	r1, [r3, r2]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	0018      	movs	r0, r3
 80035b4:	f000 f81e 	bl	80035f4 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE13copyArrayDataEtPS0_>
            headIndex = (headIndex + 1)%DEPTH;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	22d8      	movs	r2, #216	; 0xd8
 80035bc:	5a9b      	ldrh	r3, [r3, r2]
 80035be:	3301      	adds	r3, #1
 80035c0:	2105      	movs	r1, #5
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7fc ff10 	bl	80003e8 <__aeabi_idivmod>
 80035c8:	000b      	movs	r3, r1
 80035ca:	b299      	uxth	r1, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	22d8      	movs	r2, #216	; 0xd8
 80035d0:	5299      	strh	r1, [r3, r2]
            //If head caught up to tail then we are full
            if(headIndex == tailIndex)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	22d8      	movs	r2, #216	; 0xd8
 80035d6:	5a9a      	ldrh	r2, [r3, r2]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	21da      	movs	r1, #218	; 0xda
 80035dc:	5a5b      	ldrh	r3, [r3, r1]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d104      	bne.n	80035ec <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PushBackEPS0_Pb+0x8a>
            {
                emptyNotFull = false;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	22dc      	movs	r2, #220	; 0xdc
 80035e6:	2100      	movs	r1, #0
 80035e8:	5499      	strb	r1, [r3, r2]
            }
        }
    }
 80035ea:	e7ff      	b.n	80035ec <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE8PushBackEPS0_Pb+0x8a>
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b004      	add	sp, #16
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE13copyArrayDataEtPS0_>:
    uint16_t headIndex;
    uint16_t tailIndex;

    bool emptyNotFull;
    //Private Function Definitions
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	230a      	movs	r3, #10
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	1c0a      	adds	r2, r1, #0
 8003604:	801a      	strh	r2, [r3, #0]
    {
        for(uint16_t i = 0; i < SIZE; i++)
 8003606:	2316      	movs	r3, #22
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	2200      	movs	r2, #0
 800360c:	801a      	strh	r2, [r3, #0]
 800360e:	2316      	movs	r3, #22
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d11b      	bne.n	8003650 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE13copyArrayDataEtPS0_+0x5c>
        {
            this->fifoData[index][i] = dataToCopyFrom[i];
 8003618:	2416      	movs	r4, #22
 800361a:	193b      	adds	r3, r7, r4
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	222b      	movs	r2, #43	; 0x2b
 8003620:	4353      	muls	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	18d0      	adds	r0, r2, r3
 8003626:	230a      	movs	r3, #10
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	8819      	ldrh	r1, [r3, #0]
 800362c:	193b      	adds	r3, r7, r4
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	18cb      	adds	r3, r1, r3
 8003634:	212b      	movs	r1, #43	; 0x2b
 8003636:	434b      	muls	r3, r1
 8003638:	18d3      	adds	r3, r2, r3
 800363a:	0001      	movs	r1, r0
 800363c:	222b      	movs	r2, #43	; 0x2b
 800363e:	0018      	movs	r0, r3
 8003640:	f001 fc04 	bl	8004e4c <memcpy>
        for(uint16_t i = 0; i < SIZE; i++)
 8003644:	193b      	adds	r3, r7, r4
 8003646:	881a      	ldrh	r2, [r3, #0]
 8003648:	193b      	adds	r3, r7, r4
 800364a:	3201      	adds	r2, #1
 800364c:	801a      	strh	r2, [r3, #0]
 800364e:	e7de      	b.n	800360e <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EE13copyArrayDataEtPS0_+0x1a>
        }
    }
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b007      	add	sp, #28
 8003656:	bd90      	pop	{r4, r7, pc}

08003658 <_Z41__static_initialization_and_destruction_0ii>:
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d107      	bne.n	8003678 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4a05      	ldr	r2, [pc, #20]	; (8003680 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d103      	bne.n	8003678 <_Z41__static_initialization_and_destruction_0ii+0x20>
static HELPER_FIFO<GPS_Data_t,FIFO_DEPTH,1> dataFIFO;
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003672:	0018      	movs	r0, r3
 8003674:	f7ff ff60 	bl	8003538 <_ZN11HELPER_FIFOI8gps_dataLt5ELt1EEC1Ev>
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}
 8003680:	0000ffff 	.word	0x0000ffff
 8003684:	2000008c 	.word	0x2000008c

08003688 <_GLOBAL__sub_I__Z8GPS_initP13USART_TypeDef>:
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <_GLOBAL__sub_I__Z8GPS_initP13USART_TypeDef+0x14>)
 800368e:	0019      	movs	r1, r3
 8003690:	2001      	movs	r0, #1
 8003692:	f7ff ffe1 	bl	8003658 <_Z41__static_initialization_and_destruction_0ii>
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	0000ffff 	.word	0x0000ffff

080036a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b0b9      	sub	sp, #228	; 0xe4
 80036a4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036a6:	f7fd fb31 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036aa:	f000 f87b 	bl	80037a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036ae:	f000 f941 	bl	8003934 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80036b2:	f000 f90b 	bl	80038cc <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 80036b6:	f000 f8d5 	bl	8003864 <_ZL19MX_USART1_UART_Initv>
  CAN_TO_RF::AddMessage(&msg0, RF_ADDRESSES::BMS, &test);
  msg0.Send();
#endif
/***************************CAN TEST*************************/
#ifdef CAN_TEST
  MPPT_MESSAGE_0 mppt0;
 80036ba:	2590      	movs	r5, #144	; 0x90
 80036bc:	197b      	adds	r3, r7, r5
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 fd24 	bl	800410c <_ZN14MPPT_MESSAGE_0C1Ev>
  mppt0.SetupReceive(nullptr);
 80036c4:	197b      	adds	r3, r7, r5
 80036c6:	2100      	movs	r1, #0
 80036c8:	0018      	movs	r0, r3
 80036ca:	f000 fe63 	bl	8004394 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  BMS_MESSAGE_0 bms0;
 80036ce:	2444      	movs	r4, #68	; 0x44
 80036d0:	193b      	adds	r3, r7, r4
 80036d2:	0018      	movs	r0, r3
 80036d4:	f000 fbca 	bl	8003e6c <_ZN13BMS_MESSAGE_0C1Ev>
  bms0.SetupReceive(nullptr);
 80036d8:	193b      	adds	r3, r7, r4
 80036da:	2100      	movs	r1, #0
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 fe59 	bl	8004394 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  MOTOR_DRIVER_RX_FRAME_0 motorRx0;
 80036e2:	2608      	movs	r6, #8
 80036e4:	19bb      	adds	r3, r7, r6
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 fc4c 	bl	8003f84 <_ZN23MOTOR_DRIVER_RX_FRAME_0C1Ev>
  motorRx0.SetupReceive(nullptr);
 80036ec:	19bb      	adds	r3, r7, r6
 80036ee:	2100      	movs	r1, #0
 80036f0:	0018      	movs	r0, r3
 80036f2:	f000 fe4f 	bl	8004394 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>
  SUBSYSTEM_DATA_MODULE::StartCAN();
 80036f6:	f000 fe9f 	bl	8004438 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>
  bms0.txData = {3.45, 4.2, 2.65, 0.9};
 80036fa:	0021      	movs	r1, r4
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	4a26      	ldr	r2, [pc, #152]	; (8003798 <main+0xf8>)
 8003700:	333c      	adds	r3, #60	; 0x3c
 8003702:	ca51      	ldmia	r2!, {r0, r4, r6}
 8003704:	c351      	stmia	r3!, {r0, r4, r6}
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	601a      	str	r2, [r3, #0]
  bms0.SendData();
 800370a:	000c      	movs	r4, r1
 800370c:	187b      	adds	r3, r7, r1
 800370e:	0018      	movs	r0, r3
 8003710:	f000 fe60 	bl	80043d4 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
  bms0.txData = {12.2, 50, 33.1, 76};
 8003714:	0021      	movs	r1, r4
 8003716:	187b      	adds	r3, r7, r1
 8003718:	4a20      	ldr	r2, [pc, #128]	; (800379c <main+0xfc>)
 800371a:	333c      	adds	r3, #60	; 0x3c
 800371c:	ca51      	ldmia	r2!, {r0, r4, r6}
 800371e:	c351      	stmia	r3!, {r0, r4, r6}
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	601a      	str	r2, [r3, #0]
  bms0.SendData();
 8003724:	000c      	movs	r4, r1
 8003726:	187b      	adds	r3, r7, r1
 8003728:	0018      	movs	r0, r3
 800372a:	f000 fe53 	bl	80043d4 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
  bms0.txData = {4, 23, 44, 87};
 800372e:	0021      	movs	r1, r4
 8003730:	187b      	adds	r3, r7, r1
 8003732:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <main+0x100>)
 8003734:	333c      	adds	r3, #60	; 0x3c
 8003736:	ca51      	ldmia	r2!, {r0, r4, r6}
 8003738:	c351      	stmia	r3!, {r0, r4, r6}
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	601a      	str	r2, [r3, #0]
  bms0.SendData();
 800373e:	187b      	adds	r3, r7, r1
 8003740:	0018      	movs	r0, r3
 8003742:	f000 fe47 	bl	80043d4 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
  mppt0.SendData();
 8003746:	197b      	adds	r3, r7, r5
 8003748:	0018      	movs	r0, r3
 800374a:	f000 fe43 	bl	80043d4 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(!motorRx0.isFifoEmpty())
 800374e:	2308      	movs	r3, #8
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	0018      	movs	r0, r3
 8003754:	f000 ff56 	bl	8004604 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>
 8003758:	0003      	movs	r3, r0
 800375a:	001a      	movs	r2, r3
 800375c:	2301      	movs	r3, #1
 800375e:	4053      	eors	r3, r2
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f3      	beq.n	800374e <main+0xae>
	  {
		  bool receivedSomething;
		  MOTOR_DRIVER_RX_FRAME_0_DATA_PACKET motorPacket = motorRx0.GetOldestDataPacket(&receivedSomething);
 8003766:	1dfa      	adds	r2, r7, #7
 8003768:	2308      	movs	r3, #8
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	0011      	movs	r1, r2
 800376e:	0018      	movs	r0, r3
 8003770:	f000 f94f 	bl	8003a12 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI23MOTOR_DRIVER_RX_FRAME_035MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>
 8003774:	1c03      	adds	r3, r0, #0
 8003776:	1c1a      	adds	r2, r3, #0
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	801a      	strh	r2, [r3, #0]
		  if(receivedSomething)
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0e4      	beq.n	800374e <main+0xae>
		  {
			  //Nice
			  float l = motorPacket.motorRPM;
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	f7fd f961 	bl	8000a50 <__aeabi_ui2f>
 800378e:	1c03      	adds	r3, r0, #0
 8003790:	22dc      	movs	r2, #220	; 0xdc
 8003792:	18ba      	adds	r2, r7, r2
 8003794:	6013      	str	r3, [r2, #0]
	  }



    /* USER CODE BEGIN 3 */
  }
 8003796:	e7da      	b.n	800374e <main+0xae>
 8003798:	08005014 	.word	0x08005014
 800379c:	08005024 	.word	0x08005024
 80037a0:	08005034 	.word	0x08005034

080037a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b099      	sub	sp, #100	; 0x64
 80037a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037aa:	242c      	movs	r4, #44	; 0x2c
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	0018      	movs	r0, r3
 80037b0:	2334      	movs	r3, #52	; 0x34
 80037b2:	001a      	movs	r2, r3
 80037b4:	2100      	movs	r1, #0
 80037b6:	f001 fb52 	bl	8004e5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037ba:	231c      	movs	r3, #28
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	0018      	movs	r0, r3
 80037c0:	2310      	movs	r3, #16
 80037c2:	001a      	movs	r2, r3
 80037c4:	2100      	movs	r1, #0
 80037c6:	f001 fb4a 	bl	8004e5e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037ca:	003b      	movs	r3, r7
 80037cc:	0018      	movs	r0, r3
 80037ce:	231c      	movs	r3, #28
 80037d0:	001a      	movs	r2, r3
 80037d2:	2100      	movs	r1, #0
 80037d4:	f001 fb43 	bl	8004e5e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80037d8:	193b      	adds	r3, r7, r4
 80037da:	2220      	movs	r2, #32
 80037dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	2201      	movs	r2, #1
 80037e2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037e4:	193b      	adds	r3, r7, r4
 80037e6:	2200      	movs	r2, #0
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7fe fc17 	bl	8002020 <HAL_RCC_OscConfig>
 80037f2:	0003      	movs	r3, r0
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	4193      	sbcs	r3, r2
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80037fe:	f000 f903 	bl	8003a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003802:	211c      	movs	r1, #28
 8003804:	187b      	adds	r3, r7, r1
 8003806:	2207      	movs	r2, #7
 8003808:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800380a:	187b      	adds	r3, r7, r1
 800380c:	2203      	movs	r2, #3
 800380e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003810:	187b      	adds	r3, r7, r1
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003816:	187b      	adds	r3, r7, r1
 8003818:	2200      	movs	r2, #0
 800381a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800381c:	187b      	adds	r3, r7, r1
 800381e:	2101      	movs	r1, #1
 8003820:	0018      	movs	r0, r3
 8003822:	f7fe ff5d 	bl	80026e0 <HAL_RCC_ClockConfig>
 8003826:	0003      	movs	r3, r0
 8003828:	1e5a      	subs	r2, r3, #1
 800382a:	4193      	sbcs	r3, r2
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8003832:	f000 f8e9 	bl	8003a08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003836:	003b      	movs	r3, r7
 8003838:	2202      	movs	r2, #2
 800383a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800383c:	003b      	movs	r3, r7
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003842:	003b      	movs	r3, r7
 8003844:	0018      	movs	r0, r3
 8003846:	f7ff f8f3 	bl	8002a30 <HAL_RCCEx_PeriphCLKConfig>
 800384a:	0003      	movs	r3, r0
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	4193      	sbcs	r3, r2
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8003856:	f000 f8d7 	bl	8003a08 <Error_Handler>
  }
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b019      	add	sp, #100	; 0x64
 8003860:	bd90      	pop	{r4, r7, pc}
	...

08003864 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003868:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800386a:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <_ZL19MX_USART1_UART_Initv+0x64>)
 800386c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003870:	2296      	movs	r2, #150	; 0x96
 8003872:	0192      	lsls	r2, r2, #6
 8003874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800387e:	2200      	movs	r2, #0
 8003880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800388a:	220c      	movs	r2, #12
 800388c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003890:	2200      	movs	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800389c:	2200      	movs	r2, #0
 800389e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038a6:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7ff f9c1 	bl	8002c30 <HAL_UART_Init>
 80038ae:	0003      	movs	r3, r0
 80038b0:	1e5a      	subs	r2, r3, #1
 80038b2:	4193      	sbcs	r3, r2
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <_ZL19MX_USART1_UART_Initv+0x5a>
  {
    Error_Handler();
 80038ba:	f000 f8a5 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000244 	.word	0x20000244
 80038c8:	40013800 	.word	0x40013800

080038cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038d0:	4b16      	ldr	r3, [pc, #88]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <_ZL19MX_USART2_UART_Initv+0x64>)
 80038d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 80038d8:	22e1      	movs	r2, #225	; 0xe1
 80038da:	0212      	lsls	r2, r2, #8
 80038dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 80038f2:	220c      	movs	r2, #12
 80038f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038f6:	4b0d      	ldr	r3, [pc, #52]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 80038fe:	2200      	movs	r2, #0
 8003900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003904:	2200      	movs	r2, #0
 8003906:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 800390a:	2200      	movs	r2, #0
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003910:	0018      	movs	r0, r3
 8003912:	f7ff f98d 	bl	8002c30 <HAL_UART_Init>
 8003916:	0003      	movs	r3, r0
 8003918:	1e5a      	subs	r2, r3, #1
 800391a:	4193      	sbcs	r3, r2
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8003922:	f000 f871 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200001d4 	.word	0x200001d4
 8003930:	40004400 	.word	0x40004400

08003934 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393a:	240c      	movs	r4, #12
 800393c:	193b      	adds	r3, r7, r4
 800393e:	0018      	movs	r0, r3
 8003940:	2314      	movs	r3, #20
 8003942:	001a      	movs	r2, r3
 8003944:	2100      	movs	r1, #0
 8003946:	f001 fa8a 	bl	8004e5e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800394a:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <_ZL12MX_GPIO_Initv+0xc8>)
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <_ZL12MX_GPIO_Initv+0xc8>)
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	0309      	lsls	r1, r1, #12
 8003954:	430a      	orrs	r2, r1
 8003956:	615a      	str	r2, [r3, #20]
 8003958:	4b28      	ldr	r3, [pc, #160]	; (80039fc <_ZL12MX_GPIO_Initv+0xc8>)
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	031b      	lsls	r3, r3, #12
 8003960:	4013      	ands	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <_ZL12MX_GPIO_Initv+0xc8>)
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	4b24      	ldr	r3, [pc, #144]	; (80039fc <_ZL12MX_GPIO_Initv+0xc8>)
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	03c9      	lsls	r1, r1, #15
 8003970:	430a      	orrs	r2, r1
 8003972:	615a      	str	r2, [r3, #20]
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <_ZL12MX_GPIO_Initv+0xc8>)
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	03db      	lsls	r3, r3, #15
 800397c:	4013      	ands	r3, r2
 800397e:	607b      	str	r3, [r7, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <_ZL12MX_GPIO_Initv+0xc8>)
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <_ZL12MX_GPIO_Initv+0xc8>)
 8003988:	2180      	movs	r1, #128	; 0x80
 800398a:	0289      	lsls	r1, r1, #10
 800398c:	430a      	orrs	r2, r1
 800398e:	615a      	str	r2, [r3, #20]
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <_ZL12MX_GPIO_Initv+0xc8>)
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	029b      	lsls	r3, r3, #10
 8003998:	4013      	ands	r3, r2
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800399e:	2390      	movs	r3, #144	; 0x90
 80039a0:	05db      	lsls	r3, r3, #23
 80039a2:	2200      	movs	r2, #0
 80039a4:	2120      	movs	r1, #32
 80039a6:	0018      	movs	r0, r3
 80039a8:	f7fe fb1c 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039ac:	193b      	adds	r3, r7, r4
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	0192      	lsls	r2, r2, #6
 80039b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039b4:	193b      	adds	r3, r7, r4
 80039b6:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <_ZL12MX_GPIO_Initv+0xcc>)
 80039b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	193b      	adds	r3, r7, r4
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039c0:	193b      	adds	r3, r7, r4
 80039c2:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <_ZL12MX_GPIO_Initv+0xd0>)
 80039c4:	0019      	movs	r1, r3
 80039c6:	0010      	movs	r0, r2
 80039c8:	f7fe f990 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80039cc:	0021      	movs	r1, r4
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	2220      	movs	r2, #32
 80039d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	2201      	movs	r2, #1
 80039d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80039e6:	187a      	adds	r2, r7, r1
 80039e8:	2390      	movs	r3, #144	; 0x90
 80039ea:	05db      	lsls	r3, r3, #23
 80039ec:	0011      	movs	r1, r2
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fe f97c 	bl	8001cec <HAL_GPIO_Init>

}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b009      	add	sp, #36	; 0x24
 80039fa:	bd90      	pop	{r4, r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	10210000 	.word	0x10210000
 8003a04:	48000800 	.word	0x48000800

08003a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI23MOTOR_DRIVER_RX_FRAME_035MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb>:
	/**
	 * @brief This is used to get the first received data packet
	 * @param success: returns true if there was data to get, false if the fifo was empty. You must pass in a value.
	 * @return Corresponding Data Packet of Child Data Type
	 */
	CHILD_DATA GetOldestDataPacket(bool* success)
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
	{
		CHILD_DATA returnData;
	    if(success)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d015      	beq.n	8003a4e <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI23MOTOR_DRIVER_RX_FRAME_035MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x3c>
	    {
	        uint8_t* raw_data = this->storageFifo.PopFront(success);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3312      	adds	r3, #18
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	0011      	movs	r1, r2
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 f816 	bl	8003a5c <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>
 8003a30:	0003      	movs	r3, r0
 8003a32:	60fb      	str	r3, [r7, #12]

	        //Only do the conversions if we successfully extracted from the fifo
	        if(*success)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI23MOTOR_DRIVER_RX_FRAME_035MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETE19GetOldestDataPacketEPb+0x3c>
	        {
	        	returnData = static_cast<CHILD_OBJ*>(this)->arrayToDataPacket(raw_data);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 fa84 	bl	8003f4c <_ZN23MOTOR_DRIVER_RX_FRAME_017arrayToDataPacketEPh>
 8003a44:	1c03      	adds	r3, r0, #0
 8003a46:	1c1a      	adds	r2, r3, #0
 8003a48:	2308      	movs	r3, #8
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	801a      	strh	r2, [r3, #0]
	        }
	    }
	    return returnData;
 8003a4e:	2308      	movs	r3, #8
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	881b      	ldrh	r3, [r3, #0]
	}
 8003a54:	1c18      	adds	r0, r3, #0
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb>:
    T* PopFront(bool* success)
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
    	 uint16_t prevTailIndex = 0;
 8003a66:	230e      	movs	r3, #14
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	801a      	strh	r2, [r3, #0]
        if(tailIndex == headIndex && emptyNotFull)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8b5a      	ldrh	r2, [r3, #26]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8b1b      	ldrh	r3, [r3, #24]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d10a      	bne.n	8003a90 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7f1b      	ldrb	r3, [r3, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x34>
            if(success)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d022      	beq.n	8003ace <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
                *success = false;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
            if(success)
 8003a8e:	e01e      	b.n	8003ace <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
            if(success)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x40>
                *success = true;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
            prevTailIndex = tailIndex;
 8003a9c:	230e      	movs	r3, #14
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	8b52      	ldrh	r2, [r2, #26]
 8003aa4:	801a      	strh	r2, [r3, #0]
            tailIndex = (tailIndex + 1)%DEPTH;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8b5b      	ldrh	r3, [r3, #26]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	2103      	movs	r1, #3
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f7fc fc9a 	bl	80003e8 <__aeabi_idivmod>
 8003ab4:	000b      	movs	r3, r1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	835a      	strh	r2, [r3, #26]
            if(tailIndex == headIndex)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8b5a      	ldrh	r2, [r3, #26]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8b1b      	ldrh	r3, [r3, #24]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d102      	bne.n	8003ace <_ZN11HELPER_FIFOIhLt3ELt8EE8PopFrontEPb+0x72>
                emptyNotFull = true;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	771a      	strb	r2, [r3, #28]
        return fifoData[prevTailIndex];
 8003ace:	230e      	movs	r3, #14
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	18d3      	adds	r3, r2, r3
    }
 8003ada:	0018      	movs	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b004      	add	sp, #16
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_MspInit+0x44>)
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_MspInit+0x44>)
 8003af0:	2101      	movs	r1, #1
 8003af2:	430a      	orrs	r2, r1
 8003af4:	619a      	str	r2, [r3, #24]
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_MspInit+0x44>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2201      	movs	r2, #1
 8003afc:	4013      	ands	r3, r2
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_MspInit+0x44>)
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_MspInit+0x44>)
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	0549      	lsls	r1, r1, #21
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	61da      	str	r2, [r3, #28]
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_MspInit+0x44>)
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	055b      	lsls	r3, r3, #21
 8003b18:	4013      	ands	r3, r2
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b002      	add	sp, #8
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	40021000 	.word	0x40021000

08003b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08c      	sub	sp, #48	; 0x30
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b34:	231c      	movs	r3, #28
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	0018      	movs	r0, r3
 8003b3a:	2314      	movs	r3, #20
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f001 f98d 	bl	8004e5e <memset>
  if(huart->Instance==USART1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a3d      	ldr	r2, [pc, #244]	; (8003c40 <HAL_UART_MspInit+0x114>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d13c      	bne.n	8003bc8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b4e:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	4b3c      	ldr	r3, [pc, #240]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	01c9      	lsls	r1, r1, #7
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	619a      	str	r2, [r3, #24]
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	01db      	lsls	r3, r3, #7
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	4b36      	ldr	r3, [pc, #216]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	0289      	lsls	r1, r1, #10
 8003b74:	430a      	orrs	r2, r1
 8003b76:	615a      	str	r2, [r3, #20]
 8003b78:	4b32      	ldr	r3, [pc, #200]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	029b      	lsls	r3, r3, #10
 8003b80:	4013      	ands	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b86:	211c      	movs	r1, #28
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	22c0      	movs	r2, #192	; 0xc0
 8003b8c:	00d2      	lsls	r2, r2, #3
 8003b8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	2202      	movs	r2, #2
 8003b94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	2200      	movs	r2, #0
 8003b9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003ba2:	187b      	adds	r3, r7, r1
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba8:	187a      	adds	r2, r7, r1
 8003baa:	2390      	movs	r3, #144	; 0x90
 8003bac:	05db      	lsls	r3, r3, #23
 8003bae:	0011      	movs	r1, r2
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7fe f89b 	bl	8001cec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	201b      	movs	r0, #27
 8003bbc:	f7fe f864 	bl	8001c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bc0:	201b      	movs	r0, #27
 8003bc2:	f7fe f876 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bc6:	e037      	b.n	8003c38 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <HAL_UART_MspInit+0x11c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d132      	bne.n	8003c38 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	0289      	lsls	r1, r1, #10
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	61da      	str	r2, [r3, #28]
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	029b      	lsls	r3, r3, #10
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	0289      	lsls	r1, r1, #10
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	615a      	str	r2, [r3, #20]
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <HAL_UART_MspInit+0x118>)
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c0a:	211c      	movs	r1, #28
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	220c      	movs	r2, #12
 8003c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2202      	movs	r2, #2
 8003c16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1e:	187b      	adds	r3, r7, r1
 8003c20:	2200      	movs	r2, #0
 8003c22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003c24:	187b      	adds	r3, r7, r1
 8003c26:	2201      	movs	r2, #1
 8003c28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2a:	187a      	adds	r2, r7, r1
 8003c2c:	2390      	movs	r3, #144	; 0x90
 8003c2e:	05db      	lsls	r3, r3, #23
 8003c30:	0011      	movs	r1, r2
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7fe f85a 	bl	8001cec <HAL_GPIO_Init>
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b00c      	add	sp, #48	; 0x30
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40013800 	.word	0x40013800
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40004400 	.word	0x40004400

08003c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c5a:	e7fe      	b.n	8003c5a <HardFault_Handler+0x4>

08003c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c74:	f7fd f87a 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(huart1.Instance->ISR & USART_ISR_RXNE)
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <USART1_IRQHandler+0x34>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	1e5a      	subs	r2, r3, #1
 8003c90:	4193      	sbcs	r3, r2
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <USART1_IRQHandler+0x1e>
	{
		GPS_RxCpltCallback();
 8003c98:	f7ff fb36 	bl	8003308 <_Z18GPS_RxCpltCallbackv>
  /* USER CODE END USART1_IRQn 0 */

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c9c:	e007      	b.n	8003cae <USART1_IRQHandler+0x2e>
		huart1.Instance->ICR |= USART_ICR_ORECF;
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <USART1_IRQHandler+0x34>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <USART1_IRQHandler+0x34>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2108      	movs	r1, #8
 8003caa:	430a      	orrs	r2, r1
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000244 	.word	0x20000244

08003cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
	return 1;
 8003cbc:	2301      	movs	r3, #1
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_kill>:

int _kill(int pid, int sig)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003cce:	f001 f893 	bl	8004df8 <__errno>
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	2216      	movs	r2, #22
 8003cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	425b      	negs	r3, r3
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_exit>:

void _exit (int status)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cec:	2301      	movs	r3, #1
 8003cee:	425a      	negs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff ffe5 	bl	8003cc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cfa:	e7fe      	b.n	8003cfa <_exit+0x16>

08003cfc <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <SystemInit+0x70>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <SystemInit+0x70>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <SystemInit+0x70>)
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <SystemInit+0x70>)
 8003d12:	4917      	ldr	r1, [pc, #92]	; (8003d70 <SystemInit+0x74>)
 8003d14:	400a      	ands	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003d18:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <SystemInit+0x70>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <SystemInit+0x70>)
 8003d1e:	4915      	ldr	r1, [pc, #84]	; (8003d74 <SystemInit+0x78>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <SystemInit+0x70>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <SystemInit+0x70>)
 8003d2a:	4913      	ldr	r1, [pc, #76]	; (8003d78 <SystemInit+0x7c>)
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <SystemInit+0x70>)
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <SystemInit+0x70>)
 8003d36:	4911      	ldr	r1, [pc, #68]	; (8003d7c <SystemInit+0x80>)
 8003d38:	400a      	ands	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <SystemInit+0x70>)
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <SystemInit+0x70>)
 8003d42:	210f      	movs	r1, #15
 8003d44:	438a      	bics	r2, r1
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8003d48:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <SystemInit+0x70>)
 8003d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <SystemInit+0x70>)
 8003d4e:	490c      	ldr	r1, [pc, #48]	; (8003d80 <SystemInit+0x84>)
 8003d50:	400a      	ands	r2, r1
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <SystemInit+0x70>)
 8003d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <SystemInit+0x70>)
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003d60:	4b02      	ldr	r3, [pc, #8]	; (8003d6c <SystemInit+0x70>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]

}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	08ffb80c 	.word	0x08ffb80c
 8003d74:	fef6ffff 	.word	0xfef6ffff
 8003d78:	fffbffff 	.word	0xfffbffff
 8003d7c:	ffc0ffff 	.word	0xffc0ffff
 8003d80:	fffcfe2c 	.word	0xfffcfe2c

08003d84 <_ZN13BMS_MESSAGE_017dataPacketToArrayE25BMS_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void BMS_MESSAGE_0::dataPacketToArray(BMS_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b089      	sub	sp, #36	; 0x24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	003c      	movs	r4, r7
 8003d8c:	6020      	str	r0, [r4, #0]
 8003d8e:	6061      	str	r1, [r4, #4]
 8003d90:	60a2      	str	r2, [r4, #8]
 8003d92:	60e3      	str	r3, [r4, #12]
	float convLowCellVoltage = input.lowCellVoltage * 10000;
 8003d94:	003b      	movs	r3, r7
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4932      	ldr	r1, [pc, #200]	; (8003e64 <_ZN13BMS_MESSAGE_017dataPacketToArrayE25BMS_MESSAGE_0_DATA_PACKETPh+0xe0>)
 8003d9a:	1c18      	adds	r0, r3, #0
 8003d9c:	f7fc fb42 	bl	8000424 <__aeabi_fmul>
 8003da0:	1c03      	adds	r3, r0, #0
 8003da2:	61fb      	str	r3, [r7, #28]
	float convHighCellVoltage = input.highCellVoltage * 10000;
 8003da4:	003b      	movs	r3, r7
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	492e      	ldr	r1, [pc, #184]	; (8003e64 <_ZN13BMS_MESSAGE_017dataPacketToArrayE25BMS_MESSAGE_0_DATA_PACKETPh+0xe0>)
 8003daa:	1c18      	adds	r0, r3, #0
 8003dac:	f7fc fb3a 	bl	8000424 <__aeabi_fmul>
 8003db0:	1c03      	adds	r3, r0, #0
 8003db2:	61bb      	str	r3, [r7, #24]
	float convAvgCellVoltage = input.avgCellVoltage * 10000;
 8003db4:	003b      	movs	r3, r7
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	492a      	ldr	r1, [pc, #168]	; (8003e64 <_ZN13BMS_MESSAGE_017dataPacketToArrayE25BMS_MESSAGE_0_DATA_PACKETPh+0xe0>)
 8003dba:	1c18      	adds	r0, r3, #0
 8003dbc:	f7fc fb32 	bl	8000424 <__aeabi_fmul>
 8003dc0:	1c03      	adds	r3, r0, #0
 8003dc2:	617b      	str	r3, [r7, #20]
	float convPackSummedVoltage = input.packSummedVoltage * 1000;
 8003dc4:	003b      	movs	r3, r7
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4927      	ldr	r1, [pc, #156]	; (8003e68 <_ZN13BMS_MESSAGE_017dataPacketToArrayE25BMS_MESSAGE_0_DATA_PACKETPh+0xe4>)
 8003dca:	1c18      	adds	r0, r3, #0
 8003dcc:	f7fc fb2a 	bl	8000424 <__aeabi_fmul>
 8003dd0:	1c03      	adds	r3, r0, #0
 8003dd2:	613b      	str	r3, [r7, #16]

	output[0] = static_cast<uint32_t>(convLowCellVoltage) & 0xFF;
 8003dd4:	69f8      	ldr	r0, [r7, #28]
 8003dd6:	f7fc fb0d 	bl	80003f4 <__aeabi_f2uiz>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	701a      	strb	r2, [r3, #0]
	output[1] = (static_cast<uint32_t>(convLowCellVoltage) >> 8) & 0xFF;
 8003de2:	69f8      	ldr	r0, [r7, #28]
 8003de4:	f7fc fb06 	bl	80003f4 <__aeabi_f2uiz>
 8003de8:	0003      	movs	r3, r0
 8003dea:	0a1a      	lsrs	r2, r3, #8
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	3301      	adds	r3, #1
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]
	output[2] = static_cast<uint32_t>(convHighCellVoltage) & 0xFF;
 8003df4:	69b8      	ldr	r0, [r7, #24]
 8003df6:	f7fc fafd 	bl	80003f4 <__aeabi_f2uiz>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	3302      	adds	r3, #2
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]
	output[3] = (static_cast<uint32_t>(convHighCellVoltage) >> 8) & 0xFF;
 8003e04:	69b8      	ldr	r0, [r7, #24]
 8003e06:	f7fc faf5 	bl	80003f4 <__aeabi_f2uiz>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	0a1a      	lsrs	r2, r3, #8
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	3303      	adds	r3, #3
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]
	output[4] = static_cast<uint32_t>(convAvgCellVoltage) & 0xFF;
 8003e16:	6978      	ldr	r0, [r7, #20]
 8003e18:	f7fc faec 	bl	80003f4 <__aeabi_f2uiz>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	3304      	adds	r3, #4
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
	output[5] = (static_cast<uint32_t>(convAvgCellVoltage) >> 8) & 0xFF;
 8003e26:	6978      	ldr	r0, [r7, #20]
 8003e28:	f7fc fae4 	bl	80003f4 <__aeabi_f2uiz>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	0a1a      	lsrs	r2, r3, #8
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	3305      	adds	r3, #5
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
	output[6] = static_cast<uint32_t>(convPackSummedVoltage) & 0xFF;
 8003e38:	6938      	ldr	r0, [r7, #16]
 8003e3a:	f7fc fadb 	bl	80003f4 <__aeabi_f2uiz>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	3306      	adds	r3, #6
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
	output[7] = (static_cast<uint32_t>(convPackSummedVoltage) >> 8) & 0xFF;
 8003e48:	6938      	ldr	r0, [r7, #16]
 8003e4a:	f7fc fad3 	bl	80003f4 <__aeabi_f2uiz>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	0a1a      	lsrs	r2, r3, #8
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	3307      	adds	r3, #7
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b009      	add	sp, #36	; 0x24
 8003e60:	bd90      	pop	{r4, r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	461c4000 	.word	0x461c4000
 8003e68:	447a0000 	.word	0x447a0000

08003e6c <_ZN13BMS_MESSAGE_0C1Ev>:

	return output;
}

//Public Function Definitions
BMS_MESSAGE_0::BMS_MESSAGE_0():
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<BMS_MESSAGE_0, BMS_MESSAGE_0_DATA_PACKET>{subsystem_info::BMS0_MSG_ID,subsystem_info::BMS0_MSG_LENGTH, false, false, false}
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	23d6      	movs	r3, #214	; 0xd6
 8003e78:	00d9      	lsls	r1, r3, #3
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	2208      	movs	r2, #8
 8003e86:	f000 f80b 	bl	8003ea0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13BMS_MESSAGE_025BMS_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 8003e8a:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <_ZN13BMS_MESSAGE_0C1Ev+0x30>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	601a      	str	r2, [r3, #0]
{}
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	0018      	movs	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b002      	add	sp, #8
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	080050a4 	.word	0x080050a4

08003ea0 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13BMS_MESSAGE_025BMS_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
protected:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	0019      	movs	r1, r3
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	1dbb      	adds	r3, r7, #6
 8003eb2:	1c0a      	adds	r2, r1, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	1dbb      	adds	r3, r7, #6
 8003eba:	781c      	ldrb	r4, [r3, #0]
 8003ebc:	1dfb      	adds	r3, r7, #7
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	2324      	movs	r3, #36	; 0x24
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	2320      	movs	r3, #32
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	0023      	movs	r3, r4
 8003ed4:	f000 fa12 	bl	80042fc <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8003ed8:	4a03      	ldr	r2, [pc, #12]	; (8003ee8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13BMS_MESSAGE_025BMS_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]
		{}
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b005      	add	sp, #20
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	080050b0 	.word	0x080050b0

08003eec <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI13BMS_MESSAGE_025BMS_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
private:
	virtual void fillTransmitBuffer(void) override
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	6078      	str	r0, [r7, #4]
	{
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3309      	adds	r3, #9
 8003ef8:	001a      	movs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	9200      	str	r2, [sp, #0]
 8003efe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003f00:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	f7ff ff3d 	bl	8003d84 <_ZN13BMS_MESSAGE_017dataPacketToArrayE25BMS_MESSAGE_0_DATA_PACKETPh>
	}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_ZN23MOTOR_DRIVER_RX_FRAME_017dataPacketToArrayE35MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETPh>:
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MOTOR_DRIVER_TX_RL_MESSAGE, MOTOR_DRIVER_TX_RL_DATA_PACKET>{subsystem_info::MOTORTX_RL_MSG_ID,subsystem_info::MOTORTX_RL_MSG_LENGTH, true, false, false}
{}
/*****************RX Classes*****************/
//RX Frame 0
void MOTOR_DRIVER_RX_FRAME_0::dataPacketToArray(MOTOR_DRIVER_RX_FRAME_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	8018      	strh	r0, [r3, #0]
 8003f1c:	6039      	str	r1, [r7, #0]
	uint32_t convMotorRPM = input.motorRPM * 1;
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

	output[4] = (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	00d2      	lsls	r2, r2, #3
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
	output[5] = (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	3305      	adds	r3, #5
 8003f3c:	217f      	movs	r1, #127	; 0x7f
 8003f3e:	400a      	ands	r2, r1
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b004      	add	sp, #16
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <_ZN23MOTOR_DRIVER_RX_FRAME_017arrayToDataPacketEPh>:

MOTOR_DRIVER_RX_FRAME_0_DATA_PACKET MOTOR_DRIVER_RX_FRAME_0::arrayToDataPacket(uint8_t input[NUM_BYTES])
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	MOTOR_DRIVER_RX_FRAME_0_DATA_PACKET output;
	uint32_t preMotorRPM = (static_cast<uint32_t>(input[5] & 0x7F) << 5) | (input[4] >> 3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3305      	adds	r3, #5
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	23fe      	movs	r3, #254	; 0xfe
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	3204      	adds	r2, #4
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	10d2      	asrs	r2, r2, #3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
	output.motorRPM = static_cast<uint16_t>(preMotorRPM);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	2108      	movs	r1, #8
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	801a      	strh	r2, [r3, #0]

	return output;
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	881b      	ldrh	r3, [r3, #0]
}
 8003f7c:	1c18      	adds	r0, r3, #0
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b004      	add	sp, #16
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_ZN23MOTOR_DRIVER_RX_FRAME_0C1Ev>:

MOTOR_DRIVER_RX_FRAME_0::MOTOR_DRIVER_RX_FRAME_0():
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MOTOR_DRIVER_RX_FRAME_0, MOTOR_DRIVER_RX_FRAME_0_DATA_PACKET>{subsystem_info::MOTORRX0_RL_MSG_ID,subsystem_info::MOTORRX0_RL_MSG_LENGTH, true, true, false}
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4908      	ldr	r1, [pc, #32]	; (8003fb0 <_ZN23MOTOR_DRIVER_RX_FRAME_0C1Ev+0x2c>)
 8003f90:	2300      	movs	r3, #0
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	2301      	movs	r3, #1
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2301      	movs	r3, #1
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	f000 f80c 	bl	8003fb8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI23MOTOR_DRIVER_RX_FRAME_035MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <_ZN23MOTOR_DRIVER_RX_FRAME_0C1Ev+0x30>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
{}
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b002      	add	sp, #8
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	08850225 	.word	0x08850225
 8003fb4:	080050bc 	.word	0x080050bc

08003fb8 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI23MOTOR_DRIVER_RX_FRAME_035MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	1dfb      	adds	r3, r7, #7
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	1dbb      	adds	r3, r7, #6
 8003fca:	1c0a      	adds	r2, r1, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	1dbb      	adds	r3, r7, #6
 8003fd2:	781c      	ldrb	r4, [r3, #0]
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	2324      	movs	r3, #36	; 0x24
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	0023      	movs	r3, r4
 8003fec:	f000 f986 	bl	80042fc <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8003ff0:	4a03      	ldr	r2, [pc, #12]	; (8004000 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI23MOTOR_DRIVER_RX_FRAME_035MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETEC1Emhbbb+0x48>)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	601a      	str	r2, [r3, #0]
		{}
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b005      	add	sp, #20
 8003ffe:	bd90      	pop	{r4, r7, pc}
 8004000:	080050c8 	.word	0x080050c8

08004004 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI23MOTOR_DRIVER_RX_FRAME_035MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3309      	adds	r3, #9
 8004010:	001a      	movs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004016:	0011      	movs	r1, r2
 8004018:	1c18      	adds	r0, r3, #0
 800401a:	f7ff ff7a 	bl	8003f12 <_ZN23MOTOR_DRIVER_RX_FRAME_017dataPacketToArrayE35MOTOR_DRIVER_RX_FRAME_0_DATA_PACKETPh>
	}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b002      	add	sp, #8
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <_ZN14MPPT_MESSAGE_017dataPacketToArrayE26MPPT_MESSAGE_0_DATA_PACKETPh>:

//Private Function Definitions

//Protected Function Definitions
void MPPT_MESSAGE_0::dataPacketToArray(MPPT_MESSAGE_0_DATA_PACKET input, uint8_t output[NUM_BYTES])
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	003c      	movs	r4, r7
 8004030:	6020      	str	r0, [r4, #0]
 8004032:	6061      	str	r1, [r4, #4]
 8004034:	60a2      	str	r2, [r4, #8]
 8004036:	60e3      	str	r3, [r4, #12]
	assert_param(output != nullptr);

	float convArrayVoltage = input.arrayVoltage * 100;
 8004038:	003b      	movs	r3, r7
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4932      	ldr	r1, [pc, #200]	; (8004108 <_ZN14MPPT_MESSAGE_017dataPacketToArrayE26MPPT_MESSAGE_0_DATA_PACKETPh+0xe0>)
 800403e:	1c18      	adds	r0, r3, #0
 8004040:	f7fc f9f0 	bl	8000424 <__aeabi_fmul>
 8004044:	1c03      	adds	r3, r0, #0
 8004046:	61fb      	str	r3, [r7, #28]
	float convArrayCurrent = input.arrayCurrent * 100;
 8004048:	003b      	movs	r3, r7
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	492e      	ldr	r1, [pc, #184]	; (8004108 <_ZN14MPPT_MESSAGE_017dataPacketToArrayE26MPPT_MESSAGE_0_DATA_PACKETPh+0xe0>)
 800404e:	1c18      	adds	r0, r3, #0
 8004050:	f7fc f9e8 	bl	8000424 <__aeabi_fmul>
 8004054:	1c03      	adds	r3, r0, #0
 8004056:	61bb      	str	r3, [r7, #24]
	float convBatteryVoltage = input.batteryVoltage * 100;
 8004058:	003b      	movs	r3, r7
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	492a      	ldr	r1, [pc, #168]	; (8004108 <_ZN14MPPT_MESSAGE_017dataPacketToArrayE26MPPT_MESSAGE_0_DATA_PACKETPh+0xe0>)
 800405e:	1c18      	adds	r0, r3, #0
 8004060:	f7fc f9e0 	bl	8000424 <__aeabi_fmul>
 8004064:	1c03      	adds	r3, r0, #0
 8004066:	617b      	str	r3, [r7, #20]
	float convMpptTemperature = input.mpptTemperature * 100;
 8004068:	003b      	movs	r3, r7
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4926      	ldr	r1, [pc, #152]	; (8004108 <_ZN14MPPT_MESSAGE_017dataPacketToArrayE26MPPT_MESSAGE_0_DATA_PACKETPh+0xe0>)
 800406e:	1c18      	adds	r0, r3, #0
 8004070:	f7fc f9d8 	bl	8000424 <__aeabi_fmul>
 8004074:	1c03      	adds	r3, r0, #0
 8004076:	613b      	str	r3, [r7, #16]

	output[0] = static_cast<uint32_t>(convArrayVoltage) & 0xFF;
 8004078:	69f8      	ldr	r0, [r7, #28]
 800407a:	f7fc f9bb 	bl	80003f4 <__aeabi_f2uiz>
 800407e:	0003      	movs	r3, r0
 8004080:	b2da      	uxtb	r2, r3
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	701a      	strb	r2, [r3, #0]
	output[1] = (static_cast<uint32_t>(convArrayVoltage) >> 8) & 0xFF;
 8004086:	69f8      	ldr	r0, [r7, #28]
 8004088:	f7fc f9b4 	bl	80003f4 <__aeabi_f2uiz>
 800408c:	0003      	movs	r3, r0
 800408e:	0a1a      	lsrs	r2, r3, #8
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	3301      	adds	r3, #1
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]
	output[2] = static_cast<uint32_t>(convArrayCurrent) & 0xFF;
 8004098:	69b8      	ldr	r0, [r7, #24]
 800409a:	f7fc f9ab 	bl	80003f4 <__aeabi_f2uiz>
 800409e:	0002      	movs	r2, r0
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	3302      	adds	r3, #2
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
	output[3] = (static_cast<uint32_t>(convArrayCurrent) >> 8) & 0xFF;
 80040a8:	69b8      	ldr	r0, [r7, #24]
 80040aa:	f7fc f9a3 	bl	80003f4 <__aeabi_f2uiz>
 80040ae:	0003      	movs	r3, r0
 80040b0:	0a1a      	lsrs	r2, r3, #8
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	3303      	adds	r3, #3
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
	output[4] = static_cast<uint32_t>(convBatteryVoltage) & 0xFF;
 80040ba:	6978      	ldr	r0, [r7, #20]
 80040bc:	f7fc f99a 	bl	80003f4 <__aeabi_f2uiz>
 80040c0:	0002      	movs	r2, r0
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	3304      	adds	r3, #4
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
	output[5] = (static_cast<uint32_t>(convBatteryVoltage) >> 8) & 0xFF;
 80040ca:	6978      	ldr	r0, [r7, #20]
 80040cc:	f7fc f992 	bl	80003f4 <__aeabi_f2uiz>
 80040d0:	0003      	movs	r3, r0
 80040d2:	0a1a      	lsrs	r2, r3, #8
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	3305      	adds	r3, #5
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]
	output[6] = static_cast<uint32_t>(convMpptTemperature) & 0xFF;
 80040dc:	6938      	ldr	r0, [r7, #16]
 80040de:	f7fc f989 	bl	80003f4 <__aeabi_f2uiz>
 80040e2:	0002      	movs	r2, r0
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	3306      	adds	r3, #6
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	701a      	strb	r2, [r3, #0]
	output[7] = (static_cast<uint32_t>(convMpptTemperature) >> 8) & 0xFF;
 80040ec:	6938      	ldr	r0, [r7, #16]
 80040ee:	f7fc f981 	bl	80003f4 <__aeabi_f2uiz>
 80040f2:	0003      	movs	r3, r0
 80040f4:	0a1a      	lsrs	r2, r3, #8
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	3307      	adds	r3, #7
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	46bd      	mov	sp, r7
 8004102:	b009      	add	sp, #36	; 0x24
 8004104:	bd90      	pop	{r4, r7, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	42c80000 	.word	0x42c80000

0800410c <_ZN14MPPT_MESSAGE_0C1Ev>:

	return output;
}

//Public Function Definitions
MPPT_MESSAGE_0::MPPT_MESSAGE_0():
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af02      	add	r7, sp, #8
 8004112:	6078      	str	r0, [r7, #4]
SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE<MPPT_MESSAGE_0, MPPT_MESSAGE_0_DATA_PACKET>{subsystem_info::MPPT0_MSG_ID,subsystem_info::MPPT0_MSG_LENGTH, false, false, true}
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	00d9      	lsls	r1, r3, #3
 800411a:	2301      	movs	r3, #1
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	2300      	movs	r3, #0
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	2300      	movs	r3, #0
 8004124:	2208      	movs	r2, #8
 8004126:	f000 f80b 	bl	8004140 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI14MPPT_MESSAGE_026MPPT_MESSAGE_0_DATA_PACKETEC1Emhbbb>
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <_ZN14MPPT_MESSAGE_0C1Ev+0x30>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
{}
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b002      	add	sp, #8
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	080050d4 	.word	0x080050d4

08004140 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI14MPPT_MESSAGE_026MPPT_MESSAGE_0_DATA_PACKETEC1Emhbbb>:
	SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b087      	sub	sp, #28
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	0019      	movs	r1, r3
 800414c:	1dfb      	adds	r3, r7, #7
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	1dbb      	adds	r3, r7, #6
 8004152:	1c0a      	adds	r2, r1, #0
 8004154:	701a      	strb	r2, [r3, #0]
		SUBSYSTEM_DATA_MODULE{message_id, data_length, is_ext_id, is_rx_only, is_tx_rtr}
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	1dbb      	adds	r3, r7, #6
 800415a:	781c      	ldrb	r4, [r3, #0]
 800415c:	1dfb      	adds	r3, r7, #7
 800415e:	781a      	ldrb	r2, [r3, #0]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	2324      	movs	r3, #36	; 0x24
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	2320      	movs	r3, #32
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	0023      	movs	r3, r4
 8004174:	f000 f8c2 	bl	80042fc <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>
 8004178:	4a03      	ldr	r2, [pc, #12]	; (8004188 <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI14MPPT_MESSAGE_026MPPT_MESSAGE_0_DATA_PACKETEC1Emhbbb+0x48>)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	601a      	str	r2, [r3, #0]
		{}
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b005      	add	sp, #20
 8004186:	bd90      	pop	{r4, r7, pc}
 8004188:	080050e0 	.word	0x080050e0

0800418c <_ZN40SUBSYSTEM_DATA_MODULE_TEMPLATE_INTERFACEI14MPPT_MESSAGE_026MPPT_MESSAGE_0_DATA_PACKETE18fillTransmitBufferEv>:
	virtual void fillTransmitBuffer(void) override
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af02      	add	r7, sp, #8
 8004192:	6078      	str	r0, [r7, #4]
		static_cast<CHILD_OBJ*>(this)->dataPacketToArray(static_cast<CHILD_OBJ*>(this)->txData, this->transmitBuffer);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3309      	adds	r3, #9
 8004198:	001a      	movs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	9200      	str	r2, [sp, #0]
 800419e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80041a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80041a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a6:	f7ff ff3f 	bl	8004028 <_ZN14MPPT_MESSAGE_017dataPacketToArrayE26MPPT_MESSAGE_0_DATA_PACKETPh>
	}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b002      	add	sp, #8
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief This function is called when a rx msg is pending in can rx fifo 0
 * @param hcan: pointer to can handle
 * @important HAL_CAN_IRQHandler must be called in the CAN isr for this to be called
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041b2:	b590      	push	{r4, r7, lr}
 80041b4:	b08d      	sub	sp, #52	; 0x34
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
	//Get all pending messages in fifo 0 in case there is more than one
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2100      	movs	r1, #0
 80041be:	0018      	movs	r0, r3
 80041c0:	f7fd fa54 	bl	800166c <HAL_CAN_GetRxFifoFillLevel>
 80041c4:	0003      	movs	r3, r0
 80041c6:	1e5a      	subs	r2, r3, #1
 80041c8:	4193      	sbcs	r3, r2
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d02e      	beq.n	800422e <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	{
		//Read message
		CAN_RxHeaderTypeDef pHeader;
		uint8_t aData[SUBSYSTEM_DATA_MODULE::ARRAY_SIZE];
		HAL_CAN_GetRxMessage(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER, &pHeader, aData);
 80041d0:	2308      	movs	r3, #8
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	2410      	movs	r4, #16
 80041d6:	193a      	adds	r2, r7, r4
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	2100      	movs	r1, #0
 80041dc:	f7fd f929 	bl	8001432 <HAL_CAN_GetRxMessage>

		//Get pointer to receiving data module
		SUBSYSTEM_DATA_MODULE* receivingNode =
				SUBSYSTEM_DATA_MODULE::FindReceivingModule((pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId));
 80041e0:	193b      	adds	r3, r7, r4
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 80041e8:	2310      	movs	r3, #16
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 80041f0:	2310      	movs	r3, #16
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f8ba 	bl	8004370 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>
 80041fc:	0003      	movs	r3, r0
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(receivingNode != nullptr)
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0d9      	beq.n	80041ba <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
		{
			//Verify that the received header matches the receiving node in terms of dlc
			if(receivingNode->dataLength == pHeader.DLC)
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	7a1b      	ldrb	r3, [r3, #8]
 800420a:	001a      	movs	r2, r3
 800420c:	2310      	movs	r3, #16
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	429a      	cmp	r2, r3
 8004214:	d1d1      	bne.n	80041ba <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			{
				//Store data into receive fifo
				receivingNode->addToFifo(aData);
 8004216:	2308      	movs	r3, #8
 8004218:	18fa      	adds	r2, r7, r3
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	0011      	movs	r1, r2
 800421e:	0018      	movs	r0, r3
 8004220:	f000 f9fe 	bl	8004620 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>
				//Call receive callback (if it exists)
				receivingNode->CallReceiveCallback();
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	0018      	movs	r0, r3
 8004228:	f000 f8f5 	bl	8004416 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>
	while(HAL_CAN_GetRxFifoFillLevel(hcan, SUBSYSTEM_DATA_MODULE::CAN_RX_FIFO_NUMBER))
 800422c:	e7c5      	b.n	80041ba <HAL_CAN_RxFifo0MsgPendingCallback+0x8>
			}
		}
	}
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	b00d      	add	sp, #52	; 0x34
 8004234:	bd90      	pop	{r4, r7, pc}
	...

08004238 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&SUBSYSTEM_DATA_MODULE::hcan);
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <CEC_CAN_IRQHandler+0x14>)
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fa69 	bl	8001716 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	2000032c 	.word	0x2000032c

08004250 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	2314      	movs	r3, #20
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	0018      	movs	r0, r3
 800425e:	2314      	movs	r3, #20
 8004260:	001a      	movs	r2, r3
 8004262:	2100      	movs	r1, #0
 8004264:	f000 fdfb 	bl	8004e5e <memset>
  if(hcan->Instance==CAN)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a21      	ldr	r2, [pc, #132]	; (80042f4 <HAL_CAN_MspInit+0xa4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d13b      	bne.n	80042ea <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004272:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <HAL_CAN_MspInit+0xa8>)
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_CAN_MspInit+0xa8>)
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	0489      	lsls	r1, r1, #18
 800427c:	430a      	orrs	r2, r1
 800427e:	61da      	str	r2, [r3, #28]
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_CAN_MspInit+0xa8>)
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	049b      	lsls	r3, r3, #18
 8004288:	4013      	ands	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428e:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <HAL_CAN_MspInit+0xa8>)
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_CAN_MspInit+0xa8>)
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	0289      	lsls	r1, r1, #10
 8004298:	430a      	orrs	r2, r1
 800429a:	615a      	str	r2, [r3, #20]
 800429c:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <HAL_CAN_MspInit+0xa8>)
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	029b      	lsls	r3, r3, #10
 80042a4:	4013      	ands	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80042aa:	2114      	movs	r1, #20
 80042ac:	187b      	adds	r3, r7, r1
 80042ae:	22c0      	movs	r2, #192	; 0xc0
 80042b0:	0152      	lsls	r2, r2, #5
 80042b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	187b      	adds	r3, r7, r1
 80042b6:	2202      	movs	r2, #2
 80042b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042c0:	187b      	adds	r3, r7, r1
 80042c2:	2203      	movs	r2, #3
 80042c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80042c6:	187b      	adds	r3, r7, r1
 80042c8:	2204      	movs	r2, #4
 80042ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042cc:	187a      	adds	r2, r7, r1
 80042ce:	2390      	movs	r3, #144	; 0x90
 80042d0:	05db      	lsls	r3, r3, #23
 80042d2:	0011      	movs	r1, r2
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7fd fd09 	bl	8001cec <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2100      	movs	r1, #0
 80042de:	201e      	movs	r0, #30
 80042e0:	f7fd fcd2 	bl	8001c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80042e4:	201e      	movs	r0, #30
 80042e6:	f7fd fce4 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b00a      	add	sp, #40	; 0x28
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	40006400 	.word	0x40006400
 80042f8:	40021000 	.word	0x40021000

080042fc <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb>:

}//End extern "C"
//Private Function Definitions

//Protected Function Definitions
SUBSYSTEM_DATA_MODULE::SUBSYSTEM_DATA_MODULE(uint32_t message_id, uint8_t data_length, bool is_ext_id, bool is_rx_only, bool is_tx_rtr):
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	0019      	movs	r1, r3
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	1dbb      	adds	r3, r7, #6
 800430e:	1c0a      	adds	r2, r1, #0
 8004310:	701a      	strb	r2, [r3, #0]
messageIdentifier{message_id}, dataLength{data_length}, storageFifo{}, isExtID{is_ext_id}, isRxOnly{is_rx_only}, isTxRtr{is_tx_rtr}, rxFuncPtr{nullptr}, isReceiving{false}
 8004312:	4a16      	ldr	r2, [pc, #88]	; (800436c <_ZN21SUBSYSTEM_DATA_MODULEC1Emhbbb+0x70>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1dfa      	adds	r2, r7, #7
 8004322:	7812      	ldrb	r2, [r2, #0]
 8004324:	721a      	strb	r2, [r3, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3312      	adds	r3, #18
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f98b 	bl	8004646 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1dba      	adds	r2, r7, #6
 8004334:	2130      	movs	r1, #48	; 0x30
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	545a      	strb	r2, [r3, r1]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2218      	movs	r2, #24
 800433e:	18ba      	adds	r2, r7, r2
 8004340:	2131      	movs	r1, #49	; 0x31
 8004342:	7812      	ldrb	r2, [r2, #0]
 8004344:	545a      	strb	r2, [r3, r1]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	221c      	movs	r2, #28
 800434a:	18ba      	adds	r2, r7, r2
 800434c:	2132      	movs	r1, #50	; 0x32
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	545a      	strb	r2, [r3, r1]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	635a      	str	r2, [r3, #52]	; 0x34
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2238      	movs	r2, #56	; 0x38
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]
{}
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b004      	add	sp, #16
 8004368:	bd80      	pop	{r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	080050ec 	.word	0x080050ec

08004370 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm>:
//Public Function Definitions
SUBSYSTEM_DATA_MODULE* SUBSYSTEM_DATA_MODULE::FindReceivingModule(uint32_t message_id)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	return SUBSYSTEM_DATA_MODULE::rxModulesTree.FindElement(message_id);
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <_ZN21SUBSYSTEM_DATA_MODULE19FindReceivingModuleEm+0x20>)
 800437c:	0011      	movs	r1, r2
 800437e:	0018      	movs	r0, r3
 8004380:	f000 fa43 	bl	800480a <_ZN14RX_BINARY_TREE11FindElementEm>
 8004384:	0003      	movs	r3, r0
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	b002      	add	sp, #8
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	200002b4 	.word	0x200002b4

08004394 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E>:

void SUBSYSTEM_DATA_MODULE::SetupReceive(subsystemReceiveCallback rx_func_ptr)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
    this->rxFuncPtr = rx_func_ptr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34
    //Add node to receive tree if not already receiving
    if(!isReceiving)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2238      	movs	r2, #56	; 0x38
 80043a8:	5c9b      	ldrb	r3, [r3, r2]
 80043aa:	2201      	movs	r2, #1
 80043ac:	4053      	eors	r3, r2
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x34>
    {
        SUBSYSTEM_DATA_MODULE::rxModulesTree.AddNode(this);
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <_ZN21SUBSYSTEM_DATA_MODULE12SetupReceiveEPFvPS_E+0x3c>)
 80043b8:	0011      	movs	r1, r2
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 fa0a 	bl	80047d4 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>
        //TODO: Fix We are currently receiving even if add Node fails.
        isReceiving = true;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2238      	movs	r2, #56	; 0x38
 80043c4:	2101      	movs	r1, #1
 80043c6:	5499      	strb	r1, [r3, r2]
    } 
}
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b002      	add	sp, #8
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	200002b4 	.word	0x200002b4

080043d4 <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv>:

void SUBSYSTEM_DATA_MODULE::SendData(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	if(this->isRxOnly)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2231      	movs	r2, #49	; 0x31
 80043e0:	5c9b      	ldrb	r3, [r3, r2]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d113      	bne.n	800440e <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	{
		//Do Nothing
	}else if(this->isTxRtr)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2232      	movs	r2, #50	; 0x32
 80043ea:	5c9b      	ldrb	r3, [r3, r2]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x26>
	{
		//Send RTR message
		this->sendRTRMessage();
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	0018      	movs	r0, r3
 80043f4:	f000 f8c4 	bl	8004580 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>
	}else{
		//Send normal data message
	    this->fillTransmitBuffer();
	    this->sendTransmitBufferData();
	}
}
 80043f8:	e009      	b.n	800440e <_ZN21SUBSYSTEM_DATA_MODULE8SendDataEv+0x3a>
	    this->fillTransmitBuffer();
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	0010      	movs	r0, r2
 8004404:	4798      	blx	r3
	    this->sendTransmitBufferData();
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 f877 	bl	80044fc <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>
}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	46bd      	mov	sp, r7
 8004412:	b002      	add	sp, #8
 8004414:	bd80      	pop	{r7, pc}

08004416 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv>:

void SUBSYSTEM_DATA_MODULE::CallReceiveCallback(void)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
    if(this->rxFuncPtr != nullptr)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <_ZN21SUBSYSTEM_DATA_MODULE19CallReceiveCallbackEv+0x1a>
    {
        this->rxFuncPtr(this);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	0010      	movs	r0, r2
 800442e:	4798      	blx	r3
    }
}
 8004430:	46c0      	nop			; (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	b002      	add	sp, #8
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv>:

void SUBSYSTEM_DATA_MODULE::StartCAN(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af00      	add	r7, sp, #0
	//Initialize CAN itself
	hcan.Instance = CAN;
 800443e:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8004440:	4a2d      	ldr	r2, [pc, #180]	; (80044f8 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xc0>)
 8004442:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8004446:	2206      	movs	r2, #6
 8004448:	605a      	str	r2, [r3, #4]
	//hcan.Init.Mode = CAN_MODE_NORMAL;
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800444a:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800444c:	2280      	movs	r2, #128	; 0x80
 800444e:	05d2      	lsls	r2, r2, #23
 8004450:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004452:	4b28      	ldr	r3, [pc, #160]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8004454:	2200      	movs	r2, #0
 8004456:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8004458:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800445a:	22c0      	movs	r2, #192	; 0xc0
 800445c:	0312      	lsls	r2, r2, #12
 800445e:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	0352      	lsls	r2, r2, #13
 8004466:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8004468:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800446a:	2200      	movs	r2, #0
 800446c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8004470:	2200      	movs	r2, #0
 8004472:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8004474:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8004476:	2200      	movs	r2, #0
 8004478:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800447a:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800447c:	2200      	movs	r2, #0
 800447e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8004480:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8004482:	2200      	movs	r2, #0
 8004484:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8004486:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 8004488:	2200      	movs	r2, #0
 800448a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 800448c:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 800448e:	0018      	movs	r0, r3
 8004490:	f7fc fc82 	bl	8000d98 <HAL_CAN_Init>
 8004494:	0003      	movs	r3, r0
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	4193      	sbcs	r3, r2
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0x6c>
	{
		Error_Handler();
 80044a0:	f7ff fab2 	bl	8003a08 <Error_Handler>
	}

	//Initialize a hardware filter that passes everything
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 80044a4:	003b      	movs	r3, r7
 80044a6:	2201      	movs	r2, #1
 80044a8:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; /*Mask mode*/
 80044aa:	003b      	movs	r3, r7
 80044ac:	2200      	movs	r2, #0
 80044ae:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterMaskIdHigh = 0;
 80044b0:	003b      	movs	r3, r7
 80044b2:	2200      	movs	r2, #0
 80044b4:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0; /*Accept everything*/
 80044b6:	003b      	movs	r3, r7
 80044b8:	2200      	movs	r2, #0
 80044ba:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; /*One 32-bit filter*/
 80044bc:	003b      	movs	r3, r7
 80044be:	2201      	movs	r2, #1
 80044c0:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0; /*Init bank 0*/
 80044c2:	003b      	movs	r3, r7
 80044c4:	2200      	movs	r2, #0
 80044c6:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = 0; /*Assign to FIFO 0*/
 80044c8:	003b      	movs	r3, r7
 80044ca:	2200      	movs	r2, #0
 80044cc:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80044ce:	003a      	movs	r2, r7
 80044d0:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80044d2:	0011      	movs	r1, r2
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7fc fd5d 	bl	8000f94 <HAL_CAN_ConfigFilter>

    //Set Up CAN interrupt receive callback
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80044dc:	2102      	movs	r1, #2
 80044de:	0018      	movs	r0, r3
 80044e0:	f7fd f8ef 	bl	80016c2 <HAL_CAN_ActivateNotification>

	//Start the CAN bus
	HAL_CAN_Start(&hcan);
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <_ZN21SUBSYSTEM_DATA_MODULE8StartCANEv+0xbc>)
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7fc fe46 	bl	8001178 <HAL_CAN_Start>
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b00a      	add	sp, #40	; 0x28
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	2000032c 	.word	0x2000032c
 80044f8:	40006400 	.word	0x40006400

080044fc <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv>:

void SUBSYSTEM_DATA_MODULE::sendTransmitBufferData(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8004504:	4b1d      	ldr	r3, [pc, #116]	; (800457c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d033      	beq.n	8004574 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x78>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 800450e:	0018      	movs	r0, r3
 8004510:	f7fc ff57 	bl	80013c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8004514:	0003      	movs	r3, r0
 8004516:	425a      	negs	r2, r3
 8004518:	4153      	adcs	r3, r2
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d000      	beq.n	8004522 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x26>
 8004520:	e7f4      	b.n	800450c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_DATA;
 8004522:	210c      	movs	r1, #12
 8004524:	187b      	adds	r3, r7, r1
 8004526:	2200      	movs	r2, #0
 8004528:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	7a1b      	ldrb	r3, [r3, #8]
 800452e:	001a      	movs	r2, r3
 8004530:	187b      	adds	r3, r7, r1
 8004532:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2230      	movs	r2, #48	; 0x30
 8004538:	5c9b      	ldrb	r3, [r3, r2]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x54>
		{
			pHeader.ExtId = this->messageIdentifier;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	210c      	movs	r1, #12
 8004544:	187b      	adds	r3, r7, r1
 8004546:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 8004548:	187b      	adds	r3, r7, r1
 800454a:	2204      	movs	r2, #4
 800454c:	609a      	str	r2, [r3, #8]
 800454e:	e007      	b.n	8004560 <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x64>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	210c      	movs	r1, #12
 8004556:	187b      	adds	r3, r7, r1
 8004558:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 800455a:	187b      	adds	r3, r7, r1
 800455c:	2200      	movs	r2, #0
 800455e:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3309      	adds	r3, #9
 8004564:	001a      	movs	r2, r3
 8004566:	2324      	movs	r3, #36	; 0x24
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	210c      	movs	r1, #12
 800456c:	1879      	adds	r1, r7, r1
 800456e:	4803      	ldr	r0, [pc, #12]	; (800457c <_ZN21SUBSYSTEM_DATA_MODULE22sendTransmitBufferDataEv+0x80>)
 8004570:	f7fc fe48 	bl	8001204 <HAL_CAN_AddTxMessage>
	}
}
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46bd      	mov	sp, r7
 8004578:	b00a      	add	sp, #40	; 0x28
 800457a:	bd80      	pop	{r7, pc}
 800457c:	2000032c 	.word	0x2000032c

08004580 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv>:

void SUBSYSTEM_DATA_MODULE::sendRTRMessage(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	//Only continue if hcan has been initialized
	if(hcan.Instance != nullptr)
 8004588:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d033      	beq.n	80045f8 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x78>
	{
		//Spinlock until a tx mailbox is empty
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan));
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 8004592:	0018      	movs	r0, r3
 8004594:	f7fc ff15 	bl	80013c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8004598:	0003      	movs	r3, r0
 800459a:	425a      	negs	r2, r3
 800459c:	4153      	adcs	r3, r2
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d000      	beq.n	80045a6 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x26>
 80045a4:	e7f4      	b.n	8004590 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x10>

		//Initialize Header
		uint32_t pTxMailbox;
		CAN_TxHeaderTypeDef pHeader;
		pHeader.RTR = CAN_RTR_REMOTE;
 80045a6:	210c      	movs	r1, #12
 80045a8:	187b      	adds	r3, r7, r1
 80045aa:	2202      	movs	r2, #2
 80045ac:	60da      	str	r2, [r3, #12]
		pHeader.DLC = this->dataLength;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	7a1b      	ldrb	r3, [r3, #8]
 80045b2:	001a      	movs	r2, r3
 80045b4:	187b      	adds	r3, r7, r1
 80045b6:	611a      	str	r2, [r3, #16]
		if(this->isExtID)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2230      	movs	r2, #48	; 0x30
 80045bc:	5c9b      	ldrb	r3, [r3, r2]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x54>
		{
			pHeader.ExtId = this->messageIdentifier;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	210c      	movs	r1, #12
 80045c8:	187b      	adds	r3, r7, r1
 80045ca:	605a      	str	r2, [r3, #4]
			pHeader.IDE = CAN_ID_EXT;
 80045cc:	187b      	adds	r3, r7, r1
 80045ce:	2204      	movs	r2, #4
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	e007      	b.n	80045e4 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x64>
		}else
		{
			pHeader.StdId = this->messageIdentifier;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	210c      	movs	r1, #12
 80045da:	187b      	adds	r3, r7, r1
 80045dc:	601a      	str	r2, [r3, #0]
			pHeader.IDE = CAN_ID_STD;
 80045de:	187b      	adds	r3, r7, r1
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
		}
		//Put CAN message in tx mailbox
		//It doesn't matter what is in transmit buffer, since this doesnt send a data frame
		HAL_CAN_AddTxMessage(&hcan, &pHeader, this->transmitBuffer, &pTxMailbox);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3309      	adds	r3, #9
 80045e8:	001a      	movs	r2, r3
 80045ea:	2324      	movs	r3, #36	; 0x24
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	210c      	movs	r1, #12
 80045f0:	1879      	adds	r1, r7, r1
 80045f2:	4803      	ldr	r0, [pc, #12]	; (8004600 <_ZN21SUBSYSTEM_DATA_MODULE14sendRTRMessageEv+0x80>)
 80045f4:	f7fc fe06 	bl	8001204 <HAL_CAN_AddTxMessage>
	}
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b00a      	add	sp, #40	; 0x28
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	2000032c 	.word	0x2000032c

08004604 <_ZN21SUBSYSTEM_DATA_MODULE11isFifoEmptyEv>:

bool SUBSYSTEM_DATA_MODULE::isFifoEmpty(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    return this->storageFifo.IsEmpty();
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3312      	adds	r3, #18
 8004610:	0018      	movs	r0, r3
 8004612:	f000 f82a 	bl	800466a <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>
 8004616:	0003      	movs	r3, r0
}
 8004618:	0018      	movs	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}

08004620 <_ZN21SUBSYSTEM_DATA_MODULE9addToFifoEPh>:
{
    return this->storageFifo.IsFull();
}

bool SUBSYSTEM_DATA_MODULE::addToFifo(uint8_t* incoming_data)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
    bool operationSucceeded;
    this->storageFifo.PushBack(incoming_data, &operationSucceeded);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3312      	adds	r3, #18
 800462e:	240f      	movs	r4, #15
 8004630:	193a      	adds	r2, r7, r4
 8004632:	6839      	ldr	r1, [r7, #0]
 8004634:	0018      	movs	r0, r3
 8004636:	f000 f82d 	bl	8004694 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>
    return operationSucceeded;
 800463a:	193b      	adds	r3, r7, r4
 800463c:	781b      	ldrb	r3, [r3, #0]
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b005      	add	sp, #20
 8004644:	bd90      	pop	{r4, r7, pc}

08004646 <_ZN11HELPER_FIFOIhLt3ELt8EEC1Ev>:
    HELPER_FIFO():
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
    headIndex{0}, tailIndex{0}, emptyNotFull{true}
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	831a      	strh	r2, [r3, #24]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	835a      	strh	r2, [r3, #26]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	771a      	strb	r2, [r3, #28]
    {}
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b002      	add	sp, #8
 8004668:	bd80      	pop	{r7, pc}

0800466a <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv>:
    bool IsEmpty()
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
        return (headIndex == tailIndex ? emptyNotFull : false);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8b1a      	ldrh	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8b5b      	ldrh	r3, [r3, #26]
 800467a:	429a      	cmp	r2, r3
 800467c:	d105      	bne.n	800468a <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7f1b      	ldrb	r3, [r3, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x20>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <_ZN11HELPER_FIFOIhLt3ELt8EE7IsEmptyEv+0x22>
 800468a:	2300      	movs	r3, #0
    }
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}

08004694 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb>:
    void PushBack(T* const next_element, bool* success)
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
        if(tailIndex == headIndex && !emptyNotFull)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8b5a      	ldrh	r2, [r3, #26]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8b1b      	ldrh	r3, [r3, #24]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d10d      	bne.n	80046c8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	7f1b      	ldrb	r3, [r3, #28]
 80046b0:	2201      	movs	r2, #1
 80046b2:	4053      	eors	r3, r2
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x34>
            if(success)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d025      	beq.n	800470c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                *success = false;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
            if(success)
 80046c6:	e021      	b.n	800470c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
            if(success)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x40>
                *success = true;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	701a      	strb	r2, [r3, #0]
            copyArrayData(headIndex,next_element);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8b19      	ldrh	r1, [r3, #24]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	0018      	movs	r0, r3
 80046de:	f000 f819 	bl	8004714 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>
            headIndex = (headIndex + 1)%DEPTH;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8b1b      	ldrh	r3, [r3, #24]
 80046e6:	3301      	adds	r3, #1
 80046e8:	2103      	movs	r1, #3
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7fb fe7c 	bl	80003e8 <__aeabi_idivmod>
 80046f0:	000b      	movs	r3, r1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	831a      	strh	r2, [r3, #24]
            if(headIndex == tailIndex)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8b1a      	ldrh	r2, [r3, #24]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8b5b      	ldrh	r3, [r3, #26]
 8004700:	429a      	cmp	r2, r3
 8004702:	d103      	bne.n	800470c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
                emptyNotFull = false;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	771a      	strb	r2, [r3, #28]
    }
 800470a:	e7ff      	b.n	800470c <_ZN11HELPER_FIFOIhLt3ELt8EE8PushBackEPhPb+0x78>
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	b004      	add	sp, #16
 8004712:	bd80      	pop	{r7, pc}

08004714 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh>:
    void copyArrayData(uint16_t index, T* const dataToCopyFrom)
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	230a      	movs	r3, #10
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	1c0a      	adds	r2, r1, #0
 8004724:	801a      	strh	r2, [r3, #0]
        for(uint16_t i = 0; i < SIZE; i++)
 8004726:	2316      	movs	r3, #22
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	2200      	movs	r2, #0
 800472c:	801a      	strh	r2, [r3, #0]
 800472e:	2316      	movs	r3, #22
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	2b07      	cmp	r3, #7
 8004736:	d815      	bhi.n	8004764 <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x50>
            this->fifoData[index][i] = dataToCopyFrom[i];
 8004738:	2416      	movs	r4, #22
 800473a:	193b      	adds	r3, r7, r4
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	18d1      	adds	r1, r2, r3
 8004742:	230a      	movs	r3, #10
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	881a      	ldrh	r2, [r3, #0]
 8004748:	193b      	adds	r3, r7, r4
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	7808      	ldrb	r0, [r1, #0]
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	00d2      	lsls	r2, r2, #3
 8004752:	188a      	adds	r2, r1, r2
 8004754:	1c01      	adds	r1, r0, #0
 8004756:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < SIZE; i++)
 8004758:	193b      	adds	r3, r7, r4
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	193b      	adds	r3, r7, r4
 800475e:	3201      	adds	r2, #1
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	e7e4      	b.n	800472e <_ZN11HELPER_FIFOIhLt3ELt8EE13copyArrayDataEtPh+0x1a>
    }
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b007      	add	sp, #28
 800476a:	bd90      	pop	{r4, r7, pc}

0800476c <_Z41__static_initialization_and_destruction_0ii>:
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4a05      	ldr	r2, [pc, #20]	; (8004794 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d103      	bne.n	800478c <_Z41__static_initialization_and_destruction_0ii+0x20>
 RX_BINARY_TREE SUBSYSTEM_DATA_MODULE::rxModulesTree{};
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8004786:	0018      	movs	r0, r3
 8004788:	f000 f814 	bl	80047b4 <_ZN14RX_BINARY_TREEC1Ev>
}
 800478c:	46c0      	nop			; (mov r8, r8)
 800478e:	46bd      	mov	sp, r7
 8004790:	b002      	add	sp, #8
 8004792:	bd80      	pop	{r7, pc}
 8004794:	0000ffff 	.word	0x0000ffff
 8004798:	200002b4 	.word	0x200002b4

0800479c <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE>:
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <_GLOBAL__sub_I__ZN21SUBSYSTEM_DATA_MODULE13rxModulesTreeE+0x14>)
 80047a2:	0019      	movs	r1, r3
 80047a4:	2001      	movs	r0, #1
 80047a6:	f7ff ffe1 	bl	800476c <_Z41__static_initialization_and_destruction_0ii>
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	0000ffff 	.word	0x0000ffff

080047b4 <_ZN14RX_BINARY_TREEC1Ev>:
//Public Variables

//Private Function Prototypes

//Public Function Prototypes
RX_BINARY_TREE::RX_BINARY_TREE():
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
root{nullptr}, currentTreeSize{0}
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	671a      	str	r2, [r3, #112]	; 0x70
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2274      	movs	r2, #116	; 0x74
 80047c6:	2100      	movs	r1, #0
 80047c8:	5299      	strh	r1, [r3, r2]
{}
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b002      	add	sp, #8
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE>:

void RX_BINARY_TREE::AddNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
    //Only insert a node if there is room and we have a valid message id
    if(currentTreeSize < subsystem_info::NUM_MESSAGES && new_element != nullptr)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2274      	movs	r2, #116	; 0x74
 80047e2:	5a9b      	ldrh	r3, [r3, r2]
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d80c      	bhi.n	8004802 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x2e>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <_ZN14RX_BINARY_TREE7AddNodeEP21SUBSYSTEM_DATA_MODULE+0x2e>
    {
        root = insert(root,new_element);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f000 f9a6 	bl	8004b48 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 80047fc:	0002      	movs	r2, r0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	671a      	str	r2, [r3, #112]	; 0x70
    }
}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	46bd      	mov	sp, r7
 8004806:	b002      	add	sp, #8
 8004808:	bd80      	pop	{r7, pc}

0800480a <_ZN14RX_BINARY_TREE11FindElementEm>:

SUBSYSTEM_DATA_MODULE* RX_BINARY_TREE::FindElement(uint32_t message_id_key)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
    Node* foundNode = find(root, message_id_key);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0018      	movs	r0, r3
 800481e:	f000 f80d 	bl	800483c <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8004822:	0003      	movs	r3, r0
 8004824:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <_ZN14RX_BINARY_TREE11FindElementEm+0x26>
    {
        return nullptr;
 800482c:	2300      	movs	r3, #0
 800482e:	e001      	b.n	8004834 <_ZN14RX_BINARY_TREE11FindElementEm+0x2a>
    }else
    {
        return foundNode->datum;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
    }
    
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b004      	add	sp, #16
 800483a:	bd80      	pop	{r7, pc}

0800483c <_ZN14RX_BINARY_TREE4findEP4Nodel>:
//Private Function Definitions
Node* RX_BINARY_TREE::find(Node* node, int32_t key)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
    //Can't find node return nullptr
    if(node == nullptr)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x16>
    {
        return node;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	e034      	b.n	80048bc <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }

    if(key < node_key(node))
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	0011      	movs	r1, r2
 8004858:	0018      	movs	r0, r3
 800485a:	f000 f88b 	bl	8004974 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 800485e:	0002      	movs	r2, r0
 8004860:	2301      	movs	r3, #1
 8004862:	1c19      	adds	r1, r3, #0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4293      	cmp	r3, r2
 8004868:	db01      	blt.n	800486e <_ZN14RX_BINARY_TREE4findEP4Nodel+0x32>
 800486a:	2300      	movs	r3, #0
 800486c:	1c19      	adds	r1, r3, #0
 800486e:	b2cb      	uxtb	r3, r1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x4a>
    {
        return find(node->left,key);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	0018      	movs	r0, r3
 800487e:	f7ff ffdd 	bl	800483c <_ZN14RX_BINARY_TREE4findEP4Nodel>
 8004882:	0003      	movs	r3, r0
 8004884:	e01a      	b.n	80048bc <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else if(key > node_key(node))
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	0011      	movs	r1, r2
 800488c:	0018      	movs	r0, r3
 800488e:	f000 f871 	bl	8004974 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8004892:	0002      	movs	r2, r0
 8004894:	2301      	movs	r3, #1
 8004896:	1c19      	adds	r1, r3, #0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4293      	cmp	r3, r2
 800489c:	dc01      	bgt.n	80048a2 <_ZN14RX_BINARY_TREE4findEP4Nodel+0x66>
 800489e:	2300      	movs	r3, #0
 80048a0:	1c19      	adds	r1, r3, #0
 80048a2:	b2cb      	uxtb	r3, r1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <_ZN14RX_BINARY_TREE4findEP4Nodel+0x7e>
    {
        return find(node->right,key);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	6899      	ldr	r1, [r3, #8]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff ffc3 	bl	800483c <_ZN14RX_BINARY_TREE4findEP4Nodel>
 80048b6:	0003      	movs	r3, r0
 80048b8:	e000      	b.n	80048bc <_ZN14RX_BINARY_TREE4findEP4Nodel+0x80>
    }else
    {
        //If key == node_key then return the node
        return node;
 80048ba:	68bb      	ldr	r3, [r7, #8]
    }
    
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b004      	add	sp, #16
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::newNode(SUBSYSTEM_DATA_MODULE* new_element)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
    treeArray[currentTreeSize].datum = new_element;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2274      	movs	r2, #116	; 0x74
 80048d2:	5a9b      	ldrh	r3, [r3, r2]
 80048d4:	001a      	movs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0112      	lsls	r2, r2, #4
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	50d1      	str	r1, [r2, r3]
    treeArray[currentTreeSize].left = nullptr;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2274      	movs	r2, #116	; 0x74
 80048e2:	5a9b      	ldrh	r3, [r3, r2]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	18d3      	adds	r3, r2, r3
 80048ea:	3304      	adds	r3, #4
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].right = nullptr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2274      	movs	r2, #116	; 0x74
 80048f4:	5a9b      	ldrh	r3, [r3, r2]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	18d3      	adds	r3, r2, r3
 80048fc:	3308      	adds	r3, #8
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
    treeArray[currentTreeSize].height = 1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2274      	movs	r2, #116	; 0x74
 8004906:	5a9b      	ldrh	r3, [r3, r2]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	18d3      	adds	r3, r2, r3
 800490e:	330c      	adds	r3, #12
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
    return &treeArray[currentTreeSize++];
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2274      	movs	r2, #116	; 0x74
 8004918:	5a9b      	ldrh	r3, [r3, r2]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	b290      	uxth	r0, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	2174      	movs	r1, #116	; 0x74
 8004922:	5250      	strh	r0, [r2, r1]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	18d3      	adds	r3, r2, r3
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	b002      	add	sp, #8
 8004930:	bd80      	pop	{r7, pc}

08004932 <_ZN14RX_BINARY_TREE3maxEmm>:

uint32_t RX_BINARY_TREE::max(uint32_t a, uint32_t b)  
{  
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
    return (a > b)? a : b;  
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d901      	bls.n	800494a <_ZN14RX_BINARY_TREE3maxEmm+0x18>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	e000      	b.n	800494c <_ZN14RX_BINARY_TREE3maxEmm+0x1a>
 800494a:	687b      	ldr	r3, [r7, #4]
}  
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	b004      	add	sp, #16
 8004952:	bd80      	pop	{r7, pc}

08004954 <_ZN14RX_BINARY_TREE6heightEP4Node>:
{
    return (message_id == RX_BINARY_TREE::INVALID_MESSAGE_ID ? false : true);
}

uint8_t RX_BINARY_TREE::height(Node *N)  
{  
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <_ZN14RX_BINARY_TREE6heightEP4Node+0x14>
        return 0;  
 8004964:	2300      	movs	r3, #0
 8004966:	e001      	b.n	800496c <_ZN14RX_BINARY_TREE6heightEP4Node+0x18>
    return N->height;  
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	7b1b      	ldrb	r3, [r3, #12]
}
 800496c:	0018      	movs	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <_ZN14RX_BINARY_TREE8node_keyEP4Node>:

int32_t RX_BINARY_TREE::node_key(Node* N)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
    if(N == nullptr)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8004984:	2301      	movs	r3, #1
 8004986:	425b      	negs	r3, r3
 8004988:	e009      	b.n	800499e <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    if(N->datum == nullptr)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x24>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 8004992:	2301      	movs	r3, #1
 8004994:	425b      	negs	r3, r3
 8004996:	e002      	b.n	800499e <_ZN14RX_BINARY_TREE8node_keyEP4Node+0x2a>
    return N->datum->messageIdentifier;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b002      	add	sp, #8
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>:

int32_t RX_BINARY_TREE::element_key(SUBSYSTEM_DATA_MODULE* E)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
    if(E == nullptr)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x16>
        return RX_BINARY_TREE::INVALID_MESSAGE_ID;
 80049b6:	2301      	movs	r3, #1
 80049b8:	425b      	negs	r3, r3
 80049ba:	e001      	b.n	80049c0 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE+0x1a>
    return E->messageIdentifier;  
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>:
  
Node* RX_BINARY_TREE::rightRotate(Node *y)  
{  
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
    Node *x = y->left;  
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;  
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    x->right = y;  
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	609a      	str	r2, [r3, #8]
    y->left = T2;  
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	605a      	str	r2, [r3, #4]

    // Update heights  
    y->height = max(height(y->left), 
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0011      	movs	r1, r2
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7ff ffae 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 80049f8:	0003      	movs	r3, r0
 80049fa:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0011      	movs	r1, r2
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7ff ffa5 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004a0a:	0003      	movs	r3, r0
    y->height = max(height(y->left), 
 8004a0c:	001a      	movs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	0021      	movs	r1, r4
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7ff ff8d 	bl	8004932 <_ZN14RX_BINARY_TREE3maxEmm>
 8004a18:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left), 
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	731a      	strb	r2, [r3, #12]
    x->height = max(height(x->left), 
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	0011      	movs	r1, r2
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f7ff ff91 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004a32:	0003      	movs	r3, r0
 8004a34:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	0011      	movs	r1, r2
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7ff ff88 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004a44:	0003      	movs	r3, r0
    x->height = max(height(x->left), 
 8004a46:	001a      	movs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0021      	movs	r1, r4
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff ff70 	bl	8004932 <_ZN14RX_BINARY_TREE3maxEmm>
 8004a52:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	3301      	adds	r3, #1
 8004a58:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left), 
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return x;  
 8004a5e:	68fb      	ldr	r3, [r7, #12]
} 
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b005      	add	sp, #20
 8004a66:	bd90      	pop	{r4, r7, pc}

08004a68 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>:

Node* RX_BINARY_TREE::leftRotate(Node *x)  
{  
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
    Node *y = x->right;  
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;  
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	60bb      	str	r3, [r7, #8]

    // Perform rotation  
    y->left = x;  
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	605a      	str	r2, [r3, #4]
    x->right = T2;  
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	609a      	str	r2, [r3, #8]

    // Update heights  
    x->height = max(height(x->left),     
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0011      	movs	r1, r2
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7ff ff5e 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	001c      	movs	r4, r3
                    height(x->right)) + 1;  
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7ff ff55 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004aaa:	0003      	movs	r3, r0
    x->height = max(height(x->left),     
 8004aac:	001a      	movs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	0021      	movs	r1, r4
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f7ff ff3d 	bl	8004932 <_ZN14RX_BINARY_TREE3maxEmm>
 8004ab8:	0003      	movs	r3, r0
                    height(x->right)) + 1;  
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	3301      	adds	r3, #1
 8004abe:	b2da      	uxtb	r2, r3
    x->height = max(height(x->left),     
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	731a      	strb	r2, [r3, #12]
    y->height = max(height(y->left),  
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	0011      	movs	r1, r2
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7ff ff41 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	001c      	movs	r4, r3
                    height(y->right)) + 1;  
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0011      	movs	r1, r2
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f7ff ff38 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004ae4:	0003      	movs	r3, r0
    y->height = max(height(y->left),  
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	0021      	movs	r1, r4
 8004aec:	0018      	movs	r0, r3
 8004aee:	f7ff ff20 	bl	8004932 <_ZN14RX_BINARY_TREE3maxEmm>
 8004af2:	0003      	movs	r3, r0
                    height(y->right)) + 1;  
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	b2da      	uxtb	r2, r3
    y->height = max(height(y->left),  
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	731a      	strb	r2, [r3, #12]

    // Return new root  
    return y;  
 8004afe:	68fb      	ldr	r3, [r7, #12]
}  
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b005      	add	sp, #20
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <_ZN14RX_BINARY_TREE10getBalanceEP4Node>:
 
int RX_BINARY_TREE::getBalance(Node *N)  
{  
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
    if (N == nullptr)  
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x14>
        return 0;  
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e011      	b.n	8004b40 <_ZN14RX_BINARY_TREE10getBalanceEP4Node+0x38>
    return height(N->left) - height(N->right);  
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	0011      	movs	r1, r2
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7ff ff15 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	001c      	movs	r4, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0011      	movs	r1, r2
 8004b36:	0018      	movs	r0, r3
 8004b38:	f7ff ff0c 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	1ae3      	subs	r3, r4, r3
}  
 8004b40:	0018      	movs	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b003      	add	sp, #12
 8004b46:	bd90      	pop	{r4, r7, pc}

08004b48 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>:

Node* RX_BINARY_TREE::insert(Node* node, SUBSYSTEM_DATA_MODULE* new_element)  
{  
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
    /* 1. Perform the normal BST insertion */
    if (node == nullptr)  
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x22>
        return(newNode(new_element));  
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	0011      	movs	r1, r2
 8004b60:	0018      	movs	r0, r3
 8004b62:	f7ff feaf 	bl	80048c4 <_ZN14RX_BINARY_TREE7newNodeEP21SUBSYSTEM_DATA_MODULE>
 8004b66:	0003      	movs	r3, r0
 8004b68:	e101      	b.n	8004d6e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    
    if (element_key(new_element) < node_key(node))  
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	0011      	movs	r1, r2
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7ff ff18 	bl	80049a6 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8004b76:	0004      	movs	r4, r0
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	0011      	movs	r1, r2
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f7ff fef8 	bl	8004974 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8004b84:	0003      	movs	r3, r0
 8004b86:	2201      	movs	r2, #1
 8004b88:	429c      	cmp	r4, r3
 8004b8a:	db01      	blt.n	8004b90 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x48>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	1c1a      	adds	r2, r3, #0
 8004b90:	b2d3      	uxtb	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x64>
        node->left = insert(node->left, new_element);  
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	6859      	ldr	r1, [r3, #4]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7ff ffd2 	bl	8004b48 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	e022      	b.n	8004bf2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else if (element_key(new_element) > node_key(node))  
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7ff fef7 	bl	80049a6 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8004bb8:	0004      	movs	r4, r0
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	0011      	movs	r1, r2
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7ff fed7 	bl	8004974 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	2201      	movs	r2, #1
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	dc01      	bgt.n	8004bd2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x8a>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	1c1a      	adds	r2, r3, #0
 8004bd2:	b2d3      	uxtb	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xa6>
        node->right = insert(node->right, new_element);  
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6899      	ldr	r1, [r3, #8]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f7ff ffb1 	bl	8004b48 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE>
 8004be6:	0002      	movs	r2, r0
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	e001      	b.n	8004bf2 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0xaa>
    else // Equal keys are not allowed in BST  
        return node;  
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	e0bd      	b.n	8004d6e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    /* 2. Update height of this ancestor node */
    node->height = 1 + max(height(node->left),  
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	0011      	movs	r1, r2
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f7ff feaa 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004c00:	0003      	movs	r3, r0
 8004c02:	001c      	movs	r4, r3
                        height(node->right));  
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7ff fea1 	bl	8004954 <_ZN14RX_BINARY_TREE6heightEP4Node>
 8004c12:	0003      	movs	r3, r0
    node->height = 1 + max(height(node->left),  
 8004c14:	001a      	movs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	0021      	movs	r1, r4
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f7ff fe89 	bl	8004932 <_ZN14RX_BINARY_TREE3maxEmm>
 8004c20:	0003      	movs	r3, r0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	3301      	adds	r3, #1
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	731a      	strb	r2, [r3, #12]

    /* 3. Get the balance factor of this ancestor  
        node to check whether this node became  
        unbalanced */
    int balance = getBalance(node);  
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	0011      	movs	r1, r2
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7ff ff68 	bl	8004b08 <_ZN14RX_BINARY_TREE10getBalanceEP4Node>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	617b      	str	r3, [r7, #20]

    // If this node becomes unbalanced, then  
    // there are 4 cases  

    // Left Left Case  
    if (balance > 1 && element_key(new_element) < node_key(node->left))  
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	dd12      	ble.n	8004c68 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	0011      	movs	r1, r2
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7ff feac 	bl	80049a6 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8004c4e:	0004      	movs	r4, r0
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	0011      	movs	r1, r2
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7ff fe8b 	bl	8004974 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	429c      	cmp	r4, r3
 8004c62:	da01      	bge.n	8004c68 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x120>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x122>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x136>
        return rightRotate(node);  
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	0011      	movs	r1, r2
 8004c74:	0018      	movs	r0, r3
 8004c76:	f7ff fea7 	bl	80049c8 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	e077      	b.n	8004d6e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Right Right Case  
    if (balance < -1 && element_key(new_element) > node_key(node->right))  
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	3301      	adds	r3, #1
 8004c82:	da12      	bge.n	8004caa <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	0011      	movs	r1, r2
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f7ff fe8b 	bl	80049a6 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8004c90:	0004      	movs	r4, r0
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	0011      	movs	r1, r2
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7ff fe6a 	bl	8004974 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	429c      	cmp	r4, r3
 8004ca4:	dd01      	ble.n	8004caa <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x162>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x164>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d007      	beq.n	8004cc0 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x178>
        return leftRotate(node);  
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	0011      	movs	r1, r2
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff fed6 	bl	8004a68 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	e056      	b.n	8004d6e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>

    // Left Right Case  
    if (balance > 1 && element_key(new_element) > node_key(node->left))  
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	dd12      	ble.n	8004cec <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	0011      	movs	r1, r2
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f7ff fe6a 	bl	80049a6 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8004cd2:	0004      	movs	r4, r0
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	0011      	movs	r1, r2
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7ff fe49 	bl	8004974 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	429c      	cmp	r4, r3
 8004ce6:	dd01      	ble.n	8004cec <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a4>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1a6>
 8004cec:	2300      	movs	r3, #0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d011      	beq.n	8004d16 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1ce>
    {  
        node->left = leftRotate(node->left);  
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	0011      	movs	r1, r2
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f7ff feb4 	bl	8004a68 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8004d00:	0002      	movs	r2, r0
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	605a      	str	r2, [r3, #4]
        return rightRotate(node);  
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7ff fe5b 	bl	80049c8 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8004d12:	0003      	movs	r3, r0
 8004d14:	e02b      	b.n	8004d6e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    // Right Left Case  
    if (balance < -1 && element_key(new_element) < node_key(node->right))  
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	da12      	bge.n	8004d42 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	0011      	movs	r1, r2
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7ff fe3f 	bl	80049a6 <_ZN14RX_BINARY_TREE11element_keyEP21SUBSYSTEM_DATA_MODULE>
 8004d28:	0004      	movs	r4, r0
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	0011      	movs	r1, r2
 8004d32:	0018      	movs	r0, r3
 8004d34:	f7ff fe1e 	bl	8004974 <_ZN14RX_BINARY_TREE8node_keyEP4Node>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	da01      	bge.n	8004d42 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fa>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x1fc>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d011      	beq.n	8004d6c <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x224>
    {  
        node->right = rightRotate(node->right);  
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	0011      	movs	r1, r2
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7ff fe39 	bl	80049c8 <_ZN14RX_BINARY_TREE11rightRotateEP4Node>
 8004d56:	0002      	movs	r2, r0
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	609a      	str	r2, [r3, #8]
        return leftRotate(node);  
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	0011      	movs	r1, r2
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff fe80 	bl	8004a68 <_ZN14RX_BINARY_TREE10leftRotateEP4Node>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	e000      	b.n	8004d6e <_ZN14RX_BINARY_TREE6insertEP4NodeP21SUBSYSTEM_DATA_MODULE+0x226>
    }  

    /* return the (unchanged) node pointer */
    return node;  
 8004d6c:	68bb      	ldr	r3, [r7, #8]
}
 8004d6e:	0018      	movs	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b007      	add	sp, #28
 8004d74:	bd90      	pop	{r4, r7, pc}
	...

08004d78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004d78:	480d      	ldr	r0, [pc, #52]	; (8004db0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004d7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d7c:	480d      	ldr	r0, [pc, #52]	; (8004db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004d7e:	490e      	ldr	r1, [pc, #56]	; (8004db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d80:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <LoopForever+0xe>)
  movs r3, #0
 8004d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d84:	e002      	b.n	8004d8c <LoopCopyDataInit>

08004d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d8a:	3304      	adds	r3, #4

08004d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d90:	d3f9      	bcc.n	8004d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d92:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d94:	4c0b      	ldr	r4, [pc, #44]	; (8004dc4 <LoopForever+0x16>)
  movs r3, #0
 8004d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d98:	e001      	b.n	8004d9e <LoopFillZerobss>

08004d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d9c:	3204      	adds	r2, #4

08004d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004da0:	d3fb      	bcc.n	8004d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004da2:	f7fe ffab 	bl	8003cfc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004da6:	f000 f82d 	bl	8004e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004daa:	f7fe fc79 	bl	80036a0 <main>

08004dae <LoopForever>:

LoopForever:
    b LoopForever
 8004dae:	e7fe      	b.n	8004dae <LoopForever>
  ldr   r0, =_estack
 8004db0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004db8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8004dbc:	08005100 	.word	0x08005100
  ldr r2, =_sbss
 8004dc0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8004dc4:	2000035c 	.word	0x2000035c

08004dc8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004dc8:	e7fe      	b.n	8004dc8 <ADC1_COMP_IRQHandler>

08004dca <__cxa_pure_virtual>:
 8004dca:	b510      	push	{r4, lr}
 8004dcc:	f000 f804 	bl	8004dd8 <_ZSt9terminatev>

08004dd0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4780      	blx	r0
 8004dd4:	f000 f808 	bl	8004de8 <abort>

08004dd8 <_ZSt9terminatev>:
 8004dd8:	4b02      	ldr	r3, [pc, #8]	; (8004de4 <_ZSt9terminatev+0xc>)
 8004dda:	b510      	push	{r4, lr}
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	f7ff fff7 	bl	8004dd0 <_ZN10__cxxabiv111__terminateEPFvvE>
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	20000004 	.word	0x20000004

08004de8 <abort>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	2006      	movs	r0, #6
 8004dec:	f000 f86a 	bl	8004ec4 <raise>
 8004df0:	2001      	movs	r0, #1
 8004df2:	f7fe ff77 	bl	8003ce4 <_exit>
	...

08004df8 <__errno>:
 8004df8:	4b01      	ldr	r3, [pc, #4]	; (8004e00 <__errno+0x8>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	4770      	bx	lr
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	20000008 	.word	0x20000008

08004e04 <__libc_init_array>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	2600      	movs	r6, #0
 8004e08:	4d0c      	ldr	r5, [pc, #48]	; (8004e3c <__libc_init_array+0x38>)
 8004e0a:	4c0d      	ldr	r4, [pc, #52]	; (8004e40 <__libc_init_array+0x3c>)
 8004e0c:	1b64      	subs	r4, r4, r5
 8004e0e:	10a4      	asrs	r4, r4, #2
 8004e10:	42a6      	cmp	r6, r4
 8004e12:	d109      	bne.n	8004e28 <__libc_init_array+0x24>
 8004e14:	2600      	movs	r6, #0
 8004e16:	f000 f8c1 	bl	8004f9c <_init>
 8004e1a:	4d0a      	ldr	r5, [pc, #40]	; (8004e44 <__libc_init_array+0x40>)
 8004e1c:	4c0a      	ldr	r4, [pc, #40]	; (8004e48 <__libc_init_array+0x44>)
 8004e1e:	1b64      	subs	r4, r4, r5
 8004e20:	10a4      	asrs	r4, r4, #2
 8004e22:	42a6      	cmp	r6, r4
 8004e24:	d105      	bne.n	8004e32 <__libc_init_array+0x2e>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	00b3      	lsls	r3, r6, #2
 8004e2a:	58eb      	ldr	r3, [r5, r3]
 8004e2c:	4798      	blx	r3
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7ee      	b.n	8004e10 <__libc_init_array+0xc>
 8004e32:	00b3      	lsls	r3, r6, #2
 8004e34:	58eb      	ldr	r3, [r5, r3]
 8004e36:	4798      	blx	r3
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7f2      	b.n	8004e22 <__libc_init_array+0x1e>
 8004e3c:	080050f0 	.word	0x080050f0
 8004e40:	080050f0 	.word	0x080050f0
 8004e44:	080050f0 	.word	0x080050f0
 8004e48:	080050fc 	.word	0x080050fc

08004e4c <memcpy>:
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	b510      	push	{r4, lr}
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d100      	bne.n	8004e56 <memcpy+0xa>
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	5ccc      	ldrb	r4, [r1, r3]
 8004e58:	54c4      	strb	r4, [r0, r3]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	e7f8      	b.n	8004e50 <memcpy+0x4>

08004e5e <memset>:
 8004e5e:	0003      	movs	r3, r0
 8004e60:	1812      	adds	r2, r2, r0
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d100      	bne.n	8004e68 <memset+0xa>
 8004e66:	4770      	bx	lr
 8004e68:	7019      	strb	r1, [r3, #0]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	e7f9      	b.n	8004e62 <memset+0x4>

08004e6e <_raise_r>:
 8004e6e:	b570      	push	{r4, r5, r6, lr}
 8004e70:	0004      	movs	r4, r0
 8004e72:	000d      	movs	r5, r1
 8004e74:	291f      	cmp	r1, #31
 8004e76:	d904      	bls.n	8004e82 <_raise_r+0x14>
 8004e78:	2316      	movs	r3, #22
 8004e7a:	6003      	str	r3, [r0, #0]
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	4240      	negs	r0, r0
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
 8004e82:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d004      	beq.n	8004e92 <_raise_r+0x24>
 8004e88:	008a      	lsls	r2, r1, #2
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	d108      	bne.n	8004ea4 <_raise_r+0x36>
 8004e92:	0020      	movs	r0, r4
 8004e94:	f000 f832 	bl	8004efc <_getpid_r>
 8004e98:	002a      	movs	r2, r5
 8004e9a:	0001      	movs	r1, r0
 8004e9c:	0020      	movs	r0, r4
 8004e9e:	f000 f81b 	bl	8004ed8 <_kill_r>
 8004ea2:	e7ed      	b.n	8004e80 <_raise_r+0x12>
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	2a01      	cmp	r2, #1
 8004ea8:	d0ea      	beq.n	8004e80 <_raise_r+0x12>
 8004eaa:	1c51      	adds	r1, r2, #1
 8004eac:	d103      	bne.n	8004eb6 <_raise_r+0x48>
 8004eae:	2316      	movs	r3, #22
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	6023      	str	r3, [r4, #0]
 8004eb4:	e7e4      	b.n	8004e80 <_raise_r+0x12>
 8004eb6:	2400      	movs	r4, #0
 8004eb8:	0028      	movs	r0, r5
 8004eba:	601c      	str	r4, [r3, #0]
 8004ebc:	4790      	blx	r2
 8004ebe:	0020      	movs	r0, r4
 8004ec0:	e7de      	b.n	8004e80 <_raise_r+0x12>
	...

08004ec4 <raise>:
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <raise+0x10>)
 8004ec8:	0001      	movs	r1, r0
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	f7ff ffcf 	bl	8004e6e <_raise_r>
 8004ed0:	bd10      	pop	{r4, pc}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	20000008 	.word	0x20000008

08004ed8 <_kill_r>:
 8004ed8:	2300      	movs	r3, #0
 8004eda:	b570      	push	{r4, r5, r6, lr}
 8004edc:	4c06      	ldr	r4, [pc, #24]	; (8004ef8 <_kill_r+0x20>)
 8004ede:	0005      	movs	r5, r0
 8004ee0:	0008      	movs	r0, r1
 8004ee2:	0011      	movs	r1, r2
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	f7fe feed 	bl	8003cc4 <_kill>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d103      	bne.n	8004ef6 <_kill_r+0x1e>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d000      	beq.n	8004ef6 <_kill_r+0x1e>
 8004ef4:	602b      	str	r3, [r5, #0]
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	20000358 	.word	0x20000358

08004efc <_getpid_r>:
 8004efc:	b510      	push	{r4, lr}
 8004efe:	f7fe fedb 	bl	8003cb8 <_getpid>
 8004f02:	bd10      	pop	{r4, pc}

08004f04 <strchr>:
 8004f04:	b2c9      	uxtb	r1, r1
 8004f06:	7803      	ldrb	r3, [r0, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d004      	beq.n	8004f16 <strchr+0x12>
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	d100      	bne.n	8004f12 <strchr+0xe>
 8004f10:	4770      	bx	lr
 8004f12:	3001      	adds	r0, #1
 8004f14:	e7f7      	b.n	8004f06 <strchr+0x2>
 8004f16:	424b      	negs	r3, r1
 8004f18:	4159      	adcs	r1, r3
 8004f1a:	4249      	negs	r1, r1
 8004f1c:	4008      	ands	r0, r1
 8004f1e:	e7f7      	b.n	8004f10 <strchr+0xc>

08004f20 <strcspn>:
 8004f20:	0003      	movs	r3, r0
 8004f22:	b530      	push	{r4, r5, lr}
 8004f24:	781c      	ldrb	r4, [r3, #0]
 8004f26:	2c00      	cmp	r4, #0
 8004f28:	d109      	bne.n	8004f3e <strcspn+0x1e>
 8004f2a:	1a18      	subs	r0, r3, r0
 8004f2c:	bd30      	pop	{r4, r5, pc}
 8004f2e:	42a5      	cmp	r5, r4
 8004f30:	d0fb      	beq.n	8004f2a <strcspn+0xa>
 8004f32:	3201      	adds	r2, #1
 8004f34:	7815      	ldrb	r5, [r2, #0]
 8004f36:	2d00      	cmp	r5, #0
 8004f38:	d1f9      	bne.n	8004f2e <strcspn+0xe>
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	e7f2      	b.n	8004f24 <strcspn+0x4>
 8004f3e:	000a      	movs	r2, r1
 8004f40:	e7f8      	b.n	8004f34 <strcspn+0x14>

08004f42 <strncpy>:
 8004f42:	b530      	push	{r4, r5, lr}
 8004f44:	0005      	movs	r5, r0
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	d100      	bne.n	8004f4c <strncpy+0xa>
 8004f4a:	bd30      	pop	{r4, r5, pc}
 8004f4c:	780c      	ldrb	r4, [r1, #0]
 8004f4e:	3a01      	subs	r2, #1
 8004f50:	1c6b      	adds	r3, r5, #1
 8004f52:	702c      	strb	r4, [r5, #0]
 8004f54:	3101      	adds	r1, #1
 8004f56:	2c00      	cmp	r4, #0
 8004f58:	d105      	bne.n	8004f66 <strncpy+0x24>
 8004f5a:	189a      	adds	r2, r3, r2
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d0f4      	beq.n	8004f4a <strncpy+0x8>
 8004f60:	701c      	strb	r4, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	e7fa      	b.n	8004f5c <strncpy+0x1a>
 8004f66:	001d      	movs	r5, r3
 8004f68:	e7ed      	b.n	8004f46 <strncpy+0x4>

08004f6a <strstr>:
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	7803      	ldrb	r3, [r0, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10f      	bne.n	8004f92 <strstr+0x28>
 8004f72:	780b      	ldrb	r3, [r1, #0]
 8004f74:	425a      	negs	r2, r3
 8004f76:	4153      	adcs	r3, r2
 8004f78:	425b      	negs	r3, r3
 8004f7a:	4018      	ands	r0, r3
 8004f7c:	bd10      	pop	{r4, pc}
 8004f7e:	2300      	movs	r3, #0
 8004f80:	5cca      	ldrb	r2, [r1, r3]
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	d0fa      	beq.n	8004f7c <strstr+0x12>
 8004f86:	5cc4      	ldrb	r4, [r0, r3]
 8004f88:	4294      	cmp	r4, r2
 8004f8a:	d101      	bne.n	8004f90 <strstr+0x26>
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	e7f7      	b.n	8004f80 <strstr+0x16>
 8004f90:	3001      	adds	r0, #1
 8004f92:	7803      	ldrb	r3, [r0, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f2      	bne.n	8004f7e <strstr+0x14>
 8004f98:	0018      	movs	r0, r3
 8004f9a:	e7ef      	b.n	8004f7c <strstr+0x12>

08004f9c <_init>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_fini>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr
