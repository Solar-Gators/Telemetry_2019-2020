
SOLARgator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e5c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009124  08009124  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009124  08009124  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009124  08009124  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009124  08009124  00019124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009128  08009128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800912c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b54  2000017c  080092a8  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cd0  080092a8  00022cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020863  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000442b  00000000  00000000  00040a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001920  00000000  00000000  00044e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001728  00000000  00000000  00046758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006475  00000000  00000000  00047e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000158da  00000000  00000000  0004e2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e052  00000000  00000000  00063bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1c21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059cc  00000000  00000000  000f1c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008f04 	.word	0x08008f04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08008f04 	.word	0x08008f04

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa68 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f828 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ae 	bl	800038c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f87c 	bl	800032c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000234:	f005 ff42 	bl	80060bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000238:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <main+0x44>)
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <main+0x48>)
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f005 ff96 	bl	8006170 <osThreadNew>
 8000244:	0002      	movs	r2, r0
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0x4c>)
 8000248:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 800024a:	4a09      	ldr	r2, [pc, #36]	; (8000270 <main+0x50>)
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <main+0x54>)
 800024e:	2100      	movs	r1, #0
 8000250:	0018      	movs	r0, r3
 8000252:	f005 ff8d 	bl	8006170 <osThreadNew>
 8000256:	0002      	movs	r2, r0
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <main+0x58>)
 800025a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800025c:	f005 ff5a 	bl	8006114 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000260:	e7fe      	b.n	8000260 <main+0x40>
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	08008fac 	.word	0x08008fac
 8000268:	08000461 	.word	0x08000461
 800026c:	20001d3c 	.word	0x20001d3c
 8000270:	08008fd0 	.word	0x08008fd0
 8000274:	08000475 	.word	0x08000475
 8000278:	20001d40 	.word	0x20001d40

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b099      	sub	sp, #100	; 0x64
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	242c      	movs	r4, #44	; 0x2c
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2334      	movs	r3, #52	; 0x34
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f008 fe30 	bl	8008ef2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	231c      	movs	r3, #28
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	0018      	movs	r0, r3
 8000298:	2310      	movs	r3, #16
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f008 fe28 	bl	8008ef2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a2:	003b      	movs	r3, r7
 80002a4:	0018      	movs	r0, r3
 80002a6:	231c      	movs	r3, #28
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f008 fe21 	bl	8008ef2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2220      	movs	r2, #32
 80002b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2201      	movs	r2, #1
 80002ba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2200      	movs	r2, #0
 80002c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 fcab 	bl	8001c20 <HAL_RCC_OscConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002ce:	f000 f8eb 	bl	80004a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	211c      	movs	r1, #28
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2207      	movs	r2, #7
 80002d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2203      	movs	r2, #3
 80002de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2101      	movs	r1, #1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f002 f81b 	bl	800232c <HAL_RCC_ClockConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 f8d5 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2;
 80002fe:	003b      	movs	r3, r7
 8000300:	4a09      	ldr	r2, [pc, #36]	; (8000328 <SystemClock_Config+0xac>)
 8000302:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800030a:	003b      	movs	r3, r7
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000310:	003b      	movs	r3, r7
 8000312:	0018      	movs	r0, r3
 8000314:	f002 f9ac 	bl	8002670 <HAL_RCCEx_PeriphCLKConfig>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800031c:	f000 f8c4 	bl	80004a8 <Error_Handler>
  }
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b019      	add	sp, #100	; 0x64
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	00020002 	.word	0x00020002

0800032c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000332:	4a15      	ldr	r2, [pc, #84]	; (8000388 <MX_USART2_UART_Init+0x5c>)
 8000334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000338:	2296      	movs	r2, #150	; 0x96
 800033a:	0212      	lsls	r2, r2, #8
 800033c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000370:	0018      	movs	r0, r3
 8000372:	f002 fc99 	bl	8002ca8 <HAL_UART_Init>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800037a:	f000 f895 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20001cbc 	.word	0x20001cbc
 8000388:	40004400 	.word	0x40004400

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b089      	sub	sp, #36	; 0x24
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	240c      	movs	r4, #12
 8000394:	193b      	adds	r3, r7, r4
 8000396:	0018      	movs	r0, r3
 8000398:	2314      	movs	r3, #20
 800039a:	001a      	movs	r2, r3
 800039c:	2100      	movs	r1, #0
 800039e:	f008 fda8 	bl	8008ef2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a2:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <MX_GPIO_Init+0xc8>)
 80003a4:	695a      	ldr	r2, [r3, #20]
 80003a6:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <MX_GPIO_Init+0xc8>)
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0309      	lsls	r1, r1, #12
 80003ac:	430a      	orrs	r2, r1
 80003ae:	615a      	str	r2, [r3, #20]
 80003b0:	4b28      	ldr	r3, [pc, #160]	; (8000454 <MX_GPIO_Init+0xc8>)
 80003b2:	695a      	ldr	r2, [r3, #20]
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	031b      	lsls	r3, r3, #12
 80003b8:	4013      	ands	r3, r2
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003be:	4b25      	ldr	r3, [pc, #148]	; (8000454 <MX_GPIO_Init+0xc8>)
 80003c0:	695a      	ldr	r2, [r3, #20]
 80003c2:	4b24      	ldr	r3, [pc, #144]	; (8000454 <MX_GPIO_Init+0xc8>)
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	03c9      	lsls	r1, r1, #15
 80003c8:	430a      	orrs	r2, r1
 80003ca:	615a      	str	r2, [r3, #20]
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_GPIO_Init+0xc8>)
 80003ce:	695a      	ldr	r2, [r3, #20]
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	03db      	lsls	r3, r3, #15
 80003d4:	4013      	ands	r3, r2
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_GPIO_Init+0xc8>)
 80003dc:	695a      	ldr	r2, [r3, #20]
 80003de:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_GPIO_Init+0xc8>)
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	0289      	lsls	r1, r1, #10
 80003e4:	430a      	orrs	r2, r1
 80003e6:	615a      	str	r2, [r3, #20]
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_GPIO_Init+0xc8>)
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	029b      	lsls	r3, r3, #10
 80003f0:	4013      	ands	r3, r2
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003f6:	2390      	movs	r3, #144	; 0x90
 80003f8:	05db      	lsls	r3, r3, #23
 80003fa:	2200      	movs	r2, #0
 80003fc:	2120      	movs	r1, #32
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fbd0 	bl	8000ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000404:	193b      	adds	r3, r7, r4
 8000406:	2280      	movs	r2, #128	; 0x80
 8000408:	0192      	lsls	r2, r2, #6
 800040a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	4a12      	ldr	r2, [pc, #72]	; (8000458 <MX_GPIO_Init+0xcc>)
 8000410:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	193b      	adds	r3, r7, r4
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000418:	193b      	adds	r3, r7, r4
 800041a:	4a10      	ldr	r2, [pc, #64]	; (800045c <MX_GPIO_Init+0xd0>)
 800041c:	0019      	movs	r1, r3
 800041e:	0010      	movs	r0, r2
 8000420:	f000 fa48 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000424:	0021      	movs	r1, r4
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2220      	movs	r2, #32
 800042a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2201      	movs	r2, #1
 8000430:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	187a      	adds	r2, r7, r1
 8000440:	2390      	movs	r3, #144	; 0x90
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f000 fa34 	bl	80008b4 <HAL_GPIO_Init>

}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b009      	add	sp, #36	; 0x24
 8000452:	bd90      	pop	{r4, r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	10110000 	.word	0x10110000
 800045c:	48000800 	.word	0x48000800

08000460 <StartBlink01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000468:	f007 fff8 	bl	800845c <MX_USB_DEVICE_Init>
//    osDelay(60);
//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//
//  }
  /* USER CODE END 5 */ 
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b002      	add	sp, #8
 8000472:	bd80      	pop	{r7, pc}

08000474 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
//  {
//    osDelay(50);
//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//  }
  /* USER CODE END StartBlink02 */
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}

08000484 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d101      	bne.n	800049a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000496:	f000 f943 	bl	8000720 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40001000 	.word	0x40001000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_MspInit+0x50>)
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <HAL_MspInit+0x50>)
 80004c0:	2101      	movs	r1, #1
 80004c2:	430a      	orrs	r2, r1
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_MspInit+0x50>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	2201      	movs	r2, #1
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_MspInit+0x50>)
 80004d4:	69da      	ldr	r2, [r3, #28]
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <HAL_MspInit+0x50>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	0549      	lsls	r1, r1, #21
 80004dc:	430a      	orrs	r2, r1
 80004de:	61da      	str	r2, [r3, #28]
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_MspInit+0x50>)
 80004e2:	69da      	ldr	r2, [r3, #28]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	055b      	lsls	r3, r3, #21
 80004e8:	4013      	ands	r3, r2
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80004ee:	2302      	movs	r3, #2
 80004f0:	425b      	negs	r3, r3
 80004f2:	2200      	movs	r2, #0
 80004f4:	2103      	movs	r1, #3
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 f9b6 	bl	8000868 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	2314      	movs	r3, #20
 8000512:	18fb      	adds	r3, r7, r3
 8000514:	0018      	movs	r0, r3
 8000516:	2314      	movs	r3, #20
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f008 fce9 	bl	8008ef2 <memset>
  if(huart->Instance==USART2)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <HAL_UART_MspInit+0x90>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d132      	bne.n	8000590 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_UART_MspInit+0x94>)
 800052c:	69da      	ldr	r2, [r3, #28]
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <HAL_UART_MspInit+0x94>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0289      	lsls	r1, r1, #10
 8000534:	430a      	orrs	r2, r1
 8000536:	61da      	str	r2, [r3, #28]
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <HAL_UART_MspInit+0x94>)
 800053a:	69da      	ldr	r2, [r3, #28]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	029b      	lsls	r3, r3, #10
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_UART_MspInit+0x94>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_UART_MspInit+0x94>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0289      	lsls	r1, r1, #10
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_UART_MspInit+0x94>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	029b      	lsls	r3, r3, #10
 800055c:	4013      	ands	r3, r2
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000562:	2114      	movs	r1, #20
 8000564:	187b      	adds	r3, r7, r1
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2202      	movs	r2, #2
 800056e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2203      	movs	r2, #3
 800057a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2201      	movs	r2, #1
 8000580:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	187a      	adds	r2, r7, r1
 8000584:	2390      	movs	r3, #144	; 0x90
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	0011      	movs	r1, r2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 f992 	bl	80008b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b00a      	add	sp, #40	; 0x28
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40004400 	.word	0x40004400
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	0019      	movs	r1, r3
 80005b6:	2011      	movs	r0, #17
 80005b8:	f000 f956 	bl	8000868 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80005bc:	2011      	movs	r0, #17
 80005be:	f000 f968 	bl	8000892 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <HAL_InitTick+0xa4>)
 80005c4:	69da      	ldr	r2, [r3, #28]
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <HAL_InitTick+0xa4>)
 80005c8:	2110      	movs	r1, #16
 80005ca:	430a      	orrs	r2, r1
 80005cc:	61da      	str	r2, [r3, #28]
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <HAL_InitTick+0xa4>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	2210      	movs	r2, #16
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005da:	230c      	movs	r3, #12
 80005dc:	18fa      	adds	r2, r7, r3
 80005de:	2310      	movs	r3, #16
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 f819 	bl	800261c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005ea:	f002 f801 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 80005ee:	0003      	movs	r3, r0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80005f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f4:	4914      	ldr	r1, [pc, #80]	; (8000648 <HAL_InitTick+0xa8>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff fd86 	bl	8000108 <__udivsi3>
 80005fc:	0003      	movs	r3, r0
 80005fe:	3b01      	subs	r3, #1
 8000600:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_InitTick+0xac>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <HAL_InitTick+0xb0>)
 8000606:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_InitTick+0xac>)
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <HAL_InitTick+0xb4>)
 800060c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_InitTick+0xac>)
 8000610:	6a3a      	ldr	r2, [r7, #32]
 8000612:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <HAL_InitTick+0xac>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_InitTick+0xac>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_InitTick+0xac>)
 8000622:	0018      	movs	r0, r3
 8000624:	f002 f924 	bl	8002870 <HAL_TIM_Base_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d105      	bne.n	8000638 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_InitTick+0xac>)
 800062e:	0018      	movs	r0, r3
 8000630:	f002 f952 	bl	80028d8 <HAL_TIM_Base_Start_IT>
 8000634:	0003      	movs	r3, r0
 8000636:	e000      	b.n	800063a <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000638:	2301      	movs	r3, #1
}
 800063a:	0018      	movs	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	b00a      	add	sp, #40	; 0x28
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	40021000 	.word	0x40021000
 8000648:	000f4240 	.word	0x000f4240
 800064c:	20001d44 	.word	0x20001d44
 8000650:	40001000 	.word	0x40001000
 8000654:	000003e7 	.word	0x000003e7

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <HardFault_Handler+0x4>

08000668 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <TIM6_DAC_IRQHandler+0x14>)
 800066e:	0018      	movs	r0, r3
 8000670:	f002 f954 	bl	800291c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20001d44 	.word	0x20001d44

08000680 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <USB_IRQHandler+0x14>)
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fbb4 	bl	8000df4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20002a5c 	.word	0x20002a5c

08000698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490e      	ldr	r1, [pc, #56]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0b      	ldr	r4, [pc, #44]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006ce:	f7ff ffe3 	bl	8000698 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006d2:	f008 fbe1 	bl	8008e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fda3 	bl	8000220 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80006e8:	0800912c 	.word	0x0800912c
  ldr r2, =_sbss
 80006ec:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80006f0:	20002cd0 	.word	0x20002cd0

080006f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_COMP_IRQHandler>
	...

080006f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <HAL_Init+0x24>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_Init+0x24>)
 8000702:	2110      	movs	r1, #16
 8000704:	430a      	orrs	r2, r1
 8000706:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff49 	bl	80005a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070e:	f7ff fed1 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x1c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	001a      	movs	r2, r3
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_IncTick+0x20>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	18d2      	adds	r2, r2, r3
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <HAL_IncTick+0x20>)
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	20000004 	.word	0x20000004
 8000740:	20001d84 	.word	0x20001d84

08000744 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  return uwTick;
 8000748:	4b02      	ldr	r3, [pc, #8]	; (8000754 <HAL_GetTick+0x10>)
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	20001d84 	.word	0x20001d84

08000758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b7f      	cmp	r3, #127	; 0x7f
 800076a:	d809      	bhi.n	8000780 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	001a      	movs	r2, r3
 8000772:	231f      	movs	r3, #31
 8000774:	401a      	ands	r2, r3
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <__NVIC_EnableIRQ+0x30>)
 8000778:	2101      	movs	r1, #1
 800077a:	4091      	lsls	r1, r2
 800077c:	000a      	movs	r2, r1
 800077e:	601a      	str	r2, [r3, #0]
  }
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b002      	add	sp, #8
 8000786:	bd80      	pop	{r7, pc}
 8000788:	e000e100 	.word	0xe000e100

0800078c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	0002      	movs	r2, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b7f      	cmp	r3, #127	; 0x7f
 80007a0:	d828      	bhi.n	80007f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a2:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <__NVIC_SetPriority+0xd4>)
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	33c0      	adds	r3, #192	; 0xc0
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	589b      	ldr	r3, [r3, r2]
 80007b2:	1dfa      	adds	r2, r7, #7
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	0011      	movs	r1, r2
 80007b8:	2203      	movs	r2, #3
 80007ba:	400a      	ands	r2, r1
 80007bc:	00d2      	lsls	r2, r2, #3
 80007be:	21ff      	movs	r1, #255	; 0xff
 80007c0:	4091      	lsls	r1, r2
 80007c2:	000a      	movs	r2, r1
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	401a      	ands	r2, r3
 80007c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	019b      	lsls	r3, r3, #6
 80007ce:	22ff      	movs	r2, #255	; 0xff
 80007d0:	401a      	ands	r2, r3
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	0018      	movs	r0, r3
 80007d8:	2303      	movs	r3, #3
 80007da:	4003      	ands	r3, r0
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e0:	481f      	ldr	r0, [pc, #124]	; (8000860 <__NVIC_SetPriority+0xd4>)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	089b      	lsrs	r3, r3, #2
 80007ea:	430a      	orrs	r2, r1
 80007ec:	33c0      	adds	r3, #192	; 0xc0
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007f2:	e031      	b.n	8000858 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <__NVIC_SetPriority+0xd8>)
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	0019      	movs	r1, r3
 80007fc:	230f      	movs	r3, #15
 80007fe:	400b      	ands	r3, r1
 8000800:	3b08      	subs	r3, #8
 8000802:	089b      	lsrs	r3, r3, #2
 8000804:	3306      	adds	r3, #6
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	18d3      	adds	r3, r2, r3
 800080a:	3304      	adds	r3, #4
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	1dfa      	adds	r2, r7, #7
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	0011      	movs	r1, r2
 8000814:	2203      	movs	r2, #3
 8000816:	400a      	ands	r2, r1
 8000818:	00d2      	lsls	r2, r2, #3
 800081a:	21ff      	movs	r1, #255	; 0xff
 800081c:	4091      	lsls	r1, r2
 800081e:	000a      	movs	r2, r1
 8000820:	43d2      	mvns	r2, r2
 8000822:	401a      	ands	r2, r3
 8000824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	019b      	lsls	r3, r3, #6
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	401a      	ands	r2, r3
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	0018      	movs	r0, r3
 8000834:	2303      	movs	r3, #3
 8000836:	4003      	ands	r3, r0
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <__NVIC_SetPriority+0xd8>)
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	001c      	movs	r4, r3
 8000844:	230f      	movs	r3, #15
 8000846:	4023      	ands	r3, r4
 8000848:	3b08      	subs	r3, #8
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	430a      	orrs	r2, r1
 800084e:	3306      	adds	r3, #6
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	18c3      	adds	r3, r0, r3
 8000854:	3304      	adds	r3, #4
 8000856:	601a      	str	r2, [r3, #0]
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b003      	add	sp, #12
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	210f      	movs	r1, #15
 8000874:	187b      	adds	r3, r7, r1
 8000876:	1c02      	adds	r2, r0, #0
 8000878:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	187b      	adds	r3, r7, r1
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b25b      	sxtb	r3, r3
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff ff81 	bl	800078c <__NVIC_SetPriority>
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b004      	add	sp, #16
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	0002      	movs	r2, r0
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff ff57 	bl	8000758 <__NVIC_EnableIRQ>
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c2:	e155      	b.n	8000b70 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	4091      	lsls	r1, r2
 80008ce:	000a      	movs	r2, r1
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d100      	bne.n	80008dc <HAL_GPIO_Init+0x28>
 80008da:	e146      	b.n	8000b6a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d003      	beq.n	80008ec <HAL_GPIO_Init+0x38>
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b12      	cmp	r3, #18
 80008ea:	d123      	bne.n	8000934 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	08da      	lsrs	r2, r3, #3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3208      	adds	r2, #8
 80008f4:	0092      	lsls	r2, r2, #2
 80008f6:	58d3      	ldr	r3, [r2, r3]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2207      	movs	r2, #7
 80008fe:	4013      	ands	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	220f      	movs	r2, #15
 8000904:	409a      	lsls	r2, r3
 8000906:	0013      	movs	r3, r2
 8000908:	43da      	mvns	r2, r3
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	691a      	ldr	r2, [r3, #16]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2107      	movs	r1, #7
 8000918:	400b      	ands	r3, r1
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	409a      	lsls	r2, r3
 800091e:	0013      	movs	r3, r2
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	08da      	lsrs	r2, r3, #3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3208      	adds	r2, #8
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	6939      	ldr	r1, [r7, #16]
 8000932:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	2203      	movs	r2, #3
 8000940:	409a      	lsls	r2, r3
 8000942:	0013      	movs	r3, r2
 8000944:	43da      	mvns	r2, r3
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2203      	movs	r2, #3
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	409a      	lsls	r2, r3
 800095a:	0013      	movs	r3, r2
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4313      	orrs	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d00b      	beq.n	8000988 <HAL_GPIO_Init+0xd4>
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d007      	beq.n	8000988 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800097c:	2b11      	cmp	r3, #17
 800097e:	d003      	beq.n	8000988 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b12      	cmp	r3, #18
 8000986:	d130      	bne.n	80009ea <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	409a      	lsls	r2, r3
 8000996:	0013      	movs	r3, r2
 8000998:	43da      	mvns	r2, r3
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	409a      	lsls	r2, r3
 80009aa:	0013      	movs	r3, r2
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009be:	2201      	movs	r2, #1
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
 80009c4:	0013      	movs	r3, r2
 80009c6:	43da      	mvns	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	091b      	lsrs	r3, r3, #4
 80009d4:	2201      	movs	r2, #1
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	43da      	mvns	r2, r3
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	055b      	lsls	r3, r3, #21
 8000a22:	4013      	ands	r3, r2
 8000a24:	d100      	bne.n	8000a28 <HAL_GPIO_Init+0x174>
 8000a26:	e0a0      	b.n	8000b6a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a28:	4b57      	ldr	r3, [pc, #348]	; (8000b88 <HAL_GPIO_Init+0x2d4>)
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	4b56      	ldr	r3, [pc, #344]	; (8000b88 <HAL_GPIO_Init+0x2d4>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	430a      	orrs	r2, r1
 8000a32:	619a      	str	r2, [r3, #24]
 8000a34:	4b54      	ldr	r3, [pc, #336]	; (8000b88 <HAL_GPIO_Init+0x2d4>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a40:	4a52      	ldr	r2, [pc, #328]	; (8000b8c <HAL_GPIO_Init+0x2d8>)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	3302      	adds	r3, #2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	589b      	ldr	r3, [r3, r2]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2203      	movs	r2, #3
 8000a52:	4013      	ands	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	220f      	movs	r2, #15
 8000a58:	409a      	lsls	r2, r3
 8000a5a:	0013      	movs	r3, r2
 8000a5c:	43da      	mvns	r2, r3
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	2390      	movs	r3, #144	; 0x90
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d019      	beq.n	8000aa2 <HAL_GPIO_Init+0x1ee>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a47      	ldr	r2, [pc, #284]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d013      	beq.n	8000a9e <HAL_GPIO_Init+0x1ea>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a46      	ldr	r2, [pc, #280]	; (8000b94 <HAL_GPIO_Init+0x2e0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d00d      	beq.n	8000a9a <HAL_GPIO_Init+0x1e6>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a45      	ldr	r2, [pc, #276]	; (8000b98 <HAL_GPIO_Init+0x2e4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d007      	beq.n	8000a96 <HAL_GPIO_Init+0x1e2>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a44      	ldr	r2, [pc, #272]	; (8000b9c <HAL_GPIO_Init+0x2e8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d101      	bne.n	8000a92 <HAL_GPIO_Init+0x1de>
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e008      	b.n	8000aa4 <HAL_GPIO_Init+0x1f0>
 8000a92:	2305      	movs	r3, #5
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x1f0>
 8000a96:	2303      	movs	r3, #3
 8000a98:	e004      	b.n	8000aa4 <HAL_GPIO_Init+0x1f0>
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	e002      	b.n	8000aa4 <HAL_GPIO_Init+0x1f0>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <HAL_GPIO_Init+0x1f0>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	400a      	ands	r2, r1
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4093      	lsls	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab4:	4935      	ldr	r1, [pc, #212]	; (8000b8c <HAL_GPIO_Init+0x2d8>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ac2:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <HAL_GPIO_Init+0x2ec>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43da      	mvns	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	025b      	lsls	r3, r3, #9
 8000ada:	4013      	ands	r3, r2
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <HAL_GPIO_Init+0x2ec>)
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <HAL_GPIO_Init+0x2ec>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43da      	mvns	r2, r3
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	029b      	lsls	r3, r3, #10
 8000b04:	4013      	ands	r3, r2
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_GPIO_Init+0x2ec>)
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <HAL_GPIO_Init+0x2ec>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	035b      	lsls	r3, r3, #13
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_GPIO_Init+0x2ec>)
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_GPIO_Init+0x2ec>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	039b      	lsls	r3, r3, #14
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_GPIO_Init+0x2ec>)
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	40da      	lsrs	r2, r3
 8000b78:	1e13      	subs	r3, r2, #0
 8000b7a:	d000      	beq.n	8000b7e <HAL_GPIO_Init+0x2ca>
 8000b7c:	e6a2      	b.n	80008c4 <HAL_GPIO_Init+0x10>
  } 
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b006      	add	sp, #24
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	48000800 	.word	0x48000800
 8000b98:	48000c00 	.word	0x48000c00
 8000b9c:	48001000 	.word	0x48001000
 8000ba0:	40010400 	.word	0x40010400

08000ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	0008      	movs	r0, r1
 8000bae:	0011      	movs	r1, r2
 8000bb0:	1cbb      	adds	r3, r7, #2
 8000bb2:	1c02      	adds	r2, r0, #0
 8000bb4:	801a      	strh	r2, [r3, #0]
 8000bb6:	1c7b      	adds	r3, r7, #1
 8000bb8:	1c0a      	adds	r2, r1, #0
 8000bba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bbc:	1c7b      	adds	r3, r7, #1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d004      	beq.n	8000bce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bc4:	1cbb      	adds	r3, r7, #2
 8000bc6:	881a      	ldrh	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bcc:	e003      	b.n	8000bd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bce:	1cbb      	adds	r3, r7, #2
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af06      	add	r7, sp, #24
 8000be6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e0d4      	b.n	8000d9c <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a6b      	ldr	r2, [pc, #428]	; (8000da4 <HAL_PCD_Init+0x1c4>)
 8000bf6:	5c9b      	ldrb	r3, [r3, r2]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d108      	bne.n	8000c10 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	238a      	movs	r3, #138	; 0x8a
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	2100      	movs	r1, #0
 8000c06:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f007 fdee 	bl	80087ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a64      	ldr	r2, [pc, #400]	; (8000da4 <HAL_PCD_Init+0x1c4>)
 8000c14:	2103      	movs	r1, #3
 8000c16:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 fbf5 	bl	800340c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c22:	230f      	movs	r3, #15
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e043      	b.n	8000cb4 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c2c:	200f      	movs	r0, #15
 8000c2e:	183b      	adds	r3, r7, r0
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	2129      	movs	r1, #41	; 0x29
 8000c36:	015b      	lsls	r3, r3, #5
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	185b      	adds	r3, r3, r1
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c40:	183b      	adds	r3, r7, r0
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	2128      	movs	r1, #40	; 0x28
 8000c48:	015b      	lsls	r3, r3, #5
 8000c4a:	18d3      	adds	r3, r2, r3
 8000c4c:	185b      	adds	r3, r3, r1
 8000c4e:	183a      	adds	r2, r7, r0
 8000c50:	7812      	ldrb	r2, [r2, #0]
 8000c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c54:	183b      	adds	r3, r7, r0
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	183a      	adds	r2, r7, r0
 8000c5a:	7812      	ldrb	r2, [r2, #0]
 8000c5c:	b291      	uxth	r1, r2
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	015b      	lsls	r3, r3, #5
 8000c62:	18d3      	adds	r3, r2, r3
 8000c64:	3336      	adds	r3, #54	; 0x36
 8000c66:	1c0a      	adds	r2, r1, #0
 8000c68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c6a:	183b      	adds	r3, r7, r0
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	212b      	movs	r1, #43	; 0x2b
 8000c72:	015b      	lsls	r3, r3, #5
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	185b      	adds	r3, r3, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c7c:	183b      	adds	r3, r7, r0
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	015b      	lsls	r3, r3, #5
 8000c84:	18d3      	adds	r3, r2, r3
 8000c86:	3338      	adds	r3, #56	; 0x38
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c8c:	183b      	adds	r3, r7, r0
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	015b      	lsls	r3, r3, #5
 8000c94:	18d3      	adds	r3, r2, r3
 8000c96:	333c      	adds	r3, #60	; 0x3c
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c9c:	183b      	adds	r3, r7, r0
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3202      	adds	r2, #2
 8000ca4:	0152      	lsls	r2, r2, #5
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000caa:	183b      	adds	r3, r7, r0
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	183b      	adds	r3, r7, r0
 8000cb0:	3201      	adds	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d3b4      	bcc.n	8000c2c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	e03f      	b.n	8000d4c <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ccc:	200f      	movs	r0, #15
 8000cce:	183b      	adds	r3, r7, r0
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	232a      	movs	r3, #42	; 0x2a
 8000cd6:	33ff      	adds	r3, #255	; 0xff
 8000cd8:	0152      	lsls	r2, r2, #5
 8000cda:	188a      	adds	r2, r1, r2
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ce2:	183b      	adds	r3, r7, r0
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	2394      	movs	r3, #148	; 0x94
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	0152      	lsls	r2, r2, #5
 8000cee:	188a      	adds	r2, r1, r2
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	183a      	adds	r2, r7, r0
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cf8:	183b      	adds	r3, r7, r0
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	232c      	movs	r3, #44	; 0x2c
 8000d00:	33ff      	adds	r3, #255	; 0xff
 8000d02:	0152      	lsls	r2, r2, #5
 8000d04:	188a      	adds	r2, r1, r2
 8000d06:	18d3      	adds	r3, r2, r3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d0c:	183b      	adds	r3, r7, r0
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	239c      	movs	r3, #156	; 0x9c
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	0152      	lsls	r2, r2, #5
 8000d18:	188a      	adds	r2, r1, r2
 8000d1a:	18d3      	adds	r3, r2, r3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d20:	183b      	adds	r3, r7, r0
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	239e      	movs	r3, #158	; 0x9e
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	0152      	lsls	r2, r2, #5
 8000d2c:	188a      	adds	r2, r1, r2
 8000d2e:	18d3      	adds	r3, r2, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d34:	183b      	adds	r3, r7, r0
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	320a      	adds	r2, #10
 8000d3c:	0152      	lsls	r2, r2, #5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d42:	183b      	adds	r3, r7, r0
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	183b      	adds	r3, r7, r0
 8000d48:	3201      	adds	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	781a      	ldrb	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d3b8      	bcc.n	8000ccc <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	466a      	mov	r2, sp
 8000d62:	0011      	movs	r1, r2
 8000d64:	001a      	movs	r2, r3
 8000d66:	3210      	adds	r2, #16
 8000d68:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000d6a:	c170      	stmia	r1!, {r4, r5, r6}
 8000d6c:	ca30      	ldmia	r2!, {r4, r5}
 8000d6e:	c130      	stmia	r1!, {r4, r5}
 8000d70:	6859      	ldr	r1, [r3, #4]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	f002 fb69 	bl	800344c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2224      	movs	r2, #36	; 0x24
 8000d7e:	2100      	movs	r1, #0
 8000d80:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_PCD_Init+0x1c4>)
 8000d86:	2101      	movs	r1, #1
 8000d88:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d103      	bne.n	8000d9a <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 ff0d 	bl	8001bb4 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b005      	add	sp, #20
 8000da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da4:	00000229 	.word	0x00000229

08000da8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	238a      	movs	r3, #138	; 0x8a
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	5cd3      	ldrb	r3, [r2, r3]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d101      	bne.n	8000dc0 <HAL_PCD_Start+0x18>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e014      	b.n	8000dea <HAL_PCD_Start+0x42>
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	238a      	movs	r3, #138	; 0x8a
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f003 fb94 	bl	80044fc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f002 fafd 	bl	80033d8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	238a      	movs	r3, #138	; 0x8a
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	2100      	movs	r1, #0
 8000de6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f003 fb91 	bl	8004528 <USB_ReadInterrupts>
 8000e06:	0002      	movs	r2, r0
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d103      	bne.n	8000e1e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 fbaf 	bl	800157c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	0018      	movs	r0, r3
 8000e24:	f003 fb80 	bl	8004528 <USB_ReadInterrupts>
 8000e28:	0002      	movs	r2, r0
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	401a      	ands	r2, r3
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d114      	bne.n	8000e62 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2244      	movs	r2, #68	; 0x44
 8000e3e:	5a9b      	ldrh	r3, [r3, r2]
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	49a8      	ldr	r1, [pc, #672]	; (80010e8 <HAL_PCD_IRQHandler+0x2f4>)
 8000e48:	400a      	ands	r2, r1
 8000e4a:	b291      	uxth	r1, r2
 8000e4c:	2244      	movs	r2, #68	; 0x44
 8000e4e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	0018      	movs	r0, r3
 8000e54:	f007 fd4e 	bl	80088f4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 f951 	bl	8001104 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	0018      	movs	r0, r3
 8000e68:	f003 fb5e 	bl	8004528 <USB_ReadInterrupts>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	401a      	ands	r2, r3
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	01db      	lsls	r3, r3, #7
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d10b      	bne.n	8000e94 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2244      	movs	r2, #68	; 0x44
 8000e82:	5a9b      	ldrh	r3, [r3, r2]
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4998      	ldr	r1, [pc, #608]	; (80010ec <HAL_PCD_IRQHandler+0x2f8>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	b291      	uxth	r1, r2
 8000e90:	2244      	movs	r2, #68	; 0x44
 8000e92:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f003 fb45 	bl	8004528 <USB_ReadInterrupts>
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	019b      	lsls	r3, r3, #6
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	019b      	lsls	r3, r3, #6
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d10b      	bne.n	8000ec6 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2244      	movs	r2, #68	; 0x44
 8000eb4:	5a9b      	ldrh	r3, [r3, r2]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	498c      	ldr	r1, [pc, #560]	; (80010f0 <HAL_PCD_IRQHandler+0x2fc>)
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	b291      	uxth	r1, r2
 8000ec2:	2244      	movs	r2, #68	; 0x44
 8000ec4:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f003 fb2c 	bl	8004528 <USB_ReadInterrupts>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	015b      	lsls	r3, r3, #5
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	015b      	lsls	r3, r3, #5
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d137      	bne.n	8000f50 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2240      	movs	r2, #64	; 0x40
 8000ee6:	5a9b      	ldrh	r3, [r3, r2]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2104      	movs	r1, #4
 8000ef0:	438a      	bics	r2, r1
 8000ef2:	b291      	uxth	r1, r2
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2240      	movs	r2, #64	; 0x40
 8000efe:	5a9b      	ldrh	r3, [r3, r2]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2108      	movs	r1, #8
 8000f08:	438a      	bics	r2, r1
 8000f0a:	b291      	uxth	r1, r2
 8000f0c:	2240      	movs	r2, #64	; 0x40
 8000f0e:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	2398      	movs	r3, #152	; 0x98
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	5cd3      	ldrb	r3, [r2, r3]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d109      	bne.n	8000f30 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	2398      	movs	r3, #152	; 0x98
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	2100      	movs	r1, #0
 8000f24:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 fe6c 	bl	8001c08 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	0018      	movs	r0, r3
 8000f34:	f007 fd1e 	bl	8008974 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2244      	movs	r2, #68	; 0x44
 8000f3e:	5a9b      	ldrh	r3, [r3, r2]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	496b      	ldr	r1, [pc, #428]	; (80010f4 <HAL_PCD_IRQHandler+0x300>)
 8000f48:	400a      	ands	r2, r1
 8000f4a:	b291      	uxth	r1, r2
 8000f4c:	2244      	movs	r2, #68	; 0x44
 8000f4e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f003 fae7 	bl	8004528 <USB_ReadInterrupts>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	401a      	ands	r2, r3
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d134      	bne.n	8000fd4 <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	5a9b      	ldrh	r3, [r3, r2]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2108      	movs	r1, #8
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	b291      	uxth	r1, r2
 8000f7e:	2240      	movs	r2, #64	; 0x40
 8000f80:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2244      	movs	r2, #68	; 0x44
 8000f88:	5a9b      	ldrh	r3, [r3, r2]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4959      	ldr	r1, [pc, #356]	; (80010f8 <HAL_PCD_IRQHandler+0x304>)
 8000f92:	400a      	ands	r2, r1
 8000f94:	b291      	uxth	r1, r2
 8000f96:	2244      	movs	r2, #68	; 0x44
 8000f98:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2240      	movs	r2, #64	; 0x40
 8000fa0:	5a9b      	ldrh	r3, [r3, r2]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2104      	movs	r1, #4
 8000faa:	430a      	orrs	r2, r1
 8000fac:	b291      	uxth	r1, r2
 8000fae:	2240      	movs	r2, #64	; 0x40
 8000fb0:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f003 fab6 	bl	8004528 <USB_ReadInterrupts>
 8000fbc:	0002      	movs	r2, r0
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	015b      	lsls	r3, r3, #5
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	015b      	lsls	r3, r3, #5
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d003      	beq.n	8000fd4 <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f007 fcb4 	bl	800893c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f003 faa5 	bl	8004528 <USB_ReadInterrupts>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b80      	cmp	r3, #128	; 0x80
 8000fe6:	d145      	bne.n	8001074 <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2244      	movs	r2, #68	; 0x44
 8000fee:	5a9b      	ldrh	r3, [r3, r2]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	b291      	uxth	r1, r2
 8000ffc:	2244      	movs	r2, #68	; 0x44
 8000ffe:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	2398      	movs	r3, #152	; 0x98
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d12f      	bne.n	800106c <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2240      	movs	r2, #64	; 0x40
 8001012:	5a9b      	ldrh	r3, [r3, r2]
 8001014:	b29a      	uxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2104      	movs	r1, #4
 800101c:	430a      	orrs	r2, r1
 800101e:	b291      	uxth	r1, r2
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2240      	movs	r2, #64	; 0x40
 800102a:	5a9b      	ldrh	r3, [r3, r2]
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2108      	movs	r1, #8
 8001034:	430a      	orrs	r2, r1
 8001036:	b291      	uxth	r1, r2
 8001038:	2240      	movs	r2, #64	; 0x40
 800103a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	2398      	movs	r3, #152	; 0x98
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	2101      	movs	r1, #1
 8001044:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2254      	movs	r2, #84	; 0x54
 800104c:	5a9b      	ldrh	r3, [r3, r2]
 800104e:	b29b      	uxth	r3, r3
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	223c      	movs	r2, #60	; 0x3c
 8001054:	4013      	ands	r3, r2
 8001056:	0019      	movs	r1, r3
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	2399      	movs	r3, #153	; 0x99
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2101      	movs	r1, #1
 8001064:	0018      	movs	r0, r3
 8001066:	f000 fdcf 	bl	8001c08 <HAL_PCDEx_LPM_Callback>
 800106a:	e003      	b.n	8001074 <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	0018      	movs	r0, r3
 8001070:	f007 fc64 	bl	800893c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0018      	movs	r0, r3
 800107a:	f003 fa55 	bl	8004528 <USB_ReadInterrupts>
 800107e:	0002      	movs	r2, r0
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	401a      	ands	r2, r3
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	429a      	cmp	r2, r3
 800108c:	d10f      	bne.n	80010ae <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2244      	movs	r2, #68	; 0x44
 8001094:	5a9b      	ldrh	r3, [r3, r2]
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4917      	ldr	r1, [pc, #92]	; (80010fc <HAL_PCD_IRQHandler+0x308>)
 800109e:	400a      	ands	r2, r1
 80010a0:	b291      	uxth	r1, r2
 80010a2:	2244      	movs	r2, #68	; 0x44
 80010a4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f007 fc14 	bl	80088d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	0018      	movs	r0, r3
 80010b4:	f003 fa38 	bl	8004528 <USB_ReadInterrupts>
 80010b8:	0002      	movs	r2, r0
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	401a      	ands	r2, r3
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d10b      	bne.n	80010e0 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2244      	movs	r2, #68	; 0x44
 80010ce:	5a9b      	ldrh	r3, [r3, r2]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	490a      	ldr	r1, [pc, #40]	; (8001100 <HAL_PCD_IRQHandler+0x30c>)
 80010d8:	400a      	ands	r2, r1
 80010da:	b291      	uxth	r1, r2
 80010dc:	2244      	movs	r2, #68	; 0x44
 80010de:	5299      	strh	r1, [r3, r2]
  }
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	fffffbff 	.word	0xfffffbff
 80010ec:	ffffbfff 	.word	0xffffbfff
 80010f0:	ffffdfff 	.word	0xffffdfff
 80010f4:	ffffefff 	.word	0xffffefff
 80010f8:	fffff7ff 	.word	0xfffff7ff
 80010fc:	fffffdff 	.word	0xfffffdff
 8001100:	fffffeff 	.word	0xfffffeff

08001104 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	000a      	movs	r2, r1
 800110e:	1cfb      	adds	r3, r7, #3
 8001110:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	238a      	movs	r3, #138	; 0x8a
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d101      	bne.n	8001122 <HAL_PCD_SetAddress+0x1e>
 800111e:	2302      	movs	r3, #2
 8001120:	e017      	b.n	8001152 <HAL_PCD_SetAddress+0x4e>
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	238a      	movs	r3, #138	; 0x8a
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	2101      	movs	r1, #1
 800112a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	1cfa      	adds	r2, r7, #3
 8001130:	2124      	movs	r1, #36	; 0x24
 8001132:	7812      	ldrb	r2, [r2, #0]
 8001134:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	1cfb      	adds	r3, r7, #3
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	0019      	movs	r1, r3
 8001140:	0010      	movs	r0, r2
 8001142:	f003 f9c7 	bl	80044d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	238a      	movs	r3, #138	; 0x8a
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	2100      	movs	r1, #0
 800114e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	0018      	movs	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800115a:	b590      	push	{r4, r7, lr}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	000c      	movs	r4, r1
 8001164:	0010      	movs	r0, r2
 8001166:	0019      	movs	r1, r3
 8001168:	1cfb      	adds	r3, r7, #3
 800116a:	1c22      	adds	r2, r4, #0
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	003b      	movs	r3, r7
 8001170:	1c02      	adds	r2, r0, #0
 8001172:	801a      	strh	r2, [r3, #0]
 8001174:	1cbb      	adds	r3, r7, #2
 8001176:	1c0a      	adds	r2, r1, #0
 8001178:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800117a:	230b      	movs	r3, #11
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001182:	1cfb      	adds	r3, r7, #3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	da0c      	bge.n	80011a6 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800118c:	1cfb      	adds	r3, r7, #3
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2207      	movs	r2, #7
 8001192:	4013      	ands	r3, r2
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	3328      	adds	r3, #40	; 0x28
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	18d3      	adds	r3, r2, r3
 800119c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2201      	movs	r2, #1
 80011a2:	705a      	strb	r2, [r3, #1]
 80011a4:	e00c      	b.n	80011c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011a6:	1cfb      	adds	r3, r7, #3
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2207      	movs	r2, #7
 80011ac:	4013      	ands	r3, r2
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	3329      	adds	r3, #41	; 0x29
 80011b2:	33ff      	adds	r3, #255	; 0xff
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	18d3      	adds	r3, r2, r3
 80011b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011c0:	1cfb      	adds	r3, r7, #3
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2207      	movs	r2, #7
 80011c6:	4013      	ands	r3, r2
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011ce:	003b      	movs	r3, r7
 80011d0:	881a      	ldrh	r2, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1cba      	adds	r2, r7, #2
 80011da:	7812      	ldrb	r2, [r2, #0]
 80011dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011f0:	1cbb      	adds	r3, r7, #2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d102      	bne.n	80011fe <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	238a      	movs	r3, #138	; 0x8a
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_PCD_EP_Open+0xb4>
 800120a:	2302      	movs	r3, #2
 800120c:	e013      	b.n	8001236 <HAL_PCD_EP_Open+0xdc>
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	238a      	movs	r3, #138	; 0x8a
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	2101      	movs	r1, #1
 8001216:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	0011      	movs	r1, r2
 8001220:	0018      	movs	r0, r3
 8001222:	f002 f943 	bl	80034ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	238a      	movs	r3, #138	; 0x8a
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	2100      	movs	r1, #0
 800122e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001230:	230b      	movs	r3, #11
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	781b      	ldrb	r3, [r3, #0]
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b005      	add	sp, #20
 800123c:	bd90      	pop	{r4, r7, pc}

0800123e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	000a      	movs	r2, r1
 8001248:	1cfb      	adds	r3, r7, #3
 800124a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800124c:	1cfb      	adds	r3, r7, #3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b25b      	sxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	da0c      	bge.n	8001270 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001256:	1cfb      	adds	r3, r7, #3
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2207      	movs	r2, #7
 800125c:	4013      	ands	r3, r2
 800125e:	015b      	lsls	r3, r3, #5
 8001260:	3328      	adds	r3, #40	; 0x28
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	18d3      	adds	r3, r2, r3
 8001266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2201      	movs	r2, #1
 800126c:	705a      	strb	r2, [r3, #1]
 800126e:	e00c      	b.n	800128a <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001270:	1cfb      	adds	r3, r7, #3
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2207      	movs	r2, #7
 8001276:	4013      	ands	r3, r2
 8001278:	015b      	lsls	r3, r3, #5
 800127a:	3329      	adds	r3, #41	; 0x29
 800127c:	33ff      	adds	r3, #255	; 0xff
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800128a:	1cfb      	adds	r3, r7, #3
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2207      	movs	r2, #7
 8001290:	4013      	ands	r3, r2
 8001292:	b2da      	uxtb	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	238a      	movs	r3, #138	; 0x8a
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_PCD_EP_Close+0x6a>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e011      	b.n	80012cc <HAL_PCD_EP_Close+0x8e>
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	238a      	movs	r3, #138	; 0x8a
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	2101      	movs	r1, #1
 80012b0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	0011      	movs	r1, r2
 80012ba:	0018      	movs	r0, r3
 80012bc:	f002 fbee 	bl	8003a9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	238a      	movs	r3, #138	; 0x8a
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	2100      	movs	r1, #0
 80012c8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	200b      	movs	r0, #11
 80012e2:	183b      	adds	r3, r7, r0
 80012e4:	1c0a      	adds	r2, r1, #0
 80012e6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012e8:	0001      	movs	r1, r0
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2207      	movs	r2, #7
 80012f0:	4013      	ands	r3, r2
 80012f2:	015b      	lsls	r3, r3, #5
 80012f4:	3329      	adds	r3, #41	; 0x29
 80012f6:	33ff      	adds	r3, #255	; 0xff
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	18d3      	adds	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2200      	movs	r2, #0
 8001314:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2207      	movs	r2, #7
 800131c:	4013      	ands	r3, r2
 800131e:	b2da      	uxtb	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001324:	187b      	adds	r3, r7, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2207      	movs	r2, #7
 800132a:	4013      	ands	r3, r2
 800132c:	d107      	bne.n	800133e <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f002 fd26 	bl	8003d88 <USB_EPStartXfer>
 800133c:	e006      	b.n	800134c <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f002 fd1e 	bl	8003d88 <USB_EPStartXfer>
  }

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b006      	add	sp, #24
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	000a      	movs	r2, r1
 8001360:	1cfb      	adds	r3, r7, #3
 8001362:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001364:	1cfb      	adds	r3, r7, #3
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2207      	movs	r2, #7
 800136a:	4013      	ands	r3, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	330a      	adds	r3, #10
 8001370:	015b      	lsls	r3, r3, #5
 8001372:	18d3      	adds	r3, r2, r3
 8001374:	3304      	adds	r3, #4
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	200b      	movs	r0, #11
 800138e:	183b      	adds	r3, r7, r0
 8001390:	1c0a      	adds	r2, r1, #0
 8001392:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001394:	0001      	movs	r1, r0
 8001396:	187b      	adds	r3, r7, r1
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2207      	movs	r2, #7
 800139c:	4013      	ands	r3, r2
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	3328      	adds	r3, #40	; 0x28
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	18d3      	adds	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2201      	movs	r2, #1
 80013be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2207      	movs	r2, #7
 80013c6:	4013      	ands	r3, r2
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2207      	movs	r2, #7
 80013d4:	4013      	ands	r3, r2
 80013d6:	d107      	bne.n	80013e8 <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	0011      	movs	r1, r2
 80013e0:	0018      	movs	r0, r3
 80013e2:	f002 fcd1 	bl	8003d88 <USB_EPStartXfer>
 80013e6:	e006      	b.n	80013f6 <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f002 fcc9 	bl	8003d88 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b006      	add	sp, #24
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	000a      	movs	r2, r1
 800140a:	1cfb      	adds	r3, r7, #3
 800140c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800140e:	1cfb      	adds	r3, r7, #3
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2207      	movs	r2, #7
 8001414:	401a      	ands	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d901      	bls.n	8001422 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e050      	b.n	80014c4 <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001422:	1cfb      	adds	r3, r7, #3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	da0c      	bge.n	8001446 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800142c:	1cfb      	adds	r3, r7, #3
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2207      	movs	r2, #7
 8001432:	4013      	ands	r3, r2
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	3328      	adds	r3, #40	; 0x28
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2201      	movs	r2, #1
 8001442:	705a      	strb	r2, [r3, #1]
 8001444:	e00a      	b.n	800145c <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001446:	1cfb      	adds	r3, r7, #3
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	015b      	lsls	r3, r3, #5
 800144c:	3329      	adds	r3, #41	; 0x29
 800144e:	33ff      	adds	r3, #255	; 0xff
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	18d3      	adds	r3, r2, r3
 8001454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001462:	1cfb      	adds	r3, r7, #3
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2207      	movs	r2, #7
 8001468:	4013      	ands	r3, r2
 800146a:	b2da      	uxtb	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	238a      	movs	r3, #138	; 0x8a
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_PCD_EP_SetStall+0x80>
 800147c:	2302      	movs	r3, #2
 800147e:	e021      	b.n	80014c4 <HAL_PCD_EP_SetStall+0xc4>
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	238a      	movs	r3, #138	; 0x8a
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	2101      	movs	r1, #1
 8001488:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f002 ff4a 	bl	800432c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001498:	1cfb      	adds	r3, r7, #3
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2207      	movs	r2, #7
 800149e:	4013      	ands	r3, r2
 80014a0:	d10a      	bne.n	80014b8 <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	218c      	movs	r1, #140	; 0x8c
 80014aa:	0089      	lsls	r1, r1, #2
 80014ac:	468c      	mov	ip, r1
 80014ae:	4463      	add	r3, ip
 80014b0:	0019      	movs	r1, r3
 80014b2:	0010      	movs	r0, r2
 80014b4:	f003 f846 	bl	8004544 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	238a      	movs	r3, #138	; 0x8a
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	2100      	movs	r1, #0
 80014c0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	000a      	movs	r2, r1
 80014d6:	1cfb      	adds	r3, r7, #3
 80014d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014da:	1cfb      	adds	r3, r7, #3
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	220f      	movs	r2, #15
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d901      	bls.n	80014ee <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e042      	b.n	8001574 <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014ee:	1cfb      	adds	r3, r7, #3
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da0c      	bge.n	8001512 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f8:	1cfb      	adds	r3, r7, #3
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2207      	movs	r2, #7
 80014fe:	4013      	ands	r3, r2
 8001500:	015b      	lsls	r3, r3, #5
 8001502:	3328      	adds	r3, #40	; 0x28
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	18d3      	adds	r3, r2, r3
 8001508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	705a      	strb	r2, [r3, #1]
 8001510:	e00c      	b.n	800152c <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001512:	1cfb      	adds	r3, r7, #3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2207      	movs	r2, #7
 8001518:	4013      	ands	r3, r2
 800151a:	015b      	lsls	r3, r3, #5
 800151c:	3329      	adds	r3, #41	; 0x29
 800151e:	33ff      	adds	r3, #255	; 0xff
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	18d3      	adds	r3, r2, r3
 8001524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001532:	1cfb      	adds	r3, r7, #3
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2207      	movs	r2, #7
 8001538:	4013      	ands	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	238a      	movs	r3, #138	; 0x8a
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_PCD_EP_ClrStall+0x84>
 800154c:	2302      	movs	r3, #2
 800154e:	e011      	b.n	8001574 <HAL_PCD_EP_ClrStall+0xa8>
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	238a      	movs	r3, #138	; 0x8a
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	2101      	movs	r1, #1
 8001558:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	0011      	movs	r1, r2
 8001562:	0018      	movs	r0, r3
 8001564:	f002 ff24 	bl	80043b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	238a      	movs	r3, #138	; 0x8a
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	2100      	movs	r1, #0
 8001570:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	0018      	movs	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	b004      	add	sp, #16
 800157a:	bd80      	pop	{r7, pc}

0800157c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001584:	e2b3      	b.n	8001aee <PCD_EP_ISR_Handler+0x572>
  {
    wIstr = hpcd->Instance->ISTR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2016      	movs	r0, #22
 800158c:	183b      	adds	r3, r7, r0
 800158e:	2144      	movs	r1, #68	; 0x44
 8001590:	5a52      	ldrh	r2, [r2, r1]
 8001592:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001594:	183b      	adds	r3, r7, r0
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	2015      	movs	r0, #21
 800159c:	183b      	adds	r3, r7, r0
 800159e:	210f      	movs	r1, #15
 80015a0:	400a      	ands	r2, r1
 80015a2:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80015a4:	183b      	adds	r3, r7, r0
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d000      	beq.n	80015ae <PCD_EP_ISR_Handler+0x32>
 80015ac:	e141      	b.n	8001832 <PCD_EP_ISR_Handler+0x2b6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015ae:	2316      	movs	r3, #22
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	2210      	movs	r2, #16
 80015b6:	4013      	ands	r3, r2
 80015b8:	d14e      	bne.n	8001658 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4aca      	ldr	r2, [pc, #808]	; (80018ec <PCD_EP_ISR_Handler+0x370>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	b29c      	uxth	r4, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4ac8      	ldr	r2, [pc, #800]	; (80018f0 <PCD_EP_ISR_Handler+0x374>)
 80015ce:	4322      	orrs	r2, r4
 80015d0:	b292      	uxth	r2, r2
 80015d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3328      	adds	r3, #40	; 0x28
 80015d8:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2250      	movs	r2, #80	; 0x50
 80015e0:	5a9b      	ldrh	r3, [r3, r2]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	001a      	movs	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	18d2      	adds	r2, r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	18d3      	adds	r3, r2, r3
 80015f4:	4abf      	ldr	r2, [pc, #764]	; (80018f4 <PCD_EP_ISR_Handler+0x378>)
 80015f6:	4694      	mov	ip, r2
 80015f8:	4463      	add	r3, ip
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	059b      	lsls	r3, r3, #22
 80015fe:	0d9a      	lsrs	r2, r3, #22
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	18d2      	adds	r2, r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2100      	movs	r1, #0
 8001616:	0018      	movs	r0, r3
 8001618:	f007 f942 	bl	80088a0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	; 0x24
 8001620:	5c9b      	ldrb	r3, [r3, r2]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d100      	bne.n	800162a <PCD_EP_ISR_Handler+0xae>
 8001628:	e261      	b.n	8001aee <PCD_EP_ISR_Handler+0x572>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d000      	beq.n	8001634 <PCD_EP_ISR_Handler+0xb8>
 8001632:	e25c      	b.n	8001aee <PCD_EP_ISR_Handler+0x572>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	; 0x24
 8001638:	5c9b      	ldrb	r3, [r3, r2]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	4252      	negs	r2, r2
 8001640:	4313      	orrs	r3, r2
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	b291      	uxth	r1, r2
 800164a:	224c      	movs	r2, #76	; 0x4c
 800164c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2224      	movs	r2, #36	; 0x24
 8001652:	2100      	movs	r1, #0
 8001654:	5499      	strb	r1, [r3, r2]
 8001656:	e24a      	b.n	8001aee <PCD_EP_ISR_Handler+0x572>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3329      	adds	r3, #41	; 0x29
 800165c:	33ff      	adds	r3, #255	; 0xff
 800165e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2112      	movs	r1, #18
 8001666:	187b      	adds	r3, r7, r1
 8001668:	8812      	ldrh	r2, [r2, #0]
 800166a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800166c:	187b      	adds	r3, r7, r1
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4013      	ands	r3, r2
 8001676:	d033      	beq.n	80016e0 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2250      	movs	r2, #80	; 0x50
 800167e:	5a9b      	ldrh	r3, [r3, r2]
 8001680:	b29b      	uxth	r3, r3
 8001682:	001a      	movs	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	18d2      	adds	r2, r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	18d3      	adds	r3, r2, r3
 8001692:	4a99      	ldr	r2, [pc, #612]	; (80018f8 <PCD_EP_ISR_Handler+0x37c>)
 8001694:	4694      	mov	ip, r2
 8001696:	4463      	add	r3, ip
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	059b      	lsls	r3, r3, #22
 800169c:	0d9a      	lsrs	r2, r3, #22
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	228c      	movs	r2, #140	; 0x8c
 80016aa:	0092      	lsls	r2, r2, #2
 80016ac:	1899      	adds	r1, r3, r2
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f002 ff91 	bl	80045de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4a8d      	ldr	r2, [pc, #564]	; (80018fc <PCD_EP_ISR_Handler+0x380>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	b29c      	uxth	r4, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	4322      	orrs	r2, r4
 80016d2:	b292      	uxth	r2, r2
 80016d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	0018      	movs	r0, r3
 80016da:	f007 f8af 	bl	800883c <HAL_PCD_SetupStageCallback>
 80016de:	e206      	b.n	8001aee <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016e0:	2312      	movs	r3, #18
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	2200      	movs	r2, #0
 80016e6:	5e9b      	ldrsh	r3, [r3, r2]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db00      	blt.n	80016ee <PCD_EP_ISR_Handler+0x172>
 80016ec:	e1ff      	b.n	8001aee <PCD_EP_ISR_Handler+0x572>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	4a81      	ldr	r2, [pc, #516]	; (80018fc <PCD_EP_ISR_Handler+0x380>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	b29c      	uxth	r4, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	4322      	orrs	r2, r4
 8001704:	b292      	uxth	r2, r2
 8001706:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2250      	movs	r2, #80	; 0x50
 800170e:	5a9b      	ldrh	r3, [r3, r2]
 8001710:	b29b      	uxth	r3, r3
 8001712:	001a      	movs	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	18d2      	adds	r2, r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	18d3      	adds	r3, r2, r3
 8001722:	4a75      	ldr	r2, [pc, #468]	; (80018f8 <PCD_EP_ISR_Handler+0x37c>)
 8001724:	4694      	mov	ip, r2
 8001726:	4463      	add	r3, ip
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	059b      	lsls	r3, r3, #22
 800172c:	0d9a      	lsrs	r2, r3, #22
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01a      	beq.n	8001770 <PCD_EP_ISR_Handler+0x1f4>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d016      	beq.n	8001770 <PCD_EP_ISR_Handler+0x1f4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6959      	ldr	r1, [r3, #20]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001752:	b29b      	uxth	r3, r3
 8001754:	f002 ff43 	bl	80045de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	18d2      	adds	r2, r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2100      	movs	r1, #0
 800176a:	0018      	movs	r0, r3
 800176c:	f007 f87b 	bl	8008866 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	001c      	movs	r4, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2250      	movs	r2, #80	; 0x50
 800177c:	5a9b      	ldrh	r3, [r3, r2]
 800177e:	b29b      	uxth	r3, r3
 8001780:	18e4      	adds	r4, r4, r3
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <PCD_EP_ISR_Handler+0x37c>)
 8001784:	18e3      	adds	r3, r4, r3
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10e      	bne.n	80017ae <PCD_EP_ISR_Handler+0x232>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <PCD_EP_ISR_Handler+0x384>)
 8001796:	4013      	ands	r3, r2
 8001798:	b29a      	uxth	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	801a      	strh	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	4a53      	ldr	r2, [pc, #332]	; (80018f0 <PCD_EP_ISR_Handler+0x374>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	801a      	strh	r2, [r3, #0]
 80017ac:	e02b      	b.n	8001806 <PCD_EP_ISR_Handler+0x28a>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b3e      	cmp	r3, #62	; 0x3e
 80017b4:	d812      	bhi.n	80017dc <PCD_EP_ISR_Handler+0x260>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	d002      	beq.n	80017ce <PCD_EP_ISR_Handler+0x252>
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	029b      	lsls	r3, r3, #10
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	801a      	strh	r2, [r3, #0]
 80017da:	e014      	b.n	8001806 <PCD_EP_ISR_Handler+0x28a>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	221f      	movs	r2, #31
 80017ea:	4013      	ands	r3, r2
 80017ec:	d102      	bne.n	80017f4 <PCD_EP_ISR_Handler+0x278>
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4a3c      	ldr	r2, [pc, #240]	; (80018f0 <PCD_EP_ISR_Handler+0x374>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	b29a      	uxth	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4a3d      	ldr	r2, [pc, #244]	; (8001904 <PCD_EP_ISR_Handler+0x388>)
 8001810:	4013      	ands	r3, r2
 8001812:	b29c      	uxth	r4, r3
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	015b      	lsls	r3, r3, #5
 8001818:	4063      	eors	r3, r4
 800181a:	b29c      	uxth	r4, r3
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	019b      	lsls	r3, r3, #6
 8001820:	4063      	eors	r3, r4
 8001822:	b29c      	uxth	r4, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a37      	ldr	r2, [pc, #220]	; (8001908 <PCD_EP_ISR_Handler+0x38c>)
 800182a:	4322      	orrs	r2, r4
 800182c:	b292      	uxth	r2, r2
 800182e:	801a      	strh	r2, [r3, #0]
 8001830:	e15d      	b.n	8001aee <PCD_EP_ISR_Handler+0x572>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	001a      	movs	r2, r3
 8001838:	2315      	movs	r3, #21
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	18d2      	adds	r2, r2, r3
 8001842:	2112      	movs	r1, #18
 8001844:	187b      	adds	r3, r7, r1
 8001846:	8812      	ldrh	r2, [r2, #0]
 8001848:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2200      	movs	r2, #0
 800184e:	5e9b      	ldrsh	r3, [r3, r2]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db00      	blt.n	8001856 <PCD_EP_ISR_Handler+0x2da>
 8001854:	e0f5      	b.n	8001a42 <PCD_EP_ISR_Handler+0x4c6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	001a      	movs	r2, r3
 800185c:	2115      	movs	r1, #21
 800185e:	187b      	adds	r3, r7, r1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	18d3      	adds	r3, r2, r3
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	4a24      	ldr	r2, [pc, #144]	; (80018fc <PCD_EP_ISR_Handler+0x380>)
 800186c:	4013      	ands	r3, r2
 800186e:	b29c      	uxth	r4, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	001a      	movs	r2, r3
 8001876:	187b      	adds	r3, r7, r1
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	18d3      	adds	r3, r2, r3
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	4322      	orrs	r2, r4
 8001882:	b292      	uxth	r2, r2
 8001884:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001886:	187b      	adds	r3, r7, r1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	015b      	lsls	r3, r3, #5
 800188c:	3329      	adds	r3, #41	; 0x29
 800188e:	33ff      	adds	r3, #255	; 0xff
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	18d3      	adds	r3, r2, r3
 8001894:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	7b1b      	ldrb	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d136      	bne.n	800190c <PCD_EP_ISR_Handler+0x390>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2250      	movs	r2, #80	; 0x50
 80018a4:	5a9b      	ldrh	r3, [r3, r2]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	001a      	movs	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	18d2      	adds	r2, r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	18d3      	adds	r3, r2, r3
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <PCD_EP_ISR_Handler+0x37c>)
 80018ba:	4694      	mov	ip, r2
 80018bc:	4463      	add	r3, ip
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	211e      	movs	r1, #30
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	0592      	lsls	r2, r2, #22
 80018c6:	0d92      	lsrs	r2, r2, #22
 80018c8:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d100      	bne.n	80018d4 <PCD_EP_ISR_Handler+0x358>
 80018d2:	e08b      	b.n	80019ec <PCD_EP_ISR_Handler+0x470>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6959      	ldr	r1, [r3, #20]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	88da      	ldrh	r2, [r3, #6]
 80018e0:	231e      	movs	r3, #30
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	f002 fe7a 	bl	80045de <USB_ReadPMA>
 80018ea:	e07f      	b.n	80019ec <PCD_EP_ISR_Handler+0x470>
 80018ec:	ffff8f0f 	.word	0xffff8f0f
 80018f0:	ffff8000 	.word	0xffff8000
 80018f4:	00000402 	.word	0x00000402
 80018f8:	00000406 	.word	0x00000406
 80018fc:	00000f8f 	.word	0x00000f8f
 8001900:	ffff83ff 	.word	0xffff83ff
 8001904:	ffffbf8f 	.word	0xffffbf8f
 8001908:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	001a      	movs	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	18d3      	adds	r3, r2, r3
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	001a      	movs	r2, r3
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	01db      	lsls	r3, r3, #7
 8001924:	4013      	ands	r3, r2
 8001926:	d025      	beq.n	8001974 <PCD_EP_ISR_Handler+0x3f8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2250      	movs	r2, #80	; 0x50
 800192e:	5a9b      	ldrh	r3, [r3, r2]
 8001930:	b29b      	uxth	r3, r3
 8001932:	001a      	movs	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	18d2      	adds	r2, r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	18d3      	adds	r3, r2, r3
 8001942:	4a72      	ldr	r2, [pc, #456]	; (8001b0c <PCD_EP_ISR_Handler+0x590>)
 8001944:	4694      	mov	ip, r2
 8001946:	4463      	add	r3, ip
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	211e      	movs	r1, #30
 800194c:	187b      	adds	r3, r7, r1
 800194e:	0592      	lsls	r2, r2, #22
 8001950:	0d92      	lsrs	r2, r2, #22
 8001952:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8001954:	187b      	adds	r3, r7, r1
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d030      	beq.n	80019be <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6959      	ldr	r1, [r3, #20]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	891a      	ldrh	r2, [r3, #8]
 8001968:	231e      	movs	r3, #30
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	f002 fe36 	bl	80045de <USB_ReadPMA>
 8001972:	e024      	b.n	80019be <PCD_EP_ISR_Handler+0x442>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2250      	movs	r2, #80	; 0x50
 800197a:	5a9b      	ldrh	r3, [r3, r2]
 800197c:	b29b      	uxth	r3, r3
 800197e:	001a      	movs	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	18d2      	adds	r2, r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	18d3      	adds	r3, r2, r3
 800198e:	4a60      	ldr	r2, [pc, #384]	; (8001b10 <PCD_EP_ISR_Handler+0x594>)
 8001990:	4694      	mov	ip, r2
 8001992:	4463      	add	r3, ip
 8001994:	881a      	ldrh	r2, [r3, #0]
 8001996:	211e      	movs	r1, #30
 8001998:	187b      	adds	r3, r7, r1
 800199a:	0592      	lsls	r2, r2, #22
 800199c:	0d92      	lsrs	r2, r2, #22
 800199e:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00a      	beq.n	80019be <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6959      	ldr	r1, [r3, #20]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	895a      	ldrh	r2, [r3, #10]
 80019b4:	231e      	movs	r3, #30
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	f002 fe10 	bl	80045de <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	001a      	movs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	18d3      	adds	r3, r2, r3
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <PCD_EP_ISR_Handler+0x598>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	b29c      	uxth	r4, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	001a      	movs	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	18d3      	adds	r3, r2, r3
 80019e4:	4a4c      	ldr	r2, [pc, #304]	; (8001b18 <PCD_EP_ISR_Handler+0x59c>)
 80019e6:	4322      	orrs	r2, r4
 80019e8:	b292      	uxth	r2, r2
 80019ea:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	211e      	movs	r1, #30
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	18d2      	adds	r2, r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	18d2      	adds	r2, r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <PCD_EP_ISR_Handler+0x4a4>
 8001a12:	231e      	movs	r3, #30
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	881a      	ldrh	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <PCD_EP_ISR_Handler+0x4b4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	0011      	movs	r1, r2
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f006 ff1c 	bl	8008866 <HAL_PCD_DataOutStageCallback>
 8001a2e:	e008      	b.n	8001a42 <PCD_EP_ISR_Handler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	7819      	ldrb	r1, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fc49 	bl	80012d4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a42:	2312      	movs	r3, #18
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d04f      	beq.n	8001aee <PCD_EP_ISR_Handler+0x572>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a4e:	2115      	movs	r1, #21
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	015b      	lsls	r3, r3, #5
 8001a56:	3328      	adds	r3, #40	; 0x28
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	18d3      	adds	r3, r2, r3
 8001a5c:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	001a      	movs	r2, r3
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	18d3      	adds	r3, r2, r3
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <PCD_EP_ISR_Handler+0x5a0>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	b29c      	uxth	r4, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	18d3      	adds	r3, r2, r3
 8001a84:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <PCD_EP_ISR_Handler+0x5a4>)
 8001a86:	4322      	orrs	r2, r4
 8001a88:	b292      	uxth	r2, r2
 8001a8a:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2250      	movs	r2, #80	; 0x50
 8001a92:	5a9b      	ldrh	r3, [r3, r2]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	001a      	movs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	18d2      	adds	r2, r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	18d3      	adds	r3, r2, r3
 8001aa6:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <PCD_EP_ISR_Handler+0x590>)
 8001aa8:	4694      	mov	ip, r2
 8001aaa:	4463      	add	r3, ip
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	059b      	lsls	r3, r3, #22
 8001ab0:	0d9a      	lsrs	r2, r3, #22
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	18d2      	adds	r2, r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <PCD_EP_ISR_Handler+0x560>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f006 fee3 	bl	80088a0 <HAL_PCD_DataInStageCallback>
 8001ada:	e008      	b.n	8001aee <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	7819      	ldrb	r1, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fc49 	bl	8001380 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2244      	movs	r2, #68	; 0x44
 8001af4:	5a9b      	ldrh	r3, [r3, r2]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	da00      	bge.n	8001b00 <PCD_EP_ISR_Handler+0x584>
 8001afe:	e542      	b.n	8001586 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b009      	add	sp, #36	; 0x24
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	00000402 	.word	0x00000402
 8001b10:	00000406 	.word	0x00000406
 8001b14:	ffff8f8f 	.word	0xffff8f8f
 8001b18:	ffff80c0 	.word	0xffff80c0
 8001b1c:	ffff8f0f 	.word	0xffff8f0f
 8001b20:	ffff8000 	.word	0xffff8000

08001b24 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	0008      	movs	r0, r1
 8001b2e:	0011      	movs	r1, r2
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	240a      	movs	r4, #10
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	1c02      	adds	r2, r0, #0
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	1c0a      	adds	r2, r1, #0
 8001b40:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b50:	230a      	movs	r3, #10
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	2207      	movs	r2, #7
 8001b58:	4013      	ands	r3, r2
 8001b5a:	015b      	lsls	r3, r3, #5
 8001b5c:	3328      	adds	r3, #40	; 0x28
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	18d3      	adds	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e008      	b.n	8001b78 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b66:	230a      	movs	r3, #10
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	015b      	lsls	r3, r3, #5
 8001b6e:	3329      	adds	r3, #41	; 0x29
 8001b70:	33ff      	adds	r3, #255	; 0xff
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	18d3      	adds	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001b78:	2308      	movs	r3, #8
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2200      	movs	r2, #0
 8001b86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	80da      	strh	r2, [r3, #6]
 8001b90:	e00b      	b.n	8001baa <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2201      	movs	r2, #1
 8001b96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0c1b      	lsrs	r3, r3, #16
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b007      	add	sp, #28
 8001bb2:	bd90      	pop	{r4, r7, pc}

08001bb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	239a      	movs	r3, #154	; 0x9a
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	2101      	movs	r1, #1
 8001bca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	2398      	movs	r3, #152	; 0x98
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2254      	movs	r2, #84	; 0x54
 8001bda:	5a9b      	ldrh	r3, [r3, r2]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2201      	movs	r2, #1
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b299      	uxth	r1, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2254      	movs	r2, #84	; 0x54
 8001be8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2254      	movs	r2, #84	; 0x54
 8001bee:	5a9b      	ldrh	r3, [r3, r2]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b299      	uxth	r1, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2254      	movs	r2, #84	; 0x54
 8001bfc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b004      	add	sp, #16
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	000a      	movs	r2, r1
 8001c12:	1cfb      	adds	r3, r7, #3
 8001c14:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f000 fb76 	bl	8002320 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d100      	bne.n	8001c40 <HAL_RCC_OscConfig+0x20>
 8001c3e:	e08e      	b.n	8001d5e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c40:	4bc5      	ldr	r3, [pc, #788]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	220c      	movs	r2, #12
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d00e      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c4c:	4bc2      	ldr	r3, [pc, #776]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	220c      	movs	r2, #12
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d117      	bne.n	8001c88 <HAL_RCC_OscConfig+0x68>
 8001c58:	4bbf      	ldr	r3, [pc, #764]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	23c0      	movs	r3, #192	; 0xc0
 8001c5e:	025b      	lsls	r3, r3, #9
 8001c60:	401a      	ands	r2, r3
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d10e      	bne.n	8001c88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6a:	4bbb      	ldr	r3, [pc, #748]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	029b      	lsls	r3, r3, #10
 8001c72:	4013      	ands	r3, r2
 8001c74:	d100      	bne.n	8001c78 <HAL_RCC_OscConfig+0x58>
 8001c76:	e071      	b.n	8001d5c <HAL_RCC_OscConfig+0x13c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d000      	beq.n	8001c82 <HAL_RCC_OscConfig+0x62>
 8001c80:	e06c      	b.n	8001d5c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f000 fb4c 	bl	8002320 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x80>
 8001c90:	4bb1      	ldr	r3, [pc, #708]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4bb0      	ldr	r3, [pc, #704]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	0249      	lsls	r1, r1, #9
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e02f      	b.n	8001d00 <HAL_RCC_OscConfig+0xe0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0xa2>
 8001ca8:	4bab      	ldr	r3, [pc, #684]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4baa      	ldr	r3, [pc, #680]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cae:	49ab      	ldr	r1, [pc, #684]	; (8001f5c <HAL_RCC_OscConfig+0x33c>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	4ba8      	ldr	r3, [pc, #672]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4ba7      	ldr	r3, [pc, #668]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cba:	49a9      	ldr	r1, [pc, #676]	; (8001f60 <HAL_RCC_OscConfig+0x340>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e01e      	b.n	8001d00 <HAL_RCC_OscConfig+0xe0>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xc8>
 8001cca:	4ba3      	ldr	r3, [pc, #652]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4ba2      	ldr	r3, [pc, #648]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	02c9      	lsls	r1, r1, #11
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b9f      	ldr	r3, [pc, #636]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b9e      	ldr	r3, [pc, #632]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	0249      	lsls	r1, r1, #9
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xe0>
 8001ce8:	4b9b      	ldr	r3, [pc, #620]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b9a      	ldr	r3, [pc, #616]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cee:	499b      	ldr	r1, [pc, #620]	; (8001f5c <HAL_RCC_OscConfig+0x33c>)
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	4b98      	ldr	r3, [pc, #608]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b97      	ldr	r3, [pc, #604]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	4999      	ldr	r1, [pc, #612]	; (8001f60 <HAL_RCC_OscConfig+0x340>)
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d014      	beq.n	8001d32 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe fd1c 	bl	8000744 <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d12:	f7fe fd17 	bl	8000744 <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b64      	cmp	r3, #100	; 0x64
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e2fd      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	029b      	lsls	r3, r3, #10
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0xf2>
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7fe fd07 	bl	8000744 <HAL_GetTick>
 8001d36:	0003      	movs	r3, r0
 8001d38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7fe fd02 	bl	8000744 <HAL_GetTick>
 8001d40:	0002      	movs	r2, r0
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e2e8      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b82      	ldr	r3, [pc, #520]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	029b      	lsls	r3, r3, #10
 8001d56:	4013      	ands	r3, r2
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x11c>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d100      	bne.n	8001d6a <HAL_RCC_OscConfig+0x14a>
 8001d68:	e06c      	b.n	8001e44 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d6a:	4b7b      	ldr	r3, [pc, #492]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	220c      	movs	r2, #12
 8001d70:	4013      	ands	r3, r2
 8001d72:	d00e      	beq.n	8001d92 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d74:	4b78      	ldr	r3, [pc, #480]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	220c      	movs	r2, #12
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d11f      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1a0>
 8001d80:	4b75      	ldr	r3, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	23c0      	movs	r3, #192	; 0xc0
 8001d86:	025b      	lsls	r3, r3, #9
 8001d88:	401a      	ands	r2, r3
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b71      	ldr	r3, [pc, #452]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_OscConfig+0x188>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e2bb      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	22f8      	movs	r2, #248	; 0xf8
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00da      	lsls	r2, r3, #3
 8001db8:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e041      	b.n	8001e44 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d024      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b62      	ldr	r3, [pc, #392]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fcb6 	bl	8000744 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dde:	f7fe fcb1 	bl	8000744 <HAL_GetTick>
 8001de2:	0002      	movs	r2, r0
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e297      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2202      	movs	r2, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	d0f1      	beq.n	8001dde <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	22f8      	movs	r2, #248	; 0xf8
 8001e00:	4393      	bics	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00da      	lsls	r2, r3, #3
 8001e0a:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e018      	b.n	8001e44 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e12:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	438a      	bics	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fc91 	bl	8000744 <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e28:	f7fe fc8c 	bl	8000744 <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e272      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d1f1      	bne.n	8001e28 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d036      	beq.n	8001ebc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7fe fc6f 	bl	8000744 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7fe fc6a 	bl	8000744 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e250      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	2202      	movs	r2, #2
 8001e84:	4013      	ands	r3, r2
 8001e86:	d0f1      	beq.n	8001e6c <HAL_RCC_OscConfig+0x24c>
 8001e88:	e018      	b.n	8001ebc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	438a      	bics	r2, r1
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7fe fc55 	bl	8000744 <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7fe fc50 	bl	8000744 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e236      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d1f1      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d100      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2a8>
 8001ec6:	e0b5      	b.n	8002034 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec8:	231f      	movs	r3, #31
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	055b      	lsls	r3, r3, #21
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d111      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0549      	lsls	r1, r1, #21
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	61da      	str	r2, [r3, #28]
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	055b      	lsls	r3, r3, #21
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ef8:	231f      	movs	r3, #31
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_RCC_OscConfig+0x344>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d11a      	bne.n	8001f42 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x344>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_RCC_OscConfig+0x344>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0049      	lsls	r1, r1, #1
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fc13 	bl	8000744 <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f24:	f7fe fc0e 	bl	8000744 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1f4      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x344>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10e      	bne.n	8001f68 <HAL_RCC_OscConfig+0x348>
 8001f4a:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
 8001f4e:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <HAL_RCC_OscConfig+0x338>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	430a      	orrs	r2, r1
 8001f54:	621a      	str	r2, [r3, #32]
 8001f56:	e035      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3a4>
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	fffeffff 	.word	0xfffeffff
 8001f60:	fffbffff 	.word	0xfffbffff
 8001f64:	40007000 	.word	0x40007000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10c      	bne.n	8001f8a <HAL_RCC_OscConfig+0x36a>
 8001f70:	4bca      	ldr	r3, [pc, #808]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	4bc9      	ldr	r3, [pc, #804]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	438a      	bics	r2, r1
 8001f7a:	621a      	str	r2, [r3, #32]
 8001f7c:	4bc7      	ldr	r3, [pc, #796]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	4bc6      	ldr	r3, [pc, #792]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001f82:	2104      	movs	r1, #4
 8001f84:	438a      	bics	r2, r1
 8001f86:	621a      	str	r2, [r3, #32]
 8001f88:	e01c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3a4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x38c>
 8001f92:	4bc2      	ldr	r3, [pc, #776]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001f94:	6a1a      	ldr	r2, [r3, #32]
 8001f96:	4bc1      	ldr	r3, [pc, #772]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001f98:	2104      	movs	r1, #4
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	621a      	str	r2, [r3, #32]
 8001f9e:	4bbf      	ldr	r3, [pc, #764]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	4bbe      	ldr	r3, [pc, #760]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	621a      	str	r2, [r3, #32]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3a4>
 8001fac:	4bbb      	ldr	r3, [pc, #748]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001fae:	6a1a      	ldr	r2, [r3, #32]
 8001fb0:	4bba      	ldr	r3, [pc, #744]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	621a      	str	r2, [r3, #32]
 8001fb8:	4bb8      	ldr	r3, [pc, #736]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001fba:	6a1a      	ldr	r2, [r3, #32]
 8001fbc:	4bb7      	ldr	r3, [pc, #732]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d014      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe fbba 	bl	8000744 <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	e009      	b.n	8001fea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fbb5 	bl	8000744 <HAL_GetTick>
 8001fda:	0002      	movs	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4aaf      	ldr	r2, [pc, #700]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e19a      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fea:	4bac      	ldr	r3, [pc, #688]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x3b6>
 8001ff4:	e013      	b.n	800201e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fba5 	bl	8000744 <HAL_GetTick>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffe:	e009      	b.n	8002014 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7fe fba0 	bl	8000744 <HAL_GetTick>
 8002004:	0002      	movs	r2, r0
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	4aa5      	ldr	r2, [pc, #660]	; (80022a0 <HAL_RCC_OscConfig+0x680>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e185      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	4ba1      	ldr	r3, [pc, #644]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800201e:	231f      	movs	r3, #31
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002028:	4b9c      	ldr	r3, [pc, #624]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	4b9b      	ldr	r3, [pc, #620]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800202e:	499d      	ldr	r1, [pc, #628]	; (80022a4 <HAL_RCC_OscConfig+0x684>)
 8002030:	400a      	ands	r2, r1
 8002032:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2210      	movs	r2, #16
 800203a:	4013      	ands	r3, r2
 800203c:	d063      	beq.n	8002106 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d12a      	bne.n	800209c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002046:	4b95      	ldr	r3, [pc, #596]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204a:	4b94      	ldr	r3, [pc, #592]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800204c:	2104      	movs	r1, #4
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002052:	4b92      	ldr	r3, [pc, #584]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002056:	4b91      	ldr	r3, [pc, #580]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002058:	2101      	movs	r1, #1
 800205a:	430a      	orrs	r2, r1
 800205c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7fe fb71 	bl	8000744 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002068:	f7fe fb6c 	bl	8000744 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e152      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800207a:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	2202      	movs	r2, #2
 8002080:	4013      	ands	r3, r2
 8002082:	d0f1      	beq.n	8002068 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002084:	4b85      	ldr	r3, [pc, #532]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	22f8      	movs	r2, #248	; 0xf8
 800208a:	4393      	bics	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	00da      	lsls	r2, r3, #3
 8002094:	4b81      	ldr	r3, [pc, #516]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002096:	430a      	orrs	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
 800209a:	e034      	b.n	8002106 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	3305      	adds	r3, #5
 80020a2:	d111      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020a4:	4b7d      	ldr	r3, [pc, #500]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80020a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a8:	4b7c      	ldr	r3, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80020aa:	2104      	movs	r1, #4
 80020ac:	438a      	bics	r2, r1
 80020ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020b0:	4b7a      	ldr	r3, [pc, #488]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80020b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b4:	22f8      	movs	r2, #248	; 0xf8
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	00da      	lsls	r2, r3, #3
 80020c0:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
 80020c6:	e01e      	b.n	8002106 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020c8:	4b74      	ldr	r3, [pc, #464]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80020ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020cc:	4b73      	ldr	r3, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80020ce:	2104      	movs	r1, #4
 80020d0:	430a      	orrs	r2, r1
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020d4:	4b71      	ldr	r3, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80020d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d8:	4b70      	ldr	r3, [pc, #448]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80020da:	2101      	movs	r1, #1
 80020dc:	438a      	bics	r2, r1
 80020de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e0:	f7fe fb30 	bl	8000744 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020ea:	f7fe fb2b 	bl	8000744 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e111      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020fc:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	2202      	movs	r2, #2
 8002102:	4013      	ands	r3, r2
 8002104:	d1f1      	bne.n	80020ea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2220      	movs	r2, #32
 800210c:	4013      	ands	r3, r2
 800210e:	d05c      	beq.n	80021ca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002110:	4b62      	ldr	r3, [pc, #392]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	220c      	movs	r2, #12
 8002116:	4013      	ands	r3, r2
 8002118:	2b0c      	cmp	r3, #12
 800211a:	d00e      	beq.n	800213a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800211c:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	220c      	movs	r2, #12
 8002122:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002124:	2b08      	cmp	r3, #8
 8002126:	d114      	bne.n	8002152 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002128:	4b5c      	ldr	r3, [pc, #368]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	23c0      	movs	r3, #192	; 0xc0
 800212e:	025b      	lsls	r3, r3, #9
 8002130:	401a      	ands	r2, r3
 8002132:	23c0      	movs	r3, #192	; 0xc0
 8002134:	025b      	lsls	r3, r3, #9
 8002136:	429a      	cmp	r2, r3
 8002138:	d10b      	bne.n	8002152 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800213a:	4b58      	ldr	r3, [pc, #352]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800213c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	025b      	lsls	r3, r3, #9
 8002142:	4013      	ands	r3, r2
 8002144:	d040      	beq.n	80021c8 <HAL_RCC_OscConfig+0x5a8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d03c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0e6      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d01b      	beq.n	8002192 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800215a:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800215c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215e:	4b4f      	ldr	r3, [pc, #316]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	0249      	lsls	r1, r1, #9
 8002164:	430a      	orrs	r2, r1
 8002166:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe faec 	bl	8000744 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002172:	f7fe fae7 	bl	8000744 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0cd      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002184:	4b45      	ldr	r3, [pc, #276]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	025b      	lsls	r3, r3, #9
 800218c:	4013      	ands	r3, r2
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x552>
 8002190:	e01b      	b.n	80021ca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002192:	4b42      	ldr	r3, [pc, #264]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002198:	4943      	ldr	r1, [pc, #268]	; (80022a8 <HAL_RCC_OscConfig+0x688>)
 800219a:	400a      	ands	r2, r1
 800219c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe fad1 	bl	8000744 <HAL_GetTick>
 80021a2:	0003      	movs	r3, r0
 80021a4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a8:	f7fe facc 	bl	8000744 <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0b2      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80021bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	025b      	lsls	r3, r3, #9
 80021c2:	4013      	ands	r3, r2
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x588>
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021c8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d100      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5b4>
 80021d2:	e0a4      	b.n	800231e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	220c      	movs	r2, #12
 80021da:	4013      	ands	r3, r2
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d100      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5c2>
 80021e0:	e078      	b.n	80022d4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d14c      	bne.n	8002284 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b2c      	ldr	r3, [pc, #176]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 80021f0:	492e      	ldr	r1, [pc, #184]	; (80022ac <HAL_RCC_OscConfig+0x68c>)
 80021f2:	400a      	ands	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe faa5 	bl	8000744 <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe faa0 	bl	8000744 <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e086      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	049b      	lsls	r3, r3, #18
 800221a:	4013      	ands	r3, r2
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221e:	4b1f      	ldr	r3, [pc, #124]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	220f      	movs	r2, #15
 8002224:	4393      	bics	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800222e:	430a      	orrs	r2, r1
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_RCC_OscConfig+0x690>)
 8002238:	4013      	ands	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	431a      	orrs	r2, r3
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0449      	lsls	r1, r1, #17
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fa73 	bl	8000744 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe fa6e 	bl	8000744 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e054      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	049b      	lsls	r3, r3, #18
 800227e:	4013      	ands	r3, r2
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x644>
 8002282:	e04c      	b.n	800231e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <HAL_RCC_OscConfig+0x67c>)
 800228a:	4908      	ldr	r1, [pc, #32]	; (80022ac <HAL_RCC_OscConfig+0x68c>)
 800228c:	400a      	ands	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe fa58 	bl	8000744 <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x6a6>
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	40021000 	.word	0x40021000
 80022a0:	00001388 	.word	0x00001388
 80022a4:	efffffff 	.word	0xefffffff
 80022a8:	fffeffff 	.word	0xfffeffff
 80022ac:	feffffff 	.word	0xfeffffff
 80022b0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe fa46 	bl	8000744 <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e02c      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_RCC_OscConfig+0x708>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	049b      	lsls	r3, r3, #18
 80022ce:	4013      	ands	r3, r2
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x694>
 80022d2:	e024      	b.n	800231e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e01f      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_OscConfig+0x708>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCC_OscConfig+0x708>)
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	23c0      	movs	r3, #192	; 0xc0
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	401a      	ands	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d10e      	bne.n	800231a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	220f      	movs	r2, #15
 8002300:	401a      	ands	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d107      	bne.n	800231a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	23f0      	movs	r3, #240	; 0xf0
 800230e:	039b      	lsls	r3, r3, #14
 8002310:	401a      	ands	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b008      	add	sp, #32
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0bf      	b.n	80024c0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b61      	ldr	r3, [pc, #388]	; (80024c8 <HAL_RCC_ClockConfig+0x19c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2201      	movs	r2, #1
 8002346:	4013      	ands	r3, r2
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d911      	bls.n	8002372 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b5e      	ldr	r3, [pc, #376]	; (80024c8 <HAL_RCC_ClockConfig+0x19c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2201      	movs	r2, #1
 8002354:	4393      	bics	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <HAL_RCC_ClockConfig+0x19c>)
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x19c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0a6      	b.n	80024c0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2202      	movs	r2, #2
 8002378:	4013      	ands	r3, r2
 800237a:	d015      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2204      	movs	r2, #4
 8002382:	4013      	ands	r3, r2
 8002384:	d006      	beq.n	8002394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002386:	4b51      	ldr	r3, [pc, #324]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4b50      	ldr	r3, [pc, #320]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 800238c:	21e0      	movs	r1, #224	; 0xe0
 800238e:	00c9      	lsls	r1, r1, #3
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	22f0      	movs	r2, #240	; 0xf0
 800239a:	4393      	bics	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 80023a4:	430a      	orrs	r2, r1
 80023a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	d04c      	beq.n	800244c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b44      	ldr	r3, [pc, #272]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	029b      	lsls	r3, r3, #10
 80023c2:	4013      	ands	r3, r2
 80023c4:	d120      	bne.n	8002408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e07a      	b.n	80024c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	049b      	lsls	r3, r3, #18
 80023da:	4013      	ands	r3, r2
 80023dc:	d114      	bne.n	8002408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06e      	b.n	80024c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023ea:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 80023ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	025b      	lsls	r3, r3, #9
 80023f2:	4013      	ands	r3, r2
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e062      	b.n	80024c0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	4b34      	ldr	r3, [pc, #208]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2202      	movs	r2, #2
 8002400:	4013      	ands	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e05b      	b.n	80024c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002408:	4b30      	ldr	r3, [pc, #192]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2203      	movs	r2, #3
 800240e:	4393      	bics	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 8002418:	430a      	orrs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800241c:	f7fe f992 	bl	8000744 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002424:	e009      	b.n	800243a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f7fe f98d 	bl	8000744 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <HAL_RCC_ClockConfig+0x1a4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e042      	b.n	80024c0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	220c      	movs	r2, #12
 8002440:	401a      	ands	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1ec      	bne.n	8002426 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_RCC_ClockConfig+0x19c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2201      	movs	r2, #1
 8002452:	4013      	ands	r3, r2
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d211      	bcs.n	800247e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_RCC_ClockConfig+0x19c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2201      	movs	r2, #1
 8002460:	4393      	bics	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_RCC_ClockConfig+0x19c>)
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x19c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e020      	b.n	80024c0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2204      	movs	r2, #4
 8002484:	4013      	ands	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <HAL_RCC_ClockConfig+0x1a8>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 8002498:	430a      	orrs	r2, r1
 800249a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800249c:	f000 f820 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 80024a0:	0001      	movs	r1, r0
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1a0>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	220f      	movs	r2, #15
 80024aa:	4013      	ands	r3, r2
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_RCC_ClockConfig+0x1ac>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	000a      	movs	r2, r1
 80024b2:	40da      	lsrs	r2, r3
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1b0>)
 80024b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7fe f871 	bl	80005a0 <HAL_InitTick>
  
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40021000 	.word	0x40021000
 80024d0:	00001388 	.word	0x00001388
 80024d4:	fffff8ff 	.word	0xfffff8ff
 80024d8:	08008ff4 	.word	0x08008ff4
 80024dc:	20000000 	.word	0x20000000

080024e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b08f      	sub	sp, #60	; 0x3c
 80024e4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024e6:	2314      	movs	r3, #20
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	4a37      	ldr	r2, [pc, #220]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xe8>)
 80024ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024ee:	c313      	stmia	r3!, {r0, r1, r4}
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	4a35      	ldr	r2, [pc, #212]	; (80025cc <HAL_RCC_GetSysClockFreq+0xec>)
 80024f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024fa:	c313      	stmia	r3!, {r0, r1, r4}
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002514:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	220c      	movs	r2, #12
 800251e:	4013      	ands	r3, r2
 8002520:	2b08      	cmp	r3, #8
 8002522:	d006      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x52>
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d043      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0xd0>
 8002528:	2b04      	cmp	r3, #4
 800252a:	d144      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002530:	e044      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	0c9b      	lsrs	r3, r3, #18
 8002536:	220f      	movs	r2, #15
 8002538:	4013      	ands	r3, r2
 800253a:	2214      	movs	r2, #20
 800253c:	18ba      	adds	r2, r7, r2
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	220f      	movs	r2, #15
 8002548:	4013      	ands	r3, r2
 800254a:	1d3a      	adds	r2, r7, #4
 800254c:	5cd3      	ldrb	r3, [r2, r3]
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002552:	23c0      	movs	r3, #192	; 0xc0
 8002554:	025b      	lsls	r3, r3, #9
 8002556:	401a      	ands	r2, r3
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	429a      	cmp	r2, r3
 800255e:	d109      	bne.n	8002574 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002562:	481c      	ldr	r0, [pc, #112]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002564:	f7fd fdd0 	bl	8000108 <__udivsi3>
 8002568:	0003      	movs	r3, r0
 800256a:	001a      	movs	r2, r3
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	4353      	muls	r3, r2
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
 8002572:	e01a      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002576:	23c0      	movs	r3, #192	; 0xc0
 8002578:	025b      	lsls	r3, r3, #9
 800257a:	401a      	ands	r2, r3
 800257c:	23c0      	movs	r3, #192	; 0xc0
 800257e:	025b      	lsls	r3, r3, #9
 8002580:	429a      	cmp	r2, r3
 8002582:	d109      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002586:	4814      	ldr	r0, [pc, #80]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002588:	f7fd fdbe 	bl	8000108 <__udivsi3>
 800258c:	0003      	movs	r3, r0
 800258e:	001a      	movs	r2, r3
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	4353      	muls	r3, r2
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
 8002596:	e008      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800259a:	480e      	ldr	r0, [pc, #56]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800259c:	f7fd fdb4 	bl	8000108 <__udivsi3>
 80025a0:	0003      	movs	r3, r0
 80025a2:	001a      	movs	r2, r3
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	4353      	muls	r3, r2
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ae:	e005      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b4:	e002      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b00f      	add	sp, #60	; 0x3c
 80025c4:	bd90      	pop	{r4, r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	08008f2c 	.word	0x08008f2c
 80025cc:	08008f3c 	.word	0x08008f3c
 80025d0:	40021000 	.word	0x40021000
 80025d4:	007a1200 	.word	0x007a1200
 80025d8:	02dc6c00 	.word	0x02dc6c00

080025dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b02      	ldr	r3, [pc, #8]	; (80025ec <HAL_RCC_GetHCLKFreq+0x10>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20000000 	.word	0x20000000

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025f4:	f7ff fff2 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025f8:	0001      	movs	r1, r0
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	2207      	movs	r2, #7
 8002602:	4013      	ands	r3, r2
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	40d9      	lsrs	r1, r3
 800260a:	000b      	movs	r3, r1
}    
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	40021000 	.word	0x40021000
 8002618:	08009004 	.word	0x08009004

0800261c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_RCC_GetClockConfig+0x4c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_GetClockConfig+0x4c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	22f0      	movs	r2, #240	; 0xf0
 800263e:	401a      	ands	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_RCC_GetClockConfig+0x4c>)
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	23e0      	movs	r3, #224	; 0xe0
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	401a      	ands	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCC_GetClockConfig+0x50>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	401a      	ands	r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	40021000 	.word	0x40021000
 800266c:	40022000 	.word	0x40022000

08002670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	025b      	lsls	r3, r3, #9
 8002688:	4013      	ands	r3, r2
 800268a:	d100      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800268c:	e08f      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2317      	movs	r3, #23
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b6f      	ldr	r3, [pc, #444]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	055b      	lsls	r3, r3, #21
 800269e:	4013      	ands	r3, r2
 80026a0:	d111      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b6c      	ldr	r3, [pc, #432]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	4b6b      	ldr	r3, [pc, #428]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0549      	lsls	r1, r1, #21
 80026ac:	430a      	orrs	r2, r1
 80026ae:	61da      	str	r2, [r3, #28]
 80026b0:	4b68      	ldr	r3, [pc, #416]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	055b      	lsls	r3, r3, #21
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026be:	2317      	movs	r3, #23
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b64      	ldr	r3, [pc, #400]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	d11a      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	4b61      	ldr	r3, [pc, #388]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b60      	ldr	r3, [pc, #384]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0049      	lsls	r1, r1, #1
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e0:	f7fe f830 	bl	8000744 <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7fe f82b 	bl	8000744 <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	; 0x64
 80026f6:	d901      	bls.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e0a6      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b56      	ldr	r3, [pc, #344]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4013      	ands	r3, r2
 8002706:	d0f0      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002708:	4b52      	ldr	r3, [pc, #328]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	23c0      	movs	r3, #192	; 0xc0
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4013      	ands	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d034      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	23c0      	movs	r3, #192	; 0xc0
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4013      	ands	r3, r2
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	429a      	cmp	r2, r3
 8002728:	d02c      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800272a:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002734:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002736:	6a1a      	ldr	r2, [r3, #32]
 8002738:	4b46      	ldr	r3, [pc, #280]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	0249      	lsls	r1, r1, #9
 800273e:	430a      	orrs	r2, r1
 8002740:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002742:	4b44      	ldr	r3, [pc, #272]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002748:	4945      	ldr	r1, [pc, #276]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800274a:	400a      	ands	r2, r1
 800274c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	4013      	ands	r3, r2
 800275a:	d013      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fd fff2 	bl	8000744 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	e009      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fd ffed 	bl	8000744 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	4a3c      	ldr	r2, [pc, #240]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e067      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	2202      	movs	r2, #2
 8002780:	4013      	ands	r3, r2
 8002782:	d0f0      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002784:	4b33      	ldr	r3, [pc, #204]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4a34      	ldr	r2, [pc, #208]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800278a:	4013      	ands	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002794:	430a      	orrs	r2, r1
 8002796:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002798:	2317      	movs	r3, #23
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027a8:	492f      	ldr	r1, [pc, #188]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2201      	movs	r2, #1
 80027b4:	4013      	ands	r3, r2
 80027b6:	d009      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b8:	4b26      	ldr	r3, [pc, #152]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	2203      	movs	r2, #3
 80027be:	4393      	bics	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2202      	movs	r2, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d6:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a24      	ldr	r2, [pc, #144]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2220      	movs	r2, #32
 80027f0:	4013      	ands	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	2210      	movs	r2, #16
 80027fa:	4393      	bics	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002804:	430a      	orrs	r2, r1
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	029b      	lsls	r3, r3, #10
 8002810:	4013      	ands	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	4393      	bics	r3, r2
 800281c:	0019      	movs	r1, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002824:	430a      	orrs	r2, r1
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4013      	ands	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	2240      	movs	r2, #64	; 0x40
 800283a:	4393      	bics	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002844:	430a      	orrs	r2, r1
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b006      	add	sp, #24
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
 800285c:	fffffcff 	.word	0xfffffcff
 8002860:	fffeffff 	.word	0xfffeffff
 8002864:	00001388 	.word	0x00001388
 8002868:	efffffff 	.word	0xefffffff
 800286c:	fffcffff 	.word	0xfffcffff

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e01e      	b.n	80028c0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	223d      	movs	r2, #61	; 0x3d
 8002886:	5c9b      	ldrb	r3, [r3, r2]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	223c      	movs	r2, #60	; 0x3c
 8002892:	2100      	movs	r1, #0
 8002894:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f815 	bl	80028c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	223d      	movs	r2, #61	; 0x3d
 80028a2:	2102      	movs	r1, #2
 80028a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	0019      	movs	r1, r3
 80028b0:	0010      	movs	r0, r2
 80028b2:	f000 f969 	bl	8002b88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	223d      	movs	r2, #61	; 0x3d
 80028ba:	2101      	movs	r1, #1
 80028bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2101      	movs	r1, #1
 80028ec:	430a      	orrs	r2, r1
 80028ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2207      	movs	r2, #7
 80028f8:	4013      	ands	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d007      	beq.n	8002912 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b004      	add	sp, #16
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d124      	bne.n	800297c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d11d      	bne.n	800297c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2203      	movs	r2, #3
 8002946:	4252      	negs	r2, r2
 8002948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2203      	movs	r2, #3
 8002958:	4013      	ands	r3, r2
 800295a:	d004      	beq.n	8002966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 f8fa 	bl	8002b58 <HAL_TIM_IC_CaptureCallback>
 8002964:	e007      	b.n	8002976 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	f000 f8ed 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 f8f9 	bl	8002b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2204      	movs	r2, #4
 8002984:	4013      	ands	r3, r2
 8002986:	2b04      	cmp	r3, #4
 8002988:	d125      	bne.n	80029d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2204      	movs	r2, #4
 8002992:	4013      	ands	r3, r2
 8002994:	2b04      	cmp	r3, #4
 8002996:	d11e      	bne.n	80029d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2205      	movs	r2, #5
 800299e:	4252      	negs	r2, r2
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	23c0      	movs	r3, #192	; 0xc0
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4013      	ands	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f8cd 	bl	8002b58 <HAL_TIM_IC_CaptureCallback>
 80029be:	e007      	b.n	80029d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 f8c0 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f8cc 	bl	8002b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2208      	movs	r2, #8
 80029de:	4013      	ands	r3, r2
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d124      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2208      	movs	r2, #8
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d11d      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2209      	movs	r2, #9
 80029f8:	4252      	negs	r2, r2
 80029fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2204      	movs	r2, #4
 8002a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	2203      	movs	r2, #3
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 f8a1 	bl	8002b58 <HAL_TIM_IC_CaptureCallback>
 8002a16:	e007      	b.n	8002a28 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f894 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 f8a0 	bl	8002b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2210      	movs	r2, #16
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d125      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2210      	movs	r2, #16
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d11e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2211      	movs	r2, #17
 8002a50:	4252      	negs	r2, r2
 8002a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2208      	movs	r2, #8
 8002a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	23c0      	movs	r3, #192	; 0xc0
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4013      	ands	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 f874 	bl	8002b58 <HAL_TIM_IC_CaptureCallback>
 8002a70:	e007      	b.n	8002a82 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f867 	bl	8002b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f873 	bl	8002b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10f      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d108      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4252      	negs	r2, r2
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fd fce7 	bl	8000484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d10f      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d108      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2281      	movs	r2, #129	; 0x81
 8002ad8:	4252      	negs	r2, r2
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 f8da 	bl	8002c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2240      	movs	r2, #64	; 0x40
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d10f      	bne.n	8002b12 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2240      	movs	r2, #64	; 0x40
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d108      	bne.n	8002b12 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2241      	movs	r2, #65	; 0x41
 8002b06:	4252      	negs	r2, r2
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f833 	bl	8002b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d10f      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d108      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2221      	movs	r2, #33	; 0x21
 8002b34:	4252      	negs	r2, r2
 8002b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f8a4 	bl	8002c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b002      	add	sp, #8
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <TIM_Base_SetConfig+0xe4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d008      	beq.n	8002bb2 <TIM_Base_SetConfig+0x2a>
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	05db      	lsls	r3, r3, #23
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d003      	beq.n	8002bb2 <TIM_Base_SetConfig+0x2a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a30      	ldr	r2, [pc, #192]	; (8002c70 <TIM_Base_SetConfig+0xe8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d108      	bne.n	8002bc4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2270      	movs	r2, #112	; 0x70
 8002bb6:	4393      	bics	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a29      	ldr	r2, [pc, #164]	; (8002c6c <TIM_Base_SetConfig+0xe4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d018      	beq.n	8002bfe <TIM_Base_SetConfig+0x76>
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	05db      	lsls	r3, r3, #23
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d013      	beq.n	8002bfe <TIM_Base_SetConfig+0x76>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <TIM_Base_SetConfig+0xe8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00f      	beq.n	8002bfe <TIM_Base_SetConfig+0x76>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <TIM_Base_SetConfig+0xec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <TIM_Base_SetConfig+0x76>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <TIM_Base_SetConfig+0xf0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <TIM_Base_SetConfig+0x76>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a22      	ldr	r2, [pc, #136]	; (8002c7c <TIM_Base_SetConfig+0xf4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <TIM_Base_SetConfig+0x76>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <TIM_Base_SetConfig+0xf8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <TIM_Base_SetConfig+0xfc>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	4393      	bics	r3, r2
 8002c16:	001a      	movs	r2, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <TIM_Base_SetConfig+0xe4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0xce>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <TIM_Base_SetConfig+0xf0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0xce>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a0c      	ldr	r2, [pc, #48]	; (8002c7c <TIM_Base_SetConfig+0xf4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0xce>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <TIM_Base_SetConfig+0xf8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d103      	bne.n	8002c5e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	615a      	str	r2, [r3, #20]
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b004      	add	sp, #16
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40002000 	.word	0x40002000
 8002c78:	40014000 	.word	0x40014000
 8002c7c:	40014400 	.word	0x40014400
 8002c80:	40014800 	.word	0x40014800
 8002c84:	fffffcff 	.word	0xfffffcff

08002c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e044      	b.n	8002d44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2270      	movs	r2, #112	; 0x70
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7fd fc1b 	bl	8000508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2224      	movs	r2, #36	; 0x24
 8002cd6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 f830 	bl	8002d50 <UART_SetConfig>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e024      	b.n	8002d44 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f9ef 	bl	80030e8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	490d      	ldr	r1, [pc, #52]	; (8002d4c <HAL_UART_Init+0xa4>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	212a      	movs	r1, #42	; 0x2a
 8002d26:	438a      	bics	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fa87 	bl	8003250 <UART_CheckIdleState>
 8002d42:	0003      	movs	r3, r0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	ffffb7ff 	.word	0xffffb7ff

08002d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d5c:	2317      	movs	r3, #23
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4ac5      	ldr	r2, [pc, #788]	; (8003098 <UART_SetConfig+0x348>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4ac0      	ldr	r2, [pc, #768]	; (800309c <UART_SetConfig+0x34c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4ab7      	ldr	r2, [pc, #732]	; (80030a0 <UART_SetConfig+0x350>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4ab3      	ldr	r2, [pc, #716]	; (80030a4 <UART_SetConfig+0x354>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d125      	bne.n	8002e26 <UART_SetConfig+0xd6>
 8002dda:	4bb3      	ldr	r3, [pc, #716]	; (80030a8 <UART_SetConfig+0x358>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	2203      	movs	r2, #3
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d00f      	beq.n	8002e06 <UART_SetConfig+0xb6>
 8002de6:	d304      	bcc.n	8002df2 <UART_SetConfig+0xa2>
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d011      	beq.n	8002e10 <UART_SetConfig+0xc0>
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d005      	beq.n	8002dfc <UART_SetConfig+0xac>
 8002df0:	e013      	b.n	8002e1a <UART_SetConfig+0xca>
 8002df2:	231f      	movs	r3, #31
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e064      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002dfc:	231f      	movs	r3, #31
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2202      	movs	r2, #2
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	e05f      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002e06:	231f      	movs	r3, #31
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e05a      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002e10:	231f      	movs	r3, #31
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2208      	movs	r2, #8
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e055      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002e1a:	231f      	movs	r3, #31
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2210      	movs	r2, #16
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	e04f      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4aa0      	ldr	r2, [pc, #640]	; (80030ac <UART_SetConfig+0x35c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d132      	bne.n	8002e96 <UART_SetConfig+0x146>
 8002e30:	4b9d      	ldr	r3, [pc, #628]	; (80030a8 <UART_SetConfig+0x358>)
 8002e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e34:	23c0      	movs	r3, #192	; 0xc0
 8002e36:	029b      	lsls	r3, r3, #10
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	0252      	lsls	r2, r2, #9
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d019      	beq.n	8002e76 <UART_SetConfig+0x126>
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	0252      	lsls	r2, r2, #9
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d802      	bhi.n	8002e50 <UART_SetConfig+0x100>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <UART_SetConfig+0x112>
 8002e4e:	e01c      	b.n	8002e8a <UART_SetConfig+0x13a>
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	0292      	lsls	r2, r2, #10
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <UART_SetConfig+0x130>
 8002e58:	22c0      	movs	r2, #192	; 0xc0
 8002e5a:	0292      	lsls	r2, r2, #10
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d005      	beq.n	8002e6c <UART_SetConfig+0x11c>
 8002e60:	e013      	b.n	8002e8a <UART_SetConfig+0x13a>
 8002e62:	231f      	movs	r3, #31
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	e02c      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002e6c:	231f      	movs	r3, #31
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	2202      	movs	r2, #2
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	e027      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002e76:	231f      	movs	r3, #31
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e022      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002e80:	231f      	movs	r3, #31
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2208      	movs	r2, #8
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e01d      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002e8a:	231f      	movs	r3, #31
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2210      	movs	r2, #16
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	e017      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a85      	ldr	r2, [pc, #532]	; (80030b0 <UART_SetConfig+0x360>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d104      	bne.n	8002eaa <UART_SetConfig+0x15a>
 8002ea0:	231f      	movs	r3, #31
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e00d      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a81      	ldr	r2, [pc, #516]	; (80030b4 <UART_SetConfig+0x364>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d104      	bne.n	8002ebe <UART_SetConfig+0x16e>
 8002eb4:	231f      	movs	r3, #31
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e003      	b.n	8002ec6 <UART_SetConfig+0x176>
 8002ebe:	231f      	movs	r3, #31
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d000      	beq.n	8002ed4 <UART_SetConfig+0x184>
 8002ed2:	e07d      	b.n	8002fd0 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8002ed4:	231f      	movs	r3, #31
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d01c      	beq.n	8002f18 <UART_SetConfig+0x1c8>
 8002ede:	dc02      	bgt.n	8002ee6 <UART_SetConfig+0x196>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0x1a0>
 8002ee4:	e04b      	b.n	8002f7e <UART_SetConfig+0x22e>
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d025      	beq.n	8002f36 <UART_SetConfig+0x1e6>
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d037      	beq.n	8002f5e <UART_SetConfig+0x20e>
 8002eee:	e046      	b.n	8002f7e <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef0:	f7ff fb7e 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	005a      	lsls	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	085b      	lsrs	r3, r3, #1
 8002f02:	18d2      	adds	r2, r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	0019      	movs	r1, r3
 8002f0a:	0010      	movs	r0, r2
 8002f0c:	f7fd f8fc 	bl	8000108 <__udivsi3>
 8002f10:	0003      	movs	r3, r0
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	61bb      	str	r3, [r7, #24]
        break;
 8002f16:	e037      	b.n	8002f88 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	4a66      	ldr	r2, [pc, #408]	; (80030b8 <UART_SetConfig+0x368>)
 8002f20:	189a      	adds	r2, r3, r2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	0019      	movs	r1, r3
 8002f28:	0010      	movs	r0, r2
 8002f2a:	f7fd f8ed 	bl	8000108 <__udivsi3>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	61bb      	str	r3, [r7, #24]
        break;
 8002f34:	e028      	b.n	8002f88 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f36:	f7ff fad3 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	005a      	lsls	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	18d2      	adds	r2, r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0019      	movs	r1, r3
 8002f50:	0010      	movs	r0, r2
 8002f52:	f7fd f8d9 	bl	8000108 <__udivsi3>
 8002f56:	0003      	movs	r3, r0
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	61bb      	str	r3, [r7, #24]
        break;
 8002f5c:	e014      	b.n	8002f88 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	2280      	movs	r2, #128	; 0x80
 8002f66:	0252      	lsls	r2, r2, #9
 8002f68:	189a      	adds	r2, r3, r2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	0010      	movs	r0, r2
 8002f72:	f7fd f8c9 	bl	8000108 <__udivsi3>
 8002f76:	0003      	movs	r3, r0
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	61bb      	str	r3, [r7, #24]
        break;
 8002f7c:	e004      	b.n	8002f88 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8002f7e:	2317      	movs	r3, #23
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
        break;
 8002f86:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d91b      	bls.n	8002fc6 <UART_SetConfig+0x276>
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4a4a      	ldr	r2, [pc, #296]	; (80030bc <UART_SetConfig+0x36c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d817      	bhi.n	8002fc6 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	200a      	movs	r0, #10
 8002f9c:	183b      	adds	r3, r7, r0
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2207      	movs	r2, #7
 8002fac:	4013      	ands	r3, r2
 8002fae:	b299      	uxth	r1, r3
 8002fb0:	183b      	adds	r3, r7, r0
 8002fb2:	183a      	adds	r2, r7, r0
 8002fb4:	8812      	ldrh	r2, [r2, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	183a      	adds	r2, r7, r0
 8002fc0:	8812      	ldrh	r2, [r2, #0]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	e082      	b.n	80030cc <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8002fc6:	2317      	movs	r3, #23
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	e07d      	b.n	80030cc <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8002fd0:	231f      	movs	r3, #31
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d01b      	beq.n	8003012 <UART_SetConfig+0x2c2>
 8002fda:	dc02      	bgt.n	8002fe2 <UART_SetConfig+0x292>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <UART_SetConfig+0x29c>
 8002fe0:	e049      	b.n	8003076 <UART_SetConfig+0x326>
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d024      	beq.n	8003030 <UART_SetConfig+0x2e0>
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d035      	beq.n	8003056 <UART_SetConfig+0x306>
 8002fea:	e044      	b.n	8003076 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fec:	f7ff fb00 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	085a      	lsrs	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	18d2      	adds	r2, r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0019      	movs	r1, r3
 8003004:	0010      	movs	r0, r2
 8003006:	f7fd f87f 	bl	8000108 <__udivsi3>
 800300a:	0003      	movs	r3, r0
 800300c:	b29b      	uxth	r3, r3
 800300e:	61bb      	str	r3, [r7, #24]
        break;
 8003010:	e036      	b.n	8003080 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	4a29      	ldr	r2, [pc, #164]	; (80030c0 <UART_SetConfig+0x370>)
 800301a:	189a      	adds	r2, r3, r2
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	0019      	movs	r1, r3
 8003022:	0010      	movs	r0, r2
 8003024:	f7fd f870 	bl	8000108 <__udivsi3>
 8003028:	0003      	movs	r3, r0
 800302a:	b29b      	uxth	r3, r3
 800302c:	61bb      	str	r3, [r7, #24]
        break;
 800302e:	e027      	b.n	8003080 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003030:	f7ff fa56 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8003034:	0003      	movs	r3, r0
 8003036:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	085a      	lsrs	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	18d2      	adds	r2, r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	0019      	movs	r1, r3
 8003048:	0010      	movs	r0, r2
 800304a:	f7fd f85d 	bl	8000108 <__udivsi3>
 800304e:	0003      	movs	r3, r0
 8003050:	b29b      	uxth	r3, r3
 8003052:	61bb      	str	r3, [r7, #24]
        break;
 8003054:	e014      	b.n	8003080 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	2280      	movs	r2, #128	; 0x80
 800305e:	0212      	lsls	r2, r2, #8
 8003060:	189a      	adds	r2, r3, r2
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	0019      	movs	r1, r3
 8003068:	0010      	movs	r0, r2
 800306a:	f7fd f84d 	bl	8000108 <__udivsi3>
 800306e:	0003      	movs	r3, r0
 8003070:	b29b      	uxth	r3, r3
 8003072:	61bb      	str	r3, [r7, #24]
        break;
 8003074:	e004      	b.n	8003080 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8003076:	2317      	movs	r3, #23
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
        break;
 800307e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	d91e      	bls.n	80030c4 <UART_SetConfig+0x374>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <UART_SetConfig+0x36c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d81a      	bhi.n	80030c4 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	e019      	b.n	80030cc <UART_SetConfig+0x37c>
 8003098:	efff69f3 	.word	0xefff69f3
 800309c:	ffffcfff 	.word	0xffffcfff
 80030a0:	fffff4ff 	.word	0xfffff4ff
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40004800 	.word	0x40004800
 80030b4:	40004c00 	.word	0x40004c00
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	0000ffff 	.word	0x0000ffff
 80030c0:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 80030c4:	2317      	movs	r3, #23
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80030d8:	2317      	movs	r3, #23
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	781b      	ldrb	r3, [r3, #0]
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b008      	add	sp, #32
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)

080030e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2201      	movs	r2, #1
 80030f6:	4013      	ands	r3, r2
 80030f8:	d00b      	beq.n	8003112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a4a      	ldr	r2, [pc, #296]	; (800322c <UART_AdvFeatureConfig+0x144>)
 8003102:	4013      	ands	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d00b      	beq.n	8003134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a43      	ldr	r2, [pc, #268]	; (8003230 <UART_AdvFeatureConfig+0x148>)
 8003124:	4013      	ands	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2204      	movs	r2, #4
 800313a:	4013      	ands	r3, r2
 800313c:	d00b      	beq.n	8003156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a3b      	ldr	r2, [pc, #236]	; (8003234 <UART_AdvFeatureConfig+0x14c>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	2208      	movs	r2, #8
 800315c:	4013      	ands	r3, r2
 800315e:	d00b      	beq.n	8003178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a34      	ldr	r2, [pc, #208]	; (8003238 <UART_AdvFeatureConfig+0x150>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	2210      	movs	r2, #16
 800317e:	4013      	ands	r3, r2
 8003180:	d00b      	beq.n	800319a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a2c      	ldr	r2, [pc, #176]	; (800323c <UART_AdvFeatureConfig+0x154>)
 800318a:	4013      	ands	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2220      	movs	r2, #32
 80031a0:	4013      	ands	r3, r2
 80031a2:	d00b      	beq.n	80031bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	4a25      	ldr	r2, [pc, #148]	; (8003240 <UART_AdvFeatureConfig+0x158>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2240      	movs	r2, #64	; 0x40
 80031c2:	4013      	ands	r3, r2
 80031c4:	d01d      	beq.n	8003202 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <UART_AdvFeatureConfig+0x15c>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	035b      	lsls	r3, r3, #13
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d10b      	bne.n	8003202 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a15      	ldr	r2, [pc, #84]	; (8003248 <UART_AdvFeatureConfig+0x160>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	4013      	ands	r3, r2
 800320a:	d00b      	beq.n	8003224 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <UART_AdvFeatureConfig+0x164>)
 8003214:	4013      	ands	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}
 800322c:	fffdffff 	.word	0xfffdffff
 8003230:	fffeffff 	.word	0xfffeffff
 8003234:	fffbffff 	.word	0xfffbffff
 8003238:	ffff7fff 	.word	0xffff7fff
 800323c:	ffffefff 	.word	0xffffefff
 8003240:	ffffdfff 	.word	0xffffdfff
 8003244:	ffefffff 	.word	0xffefffff
 8003248:	ff9fffff 	.word	0xff9fffff
 800324c:	fff7ffff 	.word	0xfff7ffff

08003250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af02      	add	r7, sp, #8
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800325e:	f7fd fa71 	bl	8000744 <HAL_GetTick>
 8003262:	0003      	movs	r3, r0
 8003264:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2208      	movs	r2, #8
 800326e:	4013      	ands	r3, r2
 8003270:	2b08      	cmp	r3, #8
 8003272:	d10d      	bne.n	8003290 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	0399      	lsls	r1, r3, #14
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <UART_CheckIdleState+0x88>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	0013      	movs	r3, r2
 8003282:	2200      	movs	r2, #0
 8003284:	f000 f82a 	bl	80032dc <UART_WaitOnFlagUntilTimeout>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d001      	beq.n	8003290 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e01f      	b.n	80032d0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2204      	movs	r2, #4
 8003298:	4013      	ands	r3, r2
 800329a:	2b04      	cmp	r3, #4
 800329c:	d10d      	bne.n	80032ba <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	03d9      	lsls	r1, r3, #15
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <UART_CheckIdleState+0x88>)
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	0013      	movs	r3, r2
 80032ac:	2200      	movs	r2, #0
 80032ae:	f000 f815 	bl	80032dc <UART_WaitOnFlagUntilTimeout>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d001      	beq.n	80032ba <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e00a      	b.n	80032d0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2270      	movs	r2, #112	; 0x70
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b004      	add	sp, #16
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	01ffffff 	.word	0x01ffffff

080032dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ec:	e05d      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3301      	adds	r3, #1
 80032f2:	d05a      	beq.n	80033aa <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f4:	f7fd fa26 	bl	8000744 <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11b      	bne.n	8003342 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	492f      	ldr	r1, [pc, #188]	; (80033d4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003316:	400a      	ands	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2101      	movs	r1, #1
 8003326:	438a      	bics	r2, r1
 8003328:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2270      	movs	r2, #112	; 0x70
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e043      	b.n	80033ca <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2204      	movs	r2, #4
 800334a:	4013      	ands	r3, r2
 800334c:	d02d      	beq.n	80033aa <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	401a      	ands	r2, r3
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	429a      	cmp	r2, r3
 8003360:	d123      	bne.n	80033aa <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4917      	ldr	r1, [pc, #92]	; (80033d4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003378:	400a      	ands	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2101      	movs	r1, #1
 8003388:	438a      	bics	r2, r1
 800338a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2270      	movs	r2, #112	; 0x70
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e00f      	b.n	80033ca <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	425a      	negs	r2, r3
 80033ba:	4153      	adcs	r3, r2
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	001a      	movs	r2, r3
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d092      	beq.n	80032ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	fffffe5f 	.word	0xfffffe5f

080033d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80033e0:	210e      	movs	r1, #14
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	4a08      	ldr	r2, [pc, #32]	; (8003408 <USB_EnableGlobalInt+0x30>)
 80033e6:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	5a9b      	ldrh	r3, [r3, r2]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	b299      	uxth	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	; 0x40
 80033fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b004      	add	sp, #16
 8003406:	bd80      	pop	{r7, pc}
 8003408:	ffffbf80 	.word	0xffffbf80

0800340c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003414:	210e      	movs	r1, #14
 8003416:	187b      	adds	r3, r7, r1
 8003418:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <USB_DisableGlobalInt+0x3c>)
 800341a:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	5a9b      	ldrh	r3, [r3, r2]
 8003422:	b29b      	uxth	r3, r3
 8003424:	b21b      	sxth	r3, r3
 8003426:	187a      	adds	r2, r7, r1
 8003428:	2100      	movs	r1, #0
 800342a:	5e52      	ldrsh	r2, [r2, r1]
 800342c:	43d2      	mvns	r2, r2
 800342e:	b212      	sxth	r2, r2
 8003430:	4013      	ands	r3, r2
 8003432:	b21b      	sxth	r3, r3
 8003434:	b299      	uxth	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2240      	movs	r2, #64	; 0x40
 800343a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	b004      	add	sp, #16
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	ffffbf80 	.word	0xffffbf80

0800344c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800344c:	b084      	sub	sp, #16
 800344e:	b590      	push	{r4, r7, lr}
 8003450:	46c6      	mov	lr, r8
 8003452:	b500      	push	{lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	2004      	movs	r0, #4
 800345c:	2410      	movs	r4, #16
 800345e:	46a4      	mov	ip, r4
 8003460:	2408      	movs	r4, #8
 8003462:	46a0      	mov	r8, r4
 8003464:	44b8      	add	r8, r7
 8003466:	44c4      	add	ip, r8
 8003468:	4460      	add	r0, ip
 800346a:	6001      	str	r1, [r0, #0]
 800346c:	6042      	str	r2, [r0, #4]
 800346e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	2101      	movs	r1, #1
 8003476:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	2100      	movs	r1, #0
 800347e:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2244      	movs	r2, #68	; 0x44
 8003484:	2100      	movs	r1, #0
 8003486:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2250      	movs	r2, #80	; 0x50
 800348c:	2100      	movs	r1, #0
 800348e:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff ffa0 	bl	80033d8 <USB_EnableGlobalInt>

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bc04      	pop	{r2}
 80034a2:	4690      	mov	r8, r2
 80034a4:	bc90      	pop	{r4, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	b004      	add	sp, #16
 80034aa:	4718      	bx	r3

080034ac <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80034b6:	2317      	movs	r3, #23
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	18d3      	adds	r3, r2, r3
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	2314      	movs	r3, #20
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	49b2      	ldr	r1, [pc, #712]	; (800379c <USB_ActivateEndpoint+0x2f0>)
 80034d2:	400a      	ands	r2, r1
 80034d4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	78db      	ldrb	r3, [r3, #3]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d020      	beq.n	8003520 <USB_ActivateEndpoint+0x74>
 80034de:	dc02      	bgt.n	80034e6 <USB_ActivateEndpoint+0x3a>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <USB_ActivateEndpoint+0x44>
 80034e4:	e025      	b.n	8003532 <USB_ActivateEndpoint+0x86>
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d00b      	beq.n	8003502 <USB_ActivateEndpoint+0x56>
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d00f      	beq.n	800350e <USB_ActivateEndpoint+0x62>
 80034ee:	e020      	b.n	8003532 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80034f0:	2214      	movs	r2, #20
 80034f2:	18bb      	adds	r3, r7, r2
 80034f4:	18ba      	adds	r2, r7, r2
 80034f6:	8812      	ldrh	r2, [r2, #0]
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	0089      	lsls	r1, r1, #2
 80034fc:	430a      	orrs	r2, r1
 80034fe:	801a      	strh	r2, [r3, #0]
      break;
 8003500:	e01c      	b.n	800353c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003502:	2214      	movs	r2, #20
 8003504:	18bb      	adds	r3, r7, r2
 8003506:	18ba      	adds	r2, r7, r2
 8003508:	8812      	ldrh	r2, [r2, #0]
 800350a:	801a      	strh	r2, [r3, #0]
      break;
 800350c:	e016      	b.n	800353c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800350e:	2214      	movs	r2, #20
 8003510:	18bb      	adds	r3, r7, r2
 8003512:	18ba      	adds	r2, r7, r2
 8003514:	8812      	ldrh	r2, [r2, #0]
 8003516:	21c0      	movs	r1, #192	; 0xc0
 8003518:	00c9      	lsls	r1, r1, #3
 800351a:	430a      	orrs	r2, r1
 800351c:	801a      	strh	r2, [r3, #0]
      break;
 800351e:	e00d      	b.n	800353c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003520:	2214      	movs	r2, #20
 8003522:	18bb      	adds	r3, r7, r2
 8003524:	18ba      	adds	r2, r7, r2
 8003526:	8812      	ldrh	r2, [r2, #0]
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	00c9      	lsls	r1, r1, #3
 800352c:	430a      	orrs	r2, r1
 800352e:	801a      	strh	r2, [r3, #0]
      break;
 8003530:	e004      	b.n	800353c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003532:	2317      	movs	r3, #23
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
      break;
 800353a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	18d3      	adds	r3, r2, r3
 8003546:	2214      	movs	r2, #20
 8003548:	18ba      	adds	r2, r7, r2
 800354a:	8812      	ldrh	r2, [r2, #0]
 800354c:	4994      	ldr	r1, [pc, #592]	; (80037a0 <USB_ActivateEndpoint+0x2f4>)
 800354e:	430a      	orrs	r2, r1
 8003550:	b292      	uxth	r2, r2
 8003552:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	18d3      	adds	r3, r2, r3
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	b21b      	sxth	r3, r3
 8003564:	4a8f      	ldr	r2, [pc, #572]	; (80037a4 <USB_ActivateEndpoint+0x2f8>)
 8003566:	4013      	ands	r3, r2
 8003568:	b21a      	sxth	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b21b      	sxth	r3, r3
 8003570:	4313      	orrs	r3, r2
 8003572:	b21b      	sxth	r3, r3
 8003574:	b29c      	uxth	r4, r3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	18d3      	adds	r3, r2, r3
 8003580:	4a87      	ldr	r2, [pc, #540]	; (80037a0 <USB_ActivateEndpoint+0x2f4>)
 8003582:	4322      	orrs	r2, r4
 8003584:	b292      	uxth	r2, r2
 8003586:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	7b1b      	ldrb	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d000      	beq.n	8003592 <USB_ActivateEndpoint+0xe6>
 8003590:	e11a      	b.n	80037c8 <USB_ActivateEndpoint+0x31c>
  {
    if (ep->is_in != 0U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	785b      	ldrb	r3, [r3, #1]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d062      	beq.n	8003660 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800359a:	687c      	ldr	r4, [r7, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2250      	movs	r2, #80	; 0x50
 80035a0:	5a9b      	ldrh	r3, [r3, r2]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	18e4      	adds	r4, r4, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	18e3      	adds	r3, r4, r3
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	00d2      	lsls	r2, r2, #3
 80035b2:	4694      	mov	ip, r2
 80035b4:	4463      	add	r3, ip
 80035b6:	001c      	movs	r4, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	88db      	ldrh	r3, [r3, #6]
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	b29b      	uxth	r3, r3
 80035c0:	18db      	adds	r3, r3, r3
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	18d3      	adds	r3, r2, r3
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29c      	uxth	r4, r3
 80035d4:	0022      	movs	r2, r4
 80035d6:	2340      	movs	r3, #64	; 0x40
 80035d8:	4013      	ands	r3, r2
 80035da:	d012      	beq.n	8003602 <USB_ActivateEndpoint+0x156>
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	4a6e      	ldr	r2, [pc, #440]	; (80037a4 <USB_ActivateEndpoint+0x2f8>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	b29c      	uxth	r4, r3
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	4a6b      	ldr	r2, [pc, #428]	; (80037a8 <USB_ActivateEndpoint+0x2fc>)
 80035fc:	4322      	orrs	r2, r4
 80035fe:	b292      	uxth	r2, r2
 8003600:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	78db      	ldrb	r3, [r3, #3]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d016      	beq.n	8003638 <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	18d3      	adds	r3, r2, r3
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	4a64      	ldr	r2, [pc, #400]	; (80037ac <USB_ActivateEndpoint+0x300>)
 800361a:	4013      	ands	r3, r2
 800361c:	b29c      	uxth	r4, r3
 800361e:	2320      	movs	r3, #32
 8003620:	4063      	eors	r3, r4
 8003622:	b29c      	uxth	r4, r3
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	4a5c      	ldr	r2, [pc, #368]	; (80037a0 <USB_ActivateEndpoint+0x2f4>)
 8003630:	4322      	orrs	r2, r4
 8003632:	b292      	uxth	r2, r2
 8003634:	801a      	strh	r2, [r3, #0]
 8003636:	e21a      	b.n	8003a6e <USB_ActivateEndpoint+0x5c2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	18d3      	adds	r3, r2, r3
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	4a59      	ldr	r2, [pc, #356]	; (80037ac <USB_ActivateEndpoint+0x300>)
 8003648:	4013      	ands	r3, r2
 800364a:	b29c      	uxth	r4, r3
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	18d3      	adds	r3, r2, r3
 8003656:	4a52      	ldr	r2, [pc, #328]	; (80037a0 <USB_ActivateEndpoint+0x2f4>)
 8003658:	4322      	orrs	r2, r4
 800365a:	b292      	uxth	r2, r2
 800365c:	801a      	strh	r2, [r3, #0]
 800365e:	e206      	b.n	8003a6e <USB_ActivateEndpoint+0x5c2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003660:	687c      	ldr	r4, [r7, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2250      	movs	r2, #80	; 0x50
 8003666:	5a9b      	ldrh	r3, [r3, r2]
 8003668:	b29b      	uxth	r3, r3
 800366a:	18e4      	adds	r4, r4, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	18e3      	adds	r3, r4, r3
 8003674:	4a4e      	ldr	r2, [pc, #312]	; (80037b0 <USB_ActivateEndpoint+0x304>)
 8003676:	4694      	mov	ip, r2
 8003678:	4463      	add	r3, ip
 800367a:	001c      	movs	r4, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	88db      	ldrh	r3, [r3, #6]
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	b29b      	uxth	r3, r3
 8003684:	18db      	adds	r3, r3, r3
 8003686:	b29b      	uxth	r3, r3
 8003688:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800368a:	687c      	ldr	r4, [r7, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2250      	movs	r2, #80	; 0x50
 8003690:	5a9b      	ldrh	r3, [r3, r2]
 8003692:	b29b      	uxth	r3, r3
 8003694:	18e4      	adds	r4, r4, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	18e3      	adds	r3, r4, r3
 800369e:	4a45      	ldr	r2, [pc, #276]	; (80037b4 <USB_ActivateEndpoint+0x308>)
 80036a0:	4694      	mov	ip, r2
 80036a2:	4463      	add	r3, ip
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10e      	bne.n	80036cc <USB_ActivateEndpoint+0x220>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	4a41      	ldr	r2, [pc, #260]	; (80037b8 <USB_ActivateEndpoint+0x30c>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	4a3e      	ldr	r2, [pc, #248]	; (80037bc <USB_ActivateEndpoint+0x310>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	e02b      	b.n	8003724 <USB_ActivateEndpoint+0x278>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b3e      	cmp	r3, #62	; 0x3e
 80036d2:	d812      	bhi.n	80036fa <USB_ActivateEndpoint+0x24e>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2201      	movs	r2, #1
 80036e2:	4013      	ands	r3, r2
 80036e4:	d002      	beq.n	80036ec <USB_ActivateEndpoint+0x240>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	3301      	adds	r3, #1
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	029b      	lsls	r3, r3, #10
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	801a      	strh	r2, [r3, #0]
 80036f8:	e014      	b.n	8003724 <USB_ActivateEndpoint+0x278>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	221f      	movs	r2, #31
 8003708:	4013      	ands	r3, r2
 800370a:	d102      	bne.n	8003712 <USB_ActivateEndpoint+0x266>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3b01      	subs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	b29b      	uxth	r3, r3
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	b29b      	uxth	r3, r3
 800371a:	4a28      	ldr	r2, [pc, #160]	; (80037bc <USB_ActivateEndpoint+0x310>)
 800371c:	4313      	orrs	r3, r2
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	18d3      	adds	r3, r2, r3
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29c      	uxth	r4, r3
 8003732:	0022      	movs	r2, r4
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	01db      	lsls	r3, r3, #7
 8003738:	4013      	ands	r3, r2
 800373a:	d012      	beq.n	8003762 <USB_ActivateEndpoint+0x2b6>
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	18d3      	adds	r3, r2, r3
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <USB_ActivateEndpoint+0x2f8>)
 800374c:	4013      	ands	r3, r2
 800374e:	b29c      	uxth	r4, r3
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	18d3      	adds	r3, r2, r3
 800375a:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <USB_ActivateEndpoint+0x314>)
 800375c:	4322      	orrs	r2, r4
 800375e:	b292      	uxth	r2, r2
 8003760:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	18d3      	adds	r3, r2, r3
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <USB_ActivateEndpoint+0x318>)
 8003772:	4013      	ands	r3, r2
 8003774:	b29c      	uxth	r4, r3
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	015b      	lsls	r3, r3, #5
 800377a:	4063      	eors	r3, r4
 800377c:	b29c      	uxth	r4, r3
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	4063      	eors	r3, r4
 8003784:	b29c      	uxth	r4, r3
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	18d3      	adds	r3, r2, r3
 8003790:	4a03      	ldr	r2, [pc, #12]	; (80037a0 <USB_ActivateEndpoint+0x2f4>)
 8003792:	4322      	orrs	r2, r4
 8003794:	b292      	uxth	r2, r2
 8003796:	801a      	strh	r2, [r3, #0]
 8003798:	e169      	b.n	8003a6e <USB_ActivateEndpoint+0x5c2>
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	ffff898f 	.word	0xffff898f
 80037a0:	ffff8080 	.word	0xffff8080
 80037a4:	ffff8f8f 	.word	0xffff8f8f
 80037a8:	ffff80c0 	.word	0xffff80c0
 80037ac:	ffff8fbf 	.word	0xffff8fbf
 80037b0:	00000404 	.word	0x00000404
 80037b4:	00000406 	.word	0x00000406
 80037b8:	ffff83ff 	.word	0xffff83ff
 80037bc:	ffff8000 	.word	0xffff8000
 80037c0:	ffffc080 	.word	0xffffc080
 80037c4:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	18d3      	adds	r3, r2, r3
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	4aa9      	ldr	r2, [pc, #676]	; (8003a7c <USB_ActivateEndpoint+0x5d0>)
 80037d8:	4013      	ands	r3, r2
 80037da:	b29c      	uxth	r4, r3
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	18d3      	adds	r3, r2, r3
 80037e6:	4aa6      	ldr	r2, [pc, #664]	; (8003a80 <USB_ActivateEndpoint+0x5d4>)
 80037e8:	4322      	orrs	r2, r4
 80037ea:	b292      	uxth	r2, r2
 80037ec:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80037ee:	687c      	ldr	r4, [r7, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2250      	movs	r2, #80	; 0x50
 80037f4:	5a9b      	ldrh	r3, [r3, r2]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	18e4      	adds	r4, r4, r3
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	18e3      	adds	r3, r4, r3
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	00d2      	lsls	r2, r2, #3
 8003806:	4694      	mov	ip, r2
 8003808:	4463      	add	r3, ip
 800380a:	001c      	movs	r4, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	891b      	ldrh	r3, [r3, #8]
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	18db      	adds	r3, r3, r3
 8003816:	b29b      	uxth	r3, r3
 8003818:	8023      	strh	r3, [r4, #0]
 800381a:	687c      	ldr	r4, [r7, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2250      	movs	r2, #80	; 0x50
 8003820:	5a9b      	ldrh	r3, [r3, r2]
 8003822:	b29b      	uxth	r3, r3
 8003824:	18e4      	adds	r4, r4, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	18e3      	adds	r3, r4, r3
 800382e:	4a95      	ldr	r2, [pc, #596]	; (8003a84 <USB_ActivateEndpoint+0x5d8>)
 8003830:	4694      	mov	ip, r2
 8003832:	4463      	add	r3, ip
 8003834:	001c      	movs	r4, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	895b      	ldrh	r3, [r3, #10]
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	b29b      	uxth	r3, r3
 800383e:	18db      	adds	r3, r3, r3
 8003840:	b29b      	uxth	r3, r3
 8003842:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d000      	beq.n	800384e <USB_ActivateEndpoint+0x3a2>
 800384c:	e07e      	b.n	800394c <USB_ActivateEndpoint+0x4a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	18d3      	adds	r3, r2, r3
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b29c      	uxth	r4, r3
 800385c:	0022      	movs	r2, r4
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	01db      	lsls	r3, r3, #7
 8003862:	4013      	ands	r3, r2
 8003864:	d012      	beq.n	800388c <USB_ActivateEndpoint+0x3e0>
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	18d3      	adds	r3, r2, r3
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4a81      	ldr	r2, [pc, #516]	; (8003a7c <USB_ActivateEndpoint+0x5d0>)
 8003876:	4013      	ands	r3, r2
 8003878:	b29c      	uxth	r4, r3
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	18d3      	adds	r3, r2, r3
 8003884:	4a80      	ldr	r2, [pc, #512]	; (8003a88 <USB_ActivateEndpoint+0x5dc>)
 8003886:	4322      	orrs	r2, r4
 8003888:	b292      	uxth	r2, r2
 800388a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	18d3      	adds	r3, r2, r3
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29c      	uxth	r4, r3
 800389a:	0022      	movs	r2, r4
 800389c:	2340      	movs	r3, #64	; 0x40
 800389e:	4013      	ands	r3, r2
 80038a0:	d012      	beq.n	80038c8 <USB_ActivateEndpoint+0x41c>
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	4a72      	ldr	r2, [pc, #456]	; (8003a7c <USB_ActivateEndpoint+0x5d0>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	b29c      	uxth	r4, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	18d3      	adds	r3, r2, r3
 80038c0:	4a72      	ldr	r2, [pc, #456]	; (8003a8c <USB_ActivateEndpoint+0x5e0>)
 80038c2:	4322      	orrs	r2, r4
 80038c4:	b292      	uxth	r2, r2
 80038c6:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	18d3      	adds	r3, r2, r3
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	4a69      	ldr	r2, [pc, #420]	; (8003a7c <USB_ActivateEndpoint+0x5d0>)
 80038d8:	4013      	ands	r3, r2
 80038da:	b29c      	uxth	r4, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	4a69      	ldr	r2, [pc, #420]	; (8003a8c <USB_ActivateEndpoint+0x5e0>)
 80038e8:	4322      	orrs	r2, r4
 80038ea:	b292      	uxth	r2, r2
 80038ec:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	18d3      	adds	r3, r2, r3
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4a64      	ldr	r2, [pc, #400]	; (8003a90 <USB_ActivateEndpoint+0x5e4>)
 80038fe:	4013      	ands	r3, r2
 8003900:	b29c      	uxth	r4, r3
 8003902:	2380      	movs	r3, #128	; 0x80
 8003904:	015b      	lsls	r3, r3, #5
 8003906:	4063      	eors	r3, r4
 8003908:	b29c      	uxth	r4, r3
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	4063      	eors	r3, r4
 8003910:	b29c      	uxth	r4, r3
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	18d3      	adds	r3, r2, r3
 800391c:	4a5d      	ldr	r2, [pc, #372]	; (8003a94 <USB_ActivateEndpoint+0x5e8>)
 800391e:	4322      	orrs	r2, r4
 8003920:	b292      	uxth	r2, r2
 8003922:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	18d3      	adds	r3, r2, r3
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	4a59      	ldr	r2, [pc, #356]	; (8003a98 <USB_ActivateEndpoint+0x5ec>)
 8003934:	4013      	ands	r3, r2
 8003936:	b29c      	uxth	r4, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	18d3      	adds	r3, r2, r3
 8003942:	4a54      	ldr	r2, [pc, #336]	; (8003a94 <USB_ActivateEndpoint+0x5e8>)
 8003944:	4322      	orrs	r2, r4
 8003946:	b292      	uxth	r2, r2
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	e090      	b.n	8003a6e <USB_ActivateEndpoint+0x5c2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	18d3      	adds	r3, r2, r3
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29c      	uxth	r4, r3
 800395a:	0022      	movs	r2, r4
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	01db      	lsls	r3, r3, #7
 8003960:	4013      	ands	r3, r2
 8003962:	d012      	beq.n	800398a <USB_ActivateEndpoint+0x4de>
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	18d3      	adds	r3, r2, r3
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	4a42      	ldr	r2, [pc, #264]	; (8003a7c <USB_ActivateEndpoint+0x5d0>)
 8003974:	4013      	ands	r3, r2
 8003976:	b29c      	uxth	r4, r3
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	18d3      	adds	r3, r2, r3
 8003982:	4a41      	ldr	r2, [pc, #260]	; (8003a88 <USB_ActivateEndpoint+0x5dc>)
 8003984:	4322      	orrs	r2, r4
 8003986:	b292      	uxth	r2, r2
 8003988:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	18d3      	adds	r3, r2, r3
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29c      	uxth	r4, r3
 8003998:	0022      	movs	r2, r4
 800399a:	2340      	movs	r3, #64	; 0x40
 800399c:	4013      	ands	r3, r2
 800399e:	d012      	beq.n	80039c6 <USB_ActivateEndpoint+0x51a>
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	18d3      	adds	r3, r2, r3
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <USB_ActivateEndpoint+0x5d0>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	b29c      	uxth	r4, r3
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	4a33      	ldr	r2, [pc, #204]	; (8003a8c <USB_ActivateEndpoint+0x5e0>)
 80039c0:	4322      	orrs	r2, r4
 80039c2:	b292      	uxth	r2, r2
 80039c4:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	18d3      	adds	r3, r2, r3
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4a29      	ldr	r2, [pc, #164]	; (8003a7c <USB_ActivateEndpoint+0x5d0>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	b29c      	uxth	r4, r3
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	18d3      	adds	r3, r2, r3
 80039e4:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <USB_ActivateEndpoint+0x5dc>)
 80039e6:	4322      	orrs	r2, r4
 80039e8:	b292      	uxth	r2, r2
 80039ea:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	78db      	ldrb	r3, [r3, #3]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d016      	beq.n	8003a22 <USB_ActivateEndpoint+0x576>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <USB_ActivateEndpoint+0x5ec>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	b29c      	uxth	r4, r3
 8003a08:	2320      	movs	r3, #32
 8003a0a:	4063      	eors	r3, r4
 8003a0c:	b29c      	uxth	r4, r3
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	18d3      	adds	r3, r2, r3
 8003a18:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <USB_ActivateEndpoint+0x5e8>)
 8003a1a:	4322      	orrs	r2, r4
 8003a1c:	b292      	uxth	r2, r2
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	e012      	b.n	8003a48 <USB_ActivateEndpoint+0x59c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	18d3      	adds	r3, r2, r3
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <USB_ActivateEndpoint+0x5ec>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	b29c      	uxth	r4, r3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	18d3      	adds	r3, r2, r3
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <USB_ActivateEndpoint+0x5e8>)
 8003a42:	4322      	orrs	r2, r4
 8003a44:	b292      	uxth	r2, r2
 8003a46:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	18d3      	adds	r3, r2, r3
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <USB_ActivateEndpoint+0x5e4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	b29c      	uxth	r4, r3
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	18d3      	adds	r3, r2, r3
 8003a66:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <USB_ActivateEndpoint+0x5e8>)
 8003a68:	4322      	orrs	r2, r4
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8003a6e:	2317      	movs	r3, #23
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	781b      	ldrb	r3, [r3, #0]
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b007      	add	sp, #28
 8003a7a:	bd90      	pop	{r4, r7, pc}
 8003a7c:	ffff8f8f 	.word	0xffff8f8f
 8003a80:	ffff8180 	.word	0xffff8180
 8003a84:	00000404 	.word	0x00000404
 8003a88:	ffffc080 	.word	0xffffc080
 8003a8c:	ffff80c0 	.word	0xffff80c0
 8003a90:	ffffbf8f 	.word	0xffffbf8f
 8003a94:	ffff8080 	.word	0xffff8080
 8003a98:	ffff8fbf 	.word	0xffff8fbf

08003a9c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	7b1b      	ldrb	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d168      	bne.n	8003b80 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d031      	beq.n	8003b1a <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29c      	uxth	r4, r3
 8003ac4:	0022      	movs	r2, r4
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d012      	beq.n	8003af2 <USB_DeactivateEndpoint+0x56>
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	4aa5      	ldr	r2, [pc, #660]	; (8003d70 <USB_DeactivateEndpoint+0x2d4>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29c      	uxth	r4, r3
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	4aa2      	ldr	r2, [pc, #648]	; (8003d74 <USB_DeactivateEndpoint+0x2d8>)
 8003aec:	4322      	orrs	r2, r4
 8003aee:	b292      	uxth	r2, r2
 8003af0:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	18d3      	adds	r3, r2, r3
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4a9d      	ldr	r2, [pc, #628]	; (8003d78 <USB_DeactivateEndpoint+0x2dc>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	b29c      	uxth	r4, r3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	18d3      	adds	r3, r2, r3
 8003b10:	4a9a      	ldr	r2, [pc, #616]	; (8003d7c <USB_DeactivateEndpoint+0x2e0>)
 8003b12:	4322      	orrs	r2, r4
 8003b14:	b292      	uxth	r2, r2
 8003b16:	801a      	strh	r2, [r3, #0]
 8003b18:	e124      	b.n	8003d64 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	18d3      	adds	r3, r2, r3
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29c      	uxth	r4, r3
 8003b28:	0022      	movs	r2, r4
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	01db      	lsls	r3, r3, #7
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d012      	beq.n	8003b58 <USB_DeactivateEndpoint+0xbc>
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	18d3      	adds	r3, r2, r3
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4a8b      	ldr	r2, [pc, #556]	; (8003d70 <USB_DeactivateEndpoint+0x2d4>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	b29c      	uxth	r4, r3
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	18d3      	adds	r3, r2, r3
 8003b50:	4a8b      	ldr	r2, [pc, #556]	; (8003d80 <USB_DeactivateEndpoint+0x2e4>)
 8003b52:	4322      	orrs	r2, r4
 8003b54:	b292      	uxth	r2, r2
 8003b56:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	18d3      	adds	r3, r2, r3
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4a87      	ldr	r2, [pc, #540]	; (8003d84 <USB_DeactivateEndpoint+0x2e8>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	b29c      	uxth	r4, r3
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	18d3      	adds	r3, r2, r3
 8003b76:	4a81      	ldr	r2, [pc, #516]	; (8003d7c <USB_DeactivateEndpoint+0x2e0>)
 8003b78:	4322      	orrs	r2, r4
 8003b7a:	b292      	uxth	r2, r2
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	e0f1      	b.n	8003d64 <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d000      	beq.n	8003b8a <USB_DeactivateEndpoint+0xee>
 8003b88:	e076      	b.n	8003c78 <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	18d3      	adds	r3, r2, r3
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29c      	uxth	r4, r3
 8003b98:	0022      	movs	r2, r4
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	01db      	lsls	r3, r3, #7
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d012      	beq.n	8003bc8 <USB_DeactivateEndpoint+0x12c>
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	18d3      	adds	r3, r2, r3
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4a6f      	ldr	r2, [pc, #444]	; (8003d70 <USB_DeactivateEndpoint+0x2d4>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	b29c      	uxth	r4, r3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	18d3      	adds	r3, r2, r3
 8003bc0:	4a6f      	ldr	r2, [pc, #444]	; (8003d80 <USB_DeactivateEndpoint+0x2e4>)
 8003bc2:	4322      	orrs	r2, r4
 8003bc4:	b292      	uxth	r2, r2
 8003bc6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	18d3      	adds	r3, r2, r3
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29c      	uxth	r4, r3
 8003bd6:	0022      	movs	r2, r4
 8003bd8:	2340      	movs	r3, #64	; 0x40
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d012      	beq.n	8003c04 <USB_DeactivateEndpoint+0x168>
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	18d3      	adds	r3, r2, r3
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	4a60      	ldr	r2, [pc, #384]	; (8003d70 <USB_DeactivateEndpoint+0x2d4>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	b29c      	uxth	r4, r3
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	18d3      	adds	r3, r2, r3
 8003bfc:	4a5d      	ldr	r2, [pc, #372]	; (8003d74 <USB_DeactivateEndpoint+0x2d8>)
 8003bfe:	4322      	orrs	r2, r4
 8003c00:	b292      	uxth	r2, r2
 8003c02:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	18d3      	adds	r3, r2, r3
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	4a57      	ldr	r2, [pc, #348]	; (8003d70 <USB_DeactivateEndpoint+0x2d4>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29c      	uxth	r4, r3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	18d3      	adds	r3, r2, r3
 8003c22:	4a54      	ldr	r2, [pc, #336]	; (8003d74 <USB_DeactivateEndpoint+0x2d8>)
 8003c24:	4322      	orrs	r2, r4
 8003c26:	b292      	uxth	r2, r2
 8003c28:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <USB_DeactivateEndpoint+0x2e8>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	b29c      	uxth	r4, r3
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	18d3      	adds	r3, r2, r3
 8003c48:	4a4c      	ldr	r2, [pc, #304]	; (8003d7c <USB_DeactivateEndpoint+0x2e0>)
 8003c4a:	4322      	orrs	r2, r4
 8003c4c:	b292      	uxth	r2, r2
 8003c4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	18d3      	adds	r3, r2, r3
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <USB_DeactivateEndpoint+0x2dc>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	b29c      	uxth	r4, r3
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	4a43      	ldr	r2, [pc, #268]	; (8003d7c <USB_DeactivateEndpoint+0x2e0>)
 8003c70:	4322      	orrs	r2, r4
 8003c72:	b292      	uxth	r2, r2
 8003c74:	801a      	strh	r2, [r3, #0]
 8003c76:	e075      	b.n	8003d64 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	18d3      	adds	r3, r2, r3
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29c      	uxth	r4, r3
 8003c86:	0022      	movs	r2, r4
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	01db      	lsls	r3, r3, #7
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d012      	beq.n	8003cb6 <USB_DeactivateEndpoint+0x21a>
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	18d3      	adds	r3, r2, r3
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	4a34      	ldr	r2, [pc, #208]	; (8003d70 <USB_DeactivateEndpoint+0x2d4>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	b29c      	uxth	r4, r3
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	18d3      	adds	r3, r2, r3
 8003cae:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <USB_DeactivateEndpoint+0x2e4>)
 8003cb0:	4322      	orrs	r2, r4
 8003cb2:	b292      	uxth	r2, r2
 8003cb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	18d3      	adds	r3, r2, r3
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	b29c      	uxth	r4, r3
 8003cc4:	0022      	movs	r2, r4
 8003cc6:	2340      	movs	r3, #64	; 0x40
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d012      	beq.n	8003cf2 <USB_DeactivateEndpoint+0x256>
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	18d3      	adds	r3, r2, r3
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	4a25      	ldr	r2, [pc, #148]	; (8003d70 <USB_DeactivateEndpoint+0x2d4>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	b29c      	uxth	r4, r3
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <USB_DeactivateEndpoint+0x2d8>)
 8003cec:	4322      	orrs	r2, r4
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	18d3      	adds	r3, r2, r3
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <USB_DeactivateEndpoint+0x2d4>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	b29c      	uxth	r4, r3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	18d3      	adds	r3, r2, r3
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <USB_DeactivateEndpoint+0x2e4>)
 8003d12:	4322      	orrs	r2, r4
 8003d14:	b292      	uxth	r2, r2
 8003d16:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	18d3      	adds	r3, r2, r3
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <USB_DeactivateEndpoint+0x2dc>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	b29c      	uxth	r4, r3
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	18d3      	adds	r3, r2, r3
 8003d36:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <USB_DeactivateEndpoint+0x2e0>)
 8003d38:	4322      	orrs	r2, r4
 8003d3a:	b292      	uxth	r2, r2
 8003d3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	18d3      	adds	r3, r2, r3
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	; (8003d84 <USB_DeactivateEndpoint+0x2e8>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	b29c      	uxth	r4, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	18d3      	adds	r3, r2, r3
 8003d5c:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <USB_DeactivateEndpoint+0x2e0>)
 8003d5e:	4322      	orrs	r2, r4
 8003d60:	b292      	uxth	r2, r2
 8003d62:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b003      	add	sp, #12
 8003d6c:	bd90      	pop	{r4, r7, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	ffff8f8f 	.word	0xffff8f8f
 8003d74:	ffff80c0 	.word	0xffff80c0
 8003d78:	ffff8fbf 	.word	0xffff8fbf
 8003d7c:	ffff8080 	.word	0xffff8080
 8003d80:	ffffc080 	.word	0xffffc080
 8003d84:	ffffbf8f 	.word	0xffffbf8f

08003d88 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b095      	sub	sp, #84	; 0x54
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d000      	beq.n	8003d9c <USB_EPStartXfer+0x14>
 8003d9a:	e163      	b.n	8004064 <USB_EPStartXfer+0x2dc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	699a      	ldr	r2, [r3, #24]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d909      	bls.n	8003dbc <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db4:	1ad2      	subs	r2, r2, r3
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	619a      	str	r2, [r3, #24]
 8003dba:	e005      	b.n	8003dc8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	7b1b      	ldrb	r3, [r3, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11b      	bne.n	8003e08 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6959      	ldr	r1, [r3, #20]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	88da      	ldrh	r2, [r3, #6]
 8003dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fbbb 	bl	8004558 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003de2:	687c      	ldr	r4, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2250      	movs	r2, #80	; 0x50
 8003de8:	5a9b      	ldrh	r3, [r3, r2]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	18e4      	adds	r4, r4, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	18e3      	adds	r3, r4, r3
 8003df6:	4acc      	ldr	r2, [pc, #816]	; (8004128 <USB_EPStartXfer+0x3a0>)
 8003df8:	4694      	mov	ip, r2
 8003dfa:	4463      	add	r3, ip
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	801a      	strh	r2, [r3, #0]
 8003e06:	e113      	b.n	8004030 <USB_EPStartXfer+0x2a8>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	18d3      	adds	r3, r2, r3
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	001a      	movs	r2, r3
 8003e18:	2340      	movs	r3, #64	; 0x40
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d067      	beq.n	8003eee <USB_EPStartXfer+0x166>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e1e:	687c      	ldr	r4, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d147      	bne.n	8003eb8 <USB_EPStartXfer+0x130>
 8003e28:	687c      	ldr	r4, [r7, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2250      	movs	r2, #80	; 0x50
 8003e2e:	5a9b      	ldrh	r3, [r3, r2]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	18e4      	adds	r4, r4, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	18e3      	adds	r3, r4, r3
 8003e3c:	4abb      	ldr	r2, [pc, #748]	; (800412c <USB_EPStartXfer+0x3a4>)
 8003e3e:	4694      	mov	ip, r2
 8003e40:	4463      	add	r3, ip
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10e      	bne.n	8003e68 <USB_EPStartXfer+0xe0>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	4ab8      	ldr	r2, [pc, #736]	; (8004130 <USB_EPStartXfer+0x3a8>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	4ab5      	ldr	r2, [pc, #724]	; (8004134 <USB_EPStartXfer+0x3ac>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e03c      	b.n	8003ee2 <USB_EPStartXfer+0x15a>
 8003e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e6c:	d810      	bhi.n	8003e90 <USB_EPStartXfer+0x108>
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	647b      	str	r3, [r7, #68]	; 0x44
 8003e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e76:	2201      	movs	r2, #1
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d002      	beq.n	8003e82 <USB_EPStartXfer+0xfa>
 8003e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e7e:	3301      	adds	r3, #1
 8003e80:	647b      	str	r3, [r7, #68]	; 0x44
 8003e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	029b      	lsls	r3, r3, #10
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	e028      	b.n	8003ee2 <USB_EPStartXfer+0x15a>
 8003e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	647b      	str	r3, [r7, #68]	; 0x44
 8003e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e98:	221f      	movs	r2, #31
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d102      	bne.n	8003ea4 <USB_EPStartXfer+0x11c>
 8003e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	029b      	lsls	r3, r3, #10
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4aa1      	ldr	r2, [pc, #644]	; (8004134 <USB_EPStartXfer+0x3ac>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	801a      	strh	r2, [r3, #0]
 8003eb6:	e014      	b.n	8003ee2 <USB_EPStartXfer+0x15a>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d110      	bne.n	8003ee2 <USB_EPStartXfer+0x15a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2250      	movs	r2, #80	; 0x50
 8003ec4:	5a9b      	ldrh	r3, [r3, r2]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	18e4      	adds	r4, r4, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	18e3      	adds	r3, r4, r3
 8003ed2:	4a96      	ldr	r2, [pc, #600]	; (800412c <USB_EPStartXfer+0x3a4>)
 8003ed4:	4694      	mov	ip, r2
 8003ed6:	4463      	add	r3, ip
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003ee2:	234e      	movs	r3, #78	; 0x4e
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	8952      	ldrh	r2, [r2, #10]
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	e066      	b.n	8003fbc <USB_EPStartXfer+0x234>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d147      	bne.n	8003f86 <USB_EPStartXfer+0x1fe>
 8003ef6:	687c      	ldr	r4, [r7, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2250      	movs	r2, #80	; 0x50
 8003efc:	5a9b      	ldrh	r3, [r3, r2]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	18e4      	adds	r4, r4, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	18e3      	adds	r3, r4, r3
 8003f0a:	4a87      	ldr	r2, [pc, #540]	; (8004128 <USB_EPStartXfer+0x3a0>)
 8003f0c:	4694      	mov	ip, r2
 8003f0e:	4463      	add	r3, ip
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10e      	bne.n	8003f36 <USB_EPStartXfer+0x1ae>
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	4a84      	ldr	r2, [pc, #528]	; (8004130 <USB_EPStartXfer+0x3a8>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	4a82      	ldr	r2, [pc, #520]	; (8004134 <USB_EPStartXfer+0x3ac>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	801a      	strh	r2, [r3, #0]
 8003f34:	e03d      	b.n	8003fb2 <USB_EPStartXfer+0x22a>
 8003f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f38:	2b3e      	cmp	r3, #62	; 0x3e
 8003f3a:	d810      	bhi.n	8003f5e <USB_EPStartXfer+0x1d6>
 8003f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	643b      	str	r3, [r7, #64]	; 0x40
 8003f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f44:	2201      	movs	r2, #1
 8003f46:	4013      	ands	r3, r2
 8003f48:	d002      	beq.n	8003f50 <USB_EPStartXfer+0x1c8>
 8003f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	029b      	lsls	r3, r3, #10
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	e029      	b.n	8003fb2 <USB_EPStartXfer+0x22a>
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	643b      	str	r3, [r7, #64]	; 0x40
 8003f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f66:	221f      	movs	r2, #31
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d102      	bne.n	8003f72 <USB_EPStartXfer+0x1ea>
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
 8003f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	029b      	lsls	r3, r3, #10
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4a6e      	ldr	r2, [pc, #440]	; (8004134 <USB_EPStartXfer+0x3ac>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	e015      	b.n	8003fb2 <USB_EPStartXfer+0x22a>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d111      	bne.n	8003fb2 <USB_EPStartXfer+0x22a>
 8003f8e:	687c      	ldr	r4, [r7, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2250      	movs	r2, #80	; 0x50
 8003f94:	5a9b      	ldrh	r3, [r3, r2]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	18e4      	adds	r4, r4, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	18e3      	adds	r3, r4, r3
 8003fa2:	4a61      	ldr	r2, [pc, #388]	; (8004128 <USB_EPStartXfer+0x3a0>)
 8003fa4:	4694      	mov	ip, r2
 8003fa6:	4463      	add	r3, ip
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8003fb2:	234e      	movs	r3, #78	; 0x4e
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	8912      	ldrh	r2, [r2, #8]
 8003fba:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6959      	ldr	r1, [r3, #20]
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc2:	b29c      	uxth	r4, r3
 8003fc4:	234e      	movs	r3, #78	; 0x4e
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	0023      	movs	r3, r4
 8003fce:	f000 fac3 	bl	8004558 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	785b      	ldrb	r3, [r3, #1]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <USB_EPStartXfer+0x27a>
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	18d3      	adds	r3, r2, r3
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	4a53      	ldr	r2, [pc, #332]	; (8004138 <USB_EPStartXfer+0x3b0>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	b29c      	uxth	r4, r3
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	18d3      	adds	r3, r2, r3
 8003ff8:	4a50      	ldr	r2, [pc, #320]	; (800413c <USB_EPStartXfer+0x3b4>)
 8003ffa:	4322      	orrs	r2, r4
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	801a      	strh	r2, [r3, #0]
 8004000:	e016      	b.n	8004030 <USB_EPStartXfer+0x2a8>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d112      	bne.n	8004030 <USB_EPStartXfer+0x2a8>
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	18d3      	adds	r3, r2, r3
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	4a47      	ldr	r2, [pc, #284]	; (8004138 <USB_EPStartXfer+0x3b0>)
 800401a:	4013      	ands	r3, r2
 800401c:	b29c      	uxth	r4, r3
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	18d3      	adds	r3, r2, r3
 8004028:	4a45      	ldr	r2, [pc, #276]	; (8004140 <USB_EPStartXfer+0x3b8>)
 800402a:	4322      	orrs	r2, r4
 800402c:	b292      	uxth	r2, r2
 800402e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	4a41      	ldr	r2, [pc, #260]	; (8004144 <USB_EPStartXfer+0x3bc>)
 8004040:	4013      	ands	r3, r2
 8004042:	b29c      	uxth	r4, r3
 8004044:	2310      	movs	r3, #16
 8004046:	4063      	eors	r3, r4
 8004048:	b29c      	uxth	r4, r3
 800404a:	2320      	movs	r3, #32
 800404c:	4063      	eors	r3, r4
 800404e:	b29c      	uxth	r4, r3
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	4a3b      	ldr	r2, [pc, #236]	; (8004148 <USB_EPStartXfer+0x3c0>)
 800405c:	4322      	orrs	r2, r4
 800405e:	b292      	uxth	r2, r2
 8004060:	801a      	strh	r2, [r3, #0]
 8004062:	e152      	b.n	800430a <USB_EPStartXfer+0x582>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	429a      	cmp	r2, r3
 800406e:	d909      	bls.n	8004084 <USB_EPStartXfer+0x2fc>
    {
      len = ep->maxpacket;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407c:	1ad2      	subs	r2, r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	619a      	str	r2, [r3, #24]
 8004082:	e005      	b.n	8004090 <USB_EPStartXfer+0x308>
    }
    else
    {
      len = ep->xfer_len;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	7b1b      	ldrb	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d159      	bne.n	800414c <USB_EPStartXfer+0x3c4>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004098:	687c      	ldr	r4, [r7, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2250      	movs	r2, #80	; 0x50
 800409e:	5a9b      	ldrh	r3, [r3, r2]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	18e4      	adds	r4, r4, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	18e3      	adds	r3, r4, r3
 80040ac:	4a1f      	ldr	r2, [pc, #124]	; (800412c <USB_EPStartXfer+0x3a4>)
 80040ae:	4694      	mov	ip, r2
 80040b0:	4463      	add	r3, ip
 80040b2:	623b      	str	r3, [r7, #32]
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10e      	bne.n	80040d8 <USB_EPStartXfer+0x350>
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <USB_EPStartXfer+0x3a8>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <USB_EPStartXfer+0x3ac>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	e0fd      	b.n	80042d4 <USB_EPStartXfer+0x54c>
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	2b3e      	cmp	r3, #62	; 0x3e
 80040dc:	d810      	bhi.n	8004100 <USB_EPStartXfer+0x378>
 80040de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e6:	2201      	movs	r2, #1
 80040e8:	4013      	ands	r3, r2
 80040ea:	d002      	beq.n	80040f2 <USB_EPStartXfer+0x36a>
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	3301      	adds	r3, #1
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	029b      	lsls	r3, r3, #10
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	801a      	strh	r2, [r3, #0]
 80040fe:	e0e9      	b.n	80042d4 <USB_EPStartXfer+0x54c>
 8004100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004108:	221f      	movs	r2, #31
 800410a:	4013      	ands	r3, r2
 800410c:	d102      	bne.n	8004114 <USB_EPStartXfer+0x38c>
 800410e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004110:	3b01      	subs	r3, #1
 8004112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004116:	b29b      	uxth	r3, r3
 8004118:	029b      	lsls	r3, r3, #10
 800411a:	b29b      	uxth	r3, r3
 800411c:	4a05      	ldr	r2, [pc, #20]	; (8004134 <USB_EPStartXfer+0x3ac>)
 800411e:	4313      	orrs	r3, r2
 8004120:	b29a      	uxth	r2, r3
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	e0d5      	b.n	80042d4 <USB_EPStartXfer+0x54c>
 8004128:	00000402 	.word	0x00000402
 800412c:	00000406 	.word	0x00000406
 8004130:	ffff83ff 	.word	0xffff83ff
 8004134:	ffff8000 	.word	0xffff8000
 8004138:	ffff8f8f 	.word	0xffff8f8f
 800413c:	ffff80c0 	.word	0xffff80c0
 8004140:	ffffc080 	.word	0xffffc080
 8004144:	ffff8fbf 	.word	0xffff8fbf
 8004148:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	785b      	ldrb	r3, [r3, #1]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d147      	bne.n	80041e4 <USB_EPStartXfer+0x45c>
 8004154:	687c      	ldr	r4, [r7, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2250      	movs	r2, #80	; 0x50
 800415a:	5a9b      	ldrh	r3, [r3, r2]
 800415c:	b29b      	uxth	r3, r3
 800415e:	18e4      	adds	r4, r4, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	18e3      	adds	r3, r4, r3
 8004168:	4a6a      	ldr	r2, [pc, #424]	; (8004314 <USB_EPStartXfer+0x58c>)
 800416a:	4694      	mov	ip, r2
 800416c:	4463      	add	r3, ip
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10e      	bne.n	8004194 <USB_EPStartXfer+0x40c>
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	4a67      	ldr	r2, [pc, #412]	; (8004318 <USB_EPStartXfer+0x590>)
 800417c:	4013      	ands	r3, r2
 800417e:	b29a      	uxth	r2, r3
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	801a      	strh	r2, [r3, #0]
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	4a64      	ldr	r2, [pc, #400]	; (800431c <USB_EPStartXfer+0x594>)
 800418a:	4313      	orrs	r3, r2
 800418c:	b29a      	uxth	r2, r3
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e03d      	b.n	8004210 <USB_EPStartXfer+0x488>
 8004194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004196:	2b3e      	cmp	r3, #62	; 0x3e
 8004198:	d810      	bhi.n	80041bc <USB_EPStartXfer+0x434>
 800419a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	63bb      	str	r3, [r7, #56]	; 0x38
 80041a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a2:	2201      	movs	r2, #1
 80041a4:	4013      	ands	r3, r2
 80041a6:	d002      	beq.n	80041ae <USB_EPStartXfer+0x426>
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	3301      	adds	r3, #1
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	029b      	lsls	r3, r3, #10
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	e029      	b.n	8004210 <USB_EPStartXfer+0x488>
 80041bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80041c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c4:	221f      	movs	r2, #31
 80041c6:	4013      	ands	r3, r2
 80041c8:	d102      	bne.n	80041d0 <USB_EPStartXfer+0x448>
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	3b01      	subs	r3, #1
 80041ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	029b      	lsls	r3, r3, #10
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4a50      	ldr	r2, [pc, #320]	; (800431c <USB_EPStartXfer+0x594>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	e015      	b.n	8004210 <USB_EPStartXfer+0x488>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d111      	bne.n	8004210 <USB_EPStartXfer+0x488>
 80041ec:	687c      	ldr	r4, [r7, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2250      	movs	r2, #80	; 0x50
 80041f2:	5a9b      	ldrh	r3, [r3, r2]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	18e4      	adds	r4, r4, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	18e3      	adds	r3, r4, r3
 8004200:	4a44      	ldr	r2, [pc, #272]	; (8004314 <USB_EPStartXfer+0x58c>)
 8004202:	4694      	mov	ip, r2
 8004204:	4463      	add	r3, ip
 8004206:	633b      	str	r3, [r7, #48]	; 0x30
 8004208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800420a:	b29a      	uxth	r2, r3
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	801a      	strh	r2, [r3, #0]
 8004210:	687c      	ldr	r4, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	785b      	ldrb	r3, [r3, #1]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d147      	bne.n	80042aa <USB_EPStartXfer+0x522>
 800421a:	687c      	ldr	r4, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2250      	movs	r2, #80	; 0x50
 8004220:	5a9b      	ldrh	r3, [r3, r2]
 8004222:	b29b      	uxth	r3, r3
 8004224:	18e4      	adds	r4, r4, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	18e3      	adds	r3, r4, r3
 800422e:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <USB_EPStartXfer+0x598>)
 8004230:	4694      	mov	ip, r2
 8004232:	4463      	add	r3, ip
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10e      	bne.n	800425a <USB_EPStartXfer+0x4d2>
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	4a35      	ldr	r2, [pc, #212]	; (8004318 <USB_EPStartXfer+0x590>)
 8004242:	4013      	ands	r3, r2
 8004244:	b29a      	uxth	r2, r3
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	801a      	strh	r2, [r3, #0]
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	4a33      	ldr	r2, [pc, #204]	; (800431c <USB_EPStartXfer+0x594>)
 8004250:	4313      	orrs	r3, r2
 8004252:	b29a      	uxth	r2, r3
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	801a      	strh	r2, [r3, #0]
 8004258:	e03c      	b.n	80042d4 <USB_EPStartXfer+0x54c>
 800425a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425c:	2b3e      	cmp	r3, #62	; 0x3e
 800425e:	d810      	bhi.n	8004282 <USB_EPStartXfer+0x4fa>
 8004260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004268:	2201      	movs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	d002      	beq.n	8004274 <USB_EPStartXfer+0x4ec>
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	3301      	adds	r3, #1
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	b29b      	uxth	r3, r3
 8004278:	029b      	lsls	r3, r3, #10
 800427a:	b29a      	uxth	r2, r3
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	801a      	strh	r2, [r3, #0]
 8004280:	e028      	b.n	80042d4 <USB_EPStartXfer+0x54c>
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
 8004288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800428a:	221f      	movs	r2, #31
 800428c:	4013      	ands	r3, r2
 800428e:	d102      	bne.n	8004296 <USB_EPStartXfer+0x50e>
 8004290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004292:	3b01      	subs	r3, #1
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
 8004296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004298:	b29b      	uxth	r3, r3
 800429a:	029b      	lsls	r3, r3, #10
 800429c:	b29b      	uxth	r3, r3
 800429e:	4a1f      	ldr	r2, [pc, #124]	; (800431c <USB_EPStartXfer+0x594>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	e014      	b.n	80042d4 <USB_EPStartXfer+0x54c>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	785b      	ldrb	r3, [r3, #1]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d110      	bne.n	80042d4 <USB_EPStartXfer+0x54c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2250      	movs	r2, #80	; 0x50
 80042b6:	5a9b      	ldrh	r3, [r3, r2]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	18e4      	adds	r4, r4, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	18e3      	adds	r3, r4, r3
 80042c4:	4a16      	ldr	r2, [pc, #88]	; (8004320 <USB_EPStartXfer+0x598>)
 80042c6:	4694      	mov	ip, r2
 80042c8:	4463      	add	r3, ip
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80042cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	18d3      	adds	r3, r2, r3
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4a10      	ldr	r2, [pc, #64]	; (8004324 <USB_EPStartXfer+0x59c>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	b29c      	uxth	r4, r3
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	015b      	lsls	r3, r3, #5
 80042ec:	4063      	eors	r3, r4
 80042ee:	b29c      	uxth	r4, r3
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	019b      	lsls	r3, r3, #6
 80042f4:	4063      	eors	r3, r4
 80042f6:	b29c      	uxth	r4, r3
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	18d3      	adds	r3, r2, r3
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <USB_EPStartXfer+0x5a0>)
 8004304:	4322      	orrs	r2, r4
 8004306:	b292      	uxth	r2, r2
 8004308:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b015      	add	sp, #84	; 0x54
 8004312:	bd90      	pop	{r4, r7, pc}
 8004314:	00000402 	.word	0x00000402
 8004318:	ffff83ff 	.word	0xffff83ff
 800431c:	ffff8000 	.word	0xffff8000
 8004320:	00000406 	.word	0x00000406
 8004324:	ffffbf8f 	.word	0xffffbf8f
 8004328:	ffff8080 	.word	0xffff8080

0800432c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800432c:	b590      	push	{r4, r7, lr}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d016      	beq.n	800436c <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	18d3      	adds	r3, r2, r3
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <USB_EPSetStall+0x78>)
 800434e:	4013      	ands	r3, r2
 8004350:	b29c      	uxth	r4, r3
 8004352:	2310      	movs	r3, #16
 8004354:	4063      	eors	r3, r4
 8004356:	b29c      	uxth	r4, r3
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	18d3      	adds	r3, r2, r3
 8004362:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <USB_EPSetStall+0x7c>)
 8004364:	4322      	orrs	r2, r4
 8004366:	b292      	uxth	r2, r2
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	e016      	b.n	800439a <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	18d3      	adds	r3, r2, r3
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <USB_EPSetStall+0x80>)
 800437c:	4013      	ands	r3, r2
 800437e:	b29c      	uxth	r4, r3
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	015b      	lsls	r3, r3, #5
 8004384:	4063      	eors	r3, r4
 8004386:	b29c      	uxth	r4, r3
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	18d3      	adds	r3, r2, r3
 8004392:	4a05      	ldr	r2, [pc, #20]	; (80043a8 <USB_EPSetStall+0x7c>)
 8004394:	4322      	orrs	r2, r4
 8004396:	b292      	uxth	r2, r2
 8004398:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b003      	add	sp, #12
 80043a2:	bd90      	pop	{r4, r7, pc}
 80043a4:	ffff8fbf 	.word	0xffff8fbf
 80043a8:	ffff8080 	.word	0xffff8080
 80043ac:	ffffbf8f 	.word	0xffffbf8f

080043b0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	7b1b      	ldrb	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d000      	beq.n	80043c4 <USB_EPClearStall+0x14>
 80043c2:	e076      	b.n	80044b2 <USB_EPClearStall+0x102>
  {
    if (ep->is_in != 0U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d038      	beq.n	800443e <USB_EPClearStall+0x8e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	18d3      	adds	r3, r2, r3
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29c      	uxth	r4, r3
 80043da:	0022      	movs	r2, r4
 80043dc:	2340      	movs	r3, #64	; 0x40
 80043de:	4013      	ands	r3, r2
 80043e0:	d012      	beq.n	8004408 <USB_EPClearStall+0x58>
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	18d3      	adds	r3, r2, r3
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	4a32      	ldr	r2, [pc, #200]	; (80044bc <USB_EPClearStall+0x10c>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	b29c      	uxth	r4, r3
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	18d3      	adds	r3, r2, r3
 8004400:	4a2f      	ldr	r2, [pc, #188]	; (80044c0 <USB_EPClearStall+0x110>)
 8004402:	4322      	orrs	r2, r4
 8004404:	b292      	uxth	r2, r2
 8004406:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	78db      	ldrb	r3, [r3, #3]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d050      	beq.n	80044b2 <USB_EPClearStall+0x102>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	18d3      	adds	r3, r2, r3
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <USB_EPClearStall+0x114>)
 8004420:	4013      	ands	r3, r2
 8004422:	b29c      	uxth	r4, r3
 8004424:	2320      	movs	r3, #32
 8004426:	4063      	eors	r3, r4
 8004428:	b29c      	uxth	r4, r3
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	18d3      	adds	r3, r2, r3
 8004434:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <USB_EPClearStall+0x118>)
 8004436:	4322      	orrs	r2, r4
 8004438:	b292      	uxth	r2, r2
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	e039      	b.n	80044b2 <USB_EPClearStall+0x102>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	18d3      	adds	r3, r2, r3
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29c      	uxth	r4, r3
 800444c:	0022      	movs	r2, r4
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	01db      	lsls	r3, r3, #7
 8004452:	4013      	ands	r3, r2
 8004454:	d012      	beq.n	800447c <USB_EPClearStall+0xcc>
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	18d3      	adds	r3, r2, r3
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <USB_EPClearStall+0x10c>)
 8004466:	4013      	ands	r3, r2
 8004468:	b29c      	uxth	r4, r3
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	18d3      	adds	r3, r2, r3
 8004474:	4a15      	ldr	r2, [pc, #84]	; (80044cc <USB_EPClearStall+0x11c>)
 8004476:	4322      	orrs	r2, r4
 8004478:	b292      	uxth	r2, r2
 800447a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	18d3      	adds	r3, r2, r3
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <USB_EPClearStall+0x120>)
 800448c:	4013      	ands	r3, r2
 800448e:	b29c      	uxth	r4, r3
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	015b      	lsls	r3, r3, #5
 8004494:	4063      	eors	r3, r4
 8004496:	b29c      	uxth	r4, r3
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	019b      	lsls	r3, r3, #6
 800449c:	4063      	eors	r3, r4
 800449e:	b29c      	uxth	r4, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	18d3      	adds	r3, r2, r3
 80044aa:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <USB_EPClearStall+0x118>)
 80044ac:	4322      	orrs	r2, r4
 80044ae:	b292      	uxth	r2, r2
 80044b0:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b003      	add	sp, #12
 80044ba:	bd90      	pop	{r4, r7, pc}
 80044bc:	ffff8f8f 	.word	0xffff8f8f
 80044c0:	ffff80c0 	.word	0xffff80c0
 80044c4:	ffff8fbf 	.word	0xffff8fbf
 80044c8:	ffff8080 	.word	0xffff8080
 80044cc:	ffffc080 	.word	0xffffc080
 80044d0:	ffffbf8f 	.word	0xffffbf8f

080044d4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	000a      	movs	r2, r1
 80044de:	1cfb      	adds	r3, r7, #3
 80044e0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80044e2:	1cfb      	adds	r3, r7, #3
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	224c      	movs	r2, #76	; 0x4c
 80044ee:	2180      	movs	r1, #128	; 0x80
 80044f0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b002      	add	sp, #8
 80044fa:	bd80      	pop	{r7, pc}

080044fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2258      	movs	r2, #88	; 0x58
 8004508:	5a9b      	ldrh	r3, [r3, r2]
 800450a:	b29b      	uxth	r3, r3
 800450c:	4a05      	ldr	r2, [pc, #20]	; (8004524 <USB_DevConnect+0x28>)
 800450e:	4313      	orrs	r3, r2
 8004510:	b299      	uxth	r1, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2258      	movs	r2, #88	; 0x58
 8004516:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b002      	add	sp, #8
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	ffff8000 	.word	0xffff8000

08004528 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2244      	movs	r2, #68	; 0x44
 8004534:	5a9b      	ldrh	r3, [r3, r2]
 8004536:	b29b      	uxth	r3, r3
 8004538:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800453a:	68fb      	ldr	r3, [r7, #12]
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b004      	add	sp, #16
 8004542:	bd80      	pop	{r7, pc}

08004544 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}

08004558 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08c      	sub	sp, #48	; 0x30
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	0019      	movs	r1, r3
 8004564:	1dbb      	adds	r3, r7, #6
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	1c0a      	adds	r2, r1, #0
 800456c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	3301      	adds	r3, #1
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004580:	1dbb      	adds	r3, r7, #6
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	18d3      	adds	r3, r2, r3
 8004588:	2280      	movs	r2, #128	; 0x80
 800458a:	00d2      	lsls	r2, r2, #3
 800458c:	4694      	mov	ip, r2
 800458e:	4463      	add	r3, ip
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004596:	e01b      	b.n	80045d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	3301      	adds	r3, #1
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	001a      	movs	r2, r3
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	3302      	adds	r3, #2
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	3301      	adds	r3, #1
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	3b01      	subs	r3, #1
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e0      	bne.n	8004598 <USB_WritePMA+0x40>
  }
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b00c      	add	sp, #48	; 0x30
 80045dc:	bd80      	pop	{r7, pc}

080045de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b08a      	sub	sp, #40	; 0x28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	0019      	movs	r1, r3
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	1c0a      	adds	r2, r1, #0
 80045f2:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	085b      	lsrs	r3, r3, #1
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004606:	1dbb      	adds	r3, r7, #6
 8004608:	881a      	ldrh	r2, [r3, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	00d2      	lsls	r2, r2, #3
 8004612:	4694      	mov	ip, r2
 8004614:	4463      	add	r3, ip
 8004616:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	e018      	b.n	8004650 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	3302      	adds	r3, #2
 800462a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	3301      	adds	r3, #1
 8004638:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	0a1b      	lsrs	r3, r3, #8
 800463e:	b2da      	uxtb	r2, r3
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	3301      	adds	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	3b01      	subs	r3, #1
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e3      	bne.n	800461e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	2201      	movs	r2, #1
 800465c:	4013      	ands	r3, r2
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	701a      	strb	r2, [r3, #0]
  }
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b00a      	add	sp, #40	; 0x28
 800467a:	bd80      	pop	{r7, pc}

0800467c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	000a      	movs	r2, r1
 8004686:	1cfb      	adds	r3, r7, #3
 8004688:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	7c1b      	ldrb	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d116      	bne.n	80046c8 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	2181      	movs	r1, #129	; 0x81
 80046a4:	f004 fa0e 	bl	8008ac4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	2101      	movs	r1, #1
 80046b8:	f004 fa04 	bl	8008ac4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	23b6      	movs	r3, #182	; 0xb6
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	2101      	movs	r1, #1
 80046c4:	50d1      	str	r1, [r2, r3]
 80046c6:	e013      	b.n	80046f0 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	2340      	movs	r3, #64	; 0x40
 80046cc:	2202      	movs	r2, #2
 80046ce:	2181      	movs	r1, #129	; 0x81
 80046d0:	f004 f9f8 	bl	8008ac4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	2340      	movs	r3, #64	; 0x40
 80046de:	2202      	movs	r2, #2
 80046e0:	2101      	movs	r1, #1
 80046e2:	f004 f9ef 	bl	8008ac4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	23b6      	movs	r3, #182	; 0xb6
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2101      	movs	r1, #1
 80046ee:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	2308      	movs	r3, #8
 80046f4:	2203      	movs	r2, #3
 80046f6:	2182      	movs	r1, #130	; 0x82
 80046f8:	f004 f9e4 	bl	8008ac4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004702:	2387      	movs	r3, #135	; 0x87
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	0018      	movs	r0, r3
 8004708:	f004 fb74 	bl	8008df4 <USBD_static_malloc>
 800470c:	0001      	movs	r1, r0
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	23ae      	movs	r3, #174	; 0xae
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	23ae      	movs	r3, #174	; 0xae
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	58d3      	ldr	r3, [r2, r3]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8004722:	230f      	movs	r3, #15
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	2201      	movs	r2, #1
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e02c      	b.n	8004786 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	23ae      	movs	r3, #174	; 0xae
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	58d3      	ldr	r3, [r2, r3]
 8004734:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	23af      	movs	r3, #175	; 0xaf
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	58d3      	ldr	r3, [r2, r3]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	2385      	movs	r3, #133	; 0x85
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	2100      	movs	r1, #0
 800474a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	2386      	movs	r3, #134	; 0x86
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	2100      	movs	r1, #0
 8004754:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7c1b      	ldrb	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	2381      	movs	r3, #129	; 0x81
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	58d2      	ldr	r2, [r2, r3]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	2101      	movs	r1, #1
 800476e:	f004 faf3 	bl	8008d58 <USBD_LL_PrepareReceive>
 8004772:	e008      	b.n	8004786 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	2381      	movs	r3, #129	; 0x81
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	58d2      	ldr	r2, [r2, r3]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	2340      	movs	r3, #64	; 0x40
 8004780:	2101      	movs	r1, #1
 8004782:	f004 fae9 	bl	8008d58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004786:	230f      	movs	r3, #15
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	781b      	ldrb	r3, [r3, #0]
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	b004      	add	sp, #16
 8004792:	bd80      	pop	{r7, pc}

08004794 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	000a      	movs	r2, r1
 800479e:	1cfb      	adds	r3, r7, #3
 80047a0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80047a2:	230f      	movs	r3, #15
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2181      	movs	r1, #129	; 0x81
 80047ae:	0018      	movs	r0, r3
 80047b0:	f004 f9bf 	bl	8008b32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2101      	movs	r1, #1
 80047be:	0018      	movs	r0, r3
 80047c0:	f004 f9b7 	bl	8008b32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	23b6      	movs	r3, #182	; 0xb6
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2100      	movs	r1, #0
 80047cc:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2182      	movs	r1, #130	; 0x82
 80047d2:	0018      	movs	r0, r3
 80047d4:	f004 f9ad 	bl	8008b32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	23ae      	movs	r3, #174	; 0xae
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	58d3      	ldr	r3, [r2, r3]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d011      	beq.n	800480e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	23af      	movs	r3, #175	; 0xaf
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	58d3      	ldr	r3, [r2, r3]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	23ae      	movs	r3, #174	; 0xae
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	58d3      	ldr	r3, [r2, r3]
 80047fe:	0018      	movs	r0, r3
 8004800:	f004 fb04 	bl	8008e0c <USBD_static_free>
    pdev->pClassData = NULL;
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	23ae      	movs	r3, #174	; 0xae
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	2100      	movs	r1, #0
 800480c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800480e:	230f      	movs	r3, #15
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	781b      	ldrb	r3, [r3, #0]
}
 8004814:	0018      	movs	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	b004      	add	sp, #16
 800481a:	bd80      	pop	{r7, pc}

0800481c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	23ae      	movs	r3, #174	; 0xae
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	58d3      	ldr	r3, [r2, r3]
 800482e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004830:	230f      	movs	r3, #15
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8004838:	230c      	movs	r3, #12
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2200      	movs	r2, #0
 800483e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8004840:	2317      	movs	r3, #23
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	001a      	movs	r2, r3
 800484e:	2360      	movs	r3, #96	; 0x60
 8004850:	4013      	ands	r3, r2
 8004852:	d03d      	beq.n	80048d0 <USBD_CDC_Setup+0xb4>
 8004854:	2b20      	cmp	r3, #32
 8004856:	d000      	beq.n	800485a <USBD_CDC_Setup+0x3e>
 8004858:	e092      	b.n	8004980 <USBD_CDC_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	88db      	ldrh	r3, [r3, #6]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02b      	beq.n	80048ba <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	b25b      	sxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	da12      	bge.n	8004892 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	23af      	movs	r3, #175	; 0xaf
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	58d3      	ldr	r3, [r2, r3]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800487a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	88d2      	ldrh	r2, [r2, #6]
 8004880:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004882:	6939      	ldr	r1, [r7, #16]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	88da      	ldrh	r2, [r3, #6]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	0018      	movs	r0, r3
 800488c:	f001 fb84 	bl	8005f98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004890:	e081      	b.n	8004996 <USBD_CDC_Setup+0x17a>
          hcdc->CmdOpCode = req->bRequest;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	7859      	ldrb	r1, [r3, #1]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	88db      	ldrh	r3, [r3, #6]
 80048a2:	b2d9      	uxtb	r1, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4a3f      	ldr	r2, [pc, #252]	; (80049a4 <USBD_CDC_Setup+0x188>)
 80048a8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80048aa:	6939      	ldr	r1, [r7, #16]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	88da      	ldrh	r2, [r3, #6]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f001 fba3 	bl	8005ffe <USBD_CtlPrepareRx>
      break;
 80048b8:	e06d      	b.n	8004996 <USBD_CDC_Setup+0x17a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	23af      	movs	r3, #175	; 0xaf
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	58d3      	ldr	r3, [r2, r3]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	7850      	ldrb	r0, [r2, #1]
 80048c8:	6839      	ldr	r1, [r7, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	4798      	blx	r3
      break;
 80048ce:	e062      	b.n	8004996 <USBD_CDC_Setup+0x17a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b0a      	cmp	r3, #10
 80048d6:	d01c      	beq.n	8004912 <USBD_CDC_Setup+0xf6>
 80048d8:	2b0b      	cmp	r3, #11
 80048da:	d033      	beq.n	8004944 <USBD_CDC_Setup+0x128>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d142      	bne.n	8004966 <USBD_CDC_Setup+0x14a>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	23a7      	movs	r3, #167	; 0xa7
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d107      	bne.n	80048fc <USBD_CDC_Setup+0xe0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80048ec:	230c      	movs	r3, #12
 80048ee:	18f9      	adds	r1, r7, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	0018      	movs	r0, r3
 80048f6:	f001 fb4f 	bl	8005f98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048fa:	e040      	b.n	800497e <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	0011      	movs	r1, r2
 8004902:	0018      	movs	r0, r3
 8004904:	f001 fac9 	bl	8005e9a <USBD_CtlError>
            ret = USBD_FAIL;
 8004908:	2317      	movs	r3, #23
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	2202      	movs	r2, #2
 800490e:	701a      	strb	r2, [r3, #0]
          break;
 8004910:	e035      	b.n	800497e <USBD_CDC_Setup+0x162>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	23a7      	movs	r3, #167	; 0xa7
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	5cd3      	ldrb	r3, [r2, r3]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d107      	bne.n	800492e <USBD_CDC_Setup+0x112>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800491e:	230f      	movs	r3, #15
 8004920:	18f9      	adds	r1, r7, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	0018      	movs	r0, r3
 8004928:	f001 fb36 	bl	8005f98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800492c:	e027      	b.n	800497e <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	0011      	movs	r1, r2
 8004934:	0018      	movs	r0, r3
 8004936:	f001 fab0 	bl	8005e9a <USBD_CtlError>
            ret = USBD_FAIL;
 800493a:	2317      	movs	r3, #23
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	2202      	movs	r2, #2
 8004940:	701a      	strb	r2, [r3, #0]
          break;
 8004942:	e01c      	b.n	800497e <USBD_CDC_Setup+0x162>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	23a7      	movs	r3, #167	; 0xa7
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	5cd3      	ldrb	r3, [r2, r3]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d015      	beq.n	800497c <USBD_CDC_Setup+0x160>
          {
            USBD_CtlError(pdev, req);
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0011      	movs	r1, r2
 8004956:	0018      	movs	r0, r3
 8004958:	f001 fa9f 	bl	8005e9a <USBD_CtlError>
            ret = USBD_FAIL;
 800495c:	2317      	movs	r3, #23
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	2202      	movs	r2, #2
 8004962:	701a      	strb	r2, [r3, #0]
          }
          break;
 8004964:	e00a      	b.n	800497c <USBD_CDC_Setup+0x160>

        default:
          USBD_CtlError(pdev, req);
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0011      	movs	r1, r2
 800496c:	0018      	movs	r0, r3
 800496e:	f001 fa94 	bl	8005e9a <USBD_CtlError>
          ret = USBD_FAIL;
 8004972:	2317      	movs	r3, #23
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	2202      	movs	r2, #2
 8004978:	701a      	strb	r2, [r3, #0]
          break;
 800497a:	e000      	b.n	800497e <USBD_CDC_Setup+0x162>
          break;
 800497c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800497e:	e00a      	b.n	8004996 <USBD_CDC_Setup+0x17a>

    default:
      USBD_CtlError(pdev, req);
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f001 fa87 	bl	8005e9a <USBD_CtlError>
      ret = USBD_FAIL;
 800498c:	2317      	movs	r3, #23
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2202      	movs	r2, #2
 8004992:	701a      	strb	r2, [r3, #0]
      break;
 8004994:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004996:	2317      	movs	r3, #23
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	781b      	ldrb	r3, [r3, #0]
}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b006      	add	sp, #24
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	00000201 	.word	0x00000201

080049a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	000a      	movs	r2, r1
 80049b2:	1cfb      	adds	r3, r7, #3
 80049b4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	23ae      	movs	r3, #174	; 0xae
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	58d3      	ldr	r3, [r2, r3]
 80049be:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	23b0      	movs	r3, #176	; 0xb0
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	58d3      	ldr	r3, [r2, r3]
 80049c8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	23ae      	movs	r3, #174	; 0xae
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	58d3      	ldr	r3, [r2, r3]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d03b      	beq.n	8004a4e <USBD_CDC_DataIn+0xa6>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80049d6:	1cfb      	adds	r3, r7, #3
 80049d8:	781a      	ldrb	r2, [r3, #0]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	0013      	movs	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	189b      	adds	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	18cb      	adds	r3, r1, r3
 80049e6:	331c      	adds	r3, #28
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d028      	beq.n	8004a40 <USBD_CDC_DataIn+0x98>
 80049ee:	1cfb      	adds	r3, r7, #3
 80049f0:	781a      	ldrb	r2, [r3, #0]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	0013      	movs	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	189b      	adds	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	18cb      	adds	r3, r1, r3
 80049fe:	331c      	adds	r3, #28
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	1cfb      	adds	r3, r7, #3
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	015b      	lsls	r3, r3, #5
 8004a0a:	18d3      	adds	r3, r2, r3
 8004a0c:	3338      	adds	r3, #56	; 0x38
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0019      	movs	r1, r3
 8004a12:	f7fb fbff 	bl	8000214 <__aeabi_uidivmod>
 8004a16:	1e0b      	subs	r3, r1, #0
 8004a18:	d112      	bne.n	8004a40 <USBD_CDC_DataIn+0x98>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004a1a:	1cfb      	adds	r3, r7, #3
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	0013      	movs	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	189b      	adds	r3, r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	18cb      	adds	r3, r1, r3
 8004a2a:	331c      	adds	r3, #28
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a30:	1cfb      	adds	r3, r7, #3
 8004a32:	7819      	ldrb	r1, [r3, #0]
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f004 f955 	bl	8008ce8 <USBD_LL_Transmit>
 8004a3e:	e004      	b.n	8004a4a <USBD_CDC_DataIn+0xa2>
    }
    else
    {
      hcdc->TxState = 0U;
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	2385      	movs	r3, #133	; 0x85
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	2100      	movs	r1, #0
 8004a48:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <USBD_CDC_DataIn+0xa8>
  }
  else
  {
    return USBD_FAIL;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b004      	add	sp, #16
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	000a      	movs	r2, r1
 8004a62:	1cfb      	adds	r3, r7, #3
 8004a64:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	23ae      	movs	r3, #174	; 0xae
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	58d3      	ldr	r3, [r2, r3]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004a70:	1cfb      	adds	r3, r7, #3
 8004a72:	781a      	ldrb	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0011      	movs	r1, r2
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f004 f9a5 	bl	8008dc8 <USBD_LL_GetRxDataSize>
 8004a7e:	0001      	movs	r1, r0
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	2383      	movs	r3, #131	; 0x83
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	23ae      	movs	r3, #174	; 0xae
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	58d3      	ldr	r3, [r2, r3]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d011      	beq.n	8004ab8 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	23af      	movs	r3, #175	; 0xaf
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	58d3      	ldr	r3, [r2, r3]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	68f9      	ldr	r1, [r7, #12]
 8004aa0:	2281      	movs	r2, #129	; 0x81
 8004aa2:	0092      	lsls	r2, r2, #2
 8004aa4:	5888      	ldr	r0, [r1, r2]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	2183      	movs	r1, #131	; 0x83
 8004aaa:	0089      	lsls	r1, r1, #2
 8004aac:	468c      	mov	ip, r1
 8004aae:	4462      	add	r2, ip
 8004ab0:	0011      	movs	r1, r2
 8004ab2:	4798      	blx	r3

    return USBD_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b004      	add	sp, #16
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	23ae      	movs	r3, #174	; 0xae
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	58d3      	ldr	r3, [r2, r3]
 8004ad4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	23af      	movs	r3, #175	; 0xaf
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	58d3      	ldr	r3, [r2, r3]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01a      	beq.n	8004b18 <USBD_CDC_EP0_RxReady+0x54>
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	5cd3      	ldrb	r3, [r2, r3]
 8004aea:	2bff      	cmp	r3, #255	; 0xff
 8004aec:	d014      	beq.n	8004b18 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	23af      	movs	r3, #175	; 0xaf
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	58d3      	ldr	r3, [r2, r3]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	2280      	movs	r2, #128	; 0x80
 8004afc:	0092      	lsls	r2, r2, #2
 8004afe:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8004b00:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4907      	ldr	r1, [pc, #28]	; (8004b24 <USBD_CDC_EP0_RxReady+0x60>)
 8004b06:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b08:	b292      	uxth	r2, r2
 8004b0a:	0021      	movs	r1, r4
 8004b0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	21ff      	movs	r1, #255	; 0xff
 8004b16:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b005      	add	sp, #20
 8004b20:	bd90      	pop	{r4, r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	00000201 	.word	0x00000201

08004b28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2243      	movs	r2, #67	; 0x43
 8004b34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004b36:	4b02      	ldr	r3, [pc, #8]	; (8004b40 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b002      	add	sp, #8
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000090 	.word	0x20000090

08004b44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2243      	movs	r2, #67	; 0x43
 8004b50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004b52:	4b02      	ldr	r3, [pc, #8]	; (8004b5c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	2000004c 	.word	0x2000004c

08004b60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2243      	movs	r2, #67	; 0x43
 8004b6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004b6e:	4b02      	ldr	r3, [pc, #8]	; (8004b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	200000d4 	.word	0x200000d4

08004b7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	220a      	movs	r2, #10
 8004b88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004b8a:	4b02      	ldr	r3, [pc, #8]	; (8004b94 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b002      	add	sp, #8
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20000008 	.word	0x20000008

08004b98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004ba2:	230f      	movs	r3, #15
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData = fops;
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	23af      	movs	r3, #175	; 0xaf
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8004bba:	230f      	movs	r3, #15
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004bc2:	230f      	movs	r3, #15
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	781b      	ldrb	r3, [r3, #0]
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b004      	add	sp, #16
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	1dbb      	adds	r3, r7, #6
 8004bdc:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	23ae      	movs	r3, #174	; 0xae
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	58d3      	ldr	r3, [r2, r3]
 8004be6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	2382      	movs	r3, #130	; 0x82
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8004bf2:	1dbb      	adds	r3, r7, #6
 8004bf4:	8819      	ldrh	r1, [r3, #0]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	2384      	movs	r3, #132	; 0x84
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	0018      	movs	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b006      	add	sp, #24
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	23ae      	movs	r3, #174	; 0xae
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	58d3      	ldr	r3, [r2, r3]
 8004c1a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	2381      	movs	r3, #129	; 0x81
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	6839      	ldr	r1, [r7, #0]
 8004c24:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b004      	add	sp, #16
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	23ae      	movs	r3, #174	; 0xae
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	58d3      	ldr	r3, [r2, r3]
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	23ae      	movs	r3, #174	; 0xae
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	58d3      	ldr	r3, [r2, r3]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d019      	beq.n	8004c82 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	7c1b      	ldrb	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	2381      	movs	r3, #129	; 0x81
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	58d2      	ldr	r2, [r2, r3]
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	2101      	movs	r1, #1
 8004c66:	f004 f877 	bl	8008d58 <USBD_LL_PrepareReceive>
 8004c6a:	e008      	b.n	8004c7e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	2381      	movs	r3, #129	; 0x81
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	58d2      	ldr	r2, [r2, r3]
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	2340      	movs	r3, #64	; 0x40
 8004c78:	2101      	movs	r1, #1
 8004c7a:	f004 f86d 	bl	8008d58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8004c82:	2302      	movs	r3, #2
  }
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b004      	add	sp, #16
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	1dfb      	adds	r3, r7, #7
 8004c98:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e020      	b.n	8004ce6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	23ad      	movs	r3, #173	; 0xad
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	58d3      	ldr	r3, [r2, r3]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d004      	beq.n	8004cba <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	23ad      	movs	r3, #173	; 0xad
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	23ac      	movs	r3, #172	; 0xac
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	23a7      	movs	r3, #167	; 0xa7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1dfa      	adds	r2, r7, #7
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f003 fe66 	bl	80089b0 <USBD_LL_Init>

  return USBD_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b004      	add	sp, #16
 8004cec:	bd80      	pop	{r7, pc}

08004cee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004cf8:	230f      	movs	r3, #15
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	23ad      	movs	r3, #173	; 0xad
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8004d10:	230f      	movs	r3, #15
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e003      	b.n	8004d22 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004d1a:	230f      	movs	r3, #15
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	2202      	movs	r2, #2
 8004d20:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004d22:	230f      	movs	r3, #15
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	781b      	ldrb	r3, [r3, #0]
}
 8004d28:	0018      	movs	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f003 fe9c 	bl	8008a78 <USBD_LL_Start>

  return USBD_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b002      	add	sp, #8
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	0018      	movs	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b002      	add	sp, #8
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	000a      	movs	r2, r1
 8004d66:	1cfb      	adds	r3, r7, #3
 8004d68:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004d6a:	230f      	movs	r3, #15
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	2202      	movs	r2, #2
 8004d70:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	23ad      	movs	r3, #173	; 0xad
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	58d3      	ldr	r3, [r2, r3]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00f      	beq.n	8004d9e <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	23ad      	movs	r3, #173	; 0xad
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	58d3      	ldr	r3, [r2, r3]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	1cfa      	adds	r2, r7, #3
 8004d8a:	7811      	ldrb	r1, [r2, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	0010      	movs	r0, r2
 8004d90:	4798      	blx	r3
 8004d92:	1e03      	subs	r3, r0, #0
 8004d94:	d103      	bne.n	8004d9e <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8004d96:	230f      	movs	r3, #15
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8004d9e:	230f      	movs	r3, #15
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	781b      	ldrb	r3, [r3, #0]
}
 8004da4:	0018      	movs	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b004      	add	sp, #16
 8004daa:	bd80      	pop	{r7, pc}

08004dac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	000a      	movs	r2, r1
 8004db6:	1cfb      	adds	r3, r7, #3
 8004db8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	23ad      	movs	r3, #173	; 0xad
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	58d3      	ldr	r3, [r2, r3]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	1cfa      	adds	r2, r7, #3
 8004dc6:	7811      	ldrb	r1, [r2, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	0010      	movs	r0, r2
 8004dcc:	4798      	blx	r3

  return USBD_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b002      	add	sp, #8
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	22aa      	movs	r2, #170	; 0xaa
 8004de6:	0092      	lsls	r2, r2, #2
 8004de8:	4694      	mov	ip, r2
 8004dea:	4463      	add	r3, ip
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	0011      	movs	r1, r2
 8004df0:	0018      	movs	r0, r3
 8004df2:	f001 f817 	bl	8005e24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	23a5      	movs	r3, #165	; 0xa5
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a22      	ldr	r2, [pc, #136]	; (8004e8c <USBD_LL_SetupStage+0xb4>)
 8004e04:	5a9b      	ldrh	r3, [r3, r2]
 8004e06:	0019      	movs	r1, r3
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	23a6      	movs	r3, #166	; 0xa6
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	23aa      	movs	r3, #170	; 0xaa
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	001a      	movs	r2, r3
 8004e1a:	231f      	movs	r3, #31
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d00d      	beq.n	8004e3e <USBD_LL_SetupStage+0x66>
 8004e22:	d302      	bcc.n	8004e2a <USBD_LL_SetupStage+0x52>
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d014      	beq.n	8004e52 <USBD_LL_SetupStage+0x7a>
 8004e28:	e01d      	b.n	8004e66 <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	22aa      	movs	r2, #170	; 0xaa
 8004e2e:	0092      	lsls	r2, r2, #2
 8004e30:	189a      	adds	r2, r3, r2
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0011      	movs	r1, r2
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 fa10 	bl	800525c <USBD_StdDevReq>
      break;
 8004e3c:	e020      	b.n	8004e80 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	22aa      	movs	r2, #170	; 0xaa
 8004e42:	0092      	lsls	r2, r2, #2
 8004e44:	189a      	adds	r2, r3, r2
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0011      	movs	r1, r2
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f000 fa78 	bl	8005340 <USBD_StdItfReq>
      break;
 8004e50:	e016      	b.n	8004e80 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	22aa      	movs	r2, #170	; 0xaa
 8004e56:	0092      	lsls	r2, r2, #2
 8004e58:	189a      	adds	r2, r3, r2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	0011      	movs	r1, r2
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f000 fac5 	bl	80053ee <USBD_StdEPReq>
      break;
 8004e64:	e00c      	b.n	8004e80 <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	23aa      	movs	r3, #170	; 0xaa
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	5cd3      	ldrb	r3, [r2, r3]
 8004e6e:	227f      	movs	r2, #127	; 0x7f
 8004e70:	4393      	bics	r3, r2
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	0011      	movs	r1, r2
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f003 fe86 	bl	8008b8a <USBD_LL_StallEP>
      break;
 8004e7e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	0018      	movs	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b002      	add	sp, #8
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	000002ae 	.word	0x000002ae

08004e90 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	200b      	movs	r0, #11
 8004e9c:	183b      	adds	r3, r7, r0
 8004e9e:	1c0a      	adds	r2, r1, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004ea2:	183b      	adds	r3, r7, r0
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d154      	bne.n	8004f54 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3355      	adds	r3, #85	; 0x55
 8004eae:	33ff      	adds	r3, #255	; 0xff
 8004eb0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	23a5      	movs	r3, #165	; 0xa5
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	58d3      	ldr	r3, [r2, r3]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d139      	bne.n	8004f32 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d919      	bls.n	8004efe <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d203      	bcs.n	8004eec <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	e002      	b.n	8004ef2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	f001 f8a5 	bl	8006046 <USBD_CtlContinueRx>
 8004efc:	e045      	b.n	8004f8a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	23ad      	movs	r3, #173	; 0xad
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	58d3      	ldr	r3, [r2, r3]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00d      	beq.n	8004f28 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	23a7      	movs	r3, #167	; 0xa7
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d107      	bne.n	8004f28 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	23ad      	movs	r3, #173	; 0xad
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	58d3      	ldr	r3, [r2, r3]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	0010      	movs	r0, r2
 8004f26:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f001 f89e 	bl	800606c <USBD_CtlSendStatus>
 8004f30:	e02b      	b.n	8004f8a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	23a5      	movs	r3, #165	; 0xa5
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	58d3      	ldr	r3, [r2, r3]
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d125      	bne.n	8004f8a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	23a5      	movs	r3, #165	; 0xa5
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	2100      	movs	r1, #0
 8004f46:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f003 fe1c 	bl	8008b8a <USBD_LL_StallEP>
 8004f52:	e01a      	b.n	8004f8a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	23ad      	movs	r3, #173	; 0xad
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	58d3      	ldr	r3, [r2, r3]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	23a7      	movs	r3, #167	; 0xa7
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d10b      	bne.n	8004f86 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	23ad      	movs	r3, #173	; 0xad
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	58d3      	ldr	r3, [r2, r3]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	220b      	movs	r2, #11
 8004f7a:	18ba      	adds	r2, r7, r2
 8004f7c:	7811      	ldrb	r1, [r2, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	0010      	movs	r0, r2
 8004f82:	4798      	blx	r3
 8004f84:	e001      	b.n	8004f8a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004f86:	2302      	movs	r3, #2
 8004f88:	e000      	b.n	8004f8c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b006      	add	sp, #24
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	200b      	movs	r0, #11
 8004fa0:	183b      	adds	r3, r7, r0
 8004fa2:	1c0a      	adds	r2, r1, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004fa6:	183b      	adds	r3, r7, r0
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d000      	beq.n	8004fb0 <USBD_LL_DataInStage+0x1c>
 8004fae:	e08e      	b.n	80050ce <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	23a5      	movs	r3, #165	; 0xa5
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	58d3      	ldr	r3, [r2, r3]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d164      	bne.n	800508c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d915      	bls.n	8004ffa <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	1ad2      	subs	r2, r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f000 fff6 	bl	8005fd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	f003 feb0 	bl	8008d58 <USBD_LL_PrepareReceive>
 8004ff8:	e059      	b.n	80050ae <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	0019      	movs	r1, r3
 8005004:	0010      	movs	r0, r2
 8005006:	f7fb f905 	bl	8000214 <__aeabi_uidivmod>
 800500a:	1e0b      	subs	r3, r1, #0
 800500c:	d11f      	bne.n	800504e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005016:	429a      	cmp	r2, r3
 8005018:	d319      	bcc.n	800504e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	23a6      	movs	r3, #166	; 0xa6
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005026:	429a      	cmp	r2, r3
 8005028:	d211      	bcs.n	800504e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	2100      	movs	r1, #0
 8005030:	0018      	movs	r0, r3
 8005032:	f000 ffd1 	bl	8005fd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	23a6      	movs	r3, #166	; 0xa6
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	2100      	movs	r1, #0
 800503e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	2300      	movs	r3, #0
 8005044:	2200      	movs	r2, #0
 8005046:	2100      	movs	r1, #0
 8005048:	f003 fe86 	bl	8008d58 <USBD_LL_PrepareReceive>
 800504c:	e02f      	b.n	80050ae <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	23ad      	movs	r3, #173	; 0xad
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	58d3      	ldr	r3, [r2, r3]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	23a7      	movs	r3, #167	; 0xa7
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005064:	2b03      	cmp	r3, #3
 8005066:	d107      	bne.n	8005078 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	23ad      	movs	r3, #173	; 0xad
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	58d3      	ldr	r3, [r2, r3]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	0010      	movs	r0, r2
 8005076:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	0018      	movs	r0, r3
 800507e:	f003 fd84 	bl	8008b8a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	0018      	movs	r0, r3
 8005086:	f001 f805 	bl	8006094 <USBD_CtlReceiveStatus>
 800508a:	e010      	b.n	80050ae <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	23a5      	movs	r3, #165	; 0xa5
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	58d3      	ldr	r3, [r2, r3]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d005      	beq.n	80050a4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	23a5      	movs	r3, #165	; 0xa5
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2180      	movs	r1, #128	; 0x80
 80050a8:	0018      	movs	r0, r3
 80050aa:	f003 fd6e 	bl	8008b8a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	23a8      	movs	r3, #168	; 0xa8
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	5cd3      	ldrb	r3, [r2, r3]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d124      	bne.n	8005104 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff fe44 	bl	8004d4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	23a8      	movs	r3, #168	; 0xa8
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	2100      	movs	r1, #0
 80050ca:	54d1      	strb	r1, [r2, r3]
 80050cc:	e01a      	b.n	8005104 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	23ad      	movs	r3, #173	; 0xad
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	58d3      	ldr	r3, [r2, r3]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d011      	beq.n	8005100 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	23a7      	movs	r3, #167	; 0xa7
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d10b      	bne.n	8005100 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	23ad      	movs	r3, #173	; 0xad
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	58d3      	ldr	r3, [r2, r3]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	220b      	movs	r2, #11
 80050f4:	18ba      	adds	r2, r7, r2
 80050f6:	7811      	ldrb	r1, [r2, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	0010      	movs	r0, r2
 80050fc:	4798      	blx	r3
 80050fe:	e001      	b.n	8005104 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005100:	2302      	movs	r3, #2
 8005102:	e000      	b.n	8005106 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	0018      	movs	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	b006      	add	sp, #24
 800510c:	bd80      	pop	{r7, pc}

0800510e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	2340      	movs	r3, #64	; 0x40
 800511a:	2200      	movs	r2, #0
 800511c:	2100      	movs	r1, #0
 800511e:	f003 fcd1 	bl	8008ac4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	23ac      	movs	r3, #172	; 0xac
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	2101      	movs	r1, #1
 800512a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	23b2      	movs	r3, #178	; 0xb2
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	2140      	movs	r1, #64	; 0x40
 8005134:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	2340      	movs	r3, #64	; 0x40
 800513a:	2200      	movs	r2, #0
 800513c:	2180      	movs	r1, #128	; 0x80
 800513e:	f003 fcc1 	bl	8008ac4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2240      	movs	r2, #64	; 0x40
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	23a7      	movs	r3, #167	; 0xa7
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	2101      	movs	r1, #1
 8005156:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	23a5      	movs	r3, #165	; 0xa5
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	2100      	movs	r1, #0
 8005160:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	23a9      	movs	r3, #169	; 0xa9
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	2100      	movs	r1, #0
 8005170:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	23ae      	movs	r3, #174	; 0xae
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	58d3      	ldr	r3, [r2, r3]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	23ad      	movs	r3, #173	; 0xad
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	58d3      	ldr	r3, [r2, r3]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	b2d9      	uxtb	r1, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	0018      	movs	r0, r3
 8005192:	4790      	blx	r2
  }

  return USBD_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	0018      	movs	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	b002      	add	sp, #8
 800519c:	bd80      	pop	{r7, pc}

0800519e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	000a      	movs	r2, r1
 80051a8:	1cfb      	adds	r3, r7, #3
 80051aa:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	1cfa      	adds	r2, r7, #3
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	0018      	movs	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b002      	add	sp, #8
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	23a7      	movs	r3, #167	; 0xa7
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	5cd1      	ldrb	r1, [r2, r3]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a06      	ldr	r2, [pc, #24]	; (80051ec <USBD_LL_Suspend+0x2c>)
 80051d4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	23a7      	movs	r3, #167	; 0xa7
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	2104      	movs	r1, #4
 80051de:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b002      	add	sp, #8
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	0000029d 	.word	0x0000029d

080051f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	23a7      	movs	r3, #167	; 0xa7
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	5cd3      	ldrb	r3, [r2, r3]
 8005200:	2b04      	cmp	r3, #4
 8005202:	d106      	bne.n	8005212 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a05      	ldr	r2, [pc, #20]	; (800521c <USBD_LL_Resume+0x2c>)
 8005208:	5c99      	ldrb	r1, [r3, r2]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	23a7      	movs	r3, #167	; 0xa7
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b002      	add	sp, #8
 800521a:	bd80      	pop	{r7, pc}
 800521c:	0000029d 	.word	0x0000029d

08005220 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	23a7      	movs	r3, #167	; 0xa7
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	5cd3      	ldrb	r3, [r2, r3]
 8005230:	2b03      	cmp	r3, #3
 8005232:	d10e      	bne.n	8005252 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	23ad      	movs	r3, #173	; 0xad
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	58d3      	ldr	r3, [r2, r3]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	23ad      	movs	r3, #173	; 0xad
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	58d3      	ldr	r3, [r2, r3]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	0010      	movs	r0, r2
 8005250:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	0018      	movs	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	b002      	add	sp, #8
 800525a:	bd80      	pop	{r7, pc}

0800525c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005266:	230f      	movs	r3, #15
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	001a      	movs	r2, r3
 8005274:	2360      	movs	r3, #96	; 0x60
 8005276:	4013      	ands	r3, r2
 8005278:	2b20      	cmp	r3, #32
 800527a:	d004      	beq.n	8005286 <USBD_StdDevReq+0x2a>
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d002      	beq.n	8005286 <USBD_StdDevReq+0x2a>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <USBD_StdDevReq+0x3e>
 8005284:	e04b      	b.n	800531e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	23ad      	movs	r3, #173	; 0xad
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	58d3      	ldr	r3, [r2, r3]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	6839      	ldr	r1, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	0010      	movs	r0, r2
 8005296:	4798      	blx	r3
      break;
 8005298:	e048      	b.n	800532c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	2b09      	cmp	r3, #9
 80052a0:	d835      	bhi.n	800530e <USBD_StdDevReq+0xb2>
 80052a2:	009a      	lsls	r2, r3, #2
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <USBD_StdDevReq+0xe0>)
 80052a6:	18d3      	adds	r3, r2, r3
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	0011      	movs	r1, r2
 80052b2:	0018      	movs	r0, r3
 80052b4:	f000 fa5a 	bl	800576c <USBD_GetDescriptor>
          break;
 80052b8:	e030      	b.n	800531c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 fc07 	bl	8005ad4 <USBD_SetAddress>
          break;
 80052c6:	e029      	b.n	800531c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	0011      	movs	r1, r2
 80052ce:	0018      	movs	r0, r3
 80052d0:	f000 fc54 	bl	8005b7c <USBD_SetConfig>
          break;
 80052d4:	e022      	b.n	800531c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0011      	movs	r1, r2
 80052dc:	0018      	movs	r0, r3
 80052de:	f000 fcf1 	bl	8005cc4 <USBD_GetConfig>
          break;
 80052e2:	e01b      	b.n	800531c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0011      	movs	r1, r2
 80052ea:	0018      	movs	r0, r3
 80052ec:	f000 fd24 	bl	8005d38 <USBD_GetStatus>
          break;
 80052f0:	e014      	b.n	800531c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	0011      	movs	r1, r2
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 fd57 	bl	8005dac <USBD_SetFeature>
          break;
 80052fe:	e00d      	b.n	800531c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0011      	movs	r1, r2
 8005306:	0018      	movs	r0, r3
 8005308:	f000 fd66 	bl	8005dd8 <USBD_ClrFeature>
          break;
 800530c:	e006      	b.n	800531c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	0011      	movs	r1, r2
 8005314:	0018      	movs	r0, r3
 8005316:	f000 fdc0 	bl	8005e9a <USBD_CtlError>
          break;
 800531a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800531c:	e006      	b.n	800532c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	0011      	movs	r1, r2
 8005324:	0018      	movs	r0, r3
 8005326:	f000 fdb8 	bl	8005e9a <USBD_CtlError>
      break;
 800532a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800532c:	230f      	movs	r3, #15
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	781b      	ldrb	r3, [r3, #0]
}
 8005332:	0018      	movs	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	b004      	add	sp, #16
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	0800900c 	.word	0x0800900c

08005340 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800534a:	230f      	movs	r3, #15
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	001a      	movs	r2, r3
 8005358:	2360      	movs	r3, #96	; 0x60
 800535a:	4013      	ands	r3, r2
 800535c:	2b20      	cmp	r3, #32
 800535e:	d003      	beq.n	8005368 <USBD_StdItfReq+0x28>
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d001      	beq.n	8005368 <USBD_StdItfReq+0x28>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d136      	bne.n	80053d6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	23a7      	movs	r3, #167	; 0xa7
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	5cd3      	ldrb	r3, [r2, r3]
 8005370:	3b01      	subs	r3, #1
 8005372:	2b02      	cmp	r3, #2
 8005374:	d826      	bhi.n	80053c4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	889b      	ldrh	r3, [r3, #4]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d81a      	bhi.n	80053b6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	23ad      	movs	r3, #173	; 0xad
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	58d3      	ldr	r3, [r2, r3]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	220f      	movs	r2, #15
 800538c:	18bc      	adds	r4, r7, r2
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	0010      	movs	r0, r2
 8005394:	4798      	blx	r3
 8005396:	0003      	movs	r3, r0
 8005398:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	88db      	ldrh	r3, [r3, #6]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d117      	bne.n	80053d2 <USBD_StdItfReq+0x92>
 80053a2:	230f      	movs	r3, #15
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d112      	bne.n	80053d2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	0018      	movs	r0, r3
 80053b0:	f000 fe5c 	bl	800606c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053b4:	e00d      	b.n	80053d2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	0011      	movs	r1, r2
 80053bc:	0018      	movs	r0, r3
 80053be:	f000 fd6c 	bl	8005e9a <USBD_CtlError>
          break;
 80053c2:	e006      	b.n	80053d2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	0011      	movs	r1, r2
 80053ca:	0018      	movs	r0, r3
 80053cc:	f000 fd65 	bl	8005e9a <USBD_CtlError>
          break;
 80053d0:	e000      	b.n	80053d4 <USBD_StdItfReq+0x94>
          break;
 80053d2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80053d4:	e006      	b.n	80053e4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	0011      	movs	r1, r2
 80053dc:	0018      	movs	r0, r3
 80053de:	f000 fd5c 	bl	8005e9a <USBD_CtlError>
      break;
 80053e2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	0018      	movs	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b005      	add	sp, #20
 80053ec:	bd90      	pop	{r4, r7, pc}

080053ee <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80053ee:	b5b0      	push	{r4, r5, r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80053f8:	230f      	movs	r3, #15
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	889a      	ldrh	r2, [r3, #4]
 8005404:	230e      	movs	r3, #14
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	001a      	movs	r2, r3
 8005410:	2360      	movs	r3, #96	; 0x60
 8005412:	4013      	ands	r3, r2
 8005414:	2b20      	cmp	r3, #32
 8005416:	d004      	beq.n	8005422 <USBD_StdEPReq+0x34>
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d002      	beq.n	8005422 <USBD_StdEPReq+0x34>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <USBD_StdEPReq+0x48>
 8005420:	e195      	b.n	800574e <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	23ad      	movs	r3, #173	; 0xad
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	58d3      	ldr	r3, [r2, r3]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	0010      	movs	r0, r2
 8005432:	4798      	blx	r3
      break;
 8005434:	e192      	b.n	800575c <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	001a      	movs	r2, r3
 800543c:	2360      	movs	r3, #96	; 0x60
 800543e:	4013      	ands	r3, r2
 8005440:	2b20      	cmp	r3, #32
 8005442:	d10f      	bne.n	8005464 <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	23ad      	movs	r3, #173	; 0xad
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	58d3      	ldr	r3, [r2, r3]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	250f      	movs	r5, #15
 8005450:	197c      	adds	r4, r7, r5
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	0010      	movs	r0, r2
 8005458:	4798      	blx	r3
 800545a:	0003      	movs	r3, r0
 800545c:	7023      	strb	r3, [r4, #0]

        return ret;
 800545e:	197b      	adds	r3, r7, r5
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	e17e      	b.n	8005762 <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d054      	beq.n	8005516 <USBD_StdEPReq+0x128>
 800546c:	2b03      	cmp	r3, #3
 800546e:	d003      	beq.n	8005478 <USBD_StdEPReq+0x8a>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d100      	bne.n	8005476 <USBD_StdEPReq+0x88>
 8005474:	e097      	b.n	80055a6 <USBD_StdEPReq+0x1b8>
 8005476:	e162      	b.n	800573e <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	23a7      	movs	r3, #167	; 0xa7
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	5cd3      	ldrb	r3, [r2, r3]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d002      	beq.n	800548a <USBD_StdEPReq+0x9c>
 8005484:	2b03      	cmp	r3, #3
 8005486:	d01f      	beq.n	80054c8 <USBD_StdEPReq+0xda>
 8005488:	e03d      	b.n	8005506 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800548a:	230e      	movs	r3, #14
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d012      	beq.n	80054ba <USBD_StdEPReq+0xcc>
 8005494:	230e      	movs	r3, #14
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d00d      	beq.n	80054ba <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800549e:	230e      	movs	r3, #14
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	781a      	ldrb	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	0011      	movs	r1, r2
 80054a8:	0018      	movs	r0, r3
 80054aa:	f003 fb6e 	bl	8008b8a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	0018      	movs	r0, r3
 80054b4:	f003 fb69 	bl	8008b8a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80054b8:	e02c      	b.n	8005514 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	0011      	movs	r1, r2
 80054c0:	0018      	movs	r0, r3
 80054c2:	f000 fcea 	bl	8005e9a <USBD_CtlError>
              break;
 80054c6:	e025      	b.n	8005514 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	885b      	ldrh	r3, [r3, #2]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d115      	bne.n	80054fc <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80054d0:	230e      	movs	r3, #14
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <USBD_StdEPReq+0x10e>
 80054da:	230e      	movs	r3, #14
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b80      	cmp	r3, #128	; 0x80
 80054e2:	d00b      	beq.n	80054fc <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	88db      	ldrh	r3, [r3, #6]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d107      	bne.n	80054fc <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80054ec:	230e      	movs	r3, #14
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	781a      	ldrb	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0011      	movs	r1, r2
 80054f6:	0018      	movs	r0, r3
 80054f8:	f003 fb47 	bl	8008b8a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	0018      	movs	r0, r3
 8005500:	f000 fdb4 	bl	800606c <USBD_CtlSendStatus>

              break;
 8005504:	e006      	b.n	8005514 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	0011      	movs	r1, r2
 800550c:	0018      	movs	r0, r3
 800550e:	f000 fcc4 	bl	8005e9a <USBD_CtlError>
              break;
 8005512:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8005514:	e11a      	b.n	800574c <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	23a7      	movs	r3, #167	; 0xa7
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	5cd3      	ldrb	r3, [r2, r3]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d002      	beq.n	8005528 <USBD_StdEPReq+0x13a>
 8005522:	2b03      	cmp	r3, #3
 8005524:	d01f      	beq.n	8005566 <USBD_StdEPReq+0x178>
 8005526:	e035      	b.n	8005594 <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005528:	230e      	movs	r3, #14
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d012      	beq.n	8005558 <USBD_StdEPReq+0x16a>
 8005532:	230e      	movs	r3, #14
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b80      	cmp	r3, #128	; 0x80
 800553a:	d00d      	beq.n	8005558 <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800553c:	230e      	movs	r3, #14
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	0011      	movs	r1, r2
 8005546:	0018      	movs	r0, r3
 8005548:	f003 fb1f 	bl	8008b8a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	0018      	movs	r0, r3
 8005552:	f003 fb1a 	bl	8008b8a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005556:	e025      	b.n	80055a4 <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0011      	movs	r1, r2
 800555e:	0018      	movs	r0, r3
 8005560:	f000 fc9b 	bl	8005e9a <USBD_CtlError>
              break;
 8005564:	e01e      	b.n	80055a4 <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	885b      	ldrh	r3, [r3, #2]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d119      	bne.n	80055a2 <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800556e:	230e      	movs	r3, #14
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	227f      	movs	r2, #127	; 0x7f
 8005576:	4013      	ands	r3, r2
 8005578:	d007      	beq.n	800558a <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800557a:	230e      	movs	r3, #14
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	781a      	ldrb	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	0011      	movs	r1, r2
 8005584:	0018      	movs	r0, r3
 8005586:	f003 fb2c 	bl	8008be2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	0018      	movs	r0, r3
 800558e:	f000 fd6d 	bl	800606c <USBD_CtlSendStatus>
              }
              break;
 8005592:	e006      	b.n	80055a2 <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	0011      	movs	r1, r2
 800559a:	0018      	movs	r0, r3
 800559c:	f000 fc7d 	bl	8005e9a <USBD_CtlError>
              break;
 80055a0:	e000      	b.n	80055a4 <USBD_StdEPReq+0x1b6>
              break;
 80055a2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80055a4:	e0d2      	b.n	800574c <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	23a7      	movs	r3, #167	; 0xa7
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	5cd3      	ldrb	r3, [r2, r3]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d002      	beq.n	80055b8 <USBD_StdEPReq+0x1ca>
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d03e      	beq.n	8005634 <USBD_StdEPReq+0x246>
 80055b6:	e0ba      	b.n	800572e <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055b8:	230e      	movs	r3, #14
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <USBD_StdEPReq+0x1ec>
 80055c2:	230e      	movs	r3, #14
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d006      	beq.n	80055da <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0011      	movs	r1, r2
 80055d2:	0018      	movs	r0, r3
 80055d4:	f000 fc61 	bl	8005e9a <USBD_CtlError>
                break;
 80055d8:	e0b0      	b.n	800573c <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055da:	230e      	movs	r3, #14
 80055dc:	18fb      	adds	r3, r7, r3
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	b25b      	sxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	da0d      	bge.n	8005602 <USBD_StdEPReq+0x214>
 80055e6:	230e      	movs	r3, #14
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	227f      	movs	r2, #127	; 0x7f
 80055ee:	401a      	ands	r2, r3
 80055f0:	0013      	movs	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	189b      	adds	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	3310      	adds	r3, #16
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	18d3      	adds	r3, r2, r3
 80055fe:	3304      	adds	r3, #4
 8005600:	e00d      	b.n	800561e <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005602:	230e      	movs	r3, #14
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	227f      	movs	r2, #127	; 0x7f
 800560a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800560c:	0013      	movs	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	189b      	adds	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	3351      	adds	r3, #81	; 0x51
 8005616:	33ff      	adds	r3, #255	; 0xff
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	18d3      	adds	r3, r2, r3
 800561c:	3304      	adds	r3, #4
 800561e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	0018      	movs	r0, r3
 800562e:	f000 fcb3 	bl	8005f98 <USBD_CtlSendData>
              break;
 8005632:	e083      	b.n	800573c <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005634:	230e      	movs	r3, #14
 8005636:	18fb      	adds	r3, r7, r3
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	b25b      	sxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	da15      	bge.n	800566c <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005640:	230e      	movs	r3, #14
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	220f      	movs	r2, #15
 8005648:	401a      	ands	r2, r3
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	0013      	movs	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	189b      	adds	r3, r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	18cb      	adds	r3, r1, r3
 8005656:	3318      	adds	r3, #24
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d11e      	bne.n	800569c <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	0011      	movs	r1, r2
 8005664:	0018      	movs	r0, r3
 8005666:	f000 fc18 	bl	8005e9a <USBD_CtlError>
                  break;
 800566a:	e067      	b.n	800573c <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800566c:	230e      	movs	r3, #14
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	220f      	movs	r2, #15
 8005674:	401a      	ands	r2, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	23ac      	movs	r3, #172	; 0xac
 800567a:	0059      	lsls	r1, r3, #1
 800567c:	0013      	movs	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	189b      	adds	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	18c3      	adds	r3, r0, r3
 8005686:	185b      	adds	r3, r3, r1
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0011      	movs	r1, r2
 8005694:	0018      	movs	r0, r3
 8005696:	f000 fc00 	bl	8005e9a <USBD_CtlError>
                  break;
 800569a:	e04f      	b.n	800573c <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800569c:	230e      	movs	r3, #14
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	b25b      	sxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	da0d      	bge.n	80056c4 <USBD_StdEPReq+0x2d6>
 80056a8:	230e      	movs	r3, #14
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	227f      	movs	r2, #127	; 0x7f
 80056b0:	401a      	ands	r2, r3
 80056b2:	0013      	movs	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	189b      	adds	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	3310      	adds	r3, #16
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	18d3      	adds	r3, r2, r3
 80056c0:	3304      	adds	r3, #4
 80056c2:	e00d      	b.n	80056e0 <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056c4:	230e      	movs	r3, #14
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	227f      	movs	r2, #127	; 0x7f
 80056cc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056ce:	0013      	movs	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	189b      	adds	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	3351      	adds	r3, #81	; 0x51
 80056d8:	33ff      	adds	r3, #255	; 0xff
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	18d3      	adds	r3, r2, r3
 80056de:	3304      	adds	r3, #4
 80056e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80056e2:	230e      	movs	r3, #14
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <USBD_StdEPReq+0x308>
 80056ec:	230e      	movs	r3, #14
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d103      	bne.n	80056fe <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e010      	b.n	8005720 <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80056fe:	230e      	movs	r3, #14
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	781a      	ldrb	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	0011      	movs	r1, r2
 8005708:	0018      	movs	r0, r3
 800570a:	f003 fa96 	bl	8008c3a <USBD_LL_IsStallEP>
 800570e:	1e03      	subs	r3, r0, #0
 8005710:	d003      	beq.n	800571a <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e002      	b.n	8005720 <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	0018      	movs	r0, r3
 8005728:	f000 fc36 	bl	8005f98 <USBD_CtlSendData>
              break;
 800572c:	e006      	b.n	800573c <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	0011      	movs	r1, r2
 8005734:	0018      	movs	r0, r3
 8005736:	f000 fbb0 	bl	8005e9a <USBD_CtlError>
              break;
 800573a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800573c:	e006      	b.n	800574c <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0011      	movs	r1, r2
 8005744:	0018      	movs	r0, r3
 8005746:	f000 fba8 	bl	8005e9a <USBD_CtlError>
          break;
 800574a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800574c:	e006      	b.n	800575c <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	0011      	movs	r1, r2
 8005754:	0018      	movs	r0, r3
 8005756:	f000 fba0 	bl	8005e9a <USBD_CtlError>
      break;
 800575a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800575c:	230f      	movs	r3, #15
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	781b      	ldrb	r3, [r3, #0]
}
 8005762:	0018      	movs	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	b004      	add	sp, #16
 8005768:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800576c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005776:	2308      	movs	r3, #8
 8005778:	18fb      	adds	r3, r7, r3
 800577a:	2200      	movs	r2, #0
 800577c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005782:	230b      	movs	r3, #11
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	885b      	ldrh	r3, [r3, #2]
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b07      	cmp	r3, #7
 8005794:	d900      	bls.n	8005798 <USBD_GetDescriptor+0x2c>
 8005796:	e159      	b.n	8005a4c <USBD_GetDescriptor+0x2e0>
 8005798:	009a      	lsls	r2, r3, #2
 800579a:	4bcc      	ldr	r3, [pc, #816]	; (8005acc <USBD_GetDescriptor+0x360>)
 800579c:	18d3      	adds	r3, r2, r3
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	23ac      	movs	r3, #172	; 0xac
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	58d3      	ldr	r3, [r2, r3]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	7c12      	ldrb	r2, [r2, #16]
 80057b0:	2108      	movs	r1, #8
 80057b2:	1879      	adds	r1, r7, r1
 80057b4:	0010      	movs	r0, r2
 80057b6:	4798      	blx	r3
 80057b8:	0003      	movs	r3, r0
 80057ba:	60fb      	str	r3, [r7, #12]
      break;
 80057bc:	e153      	b.n	8005a66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	7c1b      	ldrb	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10f      	bne.n	80057e6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	23ad      	movs	r3, #173	; 0xad
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	58d3      	ldr	r3, [r2, r3]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	2208      	movs	r2, #8
 80057d2:	18ba      	adds	r2, r7, r2
 80057d4:	0010      	movs	r0, r2
 80057d6:	4798      	blx	r3
 80057d8:	0003      	movs	r3, r0
 80057da:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	2202      	movs	r2, #2
 80057e2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80057e4:	e13f      	b.n	8005a66 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	23ad      	movs	r3, #173	; 0xad
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	58d3      	ldr	r3, [r2, r3]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	2208      	movs	r2, #8
 80057f2:	18ba      	adds	r2, r7, r2
 80057f4:	0010      	movs	r0, r2
 80057f6:	4798      	blx	r3
 80057f8:	0003      	movs	r3, r0
 80057fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	2202      	movs	r2, #2
 8005802:	701a      	strb	r2, [r3, #0]
      break;
 8005804:	e12f      	b.n	8005a66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	885b      	ldrh	r3, [r3, #2]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b05      	cmp	r3, #5
 800580e:	d900      	bls.n	8005812 <USBD_GetDescriptor+0xa6>
 8005810:	e0d0      	b.n	80059b4 <USBD_GetDescriptor+0x248>
 8005812:	009a      	lsls	r2, r3, #2
 8005814:	4bae      	ldr	r3, [pc, #696]	; (8005ad0 <USBD_GetDescriptor+0x364>)
 8005816:	18d3      	adds	r3, r2, r3
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	23ac      	movs	r3, #172	; 0xac
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	58d3      	ldr	r3, [r2, r3]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00d      	beq.n	8005846 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	23ac      	movs	r3, #172	; 0xac
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	58d3      	ldr	r3, [r2, r3]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	7c12      	ldrb	r2, [r2, #16]
 8005838:	2108      	movs	r1, #8
 800583a:	1879      	adds	r1, r7, r1
 800583c:	0010      	movs	r0, r2
 800583e:	4798      	blx	r3
 8005840:	0003      	movs	r3, r0
 8005842:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005844:	e0c3      	b.n	80059ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	0011      	movs	r1, r2
 800584c:	0018      	movs	r0, r3
 800584e:	f000 fb24 	bl	8005e9a <USBD_CtlError>
            err++;
 8005852:	210b      	movs	r1, #11
 8005854:	187b      	adds	r3, r7, r1
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	187b      	adds	r3, r7, r1
 800585a:	3201      	adds	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
          break;
 800585e:	e0b6      	b.n	80059ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	23ac      	movs	r3, #172	; 0xac
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	58d3      	ldr	r3, [r2, r3]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00d      	beq.n	800588a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	23ac      	movs	r3, #172	; 0xac
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	58d3      	ldr	r3, [r2, r3]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	7c12      	ldrb	r2, [r2, #16]
 800587c:	2108      	movs	r1, #8
 800587e:	1879      	adds	r1, r7, r1
 8005880:	0010      	movs	r0, r2
 8005882:	4798      	blx	r3
 8005884:	0003      	movs	r3, r0
 8005886:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005888:	e0a1      	b.n	80059ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	0011      	movs	r1, r2
 8005890:	0018      	movs	r0, r3
 8005892:	f000 fb02 	bl	8005e9a <USBD_CtlError>
            err++;
 8005896:	210b      	movs	r1, #11
 8005898:	187b      	adds	r3, r7, r1
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	187b      	adds	r3, r7, r1
 800589e:	3201      	adds	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
          break;
 80058a2:	e094      	b.n	80059ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	23ac      	movs	r3, #172	; 0xac
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	58d3      	ldr	r3, [r2, r3]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00d      	beq.n	80058ce <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	23ac      	movs	r3, #172	; 0xac
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	58d3      	ldr	r3, [r2, r3]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	7c12      	ldrb	r2, [r2, #16]
 80058c0:	2108      	movs	r1, #8
 80058c2:	1879      	adds	r1, r7, r1
 80058c4:	0010      	movs	r0, r2
 80058c6:	4798      	blx	r3
 80058c8:	0003      	movs	r3, r0
 80058ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058cc:	e07f      	b.n	80059ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	0011      	movs	r1, r2
 80058d4:	0018      	movs	r0, r3
 80058d6:	f000 fae0 	bl	8005e9a <USBD_CtlError>
            err++;
 80058da:	210b      	movs	r1, #11
 80058dc:	187b      	adds	r3, r7, r1
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	187b      	adds	r3, r7, r1
 80058e2:	3201      	adds	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
          break;
 80058e6:	e072      	b.n	80059ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	23ac      	movs	r3, #172	; 0xac
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	58d3      	ldr	r3, [r2, r3]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	23ac      	movs	r3, #172	; 0xac
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	58d3      	ldr	r3, [r2, r3]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	7c12      	ldrb	r2, [r2, #16]
 8005904:	2108      	movs	r1, #8
 8005906:	1879      	adds	r1, r7, r1
 8005908:	0010      	movs	r0, r2
 800590a:	4798      	blx	r3
 800590c:	0003      	movs	r3, r0
 800590e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005910:	e05d      	b.n	80059ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0011      	movs	r1, r2
 8005918:	0018      	movs	r0, r3
 800591a:	f000 fabe 	bl	8005e9a <USBD_CtlError>
            err++;
 800591e:	210b      	movs	r1, #11
 8005920:	187b      	adds	r3, r7, r1
 8005922:	781a      	ldrb	r2, [r3, #0]
 8005924:	187b      	adds	r3, r7, r1
 8005926:	3201      	adds	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
          break;
 800592a:	e050      	b.n	80059ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	23ac      	movs	r3, #172	; 0xac
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	58d3      	ldr	r3, [r2, r3]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00d      	beq.n	8005956 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	23ac      	movs	r3, #172	; 0xac
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	58d3      	ldr	r3, [r2, r3]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	7c12      	ldrb	r2, [r2, #16]
 8005948:	2108      	movs	r1, #8
 800594a:	1879      	adds	r1, r7, r1
 800594c:	0010      	movs	r0, r2
 800594e:	4798      	blx	r3
 8005950:	0003      	movs	r3, r0
 8005952:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005954:	e03b      	b.n	80059ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	0011      	movs	r1, r2
 800595c:	0018      	movs	r0, r3
 800595e:	f000 fa9c 	bl	8005e9a <USBD_CtlError>
            err++;
 8005962:	210b      	movs	r1, #11
 8005964:	187b      	adds	r3, r7, r1
 8005966:	781a      	ldrb	r2, [r3, #0]
 8005968:	187b      	adds	r3, r7, r1
 800596a:	3201      	adds	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
          break;
 800596e:	e02e      	b.n	80059ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	23ac      	movs	r3, #172	; 0xac
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	58d3      	ldr	r3, [r2, r3]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00d      	beq.n	800599a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	23ac      	movs	r3, #172	; 0xac
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	58d3      	ldr	r3, [r2, r3]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	7c12      	ldrb	r2, [r2, #16]
 800598c:	2108      	movs	r1, #8
 800598e:	1879      	adds	r1, r7, r1
 8005990:	0010      	movs	r0, r2
 8005992:	4798      	blx	r3
 8005994:	0003      	movs	r3, r0
 8005996:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005998:	e019      	b.n	80059ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	0011      	movs	r1, r2
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 fa7a 	bl	8005e9a <USBD_CtlError>
            err++;
 80059a6:	210b      	movs	r1, #11
 80059a8:	187b      	adds	r3, r7, r1
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	187b      	adds	r3, r7, r1
 80059ae:	3201      	adds	r2, #1
 80059b0:	701a      	strb	r2, [r3, #0]
          break;
 80059b2:	e00c      	b.n	80059ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	0011      	movs	r1, r2
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 fa6d 	bl	8005e9a <USBD_CtlError>
          err++;
 80059c0:	210b      	movs	r1, #11
 80059c2:	187b      	adds	r3, r7, r1
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	187b      	adds	r3, r7, r1
 80059c8:	3201      	adds	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80059cc:	e04b      	b.n	8005a66 <USBD_GetDescriptor+0x2fa>
 80059ce:	e04a      	b.n	8005a66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	7c1b      	ldrb	r3, [r3, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	23ad      	movs	r3, #173	; 0xad
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	58d3      	ldr	r3, [r2, r3]
 80059e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e2:	2208      	movs	r2, #8
 80059e4:	18ba      	adds	r2, r7, r2
 80059e6:	0010      	movs	r0, r2
 80059e8:	4798      	blx	r3
 80059ea:	0003      	movs	r3, r0
 80059ec:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059ee:	e03a      	b.n	8005a66 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	0011      	movs	r1, r2
 80059f6:	0018      	movs	r0, r3
 80059f8:	f000 fa4f 	bl	8005e9a <USBD_CtlError>
        err++;
 80059fc:	210b      	movs	r1, #11
 80059fe:	187b      	adds	r3, r7, r1
 8005a00:	781a      	ldrb	r2, [r3, #0]
 8005a02:	187b      	adds	r3, r7, r1
 8005a04:	3201      	adds	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
      break;
 8005a08:	e02d      	b.n	8005a66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	7c1b      	ldrb	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10f      	bne.n	8005a32 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	23ad      	movs	r3, #173	; 0xad
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	58d3      	ldr	r3, [r2, r3]
 8005a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	18ba      	adds	r2, r7, r2
 8005a20:	0010      	movs	r0, r2
 8005a22:	4798      	blx	r3
 8005a24:	0003      	movs	r3, r0
 8005a26:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	2207      	movs	r2, #7
 8005a2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a30:	e019      	b.n	8005a66 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	0011      	movs	r1, r2
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 fa2e 	bl	8005e9a <USBD_CtlError>
        err++;
 8005a3e:	210b      	movs	r1, #11
 8005a40:	187b      	adds	r3, r7, r1
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	3201      	adds	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
      break;
 8005a4a:	e00c      	b.n	8005a66 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	0011      	movs	r1, r2
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 fa21 	bl	8005e9a <USBD_CtlError>
      err++;
 8005a58:	210b      	movs	r1, #11
 8005a5a:	187b      	adds	r3, r7, r1
 8005a5c:	781a      	ldrb	r2, [r3, #0]
 8005a5e:	187b      	adds	r3, r7, r1
 8005a60:	3201      	adds	r2, #1
 8005a62:	701a      	strb	r2, [r3, #0]
      break;
 8005a64:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8005a66:	230b      	movs	r3, #11
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d128      	bne.n	8005ac2 <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005a70:	2308      	movs	r3, #8
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01a      	beq.n	8005ab0 <USBD_GetDescriptor+0x344>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	88db      	ldrh	r3, [r3, #6]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d016      	beq.n	8005ab0 <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	88da      	ldrh	r2, [r3, #6]
 8005a86:	2308      	movs	r3, #8
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	1c18      	adds	r0, r3, #0
 8005a8e:	1c11      	adds	r1, r2, #0
 8005a90:	b28a      	uxth	r2, r1
 8005a92:	b283      	uxth	r3, r0
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d900      	bls.n	8005a9a <USBD_GetDescriptor+0x32e>
 8005a98:	1c01      	adds	r1, r0, #0
 8005a9a:	b28a      	uxth	r2, r1
 8005a9c:	2108      	movs	r1, #8
 8005a9e:	187b      	adds	r3, r7, r1
 8005aa0:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005aa2:	187b      	adds	r3, r7, r1
 8005aa4:	881a      	ldrh	r2, [r3, #0]
 8005aa6:	68f9      	ldr	r1, [r7, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f000 fa74 	bl	8005f98 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	88db      	ldrh	r3, [r3, #6]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 fad6 	bl	800606c <USBD_CtlSendStatus>
 8005ac0:	e000      	b.n	8005ac4 <USBD_GetDescriptor+0x358>
    return;
 8005ac2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b004      	add	sp, #16
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	08009034 	.word	0x08009034
 8005ad0:	08009054 	.word	0x08009054

08005ad4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	889b      	ldrh	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d13d      	bne.n	8005b62 <USBD_SetAddress+0x8e>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	88db      	ldrh	r3, [r3, #6]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d139      	bne.n	8005b62 <USBD_SetAddress+0x8e>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	885b      	ldrh	r3, [r3, #2]
 8005af2:	2b7f      	cmp	r3, #127	; 0x7f
 8005af4:	d835      	bhi.n	8005b62 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	885b      	ldrh	r3, [r3, #2]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	230f      	movs	r3, #15
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	217f      	movs	r1, #127	; 0x7f
 8005b02:	400a      	ands	r2, r1
 8005b04:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	23a7      	movs	r3, #167	; 0xa7
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	5cd3      	ldrb	r3, [r2, r3]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d106      	bne.n	8005b20 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	0011      	movs	r1, r2
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f000 f9be 	bl	8005e9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1e:	e026      	b.n	8005b6e <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	240f      	movs	r4, #15
 8005b24:	193a      	adds	r2, r7, r4
 8005b26:	4914      	ldr	r1, [pc, #80]	; (8005b78 <USBD_SetAddress+0xa4>)
 8005b28:	7812      	ldrb	r2, [r2, #0]
 8005b2a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b2c:	193b      	adds	r3, r7, r4
 8005b2e:	781a      	ldrb	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	0011      	movs	r1, r2
 8005b34:	0018      	movs	r0, r3
 8005b36:	f003 f8ab 	bl	8008c90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f000 fa95 	bl	800606c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005b42:	193b      	adds	r3, r7, r4
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	23a7      	movs	r3, #167	; 0xa7
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	2102      	movs	r1, #2
 8005b52:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b54:	e00b      	b.n	8005b6e <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	23a7      	movs	r3, #167	; 0xa7
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b60:	e005      	b.n	8005b6e <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	0011      	movs	r1, r2
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 f996 	bl	8005e9a <USBD_CtlError>
  }
}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b005      	add	sp, #20
 8005b74:	bd90      	pop	{r4, r7, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	0000029e 	.word	0x0000029e

08005b7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	885b      	ldrh	r3, [r3, #2]
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	4b4c      	ldr	r3, [pc, #304]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005b8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005b90:	4b4b      	ldr	r3, [pc, #300]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d906      	bls.n	8005ba6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	0011      	movs	r1, r2
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f000 f97b 	bl	8005e9a <USBD_CtlError>
 8005ba4:	e088      	b.n	8005cb8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	23a7      	movs	r3, #167	; 0xa7
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	5cd3      	ldrb	r3, [r2, r3]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d002      	beq.n	8005bb8 <USBD_SetConfig+0x3c>
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d029      	beq.n	8005c0a <USBD_SetConfig+0x8e>
 8005bb6:	e071      	b.n	8005c9c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005bb8:	4b41      	ldr	r3, [pc, #260]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01f      	beq.n	8005c00 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8005bc0:	4b3f      	ldr	r3, [pc, #252]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	001a      	movs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	23a7      	movs	r3, #167	; 0xa7
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	2103      	movs	r1, #3
 8005bd2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005bd4:	4b3a      	ldr	r3, [pc, #232]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005bd6:	781a      	ldrb	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	0011      	movs	r1, r2
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f7ff f8bd 	bl	8004d5c <USBD_SetClassConfig>
 8005be2:	0003      	movs	r3, r0
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d106      	bne.n	8005bf6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	0011      	movs	r1, r2
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f000 f953 	bl	8005e9a <USBD_CtlError>
            return;
 8005bf4:	e060      	b.n	8005cb8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f000 fa37 	bl	800606c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005bfe:	e05b      	b.n	8005cb8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 fa32 	bl	800606c <USBD_CtlSendStatus>
        break;
 8005c08:	e056      	b.n	8005cb8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005c0a:	4b2d      	ldr	r3, [pc, #180]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d115      	bne.n	8005c3e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	23a7      	movs	r3, #167	; 0xa7
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	2102      	movs	r1, #2
 8005c1a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8005c1c:	4b28      	ldr	r3, [pc, #160]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	001a      	movs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005c26:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0011      	movs	r1, r2
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f7ff f8bc 	bl	8004dac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	0018      	movs	r0, r3
 8005c38:	f000 fa18 	bl	800606c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005c3c:	e03c      	b.n	8005cb8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8005c3e:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	001a      	movs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d022      	beq.n	8005c92 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	0011      	movs	r1, r2
 8005c56:	0018      	movs	r0, r3
 8005c58:	f7ff f8a8 	bl	8004dac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005c5c:	4b18      	ldr	r3, [pc, #96]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	001a      	movs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c66:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	0011      	movs	r1, r2
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f7ff f874 	bl	8004d5c <USBD_SetClassConfig>
 8005c74:	0003      	movs	r3, r0
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d106      	bne.n	8005c88 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	0011      	movs	r1, r2
 8005c80:	0018      	movs	r0, r3
 8005c82:	f000 f90a 	bl	8005e9a <USBD_CtlError>
            return;
 8005c86:	e017      	b.n	8005cb8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 f9ee 	bl	800606c <USBD_CtlSendStatus>
        break;
 8005c90:	e012      	b.n	8005cb8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	0018      	movs	r0, r3
 8005c96:	f000 f9e9 	bl	800606c <USBD_CtlSendStatus>
        break;
 8005c9a:	e00d      	b.n	8005cb8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0011      	movs	r1, r2
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f000 f8f9 	bl	8005e9a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <USBD_SetConfig+0x144>)
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	0011      	movs	r1, r2
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f7ff f87b 	bl	8004dac <USBD_ClrClassConfig>
        break;
 8005cb6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	b002      	add	sp, #8
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	20000198 	.word	0x20000198

08005cc4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	88db      	ldrh	r3, [r3, #6]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d006      	beq.n	8005ce4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	0011      	movs	r1, r2
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f000 f8dc 	bl	8005e9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ce2:	e025      	b.n	8005d30 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	23a7      	movs	r3, #167	; 0xa7
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	5cd3      	ldrb	r3, [r2, r3]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	db18      	blt.n	8005d22 <USBD_GetConfig+0x5e>
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	dd02      	ble.n	8005cfa <USBD_GetConfig+0x36>
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d00c      	beq.n	8005d12 <USBD_GetConfig+0x4e>
 8005cf8:	e013      	b.n	8005d22 <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3308      	adds	r3, #8
 8005d04:	0019      	movs	r1, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 f944 	bl	8005f98 <USBD_CtlSendData>
        break;
 8005d10:	e00e      	b.n	8005d30 <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1d19      	adds	r1, r3, #4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f000 f93c 	bl	8005f98 <USBD_CtlSendData>
        break;
 8005d20:	e006      	b.n	8005d30 <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	0011      	movs	r1, r2
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f000 f8b6 	bl	8005e9a <USBD_CtlError>
        break;
 8005d2e:	46c0      	nop			; (mov r8, r8)
}
 8005d30:	46c0      	nop			; (mov r8, r8)
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b002      	add	sp, #8
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	23a7      	movs	r3, #167	; 0xa7
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	5cd3      	ldrb	r3, [r2, r3]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d822      	bhi.n	8005d96 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	88db      	ldrh	r3, [r3, #6]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d006      	beq.n	8005d66 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0011      	movs	r1, r2
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 f89b 	bl	8005e9a <USBD_CtlError>
        break;
 8005d64:	e01e      	b.n	8005da4 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	23a9      	movs	r3, #169	; 0xa9
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	58d3      	ldr	r3, [r2, r3]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	330c      	adds	r3, #12
 8005d88:	0019      	movs	r1, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f000 f902 	bl	8005f98 <USBD_CtlSendData>
      break;
 8005d94:	e006      	b.n	8005da4 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	0011      	movs	r1, r2
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 f87c 	bl	8005e9a <USBD_CtlError>
      break;
 8005da2:	46c0      	nop			; (mov r8, r8)
  }
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b002      	add	sp, #8
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	885b      	ldrh	r3, [r3, #2]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d108      	bne.n	8005dd0 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	23a9      	movs	r3, #169	; 0xa9
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f000 f94e 	bl	800606c <USBD_CtlSendStatus>
  }
}
 8005dd0:	46c0      	nop			; (mov r8, r8)
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	23a7      	movs	r3, #167	; 0xa7
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	5cd3      	ldrb	r3, [r2, r3]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d80d      	bhi.n	8005e0c <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	885b      	ldrh	r3, [r3, #2]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d110      	bne.n	8005e1a <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	23a9      	movs	r3, #169	; 0xa9
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	2100      	movs	r1, #0
 8005e00:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0018      	movs	r0, r3
 8005e06:	f000 f931 	bl	800606c <USBD_CtlSendStatus>
      }
      break;
 8005e0a:	e006      	b.n	8005e1a <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	0011      	movs	r1, r2
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 f841 	bl	8005e9a <USBD_CtlError>
      break;
 8005e18:	e000      	b.n	8005e1c <USBD_ClrFeature+0x44>
      break;
 8005e1a:	46c0      	nop			; (mov r8, r8)
  }
}
 8005e1c:	46c0      	nop			; (mov r8, r8)
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b002      	add	sp, #8
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	785a      	ldrb	r2, [r3, #1]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	3302      	adds	r3, #2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	3303      	adds	r3, #3
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	18d3      	adds	r3, r2, r3
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	3305      	adds	r3, #5
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	18d3      	adds	r3, r2, r3
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	3306      	adds	r3, #6
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	3307      	adds	r3, #7
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	18d3      	adds	r3, r2, r3
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	80da      	strh	r2, [r3, #6]

}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b002      	add	sp, #8
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2180      	movs	r1, #128	; 0x80
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f002 fe6e 	bl	8008b8a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f002 fe69 	bl	8008b8a <USBD_LL_StallEP>
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ecc:	2317      	movs	r3, #23
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d03d      	beq.n	8005f56 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f000 f83e 	bl	8005f5e <USBD_GetLen>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	18db      	adds	r3, r3, r3
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005ef0:	2017      	movs	r0, #23
 8005ef2:	183b      	adds	r3, r7, r0
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	183a      	adds	r2, r7, r0
 8005ef8:	1c59      	adds	r1, r3, #1
 8005efa:	7011      	strb	r1, [r2, #0]
 8005efc:	001a      	movs	r2, r3
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	189b      	adds	r3, r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f08:	183b      	adds	r3, r7, r0
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	183a      	adds	r2, r7, r0
 8005f0e:	1c59      	adds	r1, r3, #1
 8005f10:	7011      	strb	r1, [r2, #0]
 8005f12:	001a      	movs	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	189b      	adds	r3, r3, r2
 8005f18:	2203      	movs	r2, #3
 8005f1a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005f1c:	e017      	b.n	8005f4e <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	60fa      	str	r2, [r7, #12]
 8005f24:	2417      	movs	r4, #23
 8005f26:	193a      	adds	r2, r7, r4
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	1939      	adds	r1, r7, r4
 8005f2c:	1c50      	adds	r0, r2, #1
 8005f2e:	7008      	strb	r0, [r1, #0]
 8005f30:	0011      	movs	r1, r2
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	1852      	adds	r2, r2, r1
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005f3a:	193b      	adds	r3, r7, r4
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	193a      	adds	r2, r7, r4
 8005f40:	1c59      	adds	r1, r3, #1
 8005f42:	7011      	strb	r1, [r2, #0]
 8005f44:	001a      	movs	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e3      	bne.n	8005f1e <USBD_GetString+0x5e>
    }
  }
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b007      	add	sp, #28
 8005f5c:	bd90      	pop	{r4, r7, pc}

08005f5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f66:	230f      	movs	r3, #15
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8005f6e:	e008      	b.n	8005f82 <USBD_GetLen+0x24>
  {
    len++;
 8005f70:	210f      	movs	r1, #15
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	781a      	ldrb	r2, [r3, #0]
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	3201      	adds	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
    buf++;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f2      	bne.n	8005f70 <USBD_GetLen+0x12>
  }

  return len;
 8005f8a:	230f      	movs	r3, #15
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	781b      	ldrb	r3, [r3, #0]
}
 8005f90:	0018      	movs	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b004      	add	sp, #16
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	1dbb      	adds	r3, r7, #6
 8005fa4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	23a5      	movs	r3, #165	; 0xa5
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	2102      	movs	r1, #2
 8005fae:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8005fb0:	1dbb      	adds	r3, r7, #6
 8005fb2:	881a      	ldrh	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005fb8:	1dbb      	adds	r3, r7, #6
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fc0:	1dbb      	adds	r3, r7, #6
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	2100      	movs	r1, #0
 8005fca:	f002 fe8d 	bl	8008ce8 <USBD_LL_Transmit>

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b004      	add	sp, #16
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	1dbb      	adds	r3, r7, #6
 8005fe4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fe6:	1dbb      	adds	r3, r7, #6
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	f002 fe7a 	bl	8008ce8 <USBD_LL_Transmit>

  return USBD_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b004      	add	sp, #16
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	1dbb      	adds	r3, r7, #6
 800600a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	23a5      	movs	r3, #165	; 0xa5
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	2103      	movs	r1, #3
 8006014:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8006016:	1dbb      	adds	r3, r7, #6
 8006018:	8819      	ldrh	r1, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	23ae      	movs	r3, #174	; 0xae
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8006022:	1dbb      	adds	r3, r7, #6
 8006024:	8819      	ldrh	r1, [r3, #0]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	23b0      	movs	r3, #176	; 0xb0
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800602e:	1dbb      	adds	r3, r7, #6
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	2100      	movs	r1, #0
 8006038:	f002 fe8e 	bl	8008d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	0018      	movs	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	b004      	add	sp, #16
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	1dbb      	adds	r3, r7, #6
 8006052:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006054:	1dbb      	adds	r3, r7, #6
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	2100      	movs	r1, #0
 800605e:	f002 fe7b 	bl	8008d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	0018      	movs	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	b004      	add	sp, #16
 800606a:	bd80      	pop	{r7, pc}

0800606c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	23a5      	movs	r3, #165	; 0xa5
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	2104      	movs	r1, #4
 800607c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	2300      	movs	r3, #0
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	f002 fe2f 	bl	8008ce8 <USBD_LL_Transmit>

  return USBD_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	0018      	movs	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	b002      	add	sp, #8
 8006092:	bd80      	pop	{r7, pc}

08006094 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	23a5      	movs	r3, #165	; 0xa5
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	2105      	movs	r1, #5
 80060a4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	2300      	movs	r3, #0
 80060aa:	2200      	movs	r2, #0
 80060ac:	2100      	movs	r1, #0
 80060ae:	f002 fe53 	bl	8008d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}

080060bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c2:	f3ef 8305 	mrs	r3, IPSR
 80060c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80060c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ce:	f3ef 8310 	mrs	r3, PRIMASK
 80060d2:	607b      	str	r3, [r7, #4]
  return(result);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <osKernelInitialize+0x2e>
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <osKernelInitialize+0x54>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d103      	bne.n	80060ea <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80060e2:	2306      	movs	r3, #6
 80060e4:	425b      	negs	r3, r3
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	e00c      	b.n	8006104 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <osKernelInitialize+0x54>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d105      	bne.n	80060fe <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80060f2:	4b07      	ldr	r3, [pc, #28]	; (8006110 <osKernelInitialize+0x54>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	e002      	b.n	8006104 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80060fe:	2301      	movs	r3, #1
 8006100:	425b      	negs	r3, r3
 8006102:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006104:	68fb      	ldr	r3, [r7, #12]
}
 8006106:	0018      	movs	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	b004      	add	sp, #16
 800610c:	bd80      	pop	{r7, pc}
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	2000019c 	.word	0x2000019c

08006114 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800611a:	f3ef 8305 	mrs	r3, IPSR
 800611e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006120:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006122:	2b00      	cmp	r3, #0
 8006124:	d109      	bne.n	800613a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006126:	f3ef 8310 	mrs	r3, PRIMASK
 800612a:	607b      	str	r3, [r7, #4]
  return(result);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <osKernelStart+0x2e>
 8006132:	4b0e      	ldr	r3, [pc, #56]	; (800616c <osKernelStart+0x58>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d103      	bne.n	8006142 <osKernelStart+0x2e>
    stat = osErrorISR;
 800613a:	2306      	movs	r3, #6
 800613c:	425b      	negs	r3, r3
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e00e      	b.n	8006160 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <osKernelStart+0x58>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d107      	bne.n	800615a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800614a:	4b08      	ldr	r3, [pc, #32]	; (800616c <osKernelStart+0x58>)
 800614c:	2202      	movs	r2, #2
 800614e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006150:	f000 ff30 	bl	8006fb4 <vTaskStartScheduler>
      stat = osOK;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	e002      	b.n	8006160 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800615a:	2301      	movs	r3, #1
 800615c:	425b      	negs	r3, r3
 800615e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006160:	68fb      	ldr	r3, [r7, #12]
}
 8006162:	0018      	movs	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	b004      	add	sp, #16
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	2000019c 	.word	0x2000019c

08006170 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006170:	b5b0      	push	{r4, r5, r7, lr}
 8006172:	b090      	sub	sp, #64	; 0x40
 8006174:	af04      	add	r7, sp, #16
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006180:	f3ef 8305 	mrs	r3, IPSR
 8006184:	61fb      	str	r3, [r7, #28]
  return(result);
 8006186:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006188:	2b00      	cmp	r3, #0
 800618a:	d000      	beq.n	800618e <osThreadNew+0x1e>
 800618c:	e090      	b.n	80062b0 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800618e:	f3ef 8310 	mrs	r3, PRIMASK
 8006192:	61bb      	str	r3, [r7, #24]
  return(result);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <osThreadNew+0x34>
 800619a:	4b48      	ldr	r3, [pc, #288]	; (80062bc <osThreadNew+0x14c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d100      	bne.n	80061a4 <osThreadNew+0x34>
 80061a2:	e085      	b.n	80062b0 <osThreadNew+0x140>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d100      	bne.n	80061ac <osThreadNew+0x3c>
 80061aa:	e081      	b.n	80062b0 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80061b0:	2318      	movs	r3, #24
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 80061b4:	2117      	movs	r1, #23
 80061b6:	187b      	adds	r3, r7, r1
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80061bc:	187b      	adds	r3, r7, r1
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80061c0:	2301      	movs	r3, #1
 80061c2:	425b      	negs	r3, r3
 80061c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d044      	beq.n	8006256 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <osThreadNew+0x6a>
        name = attr->name;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <osThreadNew+0x8e>
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	2b38      	cmp	r3, #56	; 0x38
 80061f2:	d804      	bhi.n	80061fe <osThreadNew+0x8e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	4013      	ands	r3, r2
 80061fc:	d001      	beq.n	8006202 <osThreadNew+0x92>
        return (NULL);
 80061fe:	2300      	movs	r3, #0
 8006200:	e057      	b.n	80062b2 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00e      	beq.n	8006238 <osThreadNew+0xc8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b5b      	cmp	r3, #91	; 0x5b
 8006220:	d90a      	bls.n	8006238 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006226:	2b00      	cmp	r3, #0
 8006228:	d006      	beq.n	8006238 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <osThreadNew+0xc8>
        mem = 1;
 8006232:	2301      	movs	r3, #1
 8006234:	623b      	str	r3, [r7, #32]
 8006236:	e010      	b.n	800625a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10c      	bne.n	800625a <osThreadNew+0xea>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d108      	bne.n	800625a <osThreadNew+0xea>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <osThreadNew+0xea>
          mem = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	623b      	str	r3, [r7, #32]
 8006254:	e001      	b.n	800625a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d112      	bne.n	8006286 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006268:	68bd      	ldr	r5, [r7, #8]
 800626a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800626c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	9302      	str	r3, [sp, #8]
 8006272:	9201      	str	r2, [sp, #4]
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	002b      	movs	r3, r5
 800627a:	0022      	movs	r2, r4
 800627c:	f000 fd21 	bl	8006cc2 <xTaskCreateStatic>
 8006280:	0003      	movs	r3, r0
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	e014      	b.n	80062b0 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d111      	bne.n	80062b0 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	b29a      	uxth	r2, r3
 8006290:	68bc      	ldr	r4, [r7, #8]
 8006292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	2310      	movs	r3, #16
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	0023      	movs	r3, r4
 80062a2:	f000 fd51 	bl	8006d48 <xTaskCreate>
 80062a6:	0003      	movs	r3, r0
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d001      	beq.n	80062b0 <osThreadNew+0x140>
          hTask = NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062b0:	693b      	ldr	r3, [r7, #16]
}
 80062b2:	0018      	movs	r0, r3
 80062b4:	46bd      	mov	sp, r7
 80062b6:	b00c      	add	sp, #48	; 0x30
 80062b8:	bdb0      	pop	{r4, r5, r7, pc}
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	2000019c 	.word	0x2000019c

080062c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4a06      	ldr	r2, [pc, #24]	; (80062e8 <vApplicationGetIdleTaskMemory+0x28>)
 80062d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4a05      	ldr	r2, [pc, #20]	; (80062ec <vApplicationGetIdleTaskMemory+0x2c>)
 80062d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2280      	movs	r2, #128	; 0x80
 80062dc:	601a      	str	r2, [r3, #0]
}
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b004      	add	sp, #16
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	200001a0 	.word	0x200001a0
 80062ec:	200001fc 	.word	0x200001fc

080062f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4a06      	ldr	r2, [pc, #24]	; (8006318 <vApplicationGetTimerTaskMemory+0x28>)
 8006300:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4a05      	ldr	r2, [pc, #20]	; (800631c <vApplicationGetTimerTaskMemory+0x2c>)
 8006306:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2280      	movs	r2, #128	; 0x80
 800630c:	0052      	lsls	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]
}
 8006310:	46c0      	nop			; (mov r8, r8)
 8006312:	46bd      	mov	sp, r7
 8006314:	b004      	add	sp, #16
 8006316:	bd80      	pop	{r7, pc}
 8006318:	200003fc 	.word	0x200003fc
 800631c:	20000458 	.word	0x20000458

08006320 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3308      	adds	r3, #8
 800632c:	001a      	movs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	4252      	negs	r2, r2
 8006338:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3308      	adds	r3, #8
 800633e:	001a      	movs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3308      	adds	r3, #8
 8006348:	001a      	movs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006354:	46c0      	nop			; (mov r8, r8)
 8006356:	46bd      	mov	sp, r7
 8006358:	b002      	add	sp, #8
 800635a:	bd80      	pop	{r7, pc}

0800635c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	46bd      	mov	sp, r7
 800636e:	b002      	add	sp, #8
 8006370:	bd80      	pop	{r7, pc}

08006372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b004      	add	sp, #16
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	3301      	adds	r3, #1
 80063ca:	d103      	bne.n	80063d4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e00c      	b.n	80063ee <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3308      	adds	r3, #8
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e002      	b.n	80063e2 <vListInsert+0x2c>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d2f6      	bcs.n	80063dc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	46bd      	mov	sp, r7
 800641e:	b004      	add	sp, #16
 8006420:	bd80      	pop	{r7, pc}

08006422 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6892      	ldr	r2, [r2, #8]
 8006438:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6852      	ldr	r2, [r2, #4]
 8006442:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	429a      	cmp	r2, r3
 800644c:	d103      	bne.n	8006456 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	1e5a      	subs	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
}
 800646a:	0018      	movs	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	b004      	add	sp, #16
 8006470:	bd80      	pop	{r7, pc}

08006472 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <xQueueGenericReset+0x18>
 8006486:	b672      	cpsid	i
 8006488:	e7fe      	b.n	8006488 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800648a:	f001 fda9 	bl	8007fe0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	434b      	muls	r3, r1
 800649c:	18d2      	adds	r2, r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	1e59      	subs	r1, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	434b      	muls	r3, r1
 80064c0:	18d2      	adds	r2, r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2244      	movs	r2, #68	; 0x44
 80064ca:	21ff      	movs	r1, #255	; 0xff
 80064cc:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2245      	movs	r2, #69	; 0x45
 80064d2:	21ff      	movs	r1, #255	; 0xff
 80064d4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10d      	bne.n	80064f8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d013      	beq.n	800650c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3310      	adds	r3, #16
 80064e8:	0018      	movs	r0, r3
 80064ea:	f000 ffa7 	bl	800743c <xTaskRemoveFromEventList>
 80064ee:	1e03      	subs	r3, r0, #0
 80064f0:	d00c      	beq.n	800650c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064f2:	f001 fd65 	bl	8007fc0 <vPortYield>
 80064f6:	e009      	b.n	800650c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3310      	adds	r3, #16
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7ff ff0f 	bl	8006320 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3324      	adds	r3, #36	; 0x24
 8006506:	0018      	movs	r0, r3
 8006508:	f7ff ff0a 	bl	8006320 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800650c:	f001 fd7a 	bl	8008004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006510:	2301      	movs	r3, #1
}
 8006512:	0018      	movs	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	b004      	add	sp, #16
 8006518:	bd80      	pop	{r7, pc}

0800651a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800651a:	b590      	push	{r4, r7, lr}
 800651c:	b089      	sub	sp, #36	; 0x24
 800651e:	af02      	add	r7, sp, #8
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <xQueueGenericCreateStatic+0x18>
 800652e:	b672      	cpsid	i
 8006530:	e7fe      	b.n	8006530 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <xQueueGenericCreateStatic+0x22>
 8006538:	b672      	cpsid	i
 800653a:	e7fe      	b.n	800653a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <xQueueGenericCreateStatic+0x2e>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <xQueueGenericCreateStatic+0x32>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <xQueueGenericCreateStatic+0x34>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <xQueueGenericCreateStatic+0x3c>
 8006552:	b672      	cpsid	i
 8006554:	e7fe      	b.n	8006554 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d102      	bne.n	8006562 <xQueueGenericCreateStatic+0x48>
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <xQueueGenericCreateStatic+0x4c>
 8006562:	2301      	movs	r3, #1
 8006564:	e000      	b.n	8006568 <xQueueGenericCreateStatic+0x4e>
 8006566:	2300      	movs	r3, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <xQueueGenericCreateStatic+0x56>
 800656c:	b672      	cpsid	i
 800656e:	e7fe      	b.n	800656e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006570:	2350      	movs	r3, #80	; 0x50
 8006572:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b50      	cmp	r3, #80	; 0x50
 8006578:	d001      	beq.n	800657e <xQueueGenericCreateStatic+0x64>
 800657a:	b672      	cpsid	i
 800657c:	e7fe      	b.n	800657c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00e      	beq.n	80065a6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2246      	movs	r2, #70	; 0x46
 800658c:	2101      	movs	r1, #1
 800658e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006590:	2328      	movs	r3, #40	; 0x28
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	781c      	ldrb	r4, [r3, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	0023      	movs	r3, r4
 80065a2:	f000 f805 	bl	80065b0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80065a6:	697b      	ldr	r3, [r7, #20]
	}
 80065a8:	0018      	movs	r0, r3
 80065aa:	46bd      	mov	sp, r7
 80065ac:	b007      	add	sp, #28
 80065ae:	bd90      	pop	{r4, r7, pc}

080065b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	001a      	movs	r2, r3
 80065be:	1cfb      	adds	r3, r7, #3
 80065c0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e002      	b.n	80065d6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2101      	movs	r1, #1
 80065e6:	0018      	movs	r0, r3
 80065e8:	f7ff ff43 	bl	8006472 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	1cfa      	adds	r2, r7, #3
 80065f0:	214c      	movs	r1, #76	; 0x4c
 80065f2:	7812      	ldrb	r2, [r2, #0]
 80065f4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b004      	add	sp, #16
 80065fc:	bd80      	pop	{r7, pc}

080065fe <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b08a      	sub	sp, #40	; 0x28
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800660c:	2300      	movs	r3, #0
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <xQueueGenericSend+0x20>
 800661a:	b672      	cpsid	i
 800661c:	e7fe      	b.n	800661c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <xQueueGenericSend+0x2e>
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <xQueueGenericSend+0x32>
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <xQueueGenericSend+0x34>
 8006630:	2300      	movs	r3, #0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <xQueueGenericSend+0x3c>
 8006636:	b672      	cpsid	i
 8006638:	e7fe      	b.n	8006638 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d103      	bne.n	8006648 <xQueueGenericSend+0x4a>
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <xQueueGenericSend+0x4e>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <xQueueGenericSend+0x50>
 800664c:	2300      	movs	r3, #0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <xQueueGenericSend+0x58>
 8006652:	b672      	cpsid	i
 8006654:	e7fe      	b.n	8006654 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006656:	f001 f889 	bl	800776c <xTaskGetSchedulerState>
 800665a:	1e03      	subs	r3, r0, #0
 800665c:	d102      	bne.n	8006664 <xQueueGenericSend+0x66>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <xQueueGenericSend+0x6a>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <xQueueGenericSend+0x6c>
 8006668:	2300      	movs	r3, #0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <xQueueGenericSend+0x74>
 800666e:	b672      	cpsid	i
 8006670:	e7fe      	b.n	8006670 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006672:	f001 fcb5 	bl	8007fe0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667e:	429a      	cmp	r2, r3
 8006680:	d302      	bcc.n	8006688 <xQueueGenericSend+0x8a>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d11e      	bne.n	80066c6 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	0018      	movs	r0, r3
 8006690:	f000 f99f 	bl	80069d2 <prvCopyDataToQueue>
 8006694:	0003      	movs	r3, r0
 8006696:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	3324      	adds	r3, #36	; 0x24
 80066a4:	0018      	movs	r0, r3
 80066a6:	f000 fec9 	bl	800743c <xTaskRemoveFromEventList>
 80066aa:	1e03      	subs	r3, r0, #0
 80066ac:	d007      	beq.n	80066be <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80066ae:	f001 fc87 	bl	8007fc0 <vPortYield>
 80066b2:	e004      	b.n	80066be <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80066ba:	f001 fc81 	bl	8007fc0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066be:	f001 fca1 	bl	8008004 <vPortExitCritical>
				return pdPASS;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e05b      	b.n	800677e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066cc:	f001 fc9a 	bl	8008004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	e054      	b.n	800677e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066da:	2314      	movs	r3, #20
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	0018      	movs	r0, r3
 80066e0:	f000 ff08 	bl	80074f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066e4:	2301      	movs	r3, #1
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066e8:	f001 fc8c 	bl	8008004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066ec:	f000 fcb6 	bl	800705c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066f0:	f001 fc76 	bl	8007fe0 <vPortEnterCritical>
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	2244      	movs	r2, #68	; 0x44
 80066f8:	5c9b      	ldrb	r3, [r3, r2]
 80066fa:	b25b      	sxtb	r3, r3
 80066fc:	3301      	adds	r3, #1
 80066fe:	d103      	bne.n	8006708 <xQueueGenericSend+0x10a>
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2244      	movs	r2, #68	; 0x44
 8006704:	2100      	movs	r1, #0
 8006706:	5499      	strb	r1, [r3, r2]
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	2245      	movs	r2, #69	; 0x45
 800670c:	5c9b      	ldrb	r3, [r3, r2]
 800670e:	b25b      	sxtb	r3, r3
 8006710:	3301      	adds	r3, #1
 8006712:	d103      	bne.n	800671c <xQueueGenericSend+0x11e>
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2245      	movs	r2, #69	; 0x45
 8006718:	2100      	movs	r1, #0
 800671a:	5499      	strb	r1, [r3, r2]
 800671c:	f001 fc72 	bl	8008004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006720:	1d3a      	adds	r2, r7, #4
 8006722:	2314      	movs	r3, #20
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	0011      	movs	r1, r2
 8006728:	0018      	movs	r0, r3
 800672a:	f000 fef7 	bl	800751c <xTaskCheckForTimeOut>
 800672e:	1e03      	subs	r3, r0, #0
 8006730:	d11e      	bne.n	8006770 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	0018      	movs	r0, r3
 8006736:	f000 fa51 	bl	8006bdc <prvIsQueueFull>
 800673a:	1e03      	subs	r3, r0, #0
 800673c:	d011      	beq.n	8006762 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	3310      	adds	r3, #16
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	0011      	movs	r1, r2
 8006746:	0018      	movs	r0, r3
 8006748:	f000 fe34 	bl	80073b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	0018      	movs	r0, r3
 8006750:	f000 f9d0 	bl	8006af4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006754:	f000 fc8e 	bl	8007074 <xTaskResumeAll>
 8006758:	1e03      	subs	r3, r0, #0
 800675a:	d18a      	bne.n	8006672 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800675c:	f001 fc30 	bl	8007fc0 <vPortYield>
 8006760:	e787      	b.n	8006672 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	0018      	movs	r0, r3
 8006766:	f000 f9c5 	bl	8006af4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800676a:	f000 fc83 	bl	8007074 <xTaskResumeAll>
 800676e:	e780      	b.n	8006672 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	0018      	movs	r0, r3
 8006774:	f000 f9be 	bl	8006af4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006778:	f000 fc7c 	bl	8007074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800677c:	2300      	movs	r3, #0
		}
	}
}
 800677e:	0018      	movs	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	b00a      	add	sp, #40	; 0x28
 8006784:	bd80      	pop	{r7, pc}

08006786 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006786:	b590      	push	{r4, r7, lr}
 8006788:	b089      	sub	sp, #36	; 0x24
 800678a:	af00      	add	r7, sp, #0
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	607a      	str	r2, [r7, #4]
 8006792:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <xQueueGenericSendFromISR+0x1c>
 800679e:	b672      	cpsid	i
 80067a0:	e7fe      	b.n	80067a0 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <xQueueGenericSendFromISR+0x2a>
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <xQueueGenericSendFromISR+0x2e>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <xQueueGenericSendFromISR+0x30>
 80067b4:	2300      	movs	r3, #0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <xQueueGenericSendFromISR+0x38>
 80067ba:	b672      	cpsid	i
 80067bc:	e7fe      	b.n	80067bc <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d103      	bne.n	80067cc <xQueueGenericSendFromISR+0x46>
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <xQueueGenericSendFromISR+0x4a>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e000      	b.n	80067d2 <xQueueGenericSendFromISR+0x4c>
 80067d0:	2300      	movs	r3, #0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <xQueueGenericSendFromISR+0x54>
 80067d6:	b672      	cpsid	i
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067da:	f001 fc2b 	bl	8008034 <ulSetInterruptMaskFromISR>
 80067de:	0003      	movs	r3, r0
 80067e0:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <xQueueGenericSendFromISR+0x6e>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d12e      	bne.n	8006852 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067f4:	2413      	movs	r4, #19
 80067f6:	193b      	adds	r3, r7, r4
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	2145      	movs	r1, #69	; 0x45
 80067fc:	5c52      	ldrb	r2, [r2, r1]
 80067fe:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	0018      	movs	r0, r3
 8006808:	f000 f8e3 	bl	80069d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800680c:	193b      	adds	r3, r7, r4
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	b25b      	sxtb	r3, r3
 8006812:	3301      	adds	r3, #1
 8006814:	d111      	bne.n	800683a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	3324      	adds	r3, #36	; 0x24
 8006822:	0018      	movs	r0, r3
 8006824:	f000 fe0a 	bl	800743c <xTaskRemoveFromEventList>
 8006828:	1e03      	subs	r3, r0, #0
 800682a:	d00f      	beq.n	800684c <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	e008      	b.n	800684c <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800683a:	2313      	movs	r3, #19
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	b2db      	uxtb	r3, r3
 8006844:	b259      	sxtb	r1, r3
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2245      	movs	r2, #69	; 0x45
 800684a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800684c:	2301      	movs	r3, #1
 800684e:	61fb      	str	r3, [r7, #28]
		{
 8006850:	e001      	b.n	8006856 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	0018      	movs	r0, r3
 800685a:	f001 fbf1 	bl	8008040 <vClearInterruptMaskFromISR>

	return xReturn;
 800685e:	69fb      	ldr	r3, [r7, #28]
}
 8006860:	0018      	movs	r0, r3
 8006862:	46bd      	mov	sp, r7
 8006864:	b009      	add	sp, #36	; 0x24
 8006866:	bd90      	pop	{r4, r7, pc}

08006868 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006874:	2300      	movs	r3, #0
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <xQueueReceive+0x1e>
 8006882:	b672      	cpsid	i
 8006884:	e7fe      	b.n	8006884 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <xQueueReceive+0x2c>
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <xQueueReceive+0x30>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <xQueueReceive+0x32>
 8006898:	2300      	movs	r3, #0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <xQueueReceive+0x3a>
 800689e:	b672      	cpsid	i
 80068a0:	e7fe      	b.n	80068a0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068a2:	f000 ff63 	bl	800776c <xTaskGetSchedulerState>
 80068a6:	1e03      	subs	r3, r0, #0
 80068a8:	d102      	bne.n	80068b0 <xQueueReceive+0x48>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <xQueueReceive+0x4c>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <xQueueReceive+0x4e>
 80068b4:	2300      	movs	r3, #0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <xQueueReceive+0x56>
 80068ba:	b672      	cpsid	i
 80068bc:	e7fe      	b.n	80068bc <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80068be:	f001 fb8f 	bl	8007fe0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01a      	beq.n	8006904 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	0011      	movs	r1, r2
 80068d4:	0018      	movs	r0, r3
 80068d6:	f000 f8e7 	bl	8006aa8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	1e5a      	subs	r2, r3, #1
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d008      	beq.n	80068fc <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	3310      	adds	r3, #16
 80068ee:	0018      	movs	r0, r3
 80068f0:	f000 fda4 	bl	800743c <xTaskRemoveFromEventList>
 80068f4:	1e03      	subs	r3, r0, #0
 80068f6:	d001      	beq.n	80068fc <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068f8:	f001 fb62 	bl	8007fc0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068fc:	f001 fb82 	bl	8008004 <vPortExitCritical>
				return pdPASS;
 8006900:	2301      	movs	r3, #1
 8006902:	e062      	b.n	80069ca <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800690a:	f001 fb7b 	bl	8008004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800690e:	2300      	movs	r3, #0
 8006910:	e05b      	b.n	80069ca <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d106      	bne.n	8006926 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006918:	2314      	movs	r3, #20
 800691a:	18fb      	adds	r3, r7, r3
 800691c:	0018      	movs	r0, r3
 800691e:	f000 fde9 	bl	80074f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006922:	2301      	movs	r3, #1
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006926:	f001 fb6d 	bl	8008004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800692a:	f000 fb97 	bl	800705c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800692e:	f001 fb57 	bl	8007fe0 <vPortEnterCritical>
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	2244      	movs	r2, #68	; 0x44
 8006936:	5c9b      	ldrb	r3, [r3, r2]
 8006938:	b25b      	sxtb	r3, r3
 800693a:	3301      	adds	r3, #1
 800693c:	d103      	bne.n	8006946 <xQueueReceive+0xde>
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	2244      	movs	r2, #68	; 0x44
 8006942:	2100      	movs	r1, #0
 8006944:	5499      	strb	r1, [r3, r2]
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	2245      	movs	r2, #69	; 0x45
 800694a:	5c9b      	ldrb	r3, [r3, r2]
 800694c:	b25b      	sxtb	r3, r3
 800694e:	3301      	adds	r3, #1
 8006950:	d103      	bne.n	800695a <xQueueReceive+0xf2>
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	2245      	movs	r2, #69	; 0x45
 8006956:	2100      	movs	r1, #0
 8006958:	5499      	strb	r1, [r3, r2]
 800695a:	f001 fb53 	bl	8008004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800695e:	1d3a      	adds	r2, r7, #4
 8006960:	2314      	movs	r3, #20
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	0011      	movs	r1, r2
 8006966:	0018      	movs	r0, r3
 8006968:	f000 fdd8 	bl	800751c <xTaskCheckForTimeOut>
 800696c:	1e03      	subs	r3, r0, #0
 800696e:	d11e      	bne.n	80069ae <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	0018      	movs	r0, r3
 8006974:	f000 f91c 	bl	8006bb0 <prvIsQueueEmpty>
 8006978:	1e03      	subs	r3, r0, #0
 800697a:	d011      	beq.n	80069a0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	3324      	adds	r3, #36	; 0x24
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	0011      	movs	r1, r2
 8006984:	0018      	movs	r0, r3
 8006986:	f000 fd15 	bl	80073b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	0018      	movs	r0, r3
 800698e:	f000 f8b1 	bl	8006af4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006992:	f000 fb6f 	bl	8007074 <xTaskResumeAll>
 8006996:	1e03      	subs	r3, r0, #0
 8006998:	d191      	bne.n	80068be <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800699a:	f001 fb11 	bl	8007fc0 <vPortYield>
 800699e:	e78e      	b.n	80068be <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	0018      	movs	r0, r3
 80069a4:	f000 f8a6 	bl	8006af4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069a8:	f000 fb64 	bl	8007074 <xTaskResumeAll>
 80069ac:	e787      	b.n	80068be <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	0018      	movs	r0, r3
 80069b2:	f000 f89f 	bl	8006af4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069b6:	f000 fb5d 	bl	8007074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	0018      	movs	r0, r3
 80069be:	f000 f8f7 	bl	8006bb0 <prvIsQueueEmpty>
 80069c2:	1e03      	subs	r3, r0, #0
 80069c4:	d100      	bne.n	80069c8 <xQueueReceive+0x160>
 80069c6:	e77a      	b.n	80068be <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80069ca:	0018      	movs	r0, r3
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b00a      	add	sp, #40	; 0x28
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b086      	sub	sp, #24
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10e      	bne.n	8006a0e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d14e      	bne.n	8006a96 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	0018      	movs	r0, r3
 80069fe:	f000 fed1 	bl	80077a4 <xTaskPriorityDisinherit>
 8006a02:	0003      	movs	r3, r0
 8006a04:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	605a      	str	r2, [r3, #4]
 8006a0c:	e043      	b.n	8006a96 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d119      	bne.n	8006a48 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6898      	ldr	r0, [r3, #8]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	0019      	movs	r1, r3
 8006a20:	f002 fa5e 	bl	8008ee0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	18d2      	adds	r2, r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d32b      	bcc.n	8006a96 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	609a      	str	r2, [r3, #8]
 8006a46:	e026      	b.n	8006a96 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68d8      	ldr	r0, [r3, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	0019      	movs	r1, r3
 8006a54:	f002 fa44 	bl	8008ee0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	425b      	negs	r3, r3
 8006a62:	18d2      	adds	r2, r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d207      	bcs.n	8006a84 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	425b      	negs	r3, r3
 8006a7e:	18d2      	adds	r2, r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d105      	bne.n	8006a96 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a9e:	697b      	ldr	r3, [r7, #20]
}
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b006      	add	sp, #24
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d018      	beq.n	8006aec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	18d2      	adds	r2, r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d303      	bcc.n	8006adc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68d9      	ldr	r1, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	f002 f9fa 	bl	8008ee0 <memcpy>
	}
}
 8006aec:	46c0      	nop			; (mov r8, r8)
 8006aee:	46bd      	mov	sp, r7
 8006af0:	b002      	add	sp, #8
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006afc:	f001 fa70 	bl	8007fe0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b00:	230f      	movs	r3, #15
 8006b02:	18fb      	adds	r3, r7, r3
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	2145      	movs	r1, #69	; 0x45
 8006b08:	5c52      	ldrb	r2, [r2, r1]
 8006b0a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b0c:	e013      	b.n	8006b36 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d016      	beq.n	8006b44 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3324      	adds	r3, #36	; 0x24
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f000 fc8e 	bl	800743c <xTaskRemoveFromEventList>
 8006b20:	1e03      	subs	r3, r0, #0
 8006b22:	d001      	beq.n	8006b28 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b24:	f000 fd4a 	bl	80075bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b28:	210f      	movs	r1, #15
 8006b2a:	187b      	adds	r3, r7, r1
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	187b      	adds	r3, r7, r1
 8006b34:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b36:	230f      	movs	r3, #15
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	b25b      	sxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	dce5      	bgt.n	8006b0e <prvUnlockQueue+0x1a>
 8006b42:	e000      	b.n	8006b46 <prvUnlockQueue+0x52>
					break;
 8006b44:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2245      	movs	r2, #69	; 0x45
 8006b4a:	21ff      	movs	r1, #255	; 0xff
 8006b4c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006b4e:	f001 fa59 	bl	8008004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b52:	f001 fa45 	bl	8007fe0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b56:	230e      	movs	r3, #14
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	2144      	movs	r1, #68	; 0x44
 8006b5e:	5c52      	ldrb	r2, [r2, r1]
 8006b60:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b62:	e013      	b.n	8006b8c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d016      	beq.n	8006b9a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3310      	adds	r3, #16
 8006b70:	0018      	movs	r0, r3
 8006b72:	f000 fc63 	bl	800743c <xTaskRemoveFromEventList>
 8006b76:	1e03      	subs	r3, r0, #0
 8006b78:	d001      	beq.n	8006b7e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006b7a:	f000 fd1f 	bl	80075bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b7e:	210e      	movs	r1, #14
 8006b80:	187b      	adds	r3, r7, r1
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	187b      	adds	r3, r7, r1
 8006b8a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b8c:	230e      	movs	r3, #14
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	dce5      	bgt.n	8006b64 <prvUnlockQueue+0x70>
 8006b98:	e000      	b.n	8006b9c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006b9a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2244      	movs	r2, #68	; 0x44
 8006ba0:	21ff      	movs	r1, #255	; 0xff
 8006ba2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006ba4:	f001 fa2e 	bl	8008004 <vPortExitCritical>
}
 8006ba8:	46c0      	nop			; (mov r8, r8)
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b004      	add	sp, #16
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bb8:	f001 fa12 	bl	8007fe0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e001      	b.n	8006bce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bce:	f001 fa19 	bl	8008004 <vPortExitCritical>

	return xReturn;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
}
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b004      	add	sp, #16
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006be4:	f001 f9fc 	bl	8007fe0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d102      	bne.n	8006bfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e001      	b.n	8006bfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bfe:	f001 fa01 	bl	8008004 <vPortExitCritical>

	return xReturn;
 8006c02:	68fb      	ldr	r3, [r7, #12]
}
 8006c04:	0018      	movs	r0, r3
 8006c06:	46bd      	mov	sp, r7
 8006c08:	b004      	add	sp, #16
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	e015      	b.n	8006c48 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c1c:	4b0e      	ldr	r3, [pc, #56]	; (8006c58 <vQueueAddToRegistry+0x4c>)
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	00d2      	lsls	r2, r2, #3
 8006c22:	58d3      	ldr	r3, [r2, r3]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10c      	bne.n	8006c42 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <vQueueAddToRegistry+0x4c>)
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	00d2      	lsls	r2, r2, #3
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c32:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <vQueueAddToRegistry+0x4c>)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	18d3      	adds	r3, r2, r3
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c40:	e005      	b.n	8006c4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3301      	adds	r3, #1
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b07      	cmp	r3, #7
 8006c4c:	d9e6      	bls.n	8006c1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	46bd      	mov	sp, r7
 8006c52:	b004      	add	sp, #16
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	20001d88 	.word	0x20001d88

08006c5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c6c:	f001 f9b8 	bl	8007fe0 <vPortEnterCritical>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2244      	movs	r2, #68	; 0x44
 8006c74:	5c9b      	ldrb	r3, [r3, r2]
 8006c76:	b25b      	sxtb	r3, r3
 8006c78:	3301      	adds	r3, #1
 8006c7a:	d103      	bne.n	8006c84 <vQueueWaitForMessageRestricted+0x28>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2244      	movs	r2, #68	; 0x44
 8006c80:	2100      	movs	r1, #0
 8006c82:	5499      	strb	r1, [r3, r2]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2245      	movs	r2, #69	; 0x45
 8006c88:	5c9b      	ldrb	r3, [r3, r2]
 8006c8a:	b25b      	sxtb	r3, r3
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	d103      	bne.n	8006c98 <vQueueWaitForMessageRestricted+0x3c>
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2245      	movs	r2, #69	; 0x45
 8006c94:	2100      	movs	r1, #0
 8006c96:	5499      	strb	r1, [r3, r2]
 8006c98:	f001 f9b4 	bl	8008004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	3324      	adds	r3, #36	; 0x24
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	0018      	movs	r0, r3
 8006cae:	f000 fb9f 	bl	80073f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f7ff ff1d 	bl	8006af4 <prvUnlockQueue>
	}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b006      	add	sp, #24
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cc2:	b590      	push	{r4, r7, lr}
 8006cc4:	b08d      	sub	sp, #52	; 0x34
 8006cc6:	af04      	add	r7, sp, #16
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
 8006cce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <xTaskCreateStatic+0x18>
 8006cd6:	b672      	cpsid	i
 8006cd8:	e7fe      	b.n	8006cd8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <xTaskCreateStatic+0x22>
 8006ce0:	b672      	cpsid	i
 8006ce2:	e7fe      	b.n	8006ce2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ce4:	235c      	movs	r3, #92	; 0x5c
 8006ce6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b5c      	cmp	r3, #92	; 0x5c
 8006cec:	d001      	beq.n	8006cf2 <xTaskCreateStatic+0x30>
 8006cee:	b672      	cpsid	i
 8006cf0:	e7fe      	b.n	8006cf0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d020      	beq.n	8006d3a <xTaskCreateStatic+0x78>
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d01d      	beq.n	8006d3a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	2259      	movs	r2, #89	; 0x59
 8006d0c:	2102      	movs	r1, #2
 8006d0e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d10:	683c      	ldr	r4, [r7, #0]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9303      	str	r3, [sp, #12]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	9302      	str	r3, [sp, #8]
 8006d20:	2318      	movs	r3, #24
 8006d22:	18fb      	adds	r3, r7, r3
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	0023      	movs	r3, r4
 8006d2c:	f000 f858 	bl	8006de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	0018      	movs	r0, r3
 8006d34:	f000 f8d6 	bl	8006ee4 <prvAddNewTaskToReadyList>
 8006d38:	e001      	b.n	8006d3e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b009      	add	sp, #36	; 0x24
 8006d46:	bd90      	pop	{r4, r7, pc}

08006d48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b08d      	sub	sp, #52	; 0x34
 8006d4c:	af04      	add	r7, sp, #16
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	1dbb      	adds	r3, r7, #6
 8006d56:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d58:	1dbb      	adds	r3, r7, #6
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f001 f9d6 	bl	8008110 <pvPortMalloc>
 8006d64:	0003      	movs	r3, r0
 8006d66:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d010      	beq.n	8006d90 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006d6e:	205c      	movs	r0, #92	; 0x5c
 8006d70:	f001 f9ce 	bl	8008110 <pvPortMalloc>
 8006d74:	0003      	movs	r3, r0
 8006d76:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
 8006d84:	e006      	b.n	8006d94 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f001 fa67 	bl	800825c <vPortFree>
 8006d8e:	e001      	b.n	8006d94 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01a      	beq.n	8006dd0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	2259      	movs	r2, #89	; 0x59
 8006d9e:	2100      	movs	r1, #0
 8006da0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006da2:	1dbb      	adds	r3, r7, #6
 8006da4:	881a      	ldrh	r2, [r3, #0]
 8006da6:	683c      	ldr	r4, [r7, #0]
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	2300      	movs	r3, #0
 8006dae:	9303      	str	r3, [sp, #12]
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	9302      	str	r3, [sp, #8]
 8006db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	0023      	movs	r3, r4
 8006dbe:	f000 f80f 	bl	8006de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f000 f88d 	bl	8006ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	e002      	b.n	8006dd6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	425b      	negs	r3, r3
 8006dd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006dd6:	69bb      	ldr	r3, [r7, #24]
	}
 8006dd8:	0018      	movs	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b009      	add	sp, #36	; 0x24
 8006dde:	bd90      	pop	{r4, r7, pc}

08006de0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	001a      	movs	r2, r3
 8006df8:	21a5      	movs	r1, #165	; 0xa5
 8006dfa:	f002 f87a 	bl	8008ef2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4936      	ldr	r1, [pc, #216]	; (8006ee0 <prvInitialiseNewTask+0x100>)
 8006e06:	468c      	mov	ip, r1
 8006e08:	4463      	add	r3, ip
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	18d3      	adds	r3, r2, r3
 8006e0e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2207      	movs	r2, #7
 8006e14:	4393      	bics	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	2207      	movs	r2, #7
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	d001      	beq.n	8006e24 <prvInitialiseNewTask+0x44>
 8006e20:	b672      	cpsid	i
 8006e22:	e7fe      	b.n	8006e22 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e013      	b.n	8006e52 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	18d3      	adds	r3, r2, r3
 8006e30:	7818      	ldrb	r0, [r3, #0]
 8006e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e34:	2134      	movs	r1, #52	; 0x34
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	185b      	adds	r3, r3, r1
 8006e3c:	1c02      	adds	r2, r0, #0
 8006e3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	18d3      	adds	r3, r2, r3
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d006      	beq.n	8006e5a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b0f      	cmp	r3, #15
 8006e56:	d9e8      	bls.n	8006e2a <prvInitialiseNewTask+0x4a>
 8006e58:	e000      	b.n	8006e5c <prvInitialiseNewTask+0x7c>
		{
			break;
 8006e5a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	2243      	movs	r2, #67	; 0x43
 8006e60:	2100      	movs	r1, #0
 8006e62:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	2b37      	cmp	r3, #55	; 0x37
 8006e68:	d901      	bls.n	8006e6e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e6a:	2337      	movs	r3, #55	; 0x37
 8006e6c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	6a3a      	ldr	r2, [r7, #32]
 8006e78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	3304      	adds	r3, #4
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7ff fa69 	bl	800635c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	3318      	adds	r3, #24
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f7ff fa64 	bl	800635c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	2238      	movs	r2, #56	; 0x38
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	2200      	movs	r2, #0
 8006eae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	2258      	movs	r2, #88	; 0x58
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f000 fff6 	bl	8007eb0 <pxPortInitialiseStack>
 8006ec4:	0002      	movs	r2, r0
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b006      	add	sp, #24
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	3fffffff 	.word	0x3fffffff

08006ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006eec:	f001 f878 	bl	8007fe0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ef0:	4b2a      	ldr	r3, [pc, #168]	; (8006f9c <prvAddNewTaskToReadyList+0xb8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	4b29      	ldr	r3, [pc, #164]	; (8006f9c <prvAddNewTaskToReadyList+0xb8>)
 8006ef8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006efa:	4b29      	ldr	r3, [pc, #164]	; (8006fa0 <prvAddNewTaskToReadyList+0xbc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f02:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <prvAddNewTaskToReadyList+0xbc>)
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f08:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <prvAddNewTaskToReadyList+0xb8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d110      	bne.n	8006f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f10:	f000 fb6e 	bl	80075f0 <prvInitialiseTaskLists>
 8006f14:	e00d      	b.n	8006f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f16:	4b23      	ldr	r3, [pc, #140]	; (8006fa4 <prvAddNewTaskToReadyList+0xc0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d109      	bne.n	8006f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f1e:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <prvAddNewTaskToReadyList+0xbc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d802      	bhi.n	8006f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f2c:	4b1c      	ldr	r3, [pc, #112]	; (8006fa0 <prvAddNewTaskToReadyList+0xbc>)
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f32:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <prvAddNewTaskToReadyList+0xc4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <prvAddNewTaskToReadyList+0xc4>)
 8006f3a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f3c:	4b1a      	ldr	r3, [pc, #104]	; (8006fa8 <prvAddNewTaskToReadyList+0xc4>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f48:	4b18      	ldr	r3, [pc, #96]	; (8006fac <prvAddNewTaskToReadyList+0xc8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d903      	bls.n	8006f58 <prvAddNewTaskToReadyList+0x74>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4b15      	ldr	r3, [pc, #84]	; (8006fac <prvAddNewTaskToReadyList+0xc8>)
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	0013      	movs	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	189b      	adds	r3, r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4a12      	ldr	r2, [pc, #72]	; (8006fb0 <prvAddNewTaskToReadyList+0xcc>)
 8006f66:	189a      	adds	r2, r3, r2
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	0019      	movs	r1, r3
 8006f6e:	0010      	movs	r0, r2
 8006f70:	f7ff f9ff 	bl	8006372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f74:	f001 f846 	bl	8008004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f78:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <prvAddNewTaskToReadyList+0xc0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d008      	beq.n	8006f92 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <prvAddNewTaskToReadyList+0xbc>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d201      	bcs.n	8006f92 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f8e:	f001 f817 	bl	8007fc0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b002      	add	sp, #8
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	20000d2c 	.word	0x20000d2c
 8006fa0:	20000858 	.word	0x20000858
 8006fa4:	20000d38 	.word	0x20000d38
 8006fa8:	20000d48 	.word	0x20000d48
 8006fac:	20000d34 	.word	0x20000d34
 8006fb0:	2000085c 	.word	0x2000085c

08006fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fb4:	b590      	push	{r4, r7, lr}
 8006fb6:	b089      	sub	sp, #36	; 0x24
 8006fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fc2:	003a      	movs	r2, r7
 8006fc4:	1d39      	adds	r1, r7, #4
 8006fc6:	2308      	movs	r3, #8
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f7ff f978 	bl	80062c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fd0:	683c      	ldr	r4, [r7, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	491b      	ldr	r1, [pc, #108]	; (8007044 <vTaskStartScheduler+0x90>)
 8006fd8:	481b      	ldr	r0, [pc, #108]	; (8007048 <vTaskStartScheduler+0x94>)
 8006fda:	9202      	str	r2, [sp, #8]
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	0022      	movs	r2, r4
 8006fe6:	f7ff fe6c 	bl	8006cc2 <xTaskCreateStatic>
 8006fea:	0002      	movs	r2, r0
 8006fec:	4b17      	ldr	r3, [pc, #92]	; (800704c <vTaskStartScheduler+0x98>)
 8006fee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ff0:	4b16      	ldr	r3, [pc, #88]	; (800704c <vTaskStartScheduler+0x98>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e001      	b.n	8007002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d103      	bne.n	8007010 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007008:	f000 fc7c 	bl	8007904 <xTimerCreateTimerTask>
 800700c:	0003      	movs	r3, r0
 800700e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d10d      	bne.n	8007032 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007016:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007018:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <vTaskStartScheduler+0x9c>)
 800701a:	2201      	movs	r2, #1
 800701c:	4252      	negs	r2, r2
 800701e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007020:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <vTaskStartScheduler+0xa0>)
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <vTaskStartScheduler+0xa4>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800702c:	f000 ffa4 	bl	8007f78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007030:	e004      	b.n	800703c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	d101      	bne.n	800703c <vTaskStartScheduler+0x88>
 8007038:	b672      	cpsid	i
 800703a:	e7fe      	b.n	800703a <vTaskStartScheduler+0x86>
}
 800703c:	46c0      	nop			; (mov r8, r8)
 800703e:	46bd      	mov	sp, r7
 8007040:	b005      	add	sp, #20
 8007042:	bd90      	pop	{r4, r7, pc}
 8007044:	08008f4c 	.word	0x08008f4c
 8007048:	080075d1 	.word	0x080075d1
 800704c:	20000d50 	.word	0x20000d50
 8007050:	20000d4c 	.word	0x20000d4c
 8007054:	20000d38 	.word	0x20000d38
 8007058:	20000d30 	.word	0x20000d30

0800705c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007060:	4b03      	ldr	r3, [pc, #12]	; (8007070 <vTaskSuspendAll+0x14>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	4b02      	ldr	r3, [pc, #8]	; (8007070 <vTaskSuspendAll+0x14>)
 8007068:	601a      	str	r2, [r3, #0]
}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000d54 	.word	0x20000d54

08007074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007082:	4b3a      	ldr	r3, [pc, #232]	; (800716c <xTaskResumeAll+0xf8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <xTaskResumeAll+0x1a>
 800708a:	b672      	cpsid	i
 800708c:	e7fe      	b.n	800708c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800708e:	f000 ffa7 	bl	8007fe0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007092:	4b36      	ldr	r3, [pc, #216]	; (800716c <xTaskResumeAll+0xf8>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	1e5a      	subs	r2, r3, #1
 8007098:	4b34      	ldr	r3, [pc, #208]	; (800716c <xTaskResumeAll+0xf8>)
 800709a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800709c:	4b33      	ldr	r3, [pc, #204]	; (800716c <xTaskResumeAll+0xf8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d15b      	bne.n	800715c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070a4:	4b32      	ldr	r3, [pc, #200]	; (8007170 <xTaskResumeAll+0xfc>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d057      	beq.n	800715c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070ac:	e02f      	b.n	800710e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80070ae:	4b31      	ldr	r3, [pc, #196]	; (8007174 <xTaskResumeAll+0x100>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3318      	adds	r3, #24
 80070ba:	0018      	movs	r0, r3
 80070bc:	f7ff f9b1 	bl	8006422 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3304      	adds	r3, #4
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7ff f9ac 	bl	8006422 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ce:	4b2a      	ldr	r3, [pc, #168]	; (8007178 <xTaskResumeAll+0x104>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d903      	bls.n	80070de <xTaskResumeAll+0x6a>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070da:	4b27      	ldr	r3, [pc, #156]	; (8007178 <xTaskResumeAll+0x104>)
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e2:	0013      	movs	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	189b      	adds	r3, r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4a24      	ldr	r2, [pc, #144]	; (800717c <xTaskResumeAll+0x108>)
 80070ec:	189a      	adds	r2, r3, r2
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3304      	adds	r3, #4
 80070f2:	0019      	movs	r1, r3
 80070f4:	0010      	movs	r0, r2
 80070f6:	f7ff f93c 	bl	8006372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fe:	4b20      	ldr	r3, [pc, #128]	; (8007180 <xTaskResumeAll+0x10c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	429a      	cmp	r2, r3
 8007106:	d302      	bcc.n	800710e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007108:	4b1e      	ldr	r3, [pc, #120]	; (8007184 <xTaskResumeAll+0x110>)
 800710a:	2201      	movs	r2, #1
 800710c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800710e:	4b19      	ldr	r3, [pc, #100]	; (8007174 <xTaskResumeAll+0x100>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1cb      	bne.n	80070ae <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800711c:	f000 fb02 	bl	8007724 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007120:	4b19      	ldr	r3, [pc, #100]	; (8007188 <xTaskResumeAll+0x114>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00f      	beq.n	800714c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800712c:	f000 f83c 	bl	80071a8 <xTaskIncrementTick>
 8007130:	1e03      	subs	r3, r0, #0
 8007132:	d002      	beq.n	800713a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007134:	4b13      	ldr	r3, [pc, #76]	; (8007184 <xTaskResumeAll+0x110>)
 8007136:	2201      	movs	r2, #1
 8007138:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3b01      	subs	r3, #1
 800713e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f2      	bne.n	800712c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8007146:	4b10      	ldr	r3, [pc, #64]	; (8007188 <xTaskResumeAll+0x114>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800714c:	4b0d      	ldr	r3, [pc, #52]	; (8007184 <xTaskResumeAll+0x110>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007154:	2301      	movs	r3, #1
 8007156:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007158:	f000 ff32 	bl	8007fc0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800715c:	f000 ff52 	bl	8008004 <vPortExitCritical>

	return xAlreadyYielded;
 8007160:	68bb      	ldr	r3, [r7, #8]
}
 8007162:	0018      	movs	r0, r3
 8007164:	46bd      	mov	sp, r7
 8007166:	b004      	add	sp, #16
 8007168:	bd80      	pop	{r7, pc}
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	20000d54 	.word	0x20000d54
 8007170:	20000d2c 	.word	0x20000d2c
 8007174:	20000cec 	.word	0x20000cec
 8007178:	20000d34 	.word	0x20000d34
 800717c:	2000085c 	.word	0x2000085c
 8007180:	20000858 	.word	0x20000858
 8007184:	20000d40 	.word	0x20000d40
 8007188:	20000d3c 	.word	0x20000d3c

0800718c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007192:	4b04      	ldr	r3, [pc, #16]	; (80071a4 <xTaskGetTickCount+0x18>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007198:	687b      	ldr	r3, [r7, #4]
}
 800719a:	0018      	movs	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	b002      	add	sp, #8
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	20000d30 	.word	0x20000d30

080071a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b2:	4b4c      	ldr	r3, [pc, #304]	; (80072e4 <xTaskIncrementTick+0x13c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d000      	beq.n	80071bc <xTaskIncrementTick+0x14>
 80071ba:	e083      	b.n	80072c4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071bc:	4b4a      	ldr	r3, [pc, #296]	; (80072e8 <xTaskIncrementTick+0x140>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3301      	adds	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071c4:	4b48      	ldr	r3, [pc, #288]	; (80072e8 <xTaskIncrementTick+0x140>)
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d117      	bne.n	8007200 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80071d0:	4b46      	ldr	r3, [pc, #280]	; (80072ec <xTaskIncrementTick+0x144>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <xTaskIncrementTick+0x36>
 80071da:	b672      	cpsid	i
 80071dc:	e7fe      	b.n	80071dc <xTaskIncrementTick+0x34>
 80071de:	4b43      	ldr	r3, [pc, #268]	; (80072ec <xTaskIncrementTick+0x144>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	4b42      	ldr	r3, [pc, #264]	; (80072f0 <xTaskIncrementTick+0x148>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	4b40      	ldr	r3, [pc, #256]	; (80072ec <xTaskIncrementTick+0x144>)
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	4b40      	ldr	r3, [pc, #256]	; (80072f0 <xTaskIncrementTick+0x148>)
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	4b40      	ldr	r3, [pc, #256]	; (80072f4 <xTaskIncrementTick+0x14c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	4b3e      	ldr	r3, [pc, #248]	; (80072f4 <xTaskIncrementTick+0x14c>)
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f000 fa92 	bl	8007724 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007200:	4b3d      	ldr	r3, [pc, #244]	; (80072f8 <xTaskIncrementTick+0x150>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	429a      	cmp	r2, r3
 8007208:	d34e      	bcc.n	80072a8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800720a:	4b38      	ldr	r3, [pc, #224]	; (80072ec <xTaskIncrementTick+0x144>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <xTaskIncrementTick+0x70>
 8007214:	2301      	movs	r3, #1
 8007216:	e000      	b.n	800721a <xTaskIncrementTick+0x72>
 8007218:	2300      	movs	r3, #0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800721e:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <xTaskIncrementTick+0x150>)
 8007220:	2201      	movs	r2, #1
 8007222:	4252      	negs	r2, r2
 8007224:	601a      	str	r2, [r3, #0]
					break;
 8007226:	e03f      	b.n	80072a8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007228:	4b30      	ldr	r3, [pc, #192]	; (80072ec <xTaskIncrementTick+0x144>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	429a      	cmp	r2, r3
 800723e:	d203      	bcs.n	8007248 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007240:	4b2d      	ldr	r3, [pc, #180]	; (80072f8 <xTaskIncrementTick+0x150>)
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	601a      	str	r2, [r3, #0]
						break;
 8007246:	e02f      	b.n	80072a8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3304      	adds	r3, #4
 800724c:	0018      	movs	r0, r3
 800724e:	f7ff f8e8 	bl	8006422 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	3318      	adds	r3, #24
 800725e:	0018      	movs	r0, r3
 8007260:	f7ff f8df 	bl	8006422 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007268:	4b24      	ldr	r3, [pc, #144]	; (80072fc <xTaskIncrementTick+0x154>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d903      	bls.n	8007278 <xTaskIncrementTick+0xd0>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007274:	4b21      	ldr	r3, [pc, #132]	; (80072fc <xTaskIncrementTick+0x154>)
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727c:	0013      	movs	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	189b      	adds	r3, r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <xTaskIncrementTick+0x158>)
 8007286:	189a      	adds	r2, r3, r2
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	3304      	adds	r3, #4
 800728c:	0019      	movs	r1, r3
 800728e:	0010      	movs	r0, r2
 8007290:	f7ff f86f 	bl	8006372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <xTaskIncrementTick+0x15c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	429a      	cmp	r2, r3
 80072a0:	d3b3      	bcc.n	800720a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80072a2:	2301      	movs	r3, #1
 80072a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072a6:	e7b0      	b.n	800720a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072a8:	4b16      	ldr	r3, [pc, #88]	; (8007304 <xTaskIncrementTick+0x15c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ae:	4914      	ldr	r1, [pc, #80]	; (8007300 <xTaskIncrementTick+0x158>)
 80072b0:	0013      	movs	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	189b      	adds	r3, r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	585b      	ldr	r3, [r3, r1]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d907      	bls.n	80072ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80072be:	2301      	movs	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e004      	b.n	80072ce <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80072c4:	4b10      	ldr	r3, [pc, #64]	; (8007308 <xTaskIncrementTick+0x160>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <xTaskIncrementTick+0x160>)
 80072cc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <xTaskIncrementTick+0x164>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80072d6:	2301      	movs	r3, #1
 80072d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80072da:	697b      	ldr	r3, [r7, #20]
}
 80072dc:	0018      	movs	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	b006      	add	sp, #24
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000d54 	.word	0x20000d54
 80072e8:	20000d30 	.word	0x20000d30
 80072ec:	20000ce4 	.word	0x20000ce4
 80072f0:	20000ce8 	.word	0x20000ce8
 80072f4:	20000d44 	.word	0x20000d44
 80072f8:	20000d4c 	.word	0x20000d4c
 80072fc:	20000d34 	.word	0x20000d34
 8007300:	2000085c 	.word	0x2000085c
 8007304:	20000858 	.word	0x20000858
 8007308:	20000d3c 	.word	0x20000d3c
 800730c:	20000d40 	.word	0x20000d40

08007310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007316:	4b22      	ldr	r3, [pc, #136]	; (80073a0 <vTaskSwitchContext+0x90>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800731e:	4b21      	ldr	r3, [pc, #132]	; (80073a4 <vTaskSwitchContext+0x94>)
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007324:	e037      	b.n	8007396 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8007326:	4b1f      	ldr	r3, [pc, #124]	; (80073a4 <vTaskSwitchContext+0x94>)
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800732c:	4b1e      	ldr	r3, [pc, #120]	; (80073a8 <vTaskSwitchContext+0x98>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	e007      	b.n	8007344 <vTaskSwitchContext+0x34>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <vTaskSwitchContext+0x2e>
 800733a:	b672      	cpsid	i
 800733c:	e7fe      	b.n	800733c <vTaskSwitchContext+0x2c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3b01      	subs	r3, #1
 8007342:	607b      	str	r3, [r7, #4]
 8007344:	4919      	ldr	r1, [pc, #100]	; (80073ac <vTaskSwitchContext+0x9c>)
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	0013      	movs	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	189b      	adds	r3, r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	585b      	ldr	r3, [r3, r1]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0ee      	beq.n	8007334 <vTaskSwitchContext+0x24>
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	0013      	movs	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	189b      	adds	r3, r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4a12      	ldr	r2, [pc, #72]	; (80073ac <vTaskSwitchContext+0x9c>)
 8007362:	189b      	adds	r3, r3, r2
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	605a      	str	r2, [r3, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	429a      	cmp	r2, r3
 800737a:	d104      	bne.n	8007386 <vTaskSwitchContext+0x76>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	605a      	str	r2, [r3, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <vTaskSwitchContext+0xa0>)
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <vTaskSwitchContext+0x98>)
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	601a      	str	r2, [r3, #0]
}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	46bd      	mov	sp, r7
 800739a:	b002      	add	sp, #8
 800739c:	bd80      	pop	{r7, pc}
 800739e:	46c0      	nop			; (mov r8, r8)
 80073a0:	20000d54 	.word	0x20000d54
 80073a4:	20000d40 	.word	0x20000d40
 80073a8:	20000d34 	.word	0x20000d34
 80073ac:	2000085c 	.word	0x2000085c
 80073b0:	20000858 	.word	0x20000858

080073b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <vTaskPlaceOnEventList+0x14>
 80073c4:	b672      	cpsid	i
 80073c6:	e7fe      	b.n	80073c6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073c8:	4b08      	ldr	r3, [pc, #32]	; (80073ec <vTaskPlaceOnEventList+0x38>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3318      	adds	r3, #24
 80073ce:	001a      	movs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	0011      	movs	r1, r2
 80073d4:	0018      	movs	r0, r3
 80073d6:	f7fe ffee 	bl	80063b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2101      	movs	r1, #1
 80073de:	0018      	movs	r0, r3
 80073e0:	f000 fa3c 	bl	800785c <prvAddCurrentTaskToDelayedList>
}
 80073e4:	46c0      	nop			; (mov r8, r8)
 80073e6:	46bd      	mov	sp, r7
 80073e8:	b002      	add	sp, #8
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000858 	.word	0x20000858

080073f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <vTaskPlaceOnEventListRestricted+0x16>
 8007402:	b672      	cpsid	i
 8007404:	e7fe      	b.n	8007404 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007406:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <vTaskPlaceOnEventListRestricted+0x48>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3318      	adds	r3, #24
 800740c:	001a      	movs	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	0011      	movs	r1, r2
 8007412:	0018      	movs	r0, r3
 8007414:	f7fe ffad 	bl	8006372 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800741e:	2301      	movs	r3, #1
 8007420:	425b      	negs	r3, r3
 8007422:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	0011      	movs	r1, r2
 800742a:	0018      	movs	r0, r3
 800742c:	f000 fa16 	bl	800785c <prvAddCurrentTaskToDelayedList>
	}
 8007430:	46c0      	nop			; (mov r8, r8)
 8007432:	46bd      	mov	sp, r7
 8007434:	b004      	add	sp, #16
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20000858 	.word	0x20000858

0800743c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <xTaskRemoveFromEventList+0x1a>
 8007452:	b672      	cpsid	i
 8007454:	e7fe      	b.n	8007454 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	3318      	adds	r3, #24
 800745a:	0018      	movs	r0, r3
 800745c:	f7fe ffe1 	bl	8006422 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007460:	4b1e      	ldr	r3, [pc, #120]	; (80074dc <xTaskRemoveFromEventList+0xa0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d11d      	bne.n	80074a4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	3304      	adds	r3, #4
 800746c:	0018      	movs	r0, r3
 800746e:	f7fe ffd8 	bl	8006422 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007476:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <xTaskRemoveFromEventList+0xa4>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d903      	bls.n	8007486 <xTaskRemoveFromEventList+0x4a>
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007482:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <xTaskRemoveFromEventList+0xa4>)
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748a:	0013      	movs	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	189b      	adds	r3, r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4a14      	ldr	r2, [pc, #80]	; (80074e4 <xTaskRemoveFromEventList+0xa8>)
 8007494:	189a      	adds	r2, r3, r2
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	3304      	adds	r3, #4
 800749a:	0019      	movs	r1, r3
 800749c:	0010      	movs	r0, r2
 800749e:	f7fe ff68 	bl	8006372 <vListInsertEnd>
 80074a2:	e007      	b.n	80074b4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	3318      	adds	r3, #24
 80074a8:	001a      	movs	r2, r3
 80074aa:	4b0f      	ldr	r3, [pc, #60]	; (80074e8 <xTaskRemoveFromEventList+0xac>)
 80074ac:	0011      	movs	r1, r2
 80074ae:	0018      	movs	r0, r3
 80074b0:	f7fe ff5f 	bl	8006372 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b8:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <xTaskRemoveFromEventList+0xb0>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	429a      	cmp	r2, r3
 80074c0:	d905      	bls.n	80074ce <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074c2:	2301      	movs	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074c6:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <xTaskRemoveFromEventList+0xb4>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	e001      	b.n	80074d2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80074d2:	68fb      	ldr	r3, [r7, #12]
}
 80074d4:	0018      	movs	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b004      	add	sp, #16
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000d54 	.word	0x20000d54
 80074e0:	20000d34 	.word	0x20000d34
 80074e4:	2000085c 	.word	0x2000085c
 80074e8:	20000cec 	.word	0x20000cec
 80074ec:	20000858 	.word	0x20000858
 80074f0:	20000d40 	.word	0x20000d40

080074f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <vTaskInternalSetTimeOutState+0x20>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007504:	4b04      	ldr	r3, [pc, #16]	; (8007518 <vTaskInternalSetTimeOutState+0x24>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	605a      	str	r2, [r3, #4]
}
 800750c:	46c0      	nop			; (mov r8, r8)
 800750e:	46bd      	mov	sp, r7
 8007510:	b002      	add	sp, #8
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000d44 	.word	0x20000d44
 8007518:	20000d30 	.word	0x20000d30

0800751c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <xTaskCheckForTimeOut+0x14>
 800752c:	b672      	cpsid	i
 800752e:	e7fe      	b.n	800752e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <xTaskCheckForTimeOut+0x1e>
 8007536:	b672      	cpsid	i
 8007538:	e7fe      	b.n	8007538 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800753a:	f000 fd51 	bl	8007fe0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800753e:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <xTaskCheckForTimeOut+0x98>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	d102      	bne.n	800755c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	e024      	b.n	80075a6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <xTaskCheckForTimeOut+0x9c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d007      	beq.n	8007578 <xTaskCheckForTimeOut+0x5c>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	617b      	str	r3, [r7, #20]
 8007576:	e016      	b.n	80075a6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	429a      	cmp	r2, r3
 8007580:	d20c      	bcs.n	800759c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1ad2      	subs	r2, r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	0018      	movs	r0, r3
 8007592:	f7ff ffaf 	bl	80074f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	e004      	b.n	80075a6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075a2:	2301      	movs	r3, #1
 80075a4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80075a6:	f000 fd2d 	bl	8008004 <vPortExitCritical>

	return xReturn;
 80075aa:	697b      	ldr	r3, [r7, #20]
}
 80075ac:	0018      	movs	r0, r3
 80075ae:	46bd      	mov	sp, r7
 80075b0:	b006      	add	sp, #24
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000d30 	.word	0x20000d30
 80075b8:	20000d44 	.word	0x20000d44

080075bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075c0:	4b02      	ldr	r3, [pc, #8]	; (80075cc <vTaskMissedYield+0x10>)
 80075c2:	2201      	movs	r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000d40 	.word	0x20000d40

080075d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075d8:	f000 f84e 	bl	8007678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075dc:	4b03      	ldr	r3, [pc, #12]	; (80075ec <prvIdleTask+0x1c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d9f9      	bls.n	80075d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075e4:	f000 fcec 	bl	8007fc0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80075e8:	e7f6      	b.n	80075d8 <prvIdleTask+0x8>
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	2000085c 	.word	0x2000085c

080075f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075f6:	2300      	movs	r3, #0
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	e00c      	b.n	8007616 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	0013      	movs	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	189b      	adds	r3, r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4a14      	ldr	r2, [pc, #80]	; (8007658 <prvInitialiseTaskLists+0x68>)
 8007608:	189b      	adds	r3, r3, r2
 800760a:	0018      	movs	r0, r3
 800760c:	f7fe fe88 	bl	8006320 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3301      	adds	r3, #1
 8007614:	607b      	str	r3, [r7, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b37      	cmp	r3, #55	; 0x37
 800761a:	d9ef      	bls.n	80075fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <prvInitialiseTaskLists+0x6c>)
 800761e:	0018      	movs	r0, r3
 8007620:	f7fe fe7e 	bl	8006320 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007624:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <prvInitialiseTaskLists+0x70>)
 8007626:	0018      	movs	r0, r3
 8007628:	f7fe fe7a 	bl	8006320 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800762c:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <prvInitialiseTaskLists+0x74>)
 800762e:	0018      	movs	r0, r3
 8007630:	f7fe fe76 	bl	8006320 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <prvInitialiseTaskLists+0x78>)
 8007636:	0018      	movs	r0, r3
 8007638:	f7fe fe72 	bl	8006320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800763c:	4b0b      	ldr	r3, [pc, #44]	; (800766c <prvInitialiseTaskLists+0x7c>)
 800763e:	0018      	movs	r0, r3
 8007640:	f7fe fe6e 	bl	8006320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007644:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <prvInitialiseTaskLists+0x80>)
 8007646:	4a05      	ldr	r2, [pc, #20]	; (800765c <prvInitialiseTaskLists+0x6c>)
 8007648:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <prvInitialiseTaskLists+0x84>)
 800764c:	4a04      	ldr	r2, [pc, #16]	; (8007660 <prvInitialiseTaskLists+0x70>)
 800764e:	601a      	str	r2, [r3, #0]
}
 8007650:	46c0      	nop			; (mov r8, r8)
 8007652:	46bd      	mov	sp, r7
 8007654:	b002      	add	sp, #8
 8007656:	bd80      	pop	{r7, pc}
 8007658:	2000085c 	.word	0x2000085c
 800765c:	20000cbc 	.word	0x20000cbc
 8007660:	20000cd0 	.word	0x20000cd0
 8007664:	20000cec 	.word	0x20000cec
 8007668:	20000d00 	.word	0x20000d00
 800766c:	20000d18 	.word	0x20000d18
 8007670:	20000ce4 	.word	0x20000ce4
 8007674:	20000ce8 	.word	0x20000ce8

08007678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800767e:	e01a      	b.n	80076b6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007680:	f000 fcae 	bl	8007fe0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007684:	4b10      	ldr	r3, [pc, #64]	; (80076c8 <prvCheckTasksWaitingTermination+0x50>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3304      	adds	r3, #4
 8007690:	0018      	movs	r0, r3
 8007692:	f7fe fec6 	bl	8006422 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <prvCheckTasksWaitingTermination+0x54>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	1e5a      	subs	r2, r3, #1
 800769c:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <prvCheckTasksWaitingTermination+0x54>)
 800769e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <prvCheckTasksWaitingTermination+0x58>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	1e5a      	subs	r2, r3, #1
 80076a6:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <prvCheckTasksWaitingTermination+0x58>)
 80076a8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80076aa:	f000 fcab 	bl	8008004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	0018      	movs	r0, r3
 80076b2:	f000 f80f 	bl	80076d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b6:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <prvCheckTasksWaitingTermination+0x58>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1e0      	bne.n	8007680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b002      	add	sp, #8
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	20000d00 	.word	0x20000d00
 80076cc:	20000d2c 	.word	0x20000d2c
 80076d0:	20000d14 	.word	0x20000d14

080076d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2259      	movs	r2, #89	; 0x59
 80076e0:	5c9b      	ldrb	r3, [r3, r2]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	0018      	movs	r0, r3
 80076ec:	f000 fdb6 	bl	800825c <vPortFree>
				vPortFree( pxTCB );
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	0018      	movs	r0, r3
 80076f4:	f000 fdb2 	bl	800825c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076f8:	e010      	b.n	800771c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2259      	movs	r2, #89	; 0x59
 80076fe:	5c9b      	ldrb	r3, [r3, r2]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d104      	bne.n	800770e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	0018      	movs	r0, r3
 8007708:	f000 fda8 	bl	800825c <vPortFree>
	}
 800770c:	e006      	b.n	800771c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2259      	movs	r2, #89	; 0x59
 8007712:	5c9b      	ldrb	r3, [r3, r2]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d001      	beq.n	800771c <prvDeleteTCB+0x48>
 8007718:	b672      	cpsid	i
 800771a:	e7fe      	b.n	800771a <prvDeleteTCB+0x46>
	}
 800771c:	46c0      	nop			; (mov r8, r8)
 800771e:	46bd      	mov	sp, r7
 8007720:	b002      	add	sp, #8
 8007722:	bd80      	pop	{r7, pc}

08007724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800772a:	4b0e      	ldr	r3, [pc, #56]	; (8007764 <prvResetNextTaskUnblockTime+0x40>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <prvResetNextTaskUnblockTime+0x14>
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <prvResetNextTaskUnblockTime+0x16>
 8007738:	2300      	movs	r3, #0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800773e:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <prvResetNextTaskUnblockTime+0x44>)
 8007740:	2201      	movs	r2, #1
 8007742:	4252      	negs	r2, r2
 8007744:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007746:	e008      	b.n	800775a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007748:	4b06      	ldr	r3, [pc, #24]	; (8007764 <prvResetNextTaskUnblockTime+0x40>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	4b04      	ldr	r3, [pc, #16]	; (8007768 <prvResetNextTaskUnblockTime+0x44>)
 8007758:	601a      	str	r2, [r3, #0]
}
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	46bd      	mov	sp, r7
 800775e:	b002      	add	sp, #8
 8007760:	bd80      	pop	{r7, pc}
 8007762:	46c0      	nop			; (mov r8, r8)
 8007764:	20000ce4 	.word	0x20000ce4
 8007768:	20000d4c 	.word	0x20000d4c

0800776c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007772:	4b0a      	ldr	r3, [pc, #40]	; (800779c <xTaskGetSchedulerState+0x30>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800777a:	2301      	movs	r3, #1
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	e008      	b.n	8007792 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <xTaskGetSchedulerState+0x34>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007788:	2302      	movs	r3, #2
 800778a:	607b      	str	r3, [r7, #4]
 800778c:	e001      	b.n	8007792 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800778e:	2300      	movs	r3, #0
 8007790:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007792:	687b      	ldr	r3, [r7, #4]
	}
 8007794:	0018      	movs	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	b002      	add	sp, #8
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000d38 	.word	0x20000d38
 80077a0:	20000d54 	.word	0x20000d54

080077a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d044      	beq.n	8007844 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ba:	4b25      	ldr	r3, [pc, #148]	; (8007850 <xTaskPriorityDisinherit+0xac>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d001      	beq.n	80077c8 <xTaskPriorityDisinherit+0x24>
 80077c4:	b672      	cpsid	i
 80077c6:	e7fe      	b.n	80077c6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <xTaskPriorityDisinherit+0x30>
 80077d0:	b672      	cpsid	i
 80077d2:	e7fe      	b.n	80077d2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d8:	1e5a      	subs	r2, r3, #1
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d02c      	beq.n	8007844 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d128      	bne.n	8007844 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3304      	adds	r3, #4
 80077f6:	0018      	movs	r0, r3
 80077f8:	f7fe fe13 	bl	8006422 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	2238      	movs	r2, #56	; 0x38
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007814:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <xTaskPriorityDisinherit+0xb0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d903      	bls.n	8007824 <xTaskPriorityDisinherit+0x80>
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <xTaskPriorityDisinherit+0xb0>)
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	0013      	movs	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	189b      	adds	r3, r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4a09      	ldr	r2, [pc, #36]	; (8007858 <xTaskPriorityDisinherit+0xb4>)
 8007832:	189a      	adds	r2, r3, r2
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	3304      	adds	r3, #4
 8007838:	0019      	movs	r1, r3
 800783a:	0010      	movs	r0, r2
 800783c:	f7fe fd99 	bl	8006372 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007840:	2301      	movs	r3, #1
 8007842:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007844:	68fb      	ldr	r3, [r7, #12]
	}
 8007846:	0018      	movs	r0, r3
 8007848:	46bd      	mov	sp, r7
 800784a:	b004      	add	sp, #16
 800784c:	bd80      	pop	{r7, pc}
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	20000858 	.word	0x20000858
 8007854:	20000d34 	.word	0x20000d34
 8007858:	2000085c 	.word	0x2000085c

0800785c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007866:	4b21      	ldr	r3, [pc, #132]	; (80078ec <prvAddCurrentTaskToDelayedList+0x90>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800786c:	4b20      	ldr	r3, [pc, #128]	; (80078f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3304      	adds	r3, #4
 8007872:	0018      	movs	r0, r3
 8007874:	f7fe fdd5 	bl	8006422 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3301      	adds	r3, #1
 800787c:	d10b      	bne.n	8007896 <prvAddCurrentTaskToDelayedList+0x3a>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	1d1a      	adds	r2, r3, #4
 800788a:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800788c:	0011      	movs	r1, r2
 800788e:	0018      	movs	r0, r3
 8007890:	f7fe fd6f 	bl	8006372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007894:	e026      	b.n	80078e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	18d3      	adds	r3, r2, r3
 800789c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800789e:	4b14      	ldr	r3, [pc, #80]	; (80078f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d209      	bcs.n	80078c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ae:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3304      	adds	r3, #4
 80078b8:	0019      	movs	r1, r3
 80078ba:	0010      	movs	r0, r2
 80078bc:	f7fe fd7b 	bl	80063b6 <vListInsert>
}
 80078c0:	e010      	b.n	80078e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078c2:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3304      	adds	r3, #4
 80078cc:	0019      	movs	r1, r3
 80078ce:	0010      	movs	r0, r2
 80078d0:	f7fe fd71 	bl	80063b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d202      	bcs.n	80078e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078de:	4b08      	ldr	r3, [pc, #32]	; (8007900 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b004      	add	sp, #16
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000d30 	.word	0x20000d30
 80078f0:	20000858 	.word	0x20000858
 80078f4:	20000d18 	.word	0x20000d18
 80078f8:	20000ce8 	.word	0x20000ce8
 80078fc:	20000ce4 	.word	0x20000ce4
 8007900:	20000d4c 	.word	0x20000d4c

08007904 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007904:	b590      	push	{r4, r7, lr}
 8007906:	b089      	sub	sp, #36	; 0x24
 8007908:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800790e:	f000 fa8b 	bl	8007e28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007912:	4b17      	ldr	r3, [pc, #92]	; (8007970 <xTimerCreateTimerTask+0x6c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d020      	beq.n	800795c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007922:	003a      	movs	r2, r7
 8007924:	1d39      	adds	r1, r7, #4
 8007926:	2308      	movs	r3, #8
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	0018      	movs	r0, r3
 800792c:	f7fe fce0 	bl	80062f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007930:	683c      	ldr	r4, [r7, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	490f      	ldr	r1, [pc, #60]	; (8007974 <xTimerCreateTimerTask+0x70>)
 8007938:	480f      	ldr	r0, [pc, #60]	; (8007978 <xTimerCreateTimerTask+0x74>)
 800793a:	9202      	str	r2, [sp, #8]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	2302      	movs	r3, #2
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	0022      	movs	r2, r4
 8007946:	f7ff f9bc 	bl	8006cc2 <xTaskCreateStatic>
 800794a:	0002      	movs	r2, r0
 800794c:	4b0b      	ldr	r3, [pc, #44]	; (800797c <xTimerCreateTimerTask+0x78>)
 800794e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007950:	4b0a      	ldr	r3, [pc, #40]	; (800797c <xTimerCreateTimerTask+0x78>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007958:	2301      	movs	r3, #1
 800795a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <xTimerCreateTimerTask+0x62>
 8007962:	b672      	cpsid	i
 8007964:	e7fe      	b.n	8007964 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8007966:	68fb      	ldr	r3, [r7, #12]
}
 8007968:	0018      	movs	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	b005      	add	sp, #20
 800796e:	bd90      	pop	{r4, r7, pc}
 8007970:	20000d88 	.word	0x20000d88
 8007974:	08008f54 	.word	0x08008f54
 8007978:	08007a89 	.word	0x08007a89
 800797c:	20000d8c 	.word	0x20000d8c

08007980 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800798e:	2300      	movs	r3, #0
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <xTimerGenericCommand+0x1c>
 8007998:	b672      	cpsid	i
 800799a:	e7fe      	b.n	800799a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800799c:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <xTimerGenericCommand+0x94>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d031      	beq.n	8007a08 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079a4:	2114      	movs	r1, #20
 80079a6:	187b      	adds	r3, r7, r1
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079ac:	187b      	adds	r3, r7, r1
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80079b2:	187b      	adds	r3, r7, r1
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b05      	cmp	r3, #5
 80079bc:	dc1a      	bgt.n	80079f4 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079be:	f7ff fed5 	bl	800776c <xTaskGetSchedulerState>
 80079c2:	0003      	movs	r3, r0
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d10a      	bne.n	80079de <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079c8:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <xTimerGenericCommand+0x94>)
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ce:	2314      	movs	r3, #20
 80079d0:	18f9      	adds	r1, r7, r3
 80079d2:	2300      	movs	r3, #0
 80079d4:	f7fe fe13 	bl	80065fe <xQueueGenericSend>
 80079d8:	0003      	movs	r3, r0
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
 80079dc:	e014      	b.n	8007a08 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079de:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <xTimerGenericCommand+0x94>)
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	2314      	movs	r3, #20
 80079e4:	18f9      	adds	r1, r7, r3
 80079e6:	2300      	movs	r3, #0
 80079e8:	2200      	movs	r2, #0
 80079ea:	f7fe fe08 	bl	80065fe <xQueueGenericSend>
 80079ee:	0003      	movs	r3, r0
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
 80079f2:	e009      	b.n	8007a08 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079f4:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <xTimerGenericCommand+0x94>)
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	2314      	movs	r3, #20
 80079fc:	18f9      	adds	r1, r7, r3
 80079fe:	2300      	movs	r3, #0
 8007a00:	f7fe fec1 	bl	8006786 <xQueueGenericSendFromISR>
 8007a04:	0003      	movs	r3, r0
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b00a      	add	sp, #40	; 0x28
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	20000d88 	.word	0x20000d88

08007a18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a22:	4b18      	ldr	r3, [pc, #96]	; (8007a84 <prvProcessExpiredTimer+0x6c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7fe fcf6 	bl	8006422 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d119      	bne.n	8007a72 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	699a      	ldr	r2, [r3, #24]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	18d1      	adds	r1, r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f8b6 	bl	8007bbc <prvInsertTimerInActiveList>
 8007a50:	1e03      	subs	r3, r0, #0
 8007a52:	d00e      	beq.n	8007a72 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	f7ff ff8e 	bl	8007980 <xTimerGenericCommand>
 8007a64:	0003      	movs	r3, r0
 8007a66:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <prvProcessExpiredTimer+0x5a>
 8007a6e:	b672      	cpsid	i
 8007a70:	e7fe      	b.n	8007a70 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	0010      	movs	r0, r2
 8007a7a:	4798      	blx	r3
}
 8007a7c:	46c0      	nop			; (mov r8, r8)
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b004      	add	sp, #16
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000d80 	.word	0x20000d80

08007a88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a90:	2308      	movs	r3, #8
 8007a92:	18fb      	adds	r3, r7, r3
 8007a94:	0018      	movs	r0, r3
 8007a96:	f000 f851 	bl	8007b3c <prvGetNextExpireTime>
 8007a9a:	0003      	movs	r3, r0
 8007a9c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	0011      	movs	r1, r2
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f000 f803 	bl	8007ab0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007aaa:	f000 f8c9 	bl	8007c40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aae:	e7ef      	b.n	8007a90 <prvTimerTask+0x8>

08007ab0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007aba:	f7ff facf 	bl	800705c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007abe:	2308      	movs	r3, #8
 8007ac0:	18fb      	adds	r3, r7, r3
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	f000 f85a 	bl	8007b7c <prvSampleTimeNow>
 8007ac8:	0003      	movs	r3, r0
 8007aca:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d129      	bne.n	8007b26 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10c      	bne.n	8007af2 <prvProcessTimerOrBlockTask+0x42>
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d808      	bhi.n	8007af2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007ae0:	f7ff fac8 	bl	8007074 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	0011      	movs	r1, r2
 8007aea:	0018      	movs	r0, r3
 8007aec:	f7ff ff94 	bl	8007a18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007af0:	e01b      	b.n	8007b2a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d006      	beq.n	8007b06 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007af8:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <prvProcessTimerOrBlockTask+0x84>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	425a      	negs	r2, r3
 8007b00:	4153      	adcs	r3, r2
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b06:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <prvProcessTimerOrBlockTask+0x88>)
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	0019      	movs	r1, r3
 8007b14:	f7ff f8a2 	bl	8006c5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b18:	f7ff faac 	bl	8007074 <xTaskResumeAll>
 8007b1c:	1e03      	subs	r3, r0, #0
 8007b1e:	d104      	bne.n	8007b2a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007b20:	f000 fa4e 	bl	8007fc0 <vPortYield>
}
 8007b24:	e001      	b.n	8007b2a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8007b26:	f7ff faa5 	bl	8007074 <xTaskResumeAll>
}
 8007b2a:	46c0      	nop			; (mov r8, r8)
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	b004      	add	sp, #16
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	20000d84 	.word	0x20000d84
 8007b38:	20000d88 	.word	0x20000d88

08007b3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <prvGetNextExpireTime+0x3c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	425a      	negs	r2, r3
 8007b4c:	4153      	adcs	r3, r2
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	001a      	movs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d105      	bne.n	8007b6a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b5e:	4b06      	ldr	r3, [pc, #24]	; (8007b78 <prvGetNextExpireTime+0x3c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e001      	b.n	8007b6e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
}
 8007b70:	0018      	movs	r0, r3
 8007b72:	46bd      	mov	sp, r7
 8007b74:	b004      	add	sp, #16
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20000d80 	.word	0x20000d80

08007b7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b84:	f7ff fb02 	bl	800718c <xTaskGetTickCount>
 8007b88:	0003      	movs	r3, r0
 8007b8a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <prvSampleTimeNow+0x3c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d205      	bcs.n	8007ba2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8007b96:	f000 f8ed 	bl	8007d74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	e002      	b.n	8007ba8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ba8:	4b03      	ldr	r3, [pc, #12]	; (8007bb8 <prvSampleTimeNow+0x3c>)
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	b004      	add	sp, #16
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20000d90 	.word	0x20000d90

08007bbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
 8007bc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d812      	bhi.n	8007c08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d302      	bcc.n	8007bf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e01b      	b.n	8007c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <prvInsertTimerInActiveList+0x7c>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	0019      	movs	r1, r3
 8007c00:	0010      	movs	r0, r2
 8007c02:	f7fe fbd8 	bl	80063b6 <vListInsert>
 8007c06:	e012      	b.n	8007c2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d206      	bcs.n	8007c1e <prvInsertTimerInActiveList+0x62>
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d302      	bcc.n	8007c1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	e007      	b.n	8007c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c1e:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <prvInsertTimerInActiveList+0x80>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3304      	adds	r3, #4
 8007c26:	0019      	movs	r1, r3
 8007c28:	0010      	movs	r0, r2
 8007c2a:	f7fe fbc4 	bl	80063b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c2e:	697b      	ldr	r3, [r7, #20]
}
 8007c30:	0018      	movs	r0, r3
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b006      	add	sp, #24
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20000d84 	.word	0x20000d84
 8007c3c:	20000d80 	.word	0x20000d80

08007c40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08c      	sub	sp, #48	; 0x30
 8007c44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c46:	e082      	b.n	8007d4e <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c48:	2308      	movs	r3, #8
 8007c4a:	18fb      	adds	r3, r7, r3
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	da10      	bge.n	8007c74 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c52:	2308      	movs	r3, #8
 8007c54:	18fb      	adds	r3, r7, r3
 8007c56:	3304      	adds	r3, #4
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <prvProcessReceivedCommands+0x24>
 8007c60:	b672      	cpsid	i
 8007c62:	e7fe      	b.n	8007c62 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	6858      	ldr	r0, [r3, #4]
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	0019      	movs	r1, r3
 8007c72:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c74:	2308      	movs	r3, #8
 8007c76:	18fb      	adds	r3, r7, r3
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	db66      	blt.n	8007d4c <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c7e:	2308      	movs	r3, #8
 8007c80:	18fb      	adds	r3, r7, r3
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d004      	beq.n	8007c98 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	3304      	adds	r3, #4
 8007c92:	0018      	movs	r0, r3
 8007c94:	f7fe fbc5 	bl	8006422 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c98:	1d3b      	adds	r3, r7, #4
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	f7ff ff6e 	bl	8007b7c <prvSampleTimeNow>
 8007ca0:	0003      	movs	r3, r0
 8007ca2:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8007ca4:	2308      	movs	r3, #8
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b09      	cmp	r3, #9
 8007cac:	d84f      	bhi.n	8007d4e <prvProcessReceivedCommands+0x10e>
 8007cae:	009a      	lsls	r2, r3, #2
 8007cb0:	4b2e      	ldr	r3, [pc, #184]	; (8007d6c <prvProcessReceivedCommands+0x12c>)
 8007cb2:	18d3      	adds	r3, r2, r3
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cb8:	2008      	movs	r0, #8
 8007cba:	183b      	adds	r3, r7, r0
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	18d1      	adds	r1, r2, r3
 8007cc4:	183b      	adds	r3, r7, r0
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	69fa      	ldr	r2, [r7, #28]
 8007cca:	6a38      	ldr	r0, [r7, #32]
 8007ccc:	f7ff ff76 	bl	8007bbc <prvInsertTimerInActiveList>
 8007cd0:	1e03      	subs	r3, r0, #0
 8007cd2:	d03c      	beq.n	8007d4e <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	6a3a      	ldr	r2, [r7, #32]
 8007cda:	0010      	movs	r0, r2
 8007cdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d133      	bne.n	8007d4e <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ce6:	2308      	movs	r3, #8
 8007ce8:	18fb      	adds	r3, r7, r3
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	18d2      	adds	r2, r2, r3
 8007cf2:	6a38      	ldr	r0, [r7, #32]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	f7ff fe40 	bl	8007980 <xTimerGenericCommand>
 8007d00:	0003      	movs	r3, r0
 8007d02:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d121      	bne.n	8007d4e <prvProcessReceivedCommands+0x10e>
 8007d0a:	b672      	cpsid	i
 8007d0c:	e7fe      	b.n	8007d0c <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d0e:	2308      	movs	r3, #8
 8007d10:	18fb      	adds	r3, r7, r3
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <prvProcessReceivedCommands+0xe4>
 8007d20:	b672      	cpsid	i
 8007d22:	e7fe      	b.n	8007d22 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	18d1      	adds	r1, r2, r3
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	6a38      	ldr	r0, [r7, #32]
 8007d32:	f7ff ff43 	bl	8007bbc <prvInsertTimerInActiveList>
					break;
 8007d36:	e00a      	b.n	8007d4e <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	222c      	movs	r2, #44	; 0x2c
 8007d3c:	5c9b      	ldrb	r3, [r3, r2]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d105      	bne.n	8007d4e <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	0018      	movs	r0, r3
 8007d46:	f000 fa89 	bl	800825c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d4a:	e000      	b.n	8007d4e <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d4c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d4e:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <prvProcessReceivedCommands+0x130>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2208      	movs	r2, #8
 8007d54:	18b9      	adds	r1, r7, r2
 8007d56:	2200      	movs	r2, #0
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f7fe fd85 	bl	8006868 <xQueueReceive>
 8007d5e:	1e03      	subs	r3, r0, #0
 8007d60:	d000      	beq.n	8007d64 <prvProcessReceivedCommands+0x124>
 8007d62:	e771      	b.n	8007c48 <prvProcessReceivedCommands+0x8>
	}
}
 8007d64:	46c0      	nop			; (mov r8, r8)
 8007d66:	46bd      	mov	sp, r7
 8007d68:	b00a      	add	sp, #40	; 0x28
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	0800906c 	.word	0x0800906c
 8007d70:	20000d88 	.word	0x20000d88

08007d74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d7a:	e03e      	b.n	8007dfa <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d7c:	4b28      	ldr	r3, [pc, #160]	; (8007e20 <prvSwitchTimerLists+0xac>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d86:	4b26      	ldr	r3, [pc, #152]	; (8007e20 <prvSwitchTimerLists+0xac>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3304      	adds	r3, #4
 8007d94:	0018      	movs	r0, r3
 8007d96:	f7fe fb44 	bl	8006422 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	0010      	movs	r0, r2
 8007da2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d126      	bne.n	8007dfa <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	18d3      	adds	r3, r2, r3
 8007db4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d90e      	bls.n	8007ddc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dca:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <prvSwitchTimerLists+0xac>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	0019      	movs	r1, r3
 8007dd4:	0010      	movs	r0, r2
 8007dd6:	f7fe faee 	bl	80063b6 <vListInsert>
 8007dda:	e00e      	b.n	8007dfa <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	2300      	movs	r3, #0
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	2300      	movs	r3, #0
 8007de6:	2100      	movs	r1, #0
 8007de8:	f7ff fdca 	bl	8007980 <xTimerGenericCommand>
 8007dec:	0003      	movs	r3, r0
 8007dee:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <prvSwitchTimerLists+0x86>
 8007df6:	b672      	cpsid	i
 8007df8:	e7fe      	b.n	8007df8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <prvSwitchTimerLists+0xac>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1bb      	bne.n	8007d7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e04:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <prvSwitchTimerLists+0xac>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e0a:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <prvSwitchTimerLists+0xb0>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <prvSwitchTimerLists+0xac>)
 8007e10:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8007e12:	4b04      	ldr	r3, [pc, #16]	; (8007e24 <prvSwitchTimerLists+0xb0>)
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	601a      	str	r2, [r3, #0]
}
 8007e18:	46c0      	nop			; (mov r8, r8)
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	b006      	add	sp, #24
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000d80 	.word	0x20000d80
 8007e24:	20000d84 	.word	0x20000d84

08007e28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e2e:	f000 f8d7 	bl	8007fe0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e32:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <prvCheckForValidListAndQueue+0x68>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d124      	bne.n	8007e84 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e3a:	4b16      	ldr	r3, [pc, #88]	; (8007e94 <prvCheckForValidListAndQueue+0x6c>)
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f7fe fa6f 	bl	8006320 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e42:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <prvCheckForValidListAndQueue+0x70>)
 8007e44:	0018      	movs	r0, r3
 8007e46:	f7fe fa6b 	bl	8006320 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e4a:	4b14      	ldr	r3, [pc, #80]	; (8007e9c <prvCheckForValidListAndQueue+0x74>)
 8007e4c:	4a11      	ldr	r2, [pc, #68]	; (8007e94 <prvCheckForValidListAndQueue+0x6c>)
 8007e4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e50:	4b13      	ldr	r3, [pc, #76]	; (8007ea0 <prvCheckForValidListAndQueue+0x78>)
 8007e52:	4a11      	ldr	r2, [pc, #68]	; (8007e98 <prvCheckForValidListAndQueue+0x70>)
 8007e54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e56:	4913      	ldr	r1, [pc, #76]	; (8007ea4 <prvCheckForValidListAndQueue+0x7c>)
 8007e58:	4a13      	ldr	r2, [pc, #76]	; (8007ea8 <prvCheckForValidListAndQueue+0x80>)
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	000b      	movs	r3, r1
 8007e60:	2110      	movs	r1, #16
 8007e62:	200a      	movs	r0, #10
 8007e64:	f7fe fb59 	bl	800651a <xQueueGenericCreateStatic>
 8007e68:	0002      	movs	r2, r0
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <prvCheckForValidListAndQueue+0x68>)
 8007e6c:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e6e:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <prvCheckForValidListAndQueue+0x68>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d006      	beq.n	8007e84 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <prvCheckForValidListAndQueue+0x68>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a0c      	ldr	r2, [pc, #48]	; (8007eac <prvCheckForValidListAndQueue+0x84>)
 8007e7c:	0011      	movs	r1, r2
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f7fe fec4 	bl	8006c0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e84:	f000 f8be 	bl	8008004 <vPortExitCritical>
}
 8007e88:	46c0      	nop			; (mov r8, r8)
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	46c0      	nop			; (mov r8, r8)
 8007e90:	20000d88 	.word	0x20000d88
 8007e94:	20000d58 	.word	0x20000d58
 8007e98:	20000d6c 	.word	0x20000d6c
 8007e9c:	20000d80 	.word	0x20000d80
 8007ea0:	20000d84 	.word	0x20000d84
 8007ea4:	20000e34 	.word	0x20000e34
 8007ea8:	20000d94 	.word	0x20000d94
 8007eac:	08008f5c 	.word	0x08008f5c

08007eb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3b04      	subs	r3, #4
 8007ec0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2280      	movs	r2, #128	; 0x80
 8007ec6:	0452      	lsls	r2, r2, #17
 8007ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3b04      	subs	r3, #4
 8007ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3b04      	subs	r3, #4
 8007eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007edc:	4a08      	ldr	r2, [pc, #32]	; (8007f00 <pxPortInitialiseStack+0x50>)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3b14      	subs	r3, #20
 8007ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3b20      	subs	r3, #32
 8007ef2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
}
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	b004      	add	sp, #16
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	46c0      	nop			; (mov r8, r8)
 8007f00:	08007f05 	.word	0x08007f05

08007f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <prvTaskExitError+0x28>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	d001      	beq.n	8007f1a <prvTaskExitError+0x16>
 8007f16:	b672      	cpsid	i
 8007f18:	e7fe      	b.n	8007f18 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007f1a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007f1c:	46c0      	nop			; (mov r8, r8)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0fc      	beq.n	8007f1e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f24:	46c0      	nop			; (mov r8, r8)
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000118 	.word	0x20000118

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007f34:	46c0      	nop			; (mov r8, r8)
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	0000      	movs	r0, r0
 8007f3c:	0000      	movs	r0, r0
	...

08007f40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007f40:	4a0b      	ldr	r2, [pc, #44]	; (8007f70 <pxCurrentTCBConst2>)
 8007f42:	6813      	ldr	r3, [r2, #0]
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	3020      	adds	r0, #32
 8007f48:	f380 8809 	msr	PSP, r0
 8007f4c:	2002      	movs	r0, #2
 8007f4e:	f380 8814 	msr	CONTROL, r0
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007f58:	46ae      	mov	lr, r5
 8007f5a:	bc08      	pop	{r3}
 8007f5c:	bc04      	pop	{r2}
 8007f5e:	b662      	cpsie	i
 8007f60:	4718      	bx	r3
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	46c0      	nop			; (mov r8, r8)
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	46c0      	nop			; (mov r8, r8)
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	46c0      	nop			; (mov r8, r8)
 8007f6e:	46c0      	nop			; (mov r8, r8)

08007f70 <pxCurrentTCBConst2>:
 8007f70:	20000858 	.word	0x20000858
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007f74:	46c0      	nop			; (mov r8, r8)
 8007f76:	46c0      	nop			; (mov r8, r8)

08007f78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8007f7c:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <xPortStartScheduler+0x40>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <xPortStartScheduler+0x40>)
 8007f82:	21ff      	movs	r1, #255	; 0xff
 8007f84:	0409      	lsls	r1, r1, #16
 8007f86:	430a      	orrs	r2, r1
 8007f88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <xPortStartScheduler+0x40>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <xPortStartScheduler+0x40>)
 8007f90:	21ff      	movs	r1, #255	; 0xff
 8007f92:	0609      	lsls	r1, r1, #24
 8007f94:	430a      	orrs	r2, r1
 8007f96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007f98:	f000 f898 	bl	80080cc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f9c:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <xPortStartScheduler+0x44>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007fa2:	f7ff ffcd 	bl	8007f40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fa6:	f7ff f9b3 	bl	8007310 <vTaskSwitchContext>
	prvTaskExitError();
 8007faa:	f7ff ffab 	bl	8007f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	e000ed20 	.word	0xe000ed20
 8007fbc:	20000118 	.word	0x20000118

08007fc0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <vPortYield+0x1c>)
 8007fc6:	2280      	movs	r2, #128	; 0x80
 8007fc8:	0552      	lsls	r2, r2, #21
 8007fca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007fcc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007fd0:	f3bf 8f6f 	isb	sy
}
 8007fd4:	46c0      	nop			; (mov r8, r8)
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	46c0      	nop			; (mov r8, r8)
 8007fdc:	e000ed04 	.word	0xe000ed04

08007fe0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007fe4:	b672      	cpsid	i
    uxCriticalNesting++;
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <vPortEnterCritical+0x20>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	4b04      	ldr	r3, [pc, #16]	; (8008000 <vPortEnterCritical+0x20>)
 8007fee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007ff0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007ff4:	f3bf 8f6f 	isb	sy
}
 8007ff8:	46c0      	nop			; (mov r8, r8)
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	20000118 	.word	0x20000118

08008004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008008:	4b09      	ldr	r3, [pc, #36]	; (8008030 <vPortExitCritical+0x2c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <vPortExitCritical+0x10>
 8008010:	b672      	cpsid	i
 8008012:	e7fe      	b.n	8008012 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008014:	4b06      	ldr	r3, [pc, #24]	; (8008030 <vPortExitCritical+0x2c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	1e5a      	subs	r2, r3, #1
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <vPortExitCritical+0x2c>)
 800801c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800801e:	4b04      	ldr	r3, [pc, #16]	; (8008030 <vPortExitCritical+0x2c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d100      	bne.n	8008028 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8008026:	b662      	cpsie	i
    }
}
 8008028:	46c0      	nop			; (mov r8, r8)
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	20000118 	.word	0x20000118

08008034 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008034:	f3ef 8010 	mrs	r0, PRIMASK
 8008038:	b672      	cpsid	i
 800803a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800803c:	46c0      	nop			; (mov r8, r8)
 800803e:	0018      	movs	r0, r3

08008040 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008040:	f380 8810 	msr	PRIMASK, r0
 8008044:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008046:	46c0      	nop			; (mov r8, r8)
	...

08008050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008050:	f3ef 8009 	mrs	r0, PSP
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <pxCurrentTCBConst>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	3820      	subs	r0, #32
 800805a:	6010      	str	r0, [r2, #0]
 800805c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800805e:	4644      	mov	r4, r8
 8008060:	464d      	mov	r5, r9
 8008062:	4656      	mov	r6, sl
 8008064:	465f      	mov	r7, fp
 8008066:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008068:	b508      	push	{r3, lr}
 800806a:	b672      	cpsid	i
 800806c:	f7ff f950 	bl	8007310 <vTaskSwitchContext>
 8008070:	b662      	cpsie	i
 8008072:	bc0c      	pop	{r2, r3}
 8008074:	6811      	ldr	r1, [r2, #0]
 8008076:	6808      	ldr	r0, [r1, #0]
 8008078:	3010      	adds	r0, #16
 800807a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800807c:	46a0      	mov	r8, r4
 800807e:	46a9      	mov	r9, r5
 8008080:	46b2      	mov	sl, r6
 8008082:	46bb      	mov	fp, r7
 8008084:	f380 8809 	msr	PSP, r0
 8008088:	3820      	subs	r0, #32
 800808a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800808c:	4718      	bx	r3
 800808e:	46c0      	nop			; (mov r8, r8)

08008090 <pxCurrentTCBConst>:
 8008090:	20000858 	.word	0x20000858
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008094:	46c0      	nop			; (mov r8, r8)
 8008096:	46c0      	nop			; (mov r8, r8)

08008098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800809e:	f7ff ffc9 	bl	8008034 <ulSetInterruptMaskFromISR>
 80080a2:	0003      	movs	r3, r0
 80080a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080a6:	f7ff f87f 	bl	80071a8 <xTaskIncrementTick>
 80080aa:	1e03      	subs	r3, r0, #0
 80080ac:	d003      	beq.n	80080b6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80080ae:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <SysTick_Handler+0x30>)
 80080b0:	2280      	movs	r2, #128	; 0x80
 80080b2:	0552      	lsls	r2, r2, #21
 80080b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	0018      	movs	r0, r3
 80080ba:	f7ff ffc1 	bl	8008040 <vClearInterruptMaskFromISR>
}
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b002      	add	sp, #8
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <prvSetupTimerInterrupt+0x34>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80080d6:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <prvSetupTimerInterrupt+0x38>)
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <prvSetupTimerInterrupt+0x3c>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	23fa      	movs	r3, #250	; 0xfa
 80080e2:	0099      	lsls	r1, r3, #2
 80080e4:	0010      	movs	r0, r2
 80080e6:	f7f8 f80f 	bl	8000108 <__udivsi3>
 80080ea:	0003      	movs	r3, r0
 80080ec:	001a      	movs	r2, r3
 80080ee:	4b07      	ldr	r3, [pc, #28]	; (800810c <prvSetupTimerInterrupt+0x40>)
 80080f0:	3a01      	subs	r2, #1
 80080f2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <prvSetupTimerInterrupt+0x34>)
 80080f6:	2207      	movs	r2, #7
 80080f8:	601a      	str	r2, [r3, #0]
}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	e000e010 	.word	0xe000e010
 8008104:	e000e018 	.word	0xe000e018
 8008108:	20000000 	.word	0x20000000
 800810c:	e000e014 	.word	0xe000e014

08008110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800811c:	f7fe ff9e 	bl	800705c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008120:	4b49      	ldr	r3, [pc, #292]	; (8008248 <pvPortMalloc+0x138>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008128:	f000 f8e0 	bl	80082ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800812c:	4b47      	ldr	r3, [pc, #284]	; (800824c <pvPortMalloc+0x13c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	4013      	ands	r3, r2
 8008134:	d000      	beq.n	8008138 <pvPortMalloc+0x28>
 8008136:	e079      	b.n	800822c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d012      	beq.n	8008164 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800813e:	2208      	movs	r2, #8
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	189b      	adds	r3, r3, r2
 8008144:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2207      	movs	r2, #7
 800814a:	4013      	ands	r3, r2
 800814c:	d00a      	beq.n	8008164 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2207      	movs	r2, #7
 8008152:	4393      	bics	r3, r2
 8008154:	3308      	adds	r3, #8
 8008156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2207      	movs	r2, #7
 800815c:	4013      	ands	r3, r2
 800815e:	d001      	beq.n	8008164 <pvPortMalloc+0x54>
 8008160:	b672      	cpsid	i
 8008162:	e7fe      	b.n	8008162 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d060      	beq.n	800822c <pvPortMalloc+0x11c>
 800816a:	4b39      	ldr	r3, [pc, #228]	; (8008250 <pvPortMalloc+0x140>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	429a      	cmp	r2, r3
 8008172:	d85b      	bhi.n	800822c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008174:	4b37      	ldr	r3, [pc, #220]	; (8008254 <pvPortMalloc+0x144>)
 8008176:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008178:	4b36      	ldr	r3, [pc, #216]	; (8008254 <pvPortMalloc+0x144>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800817e:	e004      	b.n	800818a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	429a      	cmp	r2, r3
 8008192:	d903      	bls.n	800819c <pvPortMalloc+0x8c>
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1f1      	bne.n	8008180 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800819c:	4b2a      	ldr	r3, [pc, #168]	; (8008248 <pvPortMalloc+0x138>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d042      	beq.n	800822c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2208      	movs	r2, #8
 80081ac:	189b      	adds	r3, r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	2308      	movs	r3, #8
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d916      	bls.n	80081f6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	18d3      	adds	r3, r2, r3
 80081ce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2207      	movs	r2, #7
 80081d4:	4013      	ands	r3, r2
 80081d6:	d001      	beq.n	80081dc <pvPortMalloc+0xcc>
 80081d8:	b672      	cpsid	i
 80081da:	e7fe      	b.n	80081da <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	0018      	movs	r0, r3
 80081f2:	f000 f8db 	bl	80083ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081f6:	4b16      	ldr	r3, [pc, #88]	; (8008250 <pvPortMalloc+0x140>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	1ad2      	subs	r2, r2, r3
 8008200:	4b13      	ldr	r3, [pc, #76]	; (8008250 <pvPortMalloc+0x140>)
 8008202:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008204:	4b12      	ldr	r3, [pc, #72]	; (8008250 <pvPortMalloc+0x140>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	4b13      	ldr	r3, [pc, #76]	; (8008258 <pvPortMalloc+0x148>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d203      	bcs.n	8008218 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008210:	4b0f      	ldr	r3, [pc, #60]	; (8008250 <pvPortMalloc+0x140>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	4b10      	ldr	r3, [pc, #64]	; (8008258 <pvPortMalloc+0x148>)
 8008216:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	4b0b      	ldr	r3, [pc, #44]	; (800824c <pvPortMalloc+0x13c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	431a      	orrs	r2, r3
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800822c:	f7fe ff22 	bl	8007074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2207      	movs	r2, #7
 8008234:	4013      	ands	r3, r2
 8008236:	d001      	beq.n	800823c <pvPortMalloc+0x12c>
 8008238:	b672      	cpsid	i
 800823a:	e7fe      	b.n	800823a <pvPortMalloc+0x12a>
	return pvReturn;
 800823c:	68fb      	ldr	r3, [r7, #12]
}
 800823e:	0018      	movs	r0, r3
 8008240:	46bd      	mov	sp, r7
 8008242:	b006      	add	sp, #24
 8008244:	bd80      	pop	{r7, pc}
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	20001a8c 	.word	0x20001a8c
 800824c:	20001a98 	.word	0x20001a98
 8008250:	20001a90 	.word	0x20001a90
 8008254:	20001a84 	.word	0x20001a84
 8008258:	20001a94 	.word	0x20001a94

0800825c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d035      	beq.n	80082da <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800826e:	2308      	movs	r3, #8
 8008270:	425b      	negs	r3, r3
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	18d3      	adds	r3, r2, r3
 8008276:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	4b18      	ldr	r3, [pc, #96]	; (80082e4 <vPortFree+0x88>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4013      	ands	r3, r2
 8008286:	d101      	bne.n	800828c <vPortFree+0x30>
 8008288:	b672      	cpsid	i
 800828a:	e7fe      	b.n	800828a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <vPortFree+0x3c>
 8008294:	b672      	cpsid	i
 8008296:	e7fe      	b.n	8008296 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	4b11      	ldr	r3, [pc, #68]	; (80082e4 <vPortFree+0x88>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4013      	ands	r3, r2
 80082a2:	d01a      	beq.n	80082da <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d116      	bne.n	80082da <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <vPortFree+0x88>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	43db      	mvns	r3, r3
 80082b6:	401a      	ands	r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082bc:	f7fe fece 	bl	800705c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	4b08      	ldr	r3, [pc, #32]	; (80082e8 <vPortFree+0x8c>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	18d2      	adds	r2, r2, r3
 80082ca:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <vPortFree+0x8c>)
 80082cc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	0018      	movs	r0, r3
 80082d2:	f000 f86b 	bl	80083ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082d6:	f7fe fecd 	bl	8007074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	46bd      	mov	sp, r7
 80082de:	b004      	add	sp, #16
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	46c0      	nop			; (mov r8, r8)
 80082e4:	20001a98 	.word	0x20001a98
 80082e8:	20001a90 	.word	0x20001a90

080082ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082f2:	23c0      	movs	r3, #192	; 0xc0
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082f8:	4b26      	ldr	r3, [pc, #152]	; (8008394 <prvHeapInit+0xa8>)
 80082fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2207      	movs	r2, #7
 8008300:	4013      	ands	r3, r2
 8008302:	d00c      	beq.n	800831e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3307      	adds	r3, #7
 8008308:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2207      	movs	r2, #7
 800830e:	4393      	bics	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	1ad2      	subs	r2, r2, r3
 8008318:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <prvHeapInit+0xa8>)
 800831a:	18d3      	adds	r3, r2, r3
 800831c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008322:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <prvHeapInit+0xac>)
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008328:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <prvHeapInit+0xac>)
 800832a:	2200      	movs	r2, #0
 800832c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	18d3      	adds	r3, r2, r3
 8008334:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008336:	2208      	movs	r2, #8
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	1a9b      	subs	r3, r3, r2
 800833c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2207      	movs	r2, #7
 8008342:	4393      	bics	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4b14      	ldr	r3, [pc, #80]	; (800839c <prvHeapInit+0xb0>)
 800834a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800834c:	4b13      	ldr	r3, [pc, #76]	; (800839c <prvHeapInit+0xb0>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2200      	movs	r2, #0
 8008352:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <prvHeapInit+0xb0>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	1ad2      	subs	r2, r2, r3
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800836a:	4b0c      	ldr	r3, [pc, #48]	; (800839c <prvHeapInit+0xb0>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	4b0a      	ldr	r3, [pc, #40]	; (80083a0 <prvHeapInit+0xb4>)
 8008378:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <prvHeapInit+0xb8>)
 8008380:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <prvHeapInit+0xbc>)
 8008384:	2280      	movs	r2, #128	; 0x80
 8008386:	0612      	lsls	r2, r2, #24
 8008388:	601a      	str	r2, [r3, #0]
}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	46bd      	mov	sp, r7
 800838e:	b004      	add	sp, #16
 8008390:	bd80      	pop	{r7, pc}
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	20000e84 	.word	0x20000e84
 8008398:	20001a84 	.word	0x20001a84
 800839c:	20001a8c 	.word	0x20001a8c
 80083a0:	20001a94 	.word	0x20001a94
 80083a4:	20001a90 	.word	0x20001a90
 80083a8:	20001a98 	.word	0x20001a98

080083ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083b4:	4b27      	ldr	r3, [pc, #156]	; (8008454 <prvInsertBlockIntoFreeList+0xa8>)
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	e002      	b.n	80083c0 <prvInsertBlockIntoFreeList+0x14>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d8f7      	bhi.n	80083ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	18d3      	adds	r3, r2, r3
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d108      	bne.n	80083ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	18d2      	adds	r2, r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	18d2      	adds	r2, r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d118      	bne.n	8008434 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <prvInsertBlockIntoFreeList+0xac>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d00d      	beq.n	800842a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	18d2      	adds	r2, r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	e008      	b.n	800843c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800842a:	4b0b      	ldr	r3, [pc, #44]	; (8008458 <prvInsertBlockIntoFreeList+0xac>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e003      	b.n	800843c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	d002      	beq.n	800844a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	46bd      	mov	sp, r7
 800844e:	b004      	add	sp, #16
 8008450:	bd80      	pop	{r7, pc}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	20001a84 	.word	0x20001a84
 8008458:	20001a8c 	.word	0x20001a8c

0800845c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008460:	4914      	ldr	r1, [pc, #80]	; (80084b4 <MX_USB_DEVICE_Init+0x58>)
 8008462:	4b15      	ldr	r3, [pc, #84]	; (80084b8 <MX_USB_DEVICE_Init+0x5c>)
 8008464:	2200      	movs	r2, #0
 8008466:	0018      	movs	r0, r3
 8008468:	f7fc fc10 	bl	8004c8c <USBD_Init>
 800846c:	1e03      	subs	r3, r0, #0
 800846e:	d001      	beq.n	8008474 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008470:	f7f8 f81a 	bl	80004a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008474:	4a11      	ldr	r2, [pc, #68]	; (80084bc <MX_USB_DEVICE_Init+0x60>)
 8008476:	4b10      	ldr	r3, [pc, #64]	; (80084b8 <MX_USB_DEVICE_Init+0x5c>)
 8008478:	0011      	movs	r1, r2
 800847a:	0018      	movs	r0, r3
 800847c:	f7fc fc37 	bl	8004cee <USBD_RegisterClass>
 8008480:	1e03      	subs	r3, r0, #0
 8008482:	d001      	beq.n	8008488 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008484:	f7f8 f810 	bl	80004a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008488:	4a0d      	ldr	r2, [pc, #52]	; (80084c0 <MX_USB_DEVICE_Init+0x64>)
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <MX_USB_DEVICE_Init+0x5c>)
 800848c:	0011      	movs	r1, r2
 800848e:	0018      	movs	r0, r3
 8008490:	f7fc fb82 	bl	8004b98 <USBD_CDC_RegisterInterface>
 8008494:	1e03      	subs	r3, r0, #0
 8008496:	d001      	beq.n	800849c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008498:	f7f8 f806 	bl	80004a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800849c:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <MX_USB_DEVICE_Init+0x5c>)
 800849e:	0018      	movs	r0, r3
 80084a0:	f7fc fc46 	bl	8004d30 <USBD_Start>
 80084a4:	1e03      	subs	r3, r0, #0
 80084a6:	d001      	beq.n	80084ac <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80084a8:	f7f7 fffe 	bl	80004a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084ac:	46c0      	nop			; (mov r8, r8)
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	46c0      	nop			; (mov r8, r8)
 80084b4:	2000012c 	.word	0x2000012c
 80084b8:	20001dc8 	.word	0x20001dc8
 80084bc:	20000014 	.word	0x20000014
 80084c0:	2000011c 	.word	0x2000011c

080084c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084c8:	4907      	ldr	r1, [pc, #28]	; (80084e8 <CDC_Init_FS+0x24>)
 80084ca:	4b08      	ldr	r3, [pc, #32]	; (80084ec <CDC_Init_FS+0x28>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	0018      	movs	r0, r3
 80084d0:	f7fc fb7e 	bl	8004bd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084d4:	4a06      	ldr	r2, [pc, #24]	; (80084f0 <CDC_Init_FS+0x2c>)
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <CDC_Init_FS+0x28>)
 80084d8:	0011      	movs	r1, r2
 80084da:	0018      	movs	r0, r3
 80084dc:	f7fc fb94 	bl	8004c08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084e0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084e2:	0018      	movs	r0, r3
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20002474 	.word	0x20002474
 80084ec:	20001dc8 	.word	0x20001dc8
 80084f0:	2000208c 	.word	0x2000208c

080084f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084fa:	0018      	movs	r0, r3
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6039      	str	r1, [r7, #0]
 8008508:	0011      	movs	r1, r2
 800850a:	1dfb      	adds	r3, r7, #7
 800850c:	1c02      	adds	r2, r0, #0
 800850e:	701a      	strb	r2, [r3, #0]
 8008510:	1d3b      	adds	r3, r7, #4
 8008512:	1c0a      	adds	r2, r1, #0
 8008514:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008516:	1dfb      	adds	r3, r7, #7
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2b23      	cmp	r3, #35	; 0x23
 800851c:	d804      	bhi.n	8008528 <CDC_Control_FS+0x28>
 800851e:	009a      	lsls	r2, r3, #2
 8008520:	4b04      	ldr	r3, [pc, #16]	; (8008534 <CDC_Control_FS+0x34>)
 8008522:	18d3      	adds	r3, r2, r3
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008528:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800852a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800852c:	0018      	movs	r0, r3
 800852e:	46bd      	mov	sp, r7
 8008530:	b002      	add	sp, #8
 8008532:	bd80      	pop	{r7, pc}
 8008534:	08009094 	.word	0x08009094

08008538 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(Buf[0] == '1'){
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	2b31      	cmp	r3, #49	; 0x31
 8008548:	d107      	bne.n	800855a <CDC_Receive_FS+0x22>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800854a:	2390      	movs	r3, #144	; 0x90
 800854c:	05db      	lsls	r3, r3, #23
 800854e:	2200      	movs	r2, #0
 8008550:	2120      	movs	r1, #32
 8008552:	0018      	movs	r0, r3
 8008554:	f7f8 fb26 	bl	8000ba4 <HAL_GPIO_WritePin>
 8008558:	e00a      	b.n	8008570 <CDC_Receive_FS+0x38>

	}else if (Buf[0] == '0'){
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b30      	cmp	r3, #48	; 0x30
 8008560:	d106      	bne.n	8008570 <CDC_Receive_FS+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8008562:	2390      	movs	r3, #144	; 0x90
 8008564:	05db      	lsls	r3, r3, #23
 8008566:	2201      	movs	r2, #1
 8008568:	2120      	movs	r1, #32
 800856a:	0018      	movs	r0, r3
 800856c:	f7f8 fb1a 	bl	8000ba4 <HAL_GPIO_WritePin>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	4b07      	ldr	r3, [pc, #28]	; (8008590 <CDC_Receive_FS+0x58>)
 8008574:	0011      	movs	r1, r2
 8008576:	0018      	movs	r0, r3
 8008578:	f7fc fb46 	bl	8004c08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800857c:	4b04      	ldr	r3, [pc, #16]	; (8008590 <CDC_Receive_FS+0x58>)
 800857e:	0018      	movs	r0, r3
 8008580:	f7fc fb56 	bl	8004c30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008584:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008586:	0018      	movs	r0, r3
 8008588:	46bd      	mov	sp, r7
 800858a:	b002      	add	sp, #8
 800858c:	bd80      	pop	{r7, pc}
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	20001dc8 	.word	0x20001dc8

08008594 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	0002      	movs	r2, r0
 800859c:	6039      	str	r1, [r7, #0]
 800859e:	1dfb      	adds	r3, r7, #7
 80085a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2212      	movs	r2, #18
 80085a6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085aa:	0018      	movs	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	b002      	add	sp, #8
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	46c0      	nop			; (mov r8, r8)
 80085b4:	20000148 	.word	0x20000148

080085b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	0002      	movs	r2, r0
 80085c0:	6039      	str	r1, [r7, #0]
 80085c2:	1dfb      	adds	r3, r7, #7
 80085c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2204      	movs	r2, #4
 80085ca:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085cc:	4b02      	ldr	r3, [pc, #8]	; (80085d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085ce:	0018      	movs	r0, r3
 80085d0:	46bd      	mov	sp, r7
 80085d2:	b002      	add	sp, #8
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	46c0      	nop			; (mov r8, r8)
 80085d8:	2000015c 	.word	0x2000015c

080085dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	0002      	movs	r2, r0
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	1dfb      	adds	r3, r7, #7
 80085e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80085ea:	1dfb      	adds	r3, r7, #7
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d106      	bne.n	8008600 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	4908      	ldr	r1, [pc, #32]	; (8008618 <USBD_FS_ProductStrDescriptor+0x3c>)
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <USBD_FS_ProductStrDescriptor+0x40>)
 80085f8:	0018      	movs	r0, r3
 80085fa:	f7fd fc61 	bl	8005ec0 <USBD_GetString>
 80085fe:	e005      	b.n	800860c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	4905      	ldr	r1, [pc, #20]	; (8008618 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <USBD_FS_ProductStrDescriptor+0x40>)
 8008606:	0018      	movs	r0, r3
 8008608:	f7fd fc5a 	bl	8005ec0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800860c:	4b02      	ldr	r3, [pc, #8]	; (8008618 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800860e:	0018      	movs	r0, r3
 8008610:	46bd      	mov	sp, r7
 8008612:	b002      	add	sp, #8
 8008614:	bd80      	pop	{r7, pc}
 8008616:	46c0      	nop			; (mov r8, r8)
 8008618:	2000285c 	.word	0x2000285c
 800861c:	08008f64 	.word	0x08008f64

08008620 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	0002      	movs	r2, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	1dfb      	adds	r3, r7, #7
 800862c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	4904      	ldr	r1, [pc, #16]	; (8008644 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008632:	4b05      	ldr	r3, [pc, #20]	; (8008648 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8008634:	0018      	movs	r0, r3
 8008636:	f7fd fc43 	bl	8005ec0 <USBD_GetString>
  return USBD_StrDesc;
 800863a:	4b02      	ldr	r3, [pc, #8]	; (8008644 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800863c:	0018      	movs	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	b002      	add	sp, #8
 8008642:	bd80      	pop	{r7, pc}
 8008644:	2000285c 	.word	0x2000285c
 8008648:	08008f7c 	.word	0x08008f7c

0800864c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	0002      	movs	r2, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	1dfb      	adds	r3, r7, #7
 8008658:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	221a      	movs	r2, #26
 800865e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008660:	f000 f84c 	bl	80086fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008664:	4b02      	ldr	r3, [pc, #8]	; (8008670 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8008666:	0018      	movs	r0, r3
 8008668:	46bd      	mov	sp, r7
 800866a:	b002      	add	sp, #8
 800866c:	bd80      	pop	{r7, pc}
 800866e:	46c0      	nop			; (mov r8, r8)
 8008670:	20000160 	.word	0x20000160

08008674 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	0002      	movs	r2, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	1dfb      	adds	r3, r7, #7
 8008680:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8008682:	1dfb      	adds	r3, r7, #7
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d106      	bne.n	8008698 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4908      	ldr	r1, [pc, #32]	; (80086b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800868e:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008690:	0018      	movs	r0, r3
 8008692:	f7fd fc15 	bl	8005ec0 <USBD_GetString>
 8008696:	e005      	b.n	80086a4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	4905      	ldr	r1, [pc, #20]	; (80086b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 800869e:	0018      	movs	r0, r3
 80086a0:	f7fd fc0e 	bl	8005ec0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a4:	4b02      	ldr	r3, [pc, #8]	; (80086b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80086a6:	0018      	movs	r0, r3
 80086a8:	46bd      	mov	sp, r7
 80086aa:	b002      	add	sp, #8
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	2000285c 	.word	0x2000285c
 80086b4:	08008f90 	.word	0x08008f90

080086b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	0002      	movs	r2, r0
 80086c0:	6039      	str	r1, [r7, #0]
 80086c2:	1dfb      	adds	r3, r7, #7
 80086c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80086c6:	1dfb      	adds	r3, r7, #7
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4908      	ldr	r1, [pc, #32]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80086d2:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80086d4:	0018      	movs	r0, r3
 80086d6:	f7fd fbf3 	bl	8005ec0 <USBD_GetString>
 80086da:	e005      	b.n	80086e8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	4905      	ldr	r1, [pc, #20]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80086e2:	0018      	movs	r0, r3
 80086e4:	f7fd fbec 	bl	8005ec0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086e8:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80086ea:	0018      	movs	r0, r3
 80086ec:	46bd      	mov	sp, r7
 80086ee:	b002      	add	sp, #8
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	46c0      	nop			; (mov r8, r8)
 80086f4:	2000285c 	.word	0x2000285c
 80086f8:	08008f9c 	.word	0x08008f9c

080086fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008702:	4b10      	ldr	r3, [pc, #64]	; (8008744 <Get_SerialNum+0x48>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008708:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <Get_SerialNum+0x4c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800870e:	4b0f      	ldr	r3, [pc, #60]	; (800874c <Get_SerialNum+0x50>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00b      	beq.n	800873a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008722:	490b      	ldr	r1, [pc, #44]	; (8008750 <Get_SerialNum+0x54>)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2208      	movs	r2, #8
 8008728:	0018      	movs	r0, r3
 800872a:	f000 f815 	bl	8008758 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800872e:	4909      	ldr	r1, [pc, #36]	; (8008754 <Get_SerialNum+0x58>)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2204      	movs	r2, #4
 8008734:	0018      	movs	r0, r3
 8008736:	f000 f80f 	bl	8008758 <IntToUnicode>
  }
}
 800873a:	46c0      	nop			; (mov r8, r8)
 800873c:	46bd      	mov	sp, r7
 800873e:	b004      	add	sp, #16
 8008740:	bd80      	pop	{r7, pc}
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	1ffff7ac 	.word	0x1ffff7ac
 8008748:	1ffff7b0 	.word	0x1ffff7b0
 800874c:	1ffff7b4 	.word	0x1ffff7b4
 8008750:	20000162 	.word	0x20000162
 8008754:	20000172 	.word	0x20000172

08008758 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	1dfb      	adds	r3, r7, #7
 8008764:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8008766:	2117      	movs	r1, #23
 8008768:	187b      	adds	r3, r7, r1
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800876e:	187b      	adds	r3, r7, r1
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
 8008774:	e02f      	b.n	80087d6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	0f1b      	lsrs	r3, r3, #28
 800877a:	2b09      	cmp	r3, #9
 800877c:	d80d      	bhi.n	800879a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	0f1b      	lsrs	r3, r3, #28
 8008782:	b2da      	uxtb	r2, r3
 8008784:	2317      	movs	r3, #23
 8008786:	18fb      	adds	r3, r7, r3
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	0019      	movs	r1, r3
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	185b      	adds	r3, r3, r1
 8008792:	3230      	adds	r2, #48	; 0x30
 8008794:	b2d2      	uxtb	r2, r2
 8008796:	701a      	strb	r2, [r3, #0]
 8008798:	e00c      	b.n	80087b4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	0f1b      	lsrs	r3, r3, #28
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	2317      	movs	r3, #23
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	0019      	movs	r1, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	185b      	adds	r3, r3, r1
 80087ae:	3237      	adds	r2, #55	; 0x37
 80087b0:	b2d2      	uxtb	r2, r2
 80087b2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087ba:	2117      	movs	r1, #23
 80087bc:	187b      	adds	r3, r7, r1
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	3301      	adds	r3, #1
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	18d3      	adds	r3, r2, r3
 80087c8:	2200      	movs	r2, #0
 80087ca:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087cc:	187b      	adds	r3, r7, r1
 80087ce:	781a      	ldrb	r2, [r3, #0]
 80087d0:	187b      	adds	r3, r7, r1
 80087d2:	3201      	adds	r2, #1
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	2317      	movs	r3, #23
 80087d8:	18fa      	adds	r2, r7, r3
 80087da:	1dfb      	adds	r3, r7, #7
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d3c8      	bcc.n	8008776 <IntToUnicode+0x1e>
  }
}
 80087e4:	46c0      	nop			; (mov r8, r8)
 80087e6:	46bd      	mov	sp, r7
 80087e8:	b006      	add	sp, #24
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a0e      	ldr	r2, [pc, #56]	; (8008834 <HAL_PCD_MspInit+0x48>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d115      	bne.n	800882a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087fe:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <HAL_PCD_MspInit+0x4c>)
 8008800:	69da      	ldr	r2, [r3, #28]
 8008802:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <HAL_PCD_MspInit+0x4c>)
 8008804:	2180      	movs	r1, #128	; 0x80
 8008806:	0409      	lsls	r1, r1, #16
 8008808:	430a      	orrs	r2, r1
 800880a:	61da      	str	r2, [r3, #28]
 800880c:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <HAL_PCD_MspInit+0x4c>)
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	2380      	movs	r3, #128	; 0x80
 8008812:	041b      	lsls	r3, r3, #16
 8008814:	4013      	ands	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 3, 0);
 800881a:	2200      	movs	r2, #0
 800881c:	2103      	movs	r1, #3
 800881e:	201f      	movs	r0, #31
 8008820:	f7f8 f822 	bl	8000868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008824:	201f      	movs	r0, #31
 8008826:	f7f8 f834 	bl	8000892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800882a:	46c0      	nop			; (mov r8, r8)
 800882c:	46bd      	mov	sp, r7
 800882e:	b004      	add	sp, #16
 8008830:	bd80      	pop	{r7, pc}
 8008832:	46c0      	nop			; (mov r8, r8)
 8008834:	40005c00 	.word	0x40005c00
 8008838:	40021000 	.word	0x40021000

0800883c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	239c      	movs	r3, #156	; 0x9c
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	58d2      	ldr	r2, [r2, r3]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	218c      	movs	r1, #140	; 0x8c
 8008850:	0089      	lsls	r1, r1, #2
 8008852:	468c      	mov	ip, r1
 8008854:	4463      	add	r3, ip
 8008856:	0019      	movs	r1, r3
 8008858:	0010      	movs	r0, r2
 800885a:	f7fc fabd 	bl	8004dd8 <USBD_LL_SetupStage>
}
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	46bd      	mov	sp, r7
 8008862:	b002      	add	sp, #8
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	000a      	movs	r2, r1
 8008870:	1cfb      	adds	r3, r7, #3
 8008872:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	239c      	movs	r3, #156	; 0x9c
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	58d0      	ldr	r0, [r2, r3]
 800887c:	1cfb      	adds	r3, r7, #3
 800887e:	781a      	ldrb	r2, [r3, #0]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	239e      	movs	r3, #158	; 0x9e
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	0152      	lsls	r2, r2, #5
 8008888:	188a      	adds	r2, r1, r2
 800888a:	18d3      	adds	r3, r2, r3
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	1cfb      	adds	r3, r7, #3
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	0019      	movs	r1, r3
 8008894:	f7fc fafc 	bl	8004e90 <USBD_LL_DataOutStage>
}
 8008898:	46c0      	nop			; (mov r8, r8)
 800889a:	46bd      	mov	sp, r7
 800889c:	b002      	add	sp, #8
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	000a      	movs	r2, r1
 80088aa:	1cfb      	adds	r3, r7, #3
 80088ac:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	239c      	movs	r3, #156	; 0x9c
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	58d0      	ldr	r0, [r2, r3]
 80088b6:	1cfb      	adds	r3, r7, #3
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	015b      	lsls	r3, r3, #5
 80088be:	18d3      	adds	r3, r2, r3
 80088c0:	333c      	adds	r3, #60	; 0x3c
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	1cfb      	adds	r3, r7, #3
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	0019      	movs	r1, r3
 80088ca:	f7fc fb63 	bl	8004f94 <USBD_LL_DataInStage>
}
 80088ce:	46c0      	nop			; (mov r8, r8)
 80088d0:	46bd      	mov	sp, r7
 80088d2:	b002      	add	sp, #8
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	239c      	movs	r3, #156	; 0x9c
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	58d3      	ldr	r3, [r2, r3]
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7fc fc9a 	bl	8005220 <USBD_LL_SOF>
}
 80088ec:	46c0      	nop			; (mov r8, r8)
 80088ee:	46bd      	mov	sp, r7
 80088f0:	b002      	add	sp, #8
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088fc:	230f      	movs	r3, #15
 80088fe:	18fb      	adds	r3, r7, r3
 8008900:	2201      	movs	r2, #1
 8008902:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	2b02      	cmp	r3, #2
 800890a:	d001      	beq.n	8008910 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800890c:	f7f7 fdcc 	bl	80004a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	239c      	movs	r3, #156	; 0x9c
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	58d2      	ldr	r2, [r2, r3]
 8008918:	230f      	movs	r3, #15
 800891a:	18fb      	adds	r3, r7, r3
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	0019      	movs	r1, r3
 8008920:	0010      	movs	r0, r2
 8008922:	f7fc fc3c 	bl	800519e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	239c      	movs	r3, #156	; 0x9c
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	58d3      	ldr	r3, [r2, r3]
 800892e:	0018      	movs	r0, r3
 8008930:	f7fc fbed 	bl	800510e <USBD_LL_Reset>
}
 8008934:	46c0      	nop			; (mov r8, r8)
 8008936:	46bd      	mov	sp, r7
 8008938:	b004      	add	sp, #16
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	239c      	movs	r3, #156	; 0x9c
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	58d3      	ldr	r3, [r2, r3]
 800894c:	0018      	movs	r0, r3
 800894e:	f7fc fc37 	bl	80051c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d005      	beq.n	8008966 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <HAL_PCD_SuspendCallback+0x34>)
 800895c:	691a      	ldr	r2, [r3, #16]
 800895e:	4b04      	ldr	r3, [pc, #16]	; (8008970 <HAL_PCD_SuspendCallback+0x34>)
 8008960:	2106      	movs	r1, #6
 8008962:	430a      	orrs	r2, r1
 8008964:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	46bd      	mov	sp, r7
 800896a:	b002      	add	sp, #8
 800896c:	bd80      	pop	{r7, pc}
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	e000ed00 	.word	0xe000ed00

08008974 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d007      	beq.n	8008994 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008984:	4b09      	ldr	r3, [pc, #36]	; (80089ac <HAL_PCD_ResumeCallback+0x38>)
 8008986:	691a      	ldr	r2, [r3, #16]
 8008988:	4b08      	ldr	r3, [pc, #32]	; (80089ac <HAL_PCD_ResumeCallback+0x38>)
 800898a:	2106      	movs	r1, #6
 800898c:	438a      	bics	r2, r1
 800898e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008990:	f000 fa44 	bl	8008e1c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	239c      	movs	r3, #156	; 0x9c
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	58d3      	ldr	r3, [r2, r3]
 800899c:	0018      	movs	r0, r3
 800899e:	f7fc fc27 	bl	80051f0 <USBD_LL_Resume>
}
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	46bd      	mov	sp, r7
 80089a6:	b002      	add	sp, #8
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	46c0      	nop			; (mov r8, r8)
 80089ac:	e000ed00 	.word	0xe000ed00

080089b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089b8:	4a2d      	ldr	r2, [pc, #180]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089ba:	239c      	movs	r3, #156	; 0x9c
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	23b0      	movs	r3, #176	; 0xb0
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4929      	ldr	r1, [pc, #164]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089ca:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80089cc:	4b28      	ldr	r3, [pc, #160]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089ce:	4a29      	ldr	r2, [pc, #164]	; (8008a74 <USBD_LL_Init+0xc4>)
 80089d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089d2:	4b27      	ldr	r3, [pc, #156]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089d4:	2208      	movs	r2, #8
 80089d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089d8:	4b25      	ldr	r3, [pc, #148]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089da:	2202      	movs	r2, #2
 80089dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089de:	4b24      	ldr	r3, [pc, #144]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089e0:	2202      	movs	r2, #2
 80089e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089e4:	4b22      	ldr	r3, [pc, #136]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089ea:	4b21      	ldr	r3, [pc, #132]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089f0:	4b1f      	ldr	r3, [pc, #124]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089f6:	4b1e      	ldr	r3, [pc, #120]	; (8008a70 <USBD_LL_Init+0xc0>)
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7f8 f8f1 	bl	8000be0 <HAL_PCD_Init>
 80089fe:	1e03      	subs	r3, r0, #0
 8008a00:	d001      	beq.n	8008a06 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8008a02:	f7f7 fd51 	bl	80004a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	23b0      	movs	r3, #176	; 0xb0
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	58d0      	ldr	r0, [r2, r3]
 8008a0e:	2318      	movs	r3, #24
 8008a10:	2200      	movs	r2, #0
 8008a12:	2100      	movs	r1, #0
 8008a14:	f7f9 f886 	bl	8001b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	23b0      	movs	r3, #176	; 0xb0
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	58d0      	ldr	r0, [r2, r3]
 8008a20:	2358      	movs	r3, #88	; 0x58
 8008a22:	2200      	movs	r2, #0
 8008a24:	2180      	movs	r1, #128	; 0x80
 8008a26:	f7f9 f87d 	bl	8001b24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	23b0      	movs	r3, #176	; 0xb0
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	58d0      	ldr	r0, [r2, r3]
 8008a32:	23c0      	movs	r3, #192	; 0xc0
 8008a34:	2200      	movs	r2, #0
 8008a36:	2181      	movs	r1, #129	; 0x81
 8008a38:	f7f9 f874 	bl	8001b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	23b0      	movs	r3, #176	; 0xb0
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	58d0      	ldr	r0, [r2, r3]
 8008a44:	2388      	movs	r3, #136	; 0x88
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	f7f9 f86a 	bl	8001b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	23b0      	movs	r3, #176	; 0xb0
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	58d0      	ldr	r0, [r2, r3]
 8008a58:	2380      	movs	r3, #128	; 0x80
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2182      	movs	r1, #130	; 0x82
 8008a60:	f7f9 f860 	bl	8001b24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	0018      	movs	r0, r3
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	b002      	add	sp, #8
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	46c0      	nop			; (mov r8, r8)
 8008a70:	20002a5c 	.word	0x20002a5c
 8008a74:	40005c00 	.word	0x40005c00

08008a78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a80:	210f      	movs	r1, #15
 8008a82:	187b      	adds	r3, r7, r1
 8008a84:	2200      	movs	r2, #0
 8008a86:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a88:	260e      	movs	r6, #14
 8008a8a:	19bb      	adds	r3, r7, r6
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	23b0      	movs	r3, #176	; 0xb0
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	58d3      	ldr	r3, [r2, r3]
 8008a98:	000d      	movs	r5, r1
 8008a9a:	187c      	adds	r4, r7, r1
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7f8 f983 	bl	8000da8 <HAL_PCD_Start>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa6:	19bc      	adds	r4, r7, r6
 8008aa8:	0029      	movs	r1, r5
 8008aaa:	187b      	adds	r3, r7, r1
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f000 f9bb 	bl	8008e2a <USBD_Get_USB_Status>
 8008ab4:	0003      	movs	r3, r0
 8008ab6:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 8008ab8:	19bb      	adds	r3, r7, r6
 8008aba:	781b      	ldrb	r3, [r3, #0]
}
 8008abc:	0018      	movs	r0, r3
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	b005      	add	sp, #20
 8008ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ac4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	000c      	movs	r4, r1
 8008ace:	0010      	movs	r0, r2
 8008ad0:	0019      	movs	r1, r3
 8008ad2:	1cfb      	adds	r3, r7, #3
 8008ad4:	1c22      	adds	r2, r4, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
 8008ad8:	1cbb      	adds	r3, r7, #2
 8008ada:	1c02      	adds	r2, r0, #0
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	003b      	movs	r3, r7
 8008ae0:	1c0a      	adds	r2, r1, #0
 8008ae2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae4:	260f      	movs	r6, #15
 8008ae6:	19bb      	adds	r3, r7, r6
 8008ae8:	2200      	movs	r2, #0
 8008aea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aec:	250e      	movs	r5, #14
 8008aee:	197b      	adds	r3, r7, r5
 8008af0:	2200      	movs	r2, #0
 8008af2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	23b0      	movs	r3, #176	; 0xb0
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	58d0      	ldr	r0, [r2, r3]
 8008afc:	19bc      	adds	r4, r7, r6
 8008afe:	1cbb      	adds	r3, r7, #2
 8008b00:	781d      	ldrb	r5, [r3, #0]
 8008b02:	003b      	movs	r3, r7
 8008b04:	881a      	ldrh	r2, [r3, #0]
 8008b06:	1cfb      	adds	r3, r7, #3
 8008b08:	7819      	ldrb	r1, [r3, #0]
 8008b0a:	002b      	movs	r3, r5
 8008b0c:	f7f8 fb25 	bl	800115a <HAL_PCD_EP_Open>
 8008b10:	0003      	movs	r3, r0
 8008b12:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b14:	250e      	movs	r5, #14
 8008b16:	197c      	adds	r4, r7, r5
 8008b18:	19bb      	adds	r3, r7, r6
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f000 f984 	bl	8008e2a <USBD_Get_USB_Status>
 8008b22:	0003      	movs	r3, r0
 8008b24:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 8008b26:	197b      	adds	r3, r7, r5
 8008b28:	781b      	ldrb	r3, [r3, #0]
}
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	b005      	add	sp, #20
 8008b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	000a      	movs	r2, r1
 8008b3c:	1cfb      	adds	r3, r7, #3
 8008b3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b40:	210f      	movs	r1, #15
 8008b42:	187b      	adds	r3, r7, r1
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b48:	260e      	movs	r6, #14
 8008b4a:	19bb      	adds	r3, r7, r6
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	23b0      	movs	r3, #176	; 0xb0
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	58d2      	ldr	r2, [r2, r3]
 8008b58:	000d      	movs	r5, r1
 8008b5a:	187c      	adds	r4, r7, r1
 8008b5c:	1cfb      	adds	r3, r7, #3
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	0019      	movs	r1, r3
 8008b62:	0010      	movs	r0, r2
 8008b64:	f7f8 fb6b 	bl	800123e <HAL_PCD_EP_Close>
 8008b68:	0003      	movs	r3, r0
 8008b6a:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6c:	19bc      	adds	r4, r7, r6
 8008b6e:	0029      	movs	r1, r5
 8008b70:	187b      	adds	r3, r7, r1
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	0018      	movs	r0, r3
 8008b76:	f000 f958 	bl	8008e2a <USBD_Get_USB_Status>
 8008b7a:	0003      	movs	r3, r0
 8008b7c:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 8008b7e:	19bb      	adds	r3, r7, r6
 8008b80:	781b      	ldrb	r3, [r3, #0]
}
 8008b82:	0018      	movs	r0, r3
 8008b84:	46bd      	mov	sp, r7
 8008b86:	b005      	add	sp, #20
 8008b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b8a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	000a      	movs	r2, r1
 8008b94:	1cfb      	adds	r3, r7, #3
 8008b96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b98:	210f      	movs	r1, #15
 8008b9a:	187b      	adds	r3, r7, r1
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba0:	260e      	movs	r6, #14
 8008ba2:	19bb      	adds	r3, r7, r6
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	23b0      	movs	r3, #176	; 0xb0
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	58d2      	ldr	r2, [r2, r3]
 8008bb0:	000d      	movs	r5, r1
 8008bb2:	187c      	adds	r4, r7, r1
 8008bb4:	1cfb      	adds	r3, r7, #3
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	0019      	movs	r1, r3
 8008bba:	0010      	movs	r0, r2
 8008bbc:	f7f8 fc20 	bl	8001400 <HAL_PCD_EP_SetStall>
 8008bc0:	0003      	movs	r3, r0
 8008bc2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc4:	19bc      	adds	r4, r7, r6
 8008bc6:	0029      	movs	r1, r5
 8008bc8:	187b      	adds	r3, r7, r1
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f000 f92c 	bl	8008e2a <USBD_Get_USB_Status>
 8008bd2:	0003      	movs	r3, r0
 8008bd4:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8008bd6:	19bb      	adds	r3, r7, r6
 8008bd8:	781b      	ldrb	r3, [r3, #0]
}
 8008bda:	0018      	movs	r0, r3
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	b005      	add	sp, #20
 8008be0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008be2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be4:	b085      	sub	sp, #20
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	000a      	movs	r2, r1
 8008bec:	1cfb      	adds	r3, r7, #3
 8008bee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf0:	210f      	movs	r1, #15
 8008bf2:	187b      	adds	r3, r7, r1
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf8:	260e      	movs	r6, #14
 8008bfa:	19bb      	adds	r3, r7, r6
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	23b0      	movs	r3, #176	; 0xb0
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	58d2      	ldr	r2, [r2, r3]
 8008c08:	000d      	movs	r5, r1
 8008c0a:	187c      	adds	r4, r7, r1
 8008c0c:	1cfb      	adds	r3, r7, #3
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	0019      	movs	r1, r3
 8008c12:	0010      	movs	r0, r2
 8008c14:	f7f8 fc5a 	bl	80014cc <HAL_PCD_EP_ClrStall>
 8008c18:	0003      	movs	r3, r0
 8008c1a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1c:	19bc      	adds	r4, r7, r6
 8008c1e:	0029      	movs	r1, r5
 8008c20:	187b      	adds	r3, r7, r1
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	0018      	movs	r0, r3
 8008c26:	f000 f900 	bl	8008e2a <USBD_Get_USB_Status>
 8008c2a:	0003      	movs	r3, r0
 8008c2c:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 8008c2e:	19bb      	adds	r3, r7, r6
 8008c30:	781b      	ldrb	r3, [r3, #0]
}
 8008c32:	0018      	movs	r0, r3
 8008c34:	46bd      	mov	sp, r7
 8008c36:	b005      	add	sp, #20
 8008c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c3a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	000a      	movs	r2, r1
 8008c44:	1cfb      	adds	r3, r7, #3
 8008c46:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	23b0      	movs	r3, #176	; 0xb0
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	58d3      	ldr	r3, [r2, r3]
 8008c50:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008c52:	1cfb      	adds	r3, r7, #3
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	b25b      	sxtb	r3, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	da0a      	bge.n	8008c72 <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008c5c:	1cfb      	adds	r3, r7, #3
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	227f      	movs	r2, #127	; 0x7f
 8008c62:	4013      	ands	r3, r2
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	212a      	movs	r1, #42	; 0x2a
 8008c68:	015b      	lsls	r3, r3, #5
 8008c6a:	18d3      	adds	r3, r2, r3
 8008c6c:	185b      	adds	r3, r3, r1
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	e00a      	b.n	8008c88 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008c72:	1cfb      	adds	r3, r7, #3
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	227f      	movs	r2, #127	; 0x7f
 8008c78:	401a      	ands	r2, r3
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	2395      	movs	r3, #149	; 0x95
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	0152      	lsls	r2, r2, #5
 8008c82:	188a      	adds	r2, r1, r2
 8008c84:	18d3      	adds	r3, r2, r3
 8008c86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c88:	0018      	movs	r0, r3
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	b004      	add	sp, #16
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	000a      	movs	r2, r1
 8008c9a:	1cfb      	adds	r3, r7, #3
 8008c9c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9e:	210f      	movs	r1, #15
 8008ca0:	187b      	adds	r3, r7, r1
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca6:	260e      	movs	r6, #14
 8008ca8:	19bb      	adds	r3, r7, r6
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	23b0      	movs	r3, #176	; 0xb0
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	58d2      	ldr	r2, [r2, r3]
 8008cb6:	000d      	movs	r5, r1
 8008cb8:	187c      	adds	r4, r7, r1
 8008cba:	1cfb      	adds	r3, r7, #3
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	0019      	movs	r1, r3
 8008cc0:	0010      	movs	r0, r2
 8008cc2:	f7f8 fa1f 	bl	8001104 <HAL_PCD_SetAddress>
 8008cc6:	0003      	movs	r3, r0
 8008cc8:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cca:	19bc      	adds	r4, r7, r6
 8008ccc:	0029      	movs	r1, r5
 8008cce:	187b      	adds	r3, r7, r1
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	f000 f8a9 	bl	8008e2a <USBD_Get_USB_Status>
 8008cd8:	0003      	movs	r3, r0
 8008cda:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8008cdc:	19bb      	adds	r3, r7, r6
 8008cde:	781b      	ldrb	r3, [r3, #0]
}
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	b005      	add	sp, #20
 8008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ce8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	0008      	movs	r0, r1
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	0019      	movs	r1, r3
 8008cf6:	230b      	movs	r3, #11
 8008cf8:	18fb      	adds	r3, r7, r3
 8008cfa:	1c02      	adds	r2, r0, #0
 8008cfc:	701a      	strb	r2, [r3, #0]
 8008cfe:	2408      	movs	r4, #8
 8008d00:	193b      	adds	r3, r7, r4
 8008d02:	1c0a      	adds	r2, r1, #0
 8008d04:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d06:	2117      	movs	r1, #23
 8008d08:	187b      	adds	r3, r7, r1
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d0e:	2516      	movs	r5, #22
 8008d10:	197b      	adds	r3, r7, r5
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	23b0      	movs	r3, #176	; 0xb0
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	58d0      	ldr	r0, [r2, r3]
 8008d1e:	193b      	adds	r3, r7, r4
 8008d20:	881d      	ldrh	r5, [r3, #0]
 8008d22:	000e      	movs	r6, r1
 8008d24:	187c      	adds	r4, r7, r1
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	230b      	movs	r3, #11
 8008d2a:	18fb      	adds	r3, r7, r3
 8008d2c:	7819      	ldrb	r1, [r3, #0]
 8008d2e:	002b      	movs	r3, r5
 8008d30:	f7f8 fb26 	bl	8001380 <HAL_PCD_EP_Transmit>
 8008d34:	0003      	movs	r3, r0
 8008d36:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d38:	2516      	movs	r5, #22
 8008d3a:	197c      	adds	r4, r7, r5
 8008d3c:	0031      	movs	r1, r6
 8008d3e:	187b      	adds	r3, r7, r1
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	0018      	movs	r0, r3
 8008d44:	f000 f871 	bl	8008e2a <USBD_Get_USB_Status>
 8008d48:	0003      	movs	r3, r0
 8008d4a:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8008d4c:	197b      	adds	r3, r7, r5
 8008d4e:	781b      	ldrb	r3, [r3, #0]
}
 8008d50:	0018      	movs	r0, r3
 8008d52:	46bd      	mov	sp, r7
 8008d54:	b007      	add	sp, #28
 8008d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	0008      	movs	r0, r1
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	0019      	movs	r1, r3
 8008d66:	230b      	movs	r3, #11
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	1c02      	adds	r2, r0, #0
 8008d6c:	701a      	strb	r2, [r3, #0]
 8008d6e:	2408      	movs	r4, #8
 8008d70:	193b      	adds	r3, r7, r4
 8008d72:	1c0a      	adds	r2, r1, #0
 8008d74:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d76:	2117      	movs	r1, #23
 8008d78:	187b      	adds	r3, r7, r1
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7e:	2516      	movs	r5, #22
 8008d80:	197b      	adds	r3, r7, r5
 8008d82:	2200      	movs	r2, #0
 8008d84:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	23b0      	movs	r3, #176	; 0xb0
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	58d0      	ldr	r0, [r2, r3]
 8008d8e:	193b      	adds	r3, r7, r4
 8008d90:	881d      	ldrh	r5, [r3, #0]
 8008d92:	000e      	movs	r6, r1
 8008d94:	187c      	adds	r4, r7, r1
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	230b      	movs	r3, #11
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	7819      	ldrb	r1, [r3, #0]
 8008d9e:	002b      	movs	r3, r5
 8008da0:	f7f8 fa98 	bl	80012d4 <HAL_PCD_EP_Receive>
 8008da4:	0003      	movs	r3, r0
 8008da6:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008da8:	2516      	movs	r5, #22
 8008daa:	197c      	adds	r4, r7, r5
 8008dac:	0031      	movs	r1, r6
 8008dae:	187b      	adds	r3, r7, r1
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	0018      	movs	r0, r3
 8008db4:	f000 f839 	bl	8008e2a <USBD_Get_USB_Status>
 8008db8:	0003      	movs	r3, r0
 8008dba:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8008dbc:	197b      	adds	r3, r7, r5
 8008dbe:	781b      	ldrb	r3, [r3, #0]
}
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	b007      	add	sp, #28
 8008dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dc8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	000a      	movs	r2, r1
 8008dd2:	1cfb      	adds	r3, r7, #3
 8008dd4:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	23b0      	movs	r3, #176	; 0xb0
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	58d2      	ldr	r2, [r2, r3]
 8008dde:	1cfb      	adds	r3, r7, #3
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	0019      	movs	r1, r3
 8008de4:	0010      	movs	r0, r2
 8008de6:	f7f8 fab6 	bl	8001356 <HAL_PCD_EP_GetRxCount>
 8008dea:	0003      	movs	r3, r0
}
 8008dec:	0018      	movs	r0, r3
 8008dee:	46bd      	mov	sp, r7
 8008df0:	b002      	add	sp, #8
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008dfc:	4b02      	ldr	r3, [pc, #8]	; (8008e08 <USBD_static_malloc+0x14>)
}
 8008dfe:	0018      	movs	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b002      	add	sp, #8
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	20001a9c 	.word	0x20001a9c

08008e0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]

}
 8008e14:	46c0      	nop			; (mov r8, r8)
 8008e16:	46bd      	mov	sp, r7
 8008e18:	b002      	add	sp, #8
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008e20:	f7f7 fa2c 	bl	800027c <SystemClock_Config>
}
 8008e24:	46c0      	nop			; (mov r8, r8)
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	0002      	movs	r2, r0
 8008e32:	1dfb      	adds	r3, r7, #7
 8008e34:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e36:	230f      	movs	r3, #15
 8008e38:	18fb      	adds	r3, r7, r3
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008e3e:	1dfb      	adds	r3, r7, #7
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d00d      	beq.n	8008e62 <USBD_Get_USB_Status+0x38>
 8008e46:	dc02      	bgt.n	8008e4e <USBD_Get_USB_Status+0x24>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <USBD_Get_USB_Status+0x2e>
 8008e4c:	e018      	b.n	8008e80 <USBD_Get_USB_Status+0x56>
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d00c      	beq.n	8008e6c <USBD_Get_USB_Status+0x42>
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d00f      	beq.n	8008e76 <USBD_Get_USB_Status+0x4c>
 8008e56:	e013      	b.n	8008e80 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e58:	230f      	movs	r3, #15
 8008e5a:	18fb      	adds	r3, r7, r3
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
    break;
 8008e60:	e013      	b.n	8008e8a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e62:	230f      	movs	r3, #15
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	2202      	movs	r2, #2
 8008e68:	701a      	strb	r2, [r3, #0]
    break;
 8008e6a:	e00e      	b.n	8008e8a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e6c:	230f      	movs	r3, #15
 8008e6e:	18fb      	adds	r3, r7, r3
 8008e70:	2201      	movs	r2, #1
 8008e72:	701a      	strb	r2, [r3, #0]
    break;
 8008e74:	e009      	b.n	8008e8a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e76:	230f      	movs	r3, #15
 8008e78:	18fb      	adds	r3, r7, r3
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	701a      	strb	r2, [r3, #0]
    break;
 8008e7e:	e004      	b.n	8008e8a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8008e80:	230f      	movs	r3, #15
 8008e82:	18fb      	adds	r3, r7, r3
 8008e84:	2202      	movs	r2, #2
 8008e86:	701a      	strb	r2, [r3, #0]
    break;
 8008e88:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008e8a:	230f      	movs	r3, #15
 8008e8c:	18fb      	adds	r3, r7, r3
 8008e8e:	781b      	ldrb	r3, [r3, #0]
}
 8008e90:	0018      	movs	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b004      	add	sp, #16
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <__libc_init_array>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	4d0c      	ldr	r5, [pc, #48]	; (8008ed0 <__libc_init_array+0x38>)
 8008e9e:	4c0d      	ldr	r4, [pc, #52]	; (8008ed4 <__libc_init_array+0x3c>)
 8008ea0:	1b64      	subs	r4, r4, r5
 8008ea2:	10a4      	asrs	r4, r4, #2
 8008ea4:	42a6      	cmp	r6, r4
 8008ea6:	d109      	bne.n	8008ebc <__libc_init_array+0x24>
 8008ea8:	2600      	movs	r6, #0
 8008eaa:	f000 f82b 	bl	8008f04 <_init>
 8008eae:	4d0a      	ldr	r5, [pc, #40]	; (8008ed8 <__libc_init_array+0x40>)
 8008eb0:	4c0a      	ldr	r4, [pc, #40]	; (8008edc <__libc_init_array+0x44>)
 8008eb2:	1b64      	subs	r4, r4, r5
 8008eb4:	10a4      	asrs	r4, r4, #2
 8008eb6:	42a6      	cmp	r6, r4
 8008eb8:	d105      	bne.n	8008ec6 <__libc_init_array+0x2e>
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	00b3      	lsls	r3, r6, #2
 8008ebe:	58eb      	ldr	r3, [r5, r3]
 8008ec0:	4798      	blx	r3
 8008ec2:	3601      	adds	r6, #1
 8008ec4:	e7ee      	b.n	8008ea4 <__libc_init_array+0xc>
 8008ec6:	00b3      	lsls	r3, r6, #2
 8008ec8:	58eb      	ldr	r3, [r5, r3]
 8008eca:	4798      	blx	r3
 8008ecc:	3601      	adds	r6, #1
 8008ece:	e7f2      	b.n	8008eb6 <__libc_init_array+0x1e>
 8008ed0:	08009124 	.word	0x08009124
 8008ed4:	08009124 	.word	0x08009124
 8008ed8:	08009124 	.word	0x08009124
 8008edc:	08009128 	.word	0x08009128

08008ee0 <memcpy>:
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d100      	bne.n	8008eea <memcpy+0xa>
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	5ccc      	ldrb	r4, [r1, r3]
 8008eec:	54c4      	strb	r4, [r0, r3]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	e7f8      	b.n	8008ee4 <memcpy+0x4>

08008ef2 <memset>:
 8008ef2:	0003      	movs	r3, r0
 8008ef4:	1812      	adds	r2, r2, r0
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d100      	bne.n	8008efc <memset+0xa>
 8008efa:	4770      	bx	lr
 8008efc:	7019      	strb	r1, [r3, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	e7f9      	b.n	8008ef6 <memset+0x4>
	...

08008f04 <_init>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr

08008f10 <_fini>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr
